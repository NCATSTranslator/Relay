{
  "max_score": 5.667268,
  "took": 107,
  "total": 69,
  "hits": [
    {
      "_id": "bfe51132e3f325e9f74a7fa40dc81583",
      "_meta": {
        "ETag": "c0469c7856e82dba4cc3bde5e64d25f57abadefd",
        "github_username": "vdancik",
        "timestamp": "2019-06-10T17:56:55.297135",
        "uptime_status": "unknown",
        "uptime_ts": "2020-09-17T00:09:01.246823",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/indigo/openapi.yml"
      },
      "_score": 5.667268,
      "components": {
        "schemas": {
          "Credentials": {
            "additionalProperties": true,
            "description": "Credentials needed for programmatic access to the remote knowledge graph",
            "properties": {
              "password": {
                "description": "Password needed for programmatic access to the remote knowledge graph",
                "type": "string"
              },
              "username": {
                "description": "Username needed for programmatic access to the remote knowledge graph",
                "type": "string"
              }
            },
            "required": [
              "username",
              "password"
            ],
            "type": "object"
          },
          "Edge": {
            "additionalProperties": true,
            "description": "An edge in the thought subgraph linking two nodes",
            "properties": {
              "confidence": {
                "description": "Confidence metric for this edge, a value between (inclusive) 0.0 (no confidence) and 1.0 (highest confidence)",
                "example": 0.99,
                "format": "float",
                "type": "number"
              },
              "defined_datetime": {
                "description": "Datetime at which the KG builder/updater pulled the information from the original source. Used as a freshness indicator.",
                "example": "2018-11-03 15:34:23",
                "type": "string"
              },
              "edge_attributes": {
                "description": "A list of additional attributes for this edge",
                "items": {
                  "$ref": "#/components/schemas/EdgeAttribute"
                },
                "type": "array"
              },
              "evidence_type": {
                "description": "A CURIE/URI for class of evidence supporting the statement made in an edge - typically a class from the ECO ontology",
                "example": "ECO:0000220",
                "type": "string"
              },
              "id": {
                "description": "Local identifier for this node which is unique within this KnowledgeGraph, and perhaps within the source reasoner's knowledge graph",
                "example": "553903",
                "type": "string"
              },
              "is_defined_by": {
                "description": "A CURIE/URI for the translator group that made the KG",
                "example": "reasoner",
                "type": "string"
              },
              "negated": {
                "description": "Boolean that if set to true, indicates the edge statement is negated i.e. is not true",
                "example": true,
                "type": "boolean"
              },
              "provided_by": {
                "description": "A CURIE/URI for the knowledge source that defined this edge",
                "example": "OMIM",
                "type": "string"
              },
              "publications": {
                "description": "List of CURIEs for publications associated with this edge",
                "example": [
                  "PMID:12345562"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "qualifiers": {
                "description": "Terms representing qualifiers that modify or qualify the meaning of the statement made in an edge",
                "example": "ECO:0000220",
                "type": "string"
              },
              "relation": {
                "description": "Lower-level relationship type of this edge",
                "example": "upregulates",
                "type": "string"
              },
              "source_id": {
                "description": "Corresponds to the @id of source node of this edge",
                "example": "https://omim.org/entry/603903",
                "type": "string"
              },
              "target_id": {
                "description": "Corresponds to the @id of target node of this edge",
                "example": "https://www.uniprot.org/uniprot/P00738",
                "type": "string"
              },
              "type": {
                "description": "Higher-level relationship type of this edge",
                "example": "affects",
                "type": "string"
              },
              "weight": {
                "description": "Weight metric for this edge, with no upper bound. Perhaps useful when formal confidence metrics are not available",
                "example": 0.99,
                "format": "float",
                "type": "number"
              }
            },
            "required": [
              "id",
              "source_id",
              "target_id"
            ],
            "type": "object"
          },
          "EdgeAttribute": {
            "additionalProperties": true,
            "description": "A generic additional attribute for an edge",
            "properties": {
              "name": {
                "description": "Formal name of the attribute",
                "example": "Cell type limitation",
                "type": "string"
              },
              "type": {
                "description": "Entity type of this attribute",
                "example": "localization",
                "type": "string"
              },
              "url": {
                "description": "A URL corresponding to this attribute",
                "example": "https://www.ncbi.nlm.nih.gov/pubmed/29309293",
                "type": "string"
              },
              "value": {
                "description": "Value of the attribute. While all attributes should have a name, many will not have a value",
                "example": "MFC cells",
                "type": "string"
              }
            },
            "type": "object"
          },
          "KnowledgeGraph": {
            "additionalProperties": true,
            "description": "A thought graph associated with this result. This will commonly be a linear path subgraph from one concept to another, but related items aside of the path may be included.",
            "properties": {
              "edges": {
                "description": "List of edges in the KnowledgeGraph",
                "items": {
                  "$ref": "#/components/schemas/Edge"
                },
                "type": "array"
              },
              "nodes": {
                "description": "List of nodes in the KnowledgeGraph",
                "items": {
                  "$ref": "#/components/schemas/Node"
                },
                "type": "array"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "Message": {
            "additionalProperties": true,
            "properties": {
              "code_description": {
                "description": "Extended description denoting the success or mode of failure in the generation of the message",
                "example": "9 results found",
                "type": "string"
              },
              "context": {
                "description": "JSON-LD context URI",
                "example": "https://rtx.ncats.io/ns/translator.jsonld",
                "type": "string"
              },
              "datetime": {
                "description": "Datetime string for the time that this message was generated",
                "example": "2018-01-09 12:34:45",
                "type": "string"
              },
              "id": {
                "description": "URI for this message",
                "example": "https://rtx.ncats.io/api/rtx/v1/message/123",
                "type": "string"
              },
              "knowledge_graph": {
                "description": "KnowledgeGraph object that contains all the nodes and edges referenced in any of the possible answers to the query OR connection information for a remote knowledge graph",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/KnowledgeGraph"
                  },
                  {
                    "$ref": "#/components/schemas/RemoteKnowledgeGraph"
                  }
                ],
                "type": "object"
              },
              "message_code": {
                "description": "Set to OK for success, or some other short string to indicate and error (e.g., KGUnavailable, TermNotFound, etc.)",
                "example": "OK",
                "type": "string"
              },
              "n_results": {
                "description": "Total number of results from the query (which may be less than what is returned if limits were placed on the number of results to return)",
                "example": 42,
                "type": "integer"
              },
              "original_question": {
                "description": "The original question text typed in by the user",
                "example": "what proteins are affected by sickle cell anemia",
                "type": "string"
              },
              "query_graph": {
                "$ref": "#/components/schemas/QueryGraph",
                "description": "QueryGraph object that contains a serialization of a query in the form of a graph",
                "type": "object"
              },
              "query_options": {
                "description": "Dict of options that can be sent with the query. Options are tool specific and not stipulated here",
                "example": {
                  "coalesce": true,
                  "threshold": 0.9
                },
                "type": "object"
              },
              "query_type_id": {
                "description": "The query type id if one is known for the query/message (as defined in https://docs.google.com/spreadsheets/d/18zW81wteUfOn3rFRVG0z8mW-ecNhdsfD_6s73ETJnUw/edit#gid=1742835901 )",
                "example": "Q2",
                "type": "string"
              },
              "reasoner_id": {
                "description": "Identifier string of the reasoner that provided this message (one of RTX, Robokop, Indigo, Integrator, etc.)",
                "example": "reasoner",
                "type": "string"
              },
              "restated_question": {
                "description": "A precise restatement of the question, as understood by the Translator, for which the answer applies. The user should verify that the restated question matches the intent of their original question (it might not).",
                "example": "Which proteins are affected by sickle cell anemia?",
                "type": "string"
              },
              "results": {
                "description": "List of all returned potential answers for the query posed",
                "items": {
                  "$ref": "#/components/schemas/Result"
                },
                "type": "array"
              },
              "schema_version": {
                "description": "Version label of this JSON-LD schema",
                "example": "0.9.0",
                "type": "string"
              },
              "table_column_names": {
                "description": "List of column names that corresponds to the row_data for each result",
                "example": [
                  "chemical_substance.name",
                  "chemical_substance.id"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "terms": {
                "additionalProperties": true,
                "description": "Dict of terms needed by the specific query type",
                "properties": {
                  "anatomical_entity": {
                    "example": "liver",
                    "type": "string"
                  },
                  "cell": {
                    "example": "CL:0000738",
                    "type": "string"
                  },
                  "chemical_substance": {
                    "example": "ibuprofen",
                    "type": "string"
                  },
                  "disease": {
                    "example": "malaria",
                    "type": "string"
                  },
                  "drug": {
                    "example": "ibuprofen",
                    "type": "string"
                  },
                  "gene": {
                    "example": "HGNC:3535",
                    "type": "string"
                  },
                  "metabolite": {
                    "example": "ibuprofen",
                    "type": "string"
                  },
                  "pathway": {
                    "example": "GO:0004888",
                    "type": "string"
                  },
                  "protein": {
                    "example": "P12345",
                    "type": "string"
                  },
                  "symptom": {
                    "example": "UMLS:C0000737",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "tool_version": {
                "description": "Version label of the tool that generated this message",
                "example": "RTX 0.5.0",
                "type": "string"
              },
              "type": {
                "description": "Entity type of this message",
                "example": "translator_reasoner_message",
                "type": "string"
              }
            },
            "type": "object"
          },
          "Node": {
            "additionalProperties": true,
            "description": "A node in the thought subgraph",
            "properties": {
              "description": {
                "description": "One to three sentences of description/definition of this entity",
                "example": "Haptoglobin captures, and combines with free plasma hemoglobin...",
                "type": "string"
              },
              "id": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "type": "string"
              },
              "name": {
                "description": "Formal name of the entity",
                "example": "Haptoglobin",
                "type": "string"
              },
              "node_attributes": {
                "description": "A list of arbitrary attributes for the node",
                "items": {
                  "$ref": "#/components/schemas/NodeAttribute"
                },
                "type": "array"
              },
              "symbol": {
                "description": "Short abbreviation or symbol for this entity",
                "example": "HP",
                "type": "string"
              },
              "type": {
                "description": "Entity type of this node (e.g., protein, disease, etc.)",
                "example": [
                  "protein"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "uri": {
                "description": "URI identifier for this node\"",
                "example": "https://www.uniprot.org/uniprot/P00738",
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "NodeAttribute": {
            "additionalProperties": true,
            "description": "A generic attribute for a node",
            "properties": {
              "name": {
                "description": "Formal name of the attribute",
                "example": "Wikipedia article",
                "type": "string"
              },
              "type": {
                "description": "Entity type of this attribute",
                "example": "article",
                "type": "string"
              },
              "url": {
                "description": "A URL corresponding to this attribute",
                "example": "https://en.wikipedia.org/wiki/Malaria",
                "type": "string"
              },
              "value": {
                "description": "Value of the attribute",
                "example": "7.23e-12",
                "type": "string"
              }
            },
            "type": "object"
          },
          "PreviousMessageProcessingPlan": {
            "additionalProperties": true,
            "properties": {
              "options": {
                "additionalProperties": true,
                "description": "Dict of options that apply during processing in an order independent fashion",
                "example": {
                  "topNMostFrequent": 1
                },
                "type": "object"
              },
              "previous_message_uris": {
                "description": "List of URIs for Message objects to fetch and process",
                "example": [
                  "https://rtx.ncats.io/api/rtx/v1/message/300"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "previous_messages": {
                "description": "List of Message objects to process",
                "items": {
                  "$ref": "#/components/schemas/Message"
                },
                "type": "array"
              },
              "processing_actions": {
                "description": "List of order-dependent actions to guide what happens with the Message object(s)",
                "example": [
                  "mod45filter",
                  "redirect2RTX"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "QEdge": {
            "additionalProperties": true,
            "description": "An edge in the QueryGraph",
            "properties": {
              "edge_id": {
                "description": "QueryGraph internal identifier for this QEdge. Recommended form: e00, e01, e02, etc.",
                "example": "e00",
                "type": "string"
              },
              "negated": {
                "description": "Boolean that if set to true, indicates the edge statement is negated i.e. is not true",
                "example": true,
                "type": "boolean"
              },
              "relation": {
                "description": "Lower-level relationship type of this edge",
                "example": "upregulates",
                "type": "string"
              },
              "source_id": {
                "description": "Corresponds to the @id of source node of this edge",
                "example": "https://omim.org/entry/603903",
                "type": "string"
              },
              "target_id": {
                "description": "Corresponds to the @id of target node of this edge",
                "example": "https://www.uniprot.org/uniprot/P00738",
                "type": "string"
              },
              "type": {
                "description": "Higher-level relationship type of this edge",
                "example": "affects",
                "type": "string"
              }
            },
            "required": [
              "source_id",
              "target_id"
            ],
            "type": "object"
          },
          "QNode": {
            "additionalProperties": true,
            "description": "A node in the QueryGraph",
            "properties": {
              "curie": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "type": "string"
              },
              "node_id": {
                "description": "QueryGraph internal identifier for this QNode. Recommended form: n00, n01, n02, etc.",
                "example": "n00",
                "type": "string"
              },
              "type": {
                "description": "Entity type of this node (e.g., protein, disease, etc.)",
                "example": "disease",
                "type": "string"
              }
            },
            "type": "object"
          },
          "Query": {
            "additionalProperties": true,
            "properties": {
              "asynchronous": {
                "description": "Set to true in order to receive an incomplete message_id if the query will take a while. Client can then periodically request that message_id for a status update and eventual complete message",
                "example": "false",
                "type": "string"
              },
              "bypass_cache": {
                "description": "Set to true in order to bypass any possible cached message and try to answer the query over again",
                "example": "true",
                "type": "string"
              },
              "max_results": {
                "description": "Maximum number of individual results to return",
                "example": 100,
                "type": "integer"
              },
              "page_number": {
                "description": "Page number of results when the number of results exceeds the page_size",
                "example": 1,
                "type": "integer"
              },
              "page_size": {
                "description": "Split the results into pages with this number of results each",
                "example": 20,
                "type": "integer"
              },
              "previous_message_processing_plan": {
                "description": "Container for one or more Message objects or identifiers for one or more Messages along with a processing plan for how those messages should be processed and returned",
                "items": {
                  "$ref": "#/components/schemas/PreviousMessageProcessingPlan"
                },
                "type": "object"
              },
              "query_message": {
                "description": "Message object that represents the query to be answered",
                "items": {
                  "$ref": "#/components/schemas/Message"
                },
                "type": "object"
              },
              "reasoner_ids": {
                "description": "List of reasoners to consult for the query",
                "example": [
                  "RTX",
                  "Robokop"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object",
            "x-body-name": "request_body"
          },
          "QueryGraph": {
            "additionalProperties": true,
            "description": "A graph intended to be the thought path to be followed by a reasoner to answer the question. This graph is a representation of a question.",
            "properties": {
              "edges": {
                "description": "List of edges in the QueryGraph",
                "items": {
                  "$ref": "#/components/schemas/QEdge"
                },
                "type": "array"
              },
              "nodes": {
                "description": "List of nodes in the QueryGraph",
                "items": {
                  "$ref": "#/components/schemas/QNode"
                },
                "type": "array"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "RemoteKnowledgeGraph": {
            "additionalProperties": true,
            "description": "A thought graph associated with this result that is not repeated here, but stored elsewhere in a way that can be remotely accessed by the reader of this Message",
            "properties": {
              "credentials": {
                "description": "Credentials needed for programmatic access to the remote knowledge graph",
                "items": {
                  "$ref": "#/components/schemas/Credentials"
                },
                "type": "object"
              },
              "url": {
                "description": "URL that provides programmatic access to the remote knowledge graph",
                "example": "http://robokop.renci.org/api/kg",
                "type": "string"
              }
            },
            "type": "object"
          },
          "Result": {
            "description": "One of potentially several results or answers for a query",
            "properties": {
              "confidence": {
                "description": "Confidence metric for this result, a value between (inclusive) 0.0 (no confidence) and 1.0 (highest confidence)",
                "example": 0.9234,
                "format": "float",
                "type": "number"
              },
              "description": {
                "description": "A free text description of this result answer from the reasoner",
                "example": "The genetic condition sickle cell anemia may provide protection from cerebral malaria via genetic alterations of proteins HBB (P68871) and HMOX1 (P09601).",
                "type": "string"
              },
              "edge_bindings": {
                "additionalProperties": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  ]
                },
                "description": "Lookup dict that maps QEdge identifiers in the QueryGraph to Edge identifiers in the KnowledgeGraph",
                "type": "object"
              },
              "essence": {
                "description": "A single string that is the terse essence of the result (useful for simple answers)",
                "example": "ibuprofen",
                "type": "string"
              },
              "essence_type": {
                "description": "A Translator bioentity type of the essence",
                "example": "drug",
                "type": "string"
              },
              "id": {
                "description": "URI for this message",
                "example": "https://rtx.ncats.io/api/rtx/v1/result/234",
                "type": "string"
              },
              "node_bindings": {
                "additionalProperties": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  ]
                },
                "description": "Lookup dict that maps QNode identifiers in the QueryGraph to Node identifiers in the KnowledgeGraph",
                "type": "object"
              },
              "reasoner_id": {
                "description": "Identifier string of the reasoner that provided this result (e.g., RTX, Robokop, Indigo, Integrator)",
                "example": "RTX",
                "type": "string"
              },
              "result_graph": {
                "$ref": "#/components/schemas/KnowledgeGraph",
                "description": "A graph that describes the thought pattern of this result (i.e. answer to the query)",
                "type": "object"
              },
              "result_group": {
                "description": "An integer group number for results for use in cases where several results should be grouped together. Also useful to control sorting ascending.",
                "example": 1,
                "type": "integer"
              },
              "result_group_similarity_score": {
                "description": "A score that denotes the similarity of this result to other members of the result_group",
                "example": 0.95,
                "format": "float",
                "type": "number"
              },
              "result_type": {
                "description": "One of several possible result types: 'individual query answer', 'neighborhood graph', 'type summary graph'",
                "example": "individual query answer",
                "type": "string"
              },
              "row_data": {
                "description": "An arbitrary list of values that captures the essence of the result that can be turned into a tabular result across all answers (each result is a row) for a user that wants tabular output",
                "example": [
                  "ibuprofen",
                  "CHEMBL:CHEMBL521"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "score": {
                "description": "Any type of score associated with this result",
                "example": 163.233,
                "format": "float",
                "type": "number"
              },
              "score_direction": {
                "description": "Sorting indicator for the score: one of higher_is_better or lower_is_better",
                "example": "lower_is_better",
                "type": "string"
              },
              "score_name": {
                "description": "Name for the score",
                "example": "Jaccard distance",
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "externalDocs": {
        "description": "Documentation for the NCATS Biomedical Translator Reasoners web services",
        "url": "https://github.com/NCATS-Tangerine/NCATS-ReasonerStdAPI"
      },
      "info": {
        "contact": {
          "email": "translator@broadinstitute.org",
          "name": "Broad NCATS translator"
        },
        "description": "OpenAPI for indigo NCATS Biomedical Translator Reasoner",
        "license": {
          "name": "Apache 2.0",
          "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "termsOfService": "{{url}}",
        "title": "OpenAPI for indigo NCATS Biomedical Translator Reasoner",
        "version": "0.9.1.1",
        "x-reasoner_standard_version": "0.9.1"
      },
      "openapi": "3.0.1",
      "paths": [
        {
          "path": "/query",
          "pathitem": {
            "post": {
              "description": "",
              "operationId": "query",
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": {
                      "query_message": {
                        "query_graph": {
                          "edges": [
                            {
                              "edge_id": "e00",
                              "source_id": "n00",
                              "target_id": "n01",
                              "type": "targets"
                            }
                          ],
                          "nodes": [
                            {
                              "curie": "CHEMBL:CHEMBL521",
                              "node_id": "n00",
                              "type": "chemical_substance"
                            },
                            {
                              "node_id": "n01",
                              "type": "protein"
                            }
                          ]
                        }
                      }
                    },
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "Query information to be submitted",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Message"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "description": "Invalid status value"
                }
              },
              "summary": "Query reasoner via one of several inputs",
              "tags": [
                "query"
              ],
              "x-swagger-router-controller": "swagger_server.controllers.query_controller"
            }
          }
        }
      ],
      "servers": [
        {
          "url": "https://indigo.ncats.io/reasoner/api/v1/"
        }
      ],
      "tags": [
        {
          "description": "Query reasoner using a predefined question type",
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "reasoner"
        }
      ],
      "~raw": "H4sIAOeZ_lwC_-1ca2_bOtL-K0T2BU4CJLKdNG0aYLGbprecNk3apqcLnD0waIm2uZVEvSIV16fof9-ZIamb5VhOU-x-2H5oU4mX4XAuz1yUbzsqEynP5M4p2zkKhsFoZ5_tyHSq4MG3nUjoMJeZkSrFAVcw9uz6gk1VzmQayZli787Pbj6yZ1IlIpIhj9lNzlMdcwNDPgiuVSpyXPJW5NqtMgyeBiO70deD3I0Za8PTiOfRuD0SxxlpYvGDFIQqNTw0dK6UJ7Tcs1zxyK1gymk4WiRcxjikevz3CY6WqQZqCiMClc92vsPQWIYi1aKx8FnGw7lgh8EQFytyWmpuTHY6GCwWi4DTe1xi4KbrwduL8xfvPr44gEnB3CQxLW5Enuir6UeR38I4XOXbN1ju-3d6K77C-5THz1Wouy4MnheJgHPjA2KaAar6cEyzhZgwbbfVrUNoOMVMmnkxCUKVDGi9gxuezkQuU-H-71f6aCK4MSIXl4OlYZnfv7XXs7cZpCE3OpBq4AVjAMI5uB0Ndr7_gezgMzfdc_r_C5Evkb7W0d_jc-ZXYYWW6YxxluUiElOgMmIwUxNfzDITSF-1aE0WGs_9cpaYjJu5ZfvAUoE_ZkpbGfOkOgpxgi6ShNO4Nnm3kjP4gakp8Bx4BJci06wwuuNk-Ai0NqdLvYgaTMgFneqZipZd8mB3RfXOEysTRrGJYLqYJNIYEfk1JLAJJpi8EE51QIpoRZ5lILE0efAvTct-29EgzAmnH_8vF1Pc6i8DEI0MzpQaPbDv9YD2d5LLkyy2SkPUjxOhNZ_Vn8xyns3p_yKaCXfv-ONY0qnFkLRLqyIP_bPUPjM8nwlTPrNGBK_51L_T9g5TFfmV8cfmKmGRS5py_vrF5bO3p_af48PGcng01KIxMBGNWOhlqb5cY0aWKyNkCgR8pz_Ecw280sKK0yFs33F7ughBF_W0iFl5_zsPeT2X7gocUY-6ybhIb3ksIwaHNYVm8J8Cp5A51ws-AytwkCuwkPkBUparOAaNQfrty7E1A0H1Ugf2wmvDLQUVjbVz2J_flxr39WAC4n5Q6SipwBgf1rmuJv8SYP73if_APiMdtyfLjGs9DtEiW811M7QBczbbaUjrDqpEh1J-FAZ1Cd-CfjGVR6DVqFy0OOPpkoFl0HISC0Y7RcwJPLyLYN4SR4PVWQhrpIkjTAGjGJ9xlBbYlOtlGs5zlapCbyZ1ymO9Da25CIW8RYLgMbI-FkZ4MkGUmZzWSFvIOGaGf4HxbDGXsQjYeSzhruB8KY5LGXBZKnIxMdo6uhd4w019UfRK3AtTkUXcWJaAGUxNAYawTQlxIuFfx6A0RWyajJCgCjPr8CtOjIbDVS5c8q8yKRKWFskEzg-WF13QrYxwT7e05Yopcsv-DEnW8k-xecvDjh0_gmoa4qBfHqYqhquCuwV_Cu-krhHkhwkQmIoA-77HqVcpuEZ5W11_gZeFdHVs_TUUItL0tjq-NVkOucmoeQU8z_myScrvOx9u_oGPPqiJ-qIy8oYt2t5KEA7a2SMQ4A1YBKSjhC6lo5NGJJ0qQHZj1aOsWoG2ODhttAOslOYC4IJG81OTe-sxraZah1nR0tO6kg0StxK02BM5BqOExh2OMM5invYj-hwxrUQAgQwiAJGzROWCNY-j8bmMgBw5lcjaNcPBUMUKcBIJI4IlTxNDmmjWXC2AGUqX6qiZnqsijpArbgIYN9Rgqzlb8ejascXRc10ScI08sU6BR5FEBvD4um7I0Zzh67uX6GZryyOsXA7ggB4y7qFsbr5WOBbhKzxACOtWGxyBX71DAT59uLAX1L5DkLypMOGcmOtYvVkX2odZc5A1xHTQ0LnzNpJfCjqEY7BdD84mKnp0PJWxsTYO9A4AamgO0arcwUnybAeRgKARZZ-5_fAQswLUAQwfaPkcMBNEYN4Ct3VnV-9tZrLKVk9SiVcd7BqVvbuEGOEl-UNCbaPvq0d4LkN7hMyRjJQiuFuyqMhJIyvlBCfOvR8HJ1aed8r13GHEu5Smh1Jd3mlKW-pDePSr2QxQOhUm1YMq_AoQw8ZRh4D--vHq3cHb58xthlpjA2a74UYU53cYl37Mu4vVvV6A3TRLihPxTshL18EIofz7nLXDOIwOjzoogNM5H9jauuaFN9OQ19IhbVBfOgdmp9qDiipEJQmEmwaEBPa9TgjbdaErqOM-cy5-n11QRI__AjjJkdf7DMxXsGfvSam4luvZQDmszIbBsU2ntEj_zS7CYj4RsScbl7ckz0SKsVKLZpuPIPvUnwrMR_WkAHbyEuqiL1JyoMPIpIeAHg5HJwfD0cHwKRsdnh49On103LHxc7eevzMPk-gZnb5xTwuuK3YQQWl_EP3ocHX_G2UALK-ixmmukhpk2oX4ANxWwpcIEmKgBolLrfkF-jxQwAAjlolESArgCkFHCE_VOnBaonMrUt5bhxB5b-bw1Zv1odHVG2KlC7j3ESZpBSxVQEeOeCc3nuUwGuOGsAxb8hxG74pgFuyzN68-pfyWSxCMWOyzG5En75R5qYo0qusCEjxuUrKB-KcVq3GxLpv11aAXiFjtOfycKkNUz4U_ncWAESnwFEgtcooKcYSTFZzp1KquPQYPBcyOiyQdY_Tdw5GvJksCitv3u_IoAdi0O7y73ZnRzlbYQ5XbREpEskHmSy3GoHWc7hPjKMe4Hi49lzMJ_nDs84Sbb2XhTCRmdwBKAyP5dAo-Em5hsmRahl8w-hcQN_MUDss7ru1mjqDc7lzLUKKHw60jvBpYC49WaJE7H4DRs4i2oPQzKeQWpP6tg9YzzKaGUlM8ixRgqtlLiqdln4HRAREFEwk2OfLEVynnfboaayHwjcuBUCJL6IDduKP6MAOstZwuvXUr967lcxMOIFnYmE1SaswRJfMO3u5CTJ7I2dww0I29YKeKH5GDvfzq-8M1N-kiRsQNNn2CjhIM3pdULdJmUDsonSnwy6eo4bI9bohUqIOZUrNYUNJdA-95pOdCANCOBqOTPz-fjBZGfJpepUf5yw-_vRr-eZJ8PhDhu3mkp8_Hj_WToxc3v6afFgOAz-YvMxn9dfTk0eHJ0fHT4YjtVeWGfrGnR6g0haVCRKK8XZ2BXExlWGNAB06MQHS47mGqEx7zXFoX6pOnGyddA5ICp0ngNgVBs8ZFEJTbPDuWt067OvK7G2fLSQF0TkXq_BKYShWDudl2pl4mGVC-edqny7cfT8-H8OfJ0RMLNfJitu12WNBY8B7ceXV1Cls9Ojk5oXnoJzZPev3q3fnp0fGRvRO0LZvnnL89tYc62ekTpli97R-MhYoDGqEbdaUOMwd7Mlcxaj3Avb6RGaY8sY6CtqaMI4magF25gWhkCZaW2oF4AYwOQAmZFTEZMcAXHthXuGyNA-RxXEGnTKGhkzx2BlQ3zQtmn20mZsU_9wziP1i_WcuvVfWZjcaCsvWvcHwjwRba_JXGBDCYdR7LP0u4wR3hDotgyco-ttvCHptLTbQjsRMtbky1oy2ofuMn3UU5ZsERnWIhySJALFbBxUzhKtPQWnHM_zvHWJYB_D05pGJPe_UBl04FZSoalTqbJ89FAhfNyuNU3IDzX01tJetOxjQPZWtVGy4et2xP-6OPPjqZ6cXsKxtDlnIcL8tSqMe6yIGacPMqHdzyLA8RkNtNB-BEtonHt0LxNw5jG7AFcOuWlR3giyInF3pb0GbFg8KsEMRsglxyXpJqyX5Vjikzbu0PMtcDvtfPnrHd68cnJ09GeyS0ry-v_jGCR8Onj4cjQEFdaG-aC2GhaD2m8OGu5ZeHb2UEWJXM8exaiy0daBchmPSKy6DXuCiSAl-QDcHcNlUKgyjbBRSJtVOK7CTu5KVpr07cuF8GifxrF3G1ZoqJVKKdOiqps1behSebI6cGR1bq0R1h0hlYnXwiTc7BrMTOZVCxtvRZGfgOh5O7WVb3bT5Ex5IVZ4BowGPl5a2HudLWGHoN3a1FW3g9HGOxPae4BOhp9QWn8opbThUmK3oEZxpCveYluaoYvLMmkwqgseItnz96fBQcHh11sau6JVod4hatQkleuSrOueixpGHsys4bpOVXHoY8h2BcOgi5SsA7WKj02fZ81S42393LqMRqgelAPZ4IYzpzfR9VbmzamPIWKm9ue-o7UeYQFdWXQvvbXt2mL9IpFpfCe90IoCywsZ21LbcqGFg4aFgZXHsJEFlaeQbpNAshMJRLw7jQAN33YNkh202pguiWsYZuhM_pZNrUX9ZAV08LUCsXW99tJX-9a_PurEQAXstgF33Kflmz4C_77JdUAMUTlc8xhCaXj09JXl1TkXtaP8YsV0V2rzrxWcrcUEaL-Nwb3kCVeMKuKsoVhRDFURU5Fys-uyoO0kqYhlUzgXm0gJ3FWjFnlW2xF9s_mHbyyQGZA0vSWbByqjEYcInuzizH97YFIHnHne6F1J-sEyXMnImstmz7PKDdZgYTgRvrphV197B1tt6VzB8iUe89oM1KbkrT7zXZ3Rsun1kZ9JzDdxPHOwNSgCkWiDCxY7HNwF0ZiKDsfqnh4b2NOH8VztrOq4kk0emZzHir1BcQ80h6fJ_wTLP37zAvWq-bu2CkFs4AtetGtUhbD5e_1cF7293tdyGDO7yjBeYU6jwID15glLGRB-tG_cd4QFxo7d5Tir2wWmm-AwZgclJq2wkFopmoNKYKBwe8lQqAM5hQweZKuxJhYvStYOhCkRnb8UWWY59NCuw3sUkAOhlsLKMSkNFKroBCXg50O-iIfHw_Y_8Kvw1c115Xz-wA6sBOKXnbUWAD5h-lACVwc4dIs7_1d8evkuw_bNTaEfA-tOyUYQsmgHKRiTL9Y2VBgyGGByLWwjpWzCIAWl42QLlNB4DU8dA13rgMLCaHbbGM9rysatstgbFt2D1iZQyVrc8IMK8hqXkd4-Uvs84A-W3DEWn8AZiSYDYjdOSWRZrupAZhS-zXpnxATyt2Xk3wSWlEKtvv3l_yalv2a1E6bx3qJx5hlV8N8cc4zBfgsFF1oXJbc2tLiR_XQe4n9-7BaK2sfkVTt4iutDfa0T9GSZ8brGUXt4JGVI4iWEZdhC1oNHePpyrGOIuUmdeAXbtBmApYzgm59SnO9m2LzVyqHf3wPqPGi_468_7BHMb9tn84b2FP0lMKUoKKXYR33EmvKMF9qrA-344ih98I1dBZFUkT8QH7IBC-WMnEkOmUpdgynQ5H-Neh7VWw9th9ErGpueLy4vL08fDo6bCrm-n804eLF530pCQVd7dx9WjOIja7aMflPPeZKzf6xotWOs_VInspPwlPvxtPSVh7XXn1ZcsG5oofu3KkvuvKBV65wCsXjSvvlw2x7QNd3yu9pjTSQSxuRWwhLqaj5zJr3pmIypY2O2TzngXYuRkVznRnPLPYZtv6Z0Q9SwcqkQnBIOByvhysl_fVvpS_y4hSQrSpldcViuofMfWkCL8tLFKJMk-EuZ8H17aGug1pdvc1pKViRj1kdcImSsWCp03KnBVt7frMDnUYGDNj5Rcp-2U7lUtMo_pU3SWo3HZvRjkDB6Dpq5xtrXl14w1mk1W_r1H33twHffcsTv2w_QQz_ROlBstf67b_546VkF558dc8M2oWq4nsqvS8xOxdTB1eZfHE9m902qV1sOFBPMTvZefJHxurE1sVAWssKEsy-5SqBgMND_23QVR9y2KuEw5hYuKmBEGwJuFM2oxzEAliipvSkrWBA-oyko0iXo29eplMVI_Y8PV1V4mBWiT5ZIIfHzgYmjO7ZCUutd0I73ADG0Dw2xMOnpVlrarQVS1RFjVIJ7bLZJz5VbaHiHUDUi3TN0jAhkuMU_xEVy7zR2hZkp6eGSaEcd--dl4dvbcWf5ZfZCYiydn6vTp0ubmV_Y50415PgsMjcTDq6rj7jYpBnYv3znKgORRpsPAnInuI_xtcuia0rnvDbEfVfOragtvs7IEs7w0s224HE5BfiI6FYmXUcg9HdHy8xge9VeEagEmm1fZzSmz9lBB7kgkjWuFRM7NmbR3QNcd0czlOeGzkw99fdGeC6H_o9H_otE2a1GPXQTueLH_os5gzRlhrUPX7iNovCnHFUVcsiWw-580r1whkCdjyk4_R6GB4xEbH-MlH55dA5Scf2DtRNk2_ecUmhYwjkQ_sJ9Q5y4o4pvqfaLaR-cacshPa3nLAPtF3m5hAmmIPZIqZsrJFIPDNt1RV7MVWxLA9WVopthM5V0K0XdDNy_3hboOnW_Ua4L4_odNggQV983An-EzrraGe8CNQWGRgZtkEvxgJ2LWzuK7-Tt-AT62TDtvssM2rGGiVX7NYeSgm_rdNbJfBIxGwEK2-RnfBhK6-BcavLy-en1KH9_Hjwx6QXNzaA_Xs7XhxTh3Ow8PDYQ8RDmP8HQ-YmHS7gB_OMtfFQK6sjF_JTNjvNUneD9Deu9-QwN1CpYoCFUylRsVqtnTfJfDY1ld_9Ag31LVfZoqR0GpxZ9FUhB9awPnsm6X7Aointa6DtSf7L04T-PL4_cONEsWtxhs1ed2icPljAUcDH6zmMpobbBuKdJzVRiVpedB7hSUxAkjX7_0TY5NzbKOlVejLwnXbPVR4cvnynDp3de_4JGCf8ben2N7JSppc39Sc4y9kIbr2QcVS93tXUJjdK_f7d7YNchCLpeFEBmmcBKmcBzN1OwBbnIhocPj0aPgU_vp5sQ78-TdOxJi8e04AAA=="
    },
    {
      "_id": "89590198e93fb9377ab547eb903c5532",
      "_meta": {
        "ETag": "ca976c94846dce1b1b66b0746096403cf00181038a945dbed1275acb59f2226b",
        "github_username": "newgene",
        "timestamp": "2019-10-22T04:28:40.627585",
        "uptime_status": "unknown",
        "uptime_ts": "2020-09-17T00:09:49.531721",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/broad-pgm/openapi.yml"
      },
      "_score": 4.911578,
      "components": {
        "schemas": {}
      },
      "info": {
        "contact": {
          "email": "translator@broadinstitute.org",
          "name": "Broad PGM translator",
          "url": "https://translator.ncats.io/broad-pgm-translator/",
          "x-id": "https://github.com/broadinstitute/broad-translator",
          "x-role": "responsible organization"
        },
        "termsOfService": "https://translator.ncats.io/broad-pgm-translator",
        "title": "Broad probabilistic graphical models translator",
        "version": "0.1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/modelList",
          "pathitem": {
            "get": {
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "modelID": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Successful response"
                }
              },
              "summary": "List available models"
            }
          }
        },
        {
          "path": "/{modelID}/modelSignature",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Model identifier",
                  "in": "path",
                  "name": "modelID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "modelID": {
                            "type": "string"
                          },
                          "variableGroup": {
                            "items": {
                              "properties": {
                                "asInput": {
                                  "type": "boolean"
                                },
                                "asOutput": {
                                  "type": "boolean"
                                },
                                "authorityURL": {
                                  "type": "string"
                                },
                                "groupDistribution": {
                                  "enum": [
                                    "discrete",
                                    "empirical",
                                    "Gaussian",
                                    "Poisson"
                                  ]
                                },
                                "groupType": {
                                  "enum": [
                                    "Bollean",
                                    "Number",
                                    "String"
                                  ],
                                  "type": "string"
                                },
                                "groupValue": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "modelVariable": {
                                  "items": {
                                    "properties": {
                                      "authorityURI": {
                                        "type": "string"
                                      },
                                      "groupDistribution": {
                                        "enum": [
                                          "discrete",
                                          "empirical",
                                          "Gaussian",
                                          "Poisson"
                                        ]
                                      },
                                      "variableID": {
                                        "type": "string"
                                      },
                                      "variableType": {
                                        "enum": [
                                          "Bollean",
                                          "Number",
                                          "String"
                                        ],
                                        "type": "string"
                                      },
                                      "variableValue": {
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "variableGroupID": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Successful response"
                }
              },
              "summary": "Get model signature"
            }
          }
        },
        {
          "path": "/evaluateModel",
          "pathitem": {
            "post": {
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "modelID": {
                          "type": "string"
                        },
                        "modelInput": {
                          "items": {
                            "properties": {
                              "modelVariable": {
                                "items": {
                                  "properties": {
                                    "priorDistribution": {
                                      "properties": {
                                        "GaussianDistribution": {
                                          "properties": {
                                            "distributionMean": {
                                              "type": "number"
                                            },
                                            "distributionStDev": {
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "PoissonDistribution": {
                                          "properties": {
                                            "lambdaParameter": {
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "discreteDistribution": {
                                          "items": {
                                            "properties": {
                                              "priorProbability": {
                                                "type": "number"
                                              },
                                              "variableValue": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "empiricalDistribution": {
                                          "properties": {
                                            "distributionMean": {
                                              "type": "number"
                                            },
                                            "distributionPercentile": {
                                              "items": {
                                                "type": "number"
                                              },
                                              "type": "array"
                                            },
                                            "distributionStDev": {
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "variableID": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "variableGroupID": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "modelOutput": {
                          "items": {
                            "properties": {
                              "rawOutput": {
                                "type": "boolean"
                              },
                              "variableGroupID": {
                                "type": "string"
                              },
                              "variableID": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "posteriorProbabilities": {
                            "items": {
                              "properties": {
                                "modelVariable": {
                                  "items": {
                                    "properties": {
                                      "posteriorDistribution": {
                                        "properties": {
                                          "GaussianDistribution": {
                                            "properties": {
                                              "distributionMean": {
                                                "type": "number"
                                              },
                                              "distributionStDev": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "PoissonDistribution": {
                                            "properties": {
                                              "lambdaParameter": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "discreteDistribution": {
                                            "items": {
                                              "properties": {
                                                "posteriorProbability": {
                                                  "type": "number"
                                                },
                                                "variableValue": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "empiricalDistribution": {
                                            "properties": {
                                              "distributionMean": {
                                                "type": "number"
                                              },
                                              "distributionPercentile": {
                                                "items": {
                                                  "type": "number"
                                                },
                                                "type": "array"
                                              },
                                              "distributionStDev": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "rawDistribution": {
                                            "items": {
                                              "type": "number"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "variableID": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "variableGroupID": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Successful response"
                }
              },
              "summary": "evaluate model"
            }
          }
        }
      ],
      "servers": [
        {
          "url": "https://translator.ncats.io/broad-pgm-translator"
        }
      ],
      "tags": [
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIAHmFrl0C_-1XTW8aMRD9K6s9J0DbW05VFAlFShpU2lyqHLzLsEy0a7v2mJYi_ns99i4sXymhSdpG5UJ253m-3zOZp0qDFBrTsyR91-l1eulJklowUzDWv_syT50p2Tgh0vas2yUjpC0FKdORuSDbQdXNjBKjU11UpytrurjznlCOlT89TwmpBPZzzthEG5WJDEu0hHlSGKEnmIsyqdQISpu03HgnBKayN-OhzwpzOCoZ7yVXkkROIRspqlYyg_71RsQja-7yWagEhtOr9-8DGKUvlhxBR5mCkd9PjYpNMWC1khazEhJvFBJ_CEIlIwpH7WQKpInLOrmquutu65TaI_DHeZDsyXvodd74-fJLEkU93aYTm4PTgiY29KobZnLlJxUeC4jfdcoQQW97vfA9Apsb1FRHHLo8B2vHrkwafDMKkNGP0Lr0o-cT3Xsbjs1Tm098G-PizHRIUGX34KfHqRm_s4awDh3Su7xYAwtjxIyxSFDZNZMlg7JIF_WHt91VlTAzNnKViZj6AQoeRdzGNKC68zrQIjZkiIUU5AysdaXlqw8UHSR2CT1J_u6-Nc3hvREGuQl9o5w-tLl7g6152x9UOJoogzT7_PFqL8ZeSu1ozZwpTyQha_uNo4cABedwgewyc3XH5ylIVzEl0hH6UQBB5LJGw8LED33hrEURSDlQaLnpd0uHn2KklqNzVYaYHvHBVRkEZRnGQphiO2oLnm5F6eDR6-ytYaK3daefbGQHTetyH-bJm92k9ST9bpwd1_L2J0im8WJKy4uzkdaGaOE65Besrfy0QfrrIBY48gzHMcb0DXx1aIAvADIOWK22Kb5M6C4qFUx9OYIgOAxIreyWPjWoKFJNMLB0rkazAH5JuYnmLWI_o9a8NFu0QWW2mPBLxw1D9p78nWy3934z4UHzQ41mazgZGVavfsPWo8pbnrhm9u4Kwlxp4YZ0AdM92azk4vG5lKLKRmLQ0Hh_hKVS_el6N4ADMDmrx-H73BpjS8kCNXbcos_Ixj38OfDmM-LbQ5f-qrINPV38TT_IWKRhnXON6TXKYVPtPyWJ2yP6L4uvWxajuhyzaju0dSVE_t93ryI-K9vSifC3t_8E7l0mPZYRAAA="
    },
    {
      "_id": "70117385218edc9bc01633829011dfcf",
      "_meta": {
        "ETag": "a0d104485c4d8faecde97333fc1fccf7aed918beb0f2317240a3b6f2efa37ad3",
        "github_username": "CaseyTa",
        "slug": "cohd",
        "timestamp": "2020-09-07T04:52:58.989263",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:41.803753",
        "url": "https://raw.githubusercontent.com/WengLab-InformaticsResearch/cohd_api/master/cohd/cohd_oas3.yaml"
      },
      "_score": 3.6031053,
      "components": {
        "callbacks": {},
        "examples": {},
        "headers": {},
        "links": {},
        "parameters": {},
        "requestBodies": {},
        "responses": {},
        "schemas": {
          "BiolinkEntity": {
            "description": "A subclass of category named_thing (snake_case)",
            "example": "disease",
            "externalDocs": {
              "description": "Biolink model entities",
              "url": "https://biolink.github.io/biolink-model/docs/NamedThing.html"
            },
            "type": "string"
          },
          "BiolinkRelation": {
            "description": "A relation, i.e. child of related_to (snake_case)",
            "example": "affects",
            "externalDocs": {
              "description": "Biolink model relations",
              "url": "https://biolink.github.io/biolink-model/docs/related_to.html"
            },
            "type": "string"
          },
          "Credentials": {
            "additionalProperties": true,
            "description": "Credentials needed for programmatic access to the remote knowledge graph",
            "properties": {
              "password": {
                "description": "Password needed for programmatic access to the remote knowledge graph",
                "type": "string"
              },
              "username": {
                "description": "Username needed for programmatic access to the remote knowledge graph",
                "type": "string"
              }
            },
            "required": [
              "username",
              "password"
            ],
            "type": "object"
          },
          "Edge": {
            "additionalProperties": true,
            "description": "An edge in the thought subgraph linking two nodes",
            "properties": {
              "id": {
                "description": "Local identifier for this edge which is unique within this KnowledgeGraph, and perhaps within the source reasoner's knowledge graph",
                "example": "553903",
                "type": "string"
              },
              "source_id": {
                "description": "Corresponds to the @id of source node of this edge",
                "example": "https://omim.org/entry/603903",
                "type": "string"
              },
              "target_id": {
                "description": "Corresponds to the @id of target node of this edge",
                "example": "https://www.uniprot.org/uniprot/P00738",
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/BiolinkRelation"
              }
            },
            "required": [
              "id",
              "source_id",
              "target_id"
            ],
            "type": "object"
          },
          "EdgeBinding": {
            "properties": {
              "kg_id": {
                "description": "One or more knowledge-graph edge ids, i.e. the `id` of a KEdge",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "qg_id": {
                "description": "Query-graph edge id, i.e. the `edge_id` of a QEdge",
                "type": "string"
              }
            },
            "required": [
              "qg_id",
              "kg_id"
            ],
            "type": "object"
          },
          "KnowledgeGraph": {
            "additionalProperties": true,
            "description": "A thought graph associated with this result. This will commonly be a linear path subgraph from one concept to another, but related items aside of the path may be included.",
            "properties": {
              "edges": {
                "description": "List of edges in the KnowledgeGraph",
                "items": {
                  "$ref": "#/components/schemas/Edge"
                },
                "type": "array"
              },
              "nodes": {
                "description": "List of nodes in the KnowledgeGraph",
                "items": {
                  "$ref": "#/components/schemas/Node"
                },
                "type": "array"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "Message": {
            "additionalProperties": true,
            "properties": {
              "knowledge_graph": {
                "description": "KnowledgeGraph object that contains all the nodes and edges referenced in any of the possible answers to the query OR connection information for a remote knowledge graph",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/KnowledgeGraph"
                  },
                  {
                    "$ref": "#/components/schemas/RemoteKnowledgeGraph"
                  }
                ],
                "type": "object"
              },
              "query_graph": {
                "$ref": "#/components/schemas/QueryGraph",
                "description": "QueryGraph object that contains a serialization of a query in the form of a graph",
                "type": "object"
              },
              "results": {
                "description": "List of all returned potential answers for the query posed",
                "items": {
                  "$ref": "#/components/schemas/Result"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "Node": {
            "additionalProperties": true,
            "description": "A node in the thought subgraph",
            "properties": {
              "id": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "type": "string"
              },
              "name": {
                "description": "Formal name of the entity",
                "example": "Haptoglobin",
                "type": "string"
              },
              "type": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkEntity"
                    },
                    "type": "array"
                  }
                ]
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "NodeBinding": {
            "properties": {
              "kg_id": {
                "description": "One or more knowledge-graph node ids, i.e. the `id` of a KNode",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "qg_id": {
                "description": "Query-graph node id, i.e. the `node_id` of a QNode",
                "type": "string"
              }
            },
            "required": [
              "qg_id",
              "kg_id"
            ],
            "type": "object"
          },
          "QEdge": {
            "additionalProperties": true,
            "description": "An edge in the QueryGraph",
            "properties": {
              "id": {
                "description": "QueryGraph internal identifier for this QEdge. Recommended form: e00, e01, e02, etc.",
                "example": "e00",
                "type": "string"
              },
              "source_id": {
                "description": "Corresponds to the @id of source node of this edge",
                "example": "https://omim.org/entry/603903",
                "type": "string"
              },
              "target_id": {
                "description": "Corresponds to the @id of target node of this edge",
                "example": "https://www.uniprot.org/uniprot/P00738",
                "type": "string"
              },
              "type": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkRelation"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkRelation"
                    },
                    "type": "array"
                  }
                ]
              }
            },
            "required": [
              "id",
              "source_id",
              "target_id"
            ],
            "type": "object"
          },
          "QNode": {
            "additionalProperties": true,
            "description": "A node in the QueryGraph",
            "properties": {
              "curie": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "id": {
                "description": "QueryGraph internal identifier for this QNode. Recommended form: n00, n01, n02, etc.",
                "example": "n00",
                "type": "string"
              },
              "type": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkEntity"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkEntity"
                    },
                    "type": "array"
                  }
                ]
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "Query": {
            "additionalProperties": true,
            "properties": {
              "message": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "required": [
              "message"
            ],
            "type": "object",
            "x-body-name": "request_body"
          },
          "QueryGraph": {
            "additionalProperties": true,
            "description": "A graph intended to be the thought path to be followed by a reasoner to answer the question. This graph is a representation of a question.",
            "properties": {
              "edges": {
                "description": "List of edges in the QueryGraph",
                "items": {
                  "$ref": "#/components/schemas/QEdge"
                },
                "type": "array"
              },
              "nodes": {
                "description": "List of nodes in the QueryGraph",
                "items": {
                  "$ref": "#/components/schemas/QNode"
                },
                "type": "array"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "QueryOptions": {
            "description": "Additional query options that apply to COHD",
            "properties": {
              "biolink_only": {
                "description": "Whether to only include nodes in the knowledge graph and results that are Biolink compliant (as defined by ontology_targets). Default: true",
                "example": true,
                "type": "boolean"
              },
              "confidence_interval": {
                "description": "Criteria that the results are significant to the specified criteria level. This only applies when the method is 'obsExpRatio'. Default: not required.",
                "example": 0.99,
                "type": "number"
              },
              "dataset_id": {
                "description": "The COHD dataset to query",
                "example": 3,
                "type": "integer"
              },
              "local_oxo": {
                "description": "Whether to use the local implementation of OxO or the real implementation of OxO. Note, the local OxO implementation may contain outdated definitions and xrefs but runs faster. The real OxO has the most updated definitions and xrefs, but is slower (~1-2 seconds/concept). Default: true",
                "example": false,
                "type": "boolean"
              },
              "method": {
                "description": "Type of association method to perform: 'obsExpRatio' (default), 'relativeFrequency', or 'chiSquare'",
                "example": "obsExpRatio",
                "type": "string"
              },
              "min_cooccurrence": {
                "description": "Criteria that the results have a minimum co-occurrence count. Default: not required.",
                "example": 50,
                "type": "integer"
              },
              "ontology_targets": {
                "description": "COHD can attempt to map from OMOP concepts to a target ontology. You can identify target ontologies for each Biolink node type. The keys should be Biolink node types (e.g., 'biolink:Disease'). The values should be lists of target ontology prefixes, e.g., ['ICD9', 'UMLS', 'DOID']. An emtpy list indicates not to perform mapping for the specified type. Use the key '_DEFAULT' to indicate a default list of target ontologies for any unspecified types. If a domain is specified, it will override the '_DEFAULT' list. Target ontology prefixes should match the Biolink yaml but may include prefixes outside of Biolink.\n\nIf ontology_targets is not provided, COHD API will attempt mappings based on the prefixes defined in the Biolink yaml.\n",
                "example": {
                  "_DEFAULT": [],
                  "biolink:Disease": [
                    "ICD9",
                    "SNOMEDCT",
                    "DOID"
                  ],
                  "biolink:Drug": [
                    "RxNorm"
                  ],
                  "biolink:Procedure": [
                    "ICD10PCS",
                    "SNOMEDCT"
                  ]
                },
                "type": "object"
              },
              "threshold": {
                "description": "Criteria threshold to apply to the association metric. chiSquare: p-value < threshold. obsExpRatio: abs(ln_ratio) >= threshold. relativeFrequency: relative_frequency >= threshold.",
                "example": 0.5,
                "type": "number"
              }
            },
            "type": "object"
          },
          "RemoteKnowledgeGraph": {
            "description": "A thought graph associated with this result that is not repeated here, but stored elsewhere in a way that can be remotely accessed by the reader of this Message",
            "properties": {
              "credentials": {
                "description": "Credentials needed for programmatic access to the remote knowledge graph",
                "items": {
                  "$ref": "#/components/schemas/Credentials"
                },
                "type": "object"
              },
              "protocol": {
                "default": "neo4j",
                "type": "string"
              },
              "url": {
                "description": "URL that provides programmatic access to the remote knowledge graph",
                "example": "http://robokop.renci.org/api/kg",
                "type": "string"
              }
            },
            "required": [
              "url"
            ],
            "type": "object"
          },
          "Result": {
            "description": "One of potentially several results or answers for a query",
            "properties": {
              "edge_bindings": {
                "description": "List of QEdge-KEdge bindings.",
                "items": {
                  "$ref": "#/components/schemas/EdgeBinding"
                },
                "type": "array"
              },
              "node_bindings": {
                "description": "List of QNode-KNode bindings.",
                "items": {
                  "$ref": "#/components/schemas/NodeBinding"
                },
                "type": "array"
              }
            },
            "required": [
              "node_bindings",
              "edge_bindings"
            ],
            "type": "object"
          }
        },
        "securitySchemes": {}
      },
      "info": {
        "contact": {
          "email": "ct2865@cumc.columbia.edu",
          "name": "Casey Ta",
          "url": "http://chunhualab.org/",
          "x-role": "responsible developer"
        },
        "description": "The Columbia Open Health Data (COHD) API provides access to counts and frequencies (i.e., EHR prevalence) of conditions, procedures, drug exposures, and patient demographics, and the co-occurrence frequencies between them. Count and frequency data were derived from the [Columbia University Medical Center's](http://www.cumc.columbia.edu/) [OHDSI](https://www.ohdsi.org/) database including inpatient and outpatient data. Counts are the number of patients associated with the concept, e.g., diagnosed with a condition, exposed to a drug, or who had a procedure. Frequencies are the number of unique patients associated with the concept divided by the total number of patients in the dataset, i.e., prevalence in the electronic health records. To protect patient privacy, all concepts and pairs of concepts where the count <= 10 were excluded, and counts were randomized by the Poisson distribution.         \n\nFour datasets are available: \n1) 5-year non-hierarchical dataset: Includes clinical data from 2013-2017  \n2) lifetime non-hierarchical dataset: Includes clinical data from all dates  \n3) 5-year hierarchical dataset: Counts for each concept include patients from descendant concepts. Includes clinical data from 2013-2017.\n4) BETA! Temporal co-occurrence data\n\nIn the 5-year hierarchical data set, the counts for each concept include the patients from all descendant concepts. For example, the count for ibuprofen (ID 1177480) includes patients with Ibuprofen 600 MG Oral Tablet (ID 19019073 patients), Ibuprofen 400 MG Oral Tablet (ID 19019072), Ibuprofen 20 MG/ML Oral Suspension (ID 19019050), etc. \n\nWhile the lifetime dataset captures a larger patient population and range of concepts, the 5-year dataset has better underlying data consistency. \n\nClinical concepts (e.g., conditions, procedures, drugs) are coded by their standard concept ID in the [OMOP Common Data Model](https://github.com/OHDSI/CommonDataModel/wiki). API methods are provided to map to/from other vocabularies supported in OMOP and other ontologies using the EMBL-EBI Ontology Xref Service (OxO). \n\n\nThe following resources are available through this API: \n\n\n1. Metadata: Metadata on the COHD database, including dataset descriptions, number of concepts, etc. \n\n\n2. OMOP: Access to the common vocabulary for name and concept identifier mapping\n\n\n3. Clinical Frequencies: Access to the counts and frequencies of conditions, procedures, and drug exposures, and the associations between them. Frequency was determined as the number of patients with the code(s) / total number of patients. \n\n\n4. Concept Associations: Inferred associations between concepts using chi-square analysis, ratio between observed to expected frequency, and relative frequency. \n\n\nA [Python notebook](https://github.com/WengLab-InformaticsResearch/cohd_api/blob/master/notebooks/COHD_API_Example.ipynb) demonstrates simple examples of how to use the COHD API.\n\n\nCOHD was developed at the [Columbia University Department of Biomedical Informatics](https://www.dbmi.columbia.edu/) as a collaboration between the [Weng Lab](http://people.dbmi.columbia.edu/~chw7007/), [Tatonetti Lab](http://tatonettilab.org/), and the [NCATS Biomedical Data Translator](https://ncats.nih.gov/translator) program (Red Team). This work was supported in part by grants: NCATS OT3TR002027, NLM R01LM009886-08A1, and NIGMS R01GM107145.\n\nThe following external resources may be useful:  \n[OHDSI](https://www.ohdsi.org/)  \n[OMOP Common Data Model](https://github.com/OHDSI/CommonDataModel/wiki)  \n[Athena](http://athena.ohdsi.org) (OMOP vocabularies, search, concept relationships, concept hierarchy)  \n[Atlas](http://www.ohdsi.org/web/atlas/) (OMOP vocabularies, search, concept relationships, concept hierarchy, concept sets)      \n",
        "license": {
          "name": "Apache 2.0",
          "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "termsOfService": "http://cohd.nsides.io/terms/",
        "title": "Columbia Open Health Data (COHD)",
        "version": "3.0.0",
        "x-accessRestriction": "none",
        "x-implementationLanguage": "Python"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/metadata/datasets",
          "pathitem": {
            "get": {
              "description": "Returns a list of datasets, including dataset ID, name, and description.",
              "operationId": "datasets",
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "dataset_description": {
                                  "example": "5-year non-hierarchical dataset: Includes clinical data from 2013-2017",
                                  "type": "string"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "dataset_name": {
                                  "example": "5-year non-hierarchical",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of dataset descriptions."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Enumerates the datasets available in COHD",
              "tags": [
                "Metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/domainCounts",
          "pathitem": {
            "get": {
              "description": "Returns a list of domains and the number of concepts in each domain.",
              "operationId": "domainCounts",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "count": {
                                  "example": 1000,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of domain counts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "The number of concepts in each domain",
              "tags": [
                "Metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/domainPairCounts",
          "pathitem": {
            "get": {
              "description": "Returns a list of pairs of domains and the number of pairs of concepts in each.",
              "operationId": "domainPairCounts",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "count": {
                                  "example": 1000,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "domain_id_1": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "domain_id_2": {
                                  "example": "Drug",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of domain pair counts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "The number of pairs of concepts in each pair of domains",
              "tags": [
                "Metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/patientCount",
          "pathitem": {
            "get": {
              "description": "Returns the number of patients in the dataset.",
              "operationId": "patientCount",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "count": {
                                  "example": 100000,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of patient counts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "The number of patients in the dataset",
              "tags": [
                "Metadata"
              ]
            }
          }
        },
        {
          "path": "/omop/concepts",
          "pathitem": {
            "get": {
              "description": "Returns the OMOP concept names and domains for the given list of concept IDs.",
              "operationId": "concepts",
              "parameters": [
                {
                  "description": "A comma separated list of OMOP concept ids, e.g., \"192855\" or \"192855,2008271\"",
                  "example": "192855,2008271",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_class_id": {
                                  "example": "Clinical Finding",
                                  "type": "string"
                                },
                                "concept_code": {
                                  "example": "92546004",
                                  "type": "string"
                                },
                                "concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Cancer in situ of urinary bladder",
                                  "type": "string"
                                },
                                "domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Concept definitions from concept ID",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/findConceptIDs",
          "pathitem": {
            "get": {
              "description": "Searches the OMOP concept table for concept names similar to the query. Returns a list of concepts, including their names and IDs, sorted in decreasing order by the concept's prevalence. ",
              "operationId": "findConceptIDs",
              "parameters": [
                {
                  "description": "The name of the concept to search for, e.g., \"cancer\" or \"ibuprofen\"",
                  "example": "cancer",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The dataset to reference when sorting concepts by their frequency. Default: 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "The domain (e.g., \"Condition\", \"Drug\", \"Procedure\") to restrict the search to. If not specified, the search will be unrestricted. See /metadata/domainCounts for a list of valid domain IDs.",
                  "example": "Condition",
                  "in": "query",
                  "name": "domain",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The minimum concept count (inclusive) to include a concept in the search results. Setting the min_count to 0 will cause findConceptIDs to return all matching standard OMOP concepts (this can be slow). Setting the min_count to 1 will cause findConceptIDs to only return concepts with count data (much faster). Default: 1.",
                  "example": 1,
                  "in": "query",
                  "name": "min_count",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_class_id": {
                                  "example": "Clinical Finding",
                                  "type": "string"
                                },
                                "concept_code": {
                                  "example": "92546004",
                                  "type": "string"
                                },
                                "concept_count": {
                                  "example": 368,
                                  "type": "integer"
                                },
                                "concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Cancer in situ of urinary bladder",
                                  "type": "string"
                                },
                                "domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Search for OMOP concepts by name and domain",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/conceptAncestors",
          "pathitem": {
            "get": {
              "description": "Retrieves the given concept's hierarchical ancestors and their counts. The hierarchical definitions were derived from the OMOP concept_ancestor table. For more information, see the documentation on OMOP's concept_ancestor table on [ohdsi.org](http://www.ohdsi.org/web/wiki/doku.php?id=documentation:cdm:concept_ancestor) and [GitHub](https://github.com/OHDSI/CommonDataModel/wiki/CONCEPT_ANCESTOR).",
              "operationId": "conceptAncestors",
              "parameters": [
                {
                  "description": "An OMOP concept ID, e.g., 19019073",
                  "example": 19019073,
                  "in": "query",
                  "name": "concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "The vocabulary_id to restrict ancestors to. For conditions, SNOMED and MedDRA are used. For drugs, RxNorm (only and ATC are used. For procedures, SNOMED, MedDRA, and ICD10PCS are used. Default: unrestricted",
                  "example": "RxNorm",
                  "in": "query",
                  "name": "vocabulary_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The concept_class_id to restrict ancestors to. Only certain hierarchical concept_class_ids are used in each vocabuarly: [ATC](https://en.wikipedia.org/wiki/Anatomical_Therapeutic_Chemical_Classification_System) {ATC 1st, ATC 2nd, ATC 3rd, ATC 4th, ATC 5th}; [MedDRA](https://en.wikipedia.org/wiki/MedDRA) {PT, HLT, HLGT, SOC}; [RxNorm](https://www.nlm.nih.gov/research/umls/rxnorm/docs/2015/appendix5.html) {Ingredient, Clinical Drug Form, Clinical Drug Comp, Clinical Drug}. Default: unrestricted",
                  "example": "Ingredient",
                  "in": "query",
                  "name": "concept_class_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The dataset_id to retrieve counts from. Default: 3 (5-year hierarchical data set)",
                  "example": 3,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "ancestor_concept_id": {
                                  "example": 1177480,
                                  "type": "integer"
                                },
                                "concept_class_id": {
                                  "example": "Ingredient",
                                  "type": "string"
                                },
                                "concept_code": {
                                  "example": "5640",
                                  "type": "string"
                                },
                                "concept_count": {
                                  "example": 233514,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Ibuprofen",
                                  "type": "string"
                                },
                                "domain_id": {
                                  "example": "Drug",
                                  "type": "string"
                                },
                                "max_levels_of_separation": {
                                  "example": 2,
                                  "type": "integer"
                                },
                                "min_levels_of_separation": {
                                  "example": 2,
                                  "type": "integer"
                                },
                                "standard_concept": {
                                  "example": "S",
                                  "type": "string"
                                },
                                "vocabulary_id": {
                                  "example": "RxNorm",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Retrieve the concept's hierarchical ancestors",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/conceptDescendants",
          "pathitem": {
            "get": {
              "description": "Retrieves the given concept's hierarchical descendants and their counts. The hierarchical definitions were derived from the OMOP concept_ancestor table. See the documentation on OMOP's concept_ancestor table on [ohdsi.org](http://www.ohdsi.org/web/wiki/doku.php?id=documentation:cdm:concept_ancestor) and [GitHub](https://github.com/OHDSI/CommonDataModel/wiki/CONCEPT_ANCESTOR).",
              "operationId": "conceptDescendants",
              "parameters": [
                {
                  "description": "An OMOP concept ID, e.g., 313217",
                  "example": 313217,
                  "in": "query",
                  "name": "concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "The vocabulary_id to restrict ancestors to. For conditions, SNOMED and MedDRA are used. For drugs, RxNorm and ATC are used. For procedures, SNOMED, MedDRA, and ICD10PCS are used. Default: unrestricted",
                  "example": null,
                  "in": "query",
                  "name": "vocabulary_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The concept_class_id to restrict ancestors to. Only certain hierarchical concept_class_ids are used in each vocabuarly: [ATC](https://en.wikipedia.org/wiki/Anatomical_Therapeutic_Chemical_Classification_System) {ATC 1st, ATC 2nd, ATC 3rd, ATC 4th, ATC 5th}; [MedDRA](https://en.wikipedia.org/wiki/MedDRA) {PT, HLT, HLGT, SOC}; [RxNorm](https://www.nlm.nih.gov/research/umls/rxnorm/docs/2015/appendix5.html) {Ingredient, Clinical Drug Form, Clinical Drug Comp, Clinical Drug}. Default: unrestricted",
                  "example": null,
                  "in": "query",
                  "name": "concept_class_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The dataset_id to retrieve counts from. Default: 3 (5-year hierarchical data set)",
                  "example": 3,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_class_id": {
                                  "example": "Clinical Finding",
                                  "type": "string"
                                },
                                "concept_code": {
                                  "example": "49436004",
                                  "type": "string"
                                },
                                "concept_count": {
                                  "example": 53272,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Atrial fibrillation",
                                  "type": "string"
                                },
                                "descendant_concept_id": {
                                  "example": 313217,
                                  "type": "integer"
                                },
                                "domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "max_levels_of_separation": {
                                  "example": 0,
                                  "type": "integer"
                                },
                                "min_levels_of_separation": {
                                  "example": 0,
                                  "type": "integer"
                                },
                                "standard_concept": {
                                  "example": "S",
                                  "type": "string"
                                },
                                "vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Retrieve the concept's hierarchical descendants",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/mapToStandardConceptID",
          "pathitem": {
            "get": {
              "description": "Uses the OMOP concept_relationship table to map from a non-standard concept code (e.g., ICD9CM 715.3) to a standard OMOP concept ID (e.g., 72990). This method may return multiple results if vocabulary_id is not specified and the concept_code is not unique across vocabularies. If both concept_code and vocabulary_id are specified, then 1 result will be returned at most. ",
              "operationId": "mapToStandardConceptID",
              "parameters": [
                {
                  "description": "The concept code to map from, e.g., 715.3",
                  "example": "715.3",
                  "in": "query",
                  "name": "concept_code",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The vocabulary (e.g., \"ICD9CM\") that the concept code belongs to. If this parameter is not specified, the method will return mappings from any source vocabulary with matching concept code. See /omop/vocabularies for the list of supported vocabularies.",
                  "example": "ICD9CM",
                  "in": "query",
                  "name": "vocabulary_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "source_concept_code": {
                                  "example": "715.3",
                                  "type": "string"
                                },
                                "source_concept_id": {
                                  "example": 44834979,
                                  "type": "integer"
                                },
                                "source_concept_name": {
                                  "example": "Osteoarthrosis, localized, not specified whether primary or secondary",
                                  "type": "string"
                                },
                                "source_vocabulary_id": {
                                  "example": "ICD9CM",
                                  "type": "string"
                                },
                                "standard_concept_id": {
                                  "example": 72990,
                                  "type": "integer"
                                },
                                "standard_concept_name": {
                                  "example": "Localized osteoarthrosis uncertain if primary OR secondary",
                                  "type": "string"
                                },
                                "standard_domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Map from a non-standard concept code to a standard OMOP concept ID",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/mapFromStandardConceptID",
          "pathitem": {
            "get": {
              "description": "Uses the OMOP concept_relationship table to map from a standard concept ID (e.g., 72990) to concept code(s) (e.g., ICD9CM 715.3, 715.31, 715.32, etc.). An OMOP standard concept ID may map to many concepts in the external vocabulary.",
              "operationId": "mapFromStandardConceptID",
              "parameters": [
                {
                  "description": "The standard OMOP concept id to map from, e.g., 72990",
                  "example": 72990,
                  "in": "query",
                  "name": "concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "The vocabulary (e.g., \"ICD9CM\") to map to. If this parameter is not specified, the method will return mappings to any matching vocabularies. See /omop/vocabularies for the list of supported vocabularies.",
                  "example": "ICD9CM",
                  "in": "query",
                  "name": "vocabulary_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_class_id": {
                                  "example": "4-dig nonbill code",
                                  "type": "string"
                                },
                                "concept_code": {
                                  "example": "715.3",
                                  "type": "string"
                                },
                                "concept_id": {
                                  "example": 44834979,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Osteoarthrosis, localized, not specified whether primary or secondary",
                                  "type": "string"
                                },
                                "domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "standard_concept": {
                                  "example": null,
                                  "type": "string"
                                },
                                "vocabulary_id": {
                                  "example": "ICD9CM",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Map from a standard concept ID to concept code(s) in an external vocabulary",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/vocabularies",
          "pathitem": {
            "get": {
              "description": "List of vocabulary_ids. Useful if you need to use /omop/mapToStandardConceptID to map a concept code from a source vocabulary to the OMOP standard vocabulary.",
              "operationId": "vocabularies",
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of vocabularies."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "List of vocabularies",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/xrefToOMOP",
          "pathitem": {
            "get": {
              "description": "Attempts to map a concept from an external ontology to an OMOP standard concept ID using the EMBL-EBI Ontology Xref Service (OxO): https://www.ebi.ac.uk/spot/oxo/index. This method attempts to use OxO to map from the original ontology to an intermediate ontology that is included in OMOP (ICD9CM, ICD10CM, SNOMEDCT, and MeSH), then uses the OMOP mappings to the standard concepts. Multiple mappings may be returned. Results are sorted by total_distance (OxO distance + OMOP distance) in ascending order.",
              "operationId": "xrefToOMOP",
              "parameters": [
                {
                  "description": "Compact URI (CURIE) of the concept to map, e.g., DOID:8398",
                  "example": "DOID:8398",
                  "in": "query",
                  "name": "curie",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Mapping distance for OxO. Note: this is the distance used in the OxO API to map from the original concept to an ICD9CM, ICD10CM, SNOMEDCT, or MeSH concept. One additional step may be taken by the COHD API to map to the OMOP standard concept. Default: 2.",
                  "example": 2,
                  "in": "query",
                  "name": "distance",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "COHD can either call the OxO API or use the local implementation of OxO. The full call to the OxO API will have the most updated mappings and term definitions, but is slower. The local implementation of OxO is faster but may contain outdated mappings and term definitions. If the parameter is false, COHD will call the full OxO API. If the parameter is true, COHD will use the local implementation.  Default: false.",
                  "example": false,
                  "in": "query",
                  "name": "local",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "description": "By default (false), COHD returns all mappings found. If true, COHD will recommend a mapping based on path distances. Default: false.",
                  "example": false,
                  "in": "query",
                  "name": "recommend",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "intermediate_oxo_id": {
                                  "example": "ICD9CM:715.3",
                                  "type": "string"
                                },
                                "intermediate_oxo_label": {
                                  "example": "",
                                  "type": "string"
                                },
                                "omop_concept_name": {
                                  "example": "Localized osteoarthrosis uncertain if primary OR secondary",
                                  "type": "string"
                                },
                                "omop_distance": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "omop_domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "omop_standard_concept_id": {
                                  "example": 72990,
                                  "type": "integer"
                                },
                                "oxo_distance": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "source_oxo_id": {
                                  "example": "DOID:8398",
                                  "type": "string"
                                },
                                "source_oxo_label": {
                                  "example": "osteoarthritis",
                                  "type": "string"
                                },
                                "total_distance": {
                                  "example": 2,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of mappings from external concepts to OMOP concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Cross-reference from an ontology to OMOP standard concepts using the Ontology Xref Service",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/xrefFromOMOP",
          "pathitem": {
            "get": {
              "description": "Attempts to map a concept from an external ontology to an OMOP standard concept ID using the EMBL-EBI Ontology Xref Service (OxO): https://www.ebi.ac.uk/spot/oxo/index. This method maps from the OMOP standard concept to an intermediate vocabulary included is OxO (ICD9CM, ICD10CM, SNOMEDCT, and MeSH), then uses the OxO API to map to other ontologies. Multiple mappings may be returned. Results are sorted by total_distance (OxO distance + OMOP distance) in ascending order.",
              "operationId": "xrefFromOMOP",
              "parameters": [
                {
                  "description": "OMOP standard concept_id to map, e.g., 192855",
                  "example": 192855,
                  "in": "query",
                  "name": "concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "Target ontologies for OxO. Comma separated target prefixes, e.g., \"DOID,UMLS\"",
                  "example": "UMLS",
                  "in": "query",
                  "name": "mapping_targets",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Mapping distance for OxO. Note: this is the distance used in the OxO API to map from an ICD9CM, ICD10CM, SNOMEDCT, or MeSH concept to the desired ontology. One additional step may be taken by the COHD API to map to the OMOP standard concept to ICD9CM, ICD10CM, SNOMEDCT, or MeSH. Default: 2.",
                  "example": 2,
                  "in": "query",
                  "name": "distance",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "COHD can either call the OxO API or use the local implementation of OxO. The full call to the OxO API will have the most updated mappings and term definitions, but is slower. The local implementation of OxO is faster but may contain outdated mappings and term definitions. If the parameter is false, COHD will call the full OxO API. If the parameter is true, COHD will use the local implementation.  Default: false.",
                  "example": false,
                  "in": "query",
                  "name": "local",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "description": "By default (false), COHD returns all mappings found. If true, COHD will recommend a mapping for each target based on path distances. Default: false.",
                  "example": false,
                  "in": "query",
                  "name": "recommend",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "intermediate_omop_concept_code": {
                                  "example": "92546004",
                                  "type": "string"
                                },
                                "intermediate_omop_concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "intermediate_omop_concept_name": {
                                  "example": "Cancer in situ of urinary bladder",
                                  "type": "string"
                                },
                                "intermediate_omop_vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                },
                                "intermediate_oxo_curie": {
                                  "example": "SNOMEDCT:92546004",
                                  "type": "string"
                                },
                                "intermediate_oxo_label": {
                                  "example": "Cancer in situ of urinary bladder",
                                  "type": "string"
                                },
                                "omop_distance": {
                                  "example": 0,
                                  "type": "integer"
                                },
                                "oxo_distance": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "source_omop_concept_code": {
                                  "example": "92546004",
                                  "type": "string"
                                },
                                "source_omop_concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "source_omop_concept_name": {
                                  "example": "Cancer in situ of urinary bladder",
                                  "type": "string"
                                },
                                "source_omop_vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                },
                                "target_curie": {
                                  "example": "UMLS:C0154091",
                                  "type": "string"
                                },
                                "target_label": {
                                  "example": "Cancer in situ of urinary bladder",
                                  "type": "string"
                                },
                                "total_distance": {
                                  "example": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of mappings from OMOP concepts to external concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Cross-reference from an ontology to OMOP standard concepts using the Ontology Xref Service",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/frequencies/singleConceptFreq",
          "pathitem": {
            "get": {
              "description": "Retrieves observed clinical frequencies of individual concepts. Multiple concepts may be requested in a comma separated list.",
              "operationId": "singleConceptFreq",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "A comma separated list of OMOP concept ids, e.g., \"192855\" or \"192855,2008271\"",
                  "example": "192855",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_count": {
                                  "example": 368,
                                  "type": "integer"
                                },
                                "concept_frequency": {
                                  "example": 0.0002055371025188907,
                                  "type": "integer"
                                },
                                "concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of single concept frequencies."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Clinical frequency of individual concepts",
              "tags": [
                "Clinical Frequencies"
              ]
            }
          }
        },
        {
          "path": "/frequencies/pairedConceptFreq",
          "pathitem": {
            "get": {
              "description": "Retrieves observed clinical frequencies of a pair of concepts.",
              "operationId": "pairedConceptFreq",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "A comma pair of OMOP concept ids, e.g., \"192855,2008271\"",
                  "example": "192855,2008271",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_count": {
                                  "example": 10,
                                  "type": "integer"
                                },
                                "concept_frequency": {
                                  "example": 5.585247351056813e-06,
                                  "type": "integer"
                                },
                                "concept_id_1": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "concept_id_2": {
                                  "example": 2008271,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of paired concept frequencies."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Clinical frequency of a pair of concepts",
              "tags": [
                "Clinical Frequencies"
              ]
            }
          }
        },
        {
          "path": "/frequencies/associatedConceptFreq",
          "pathitem": {
            "get": {
              "description": "Retrieves observed clinical frequencies of all pairs of concepts given a concept id. Results are returned in descending order of paired concept count. Note that the largest paired concept counts are often dominated by associated concepts with high prevalence.",
              "operationId": "associatedConceptFreq",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"192855\"",
                  "example": 192855,
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "associated_concept_id": {
                                  "example": 19041324,
                                  "type": "integer"
                                },
                                "associated_concept_name": {
                                  "example": "Acetaminophen 325 MG Oral Tablet [Tylenol]",
                                  "type": "string"
                                },
                                "associated_domain_id": {
                                  "example": "Drug",
                                  "type": "string"
                                },
                                "concept_count": {
                                  "example": 277,
                                  "type": "integer"
                                },
                                "concept_frequency": {
                                  "example": 0.0001547113516242737,
                                  "type": "integer"
                                },
                                "concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of associated concept frequencies."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Clinical frequencies of all pairs of concepts given a concept id",
              "tags": [
                "Clinical Frequencies"
              ]
            }
          }
        },
        {
          "path": "/frequencies/associatedConceptDomainFreq",
          "pathitem": {
            "get": {
              "description": "Retrieves observed clinical frequencies of all pairs of concepts given a concept id restricted by domain of the associated concept_id.  Results are returned in descending order of paired concept count. Note that the largest paired concept counts are often dominated by associated concepts with high prevalence.",
              "operationId": "associatedConceptDomainFreq",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"192855\"",
                  "example": 192855,
                  "in": "query",
                  "name": "concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP domain id, e.g., \"Condition\", \"Drug\", \"Procedure\", etc. See /metadata/domainCounts for a list of valid domain IDs.",
                  "example": "Procedure",
                  "in": "query",
                  "name": "domain",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "associated_concept_id": {
                                  "example": 2211361,
                                  "type": "integer"
                                },
                                "associated_concept_name": {
                                  "example": "Radiologic examination, chest, 2 views, frontal and lateral",
                                  "type": "string"
                                },
                                "associated_domain_id": {
                                  "example": "Procedure",
                                  "type": "string"
                                },
                                "concept_count": {
                                  "example": 257,
                                  "type": "integer"
                                },
                                "concept_frequency": {
                                  "example": 0.00014354085692216007,
                                  "type": "integer"
                                },
                                "concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of associated concept frequencies."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Clinical frequencies of all pairs of concepts given a concept id",
              "tags": [
                "Clinical Frequencies"
              ]
            }
          }
        },
        {
          "path": "/frequencies/mostFrequentConcepts",
          "pathitem": {
            "get": {
              "description": "Retrieves the most frequent concepts.",
              "operationId": "mostFrequentConcepts",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "(Optional) The number of concepts to retreieve, e.g., 100. 0 or unspecified will return all matching concepts.",
                  "example": 100,
                  "in": "query",
                  "name": "q",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "(Optional) The domain_id to restrict to, e.g., \"Condition\", \"Drug\", \"Procedure\". See /metadata/domainCounts for a list of valid domain IDs.",
                  "example": "Condition",
                  "in": "query",
                  "name": "domain",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "(Optional) The vocabulary_id(s) to restrict to, e.g., \"SNOMED\", \"MedDRA\", \"RxNorm\", \"ATC\" etc. Comma separated to include multiple vocabularies, e.g., \"SNOMED,MedDRA\". Default: unrestricted",
                  "example": null,
                  "in": "query",
                  "name": "vocabulary_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "(Optional) The concept_class_id(s) to restrict to. concept_class_ids are specific to each vocabulary, e.g.,: [ATC](https://en.wikipedia.org/wiki/Anatomical_Therapeutic_Chemical_Classification_System) {ATC 1st, ATC 2nd, ATC 3rd, ATC 4th, ATC 5th}; [MedDRA](https://en.wikipedia.org/wiki/MedDRA) {PT, HLT, HLGT, SOC}; [RxNorm](https://www.nlm.nih.gov/research/umls/rxnorm/docs/2015/appendix5.html) {Ingredient, Clinical Drug Form, Clinical Drug Comp, Clinical Drug}. Comma separated to include multiple concept_class_ids, e.g., \"PT,HLT\". Default: unrestricted",
                  "example": null,
                  "in": "query",
                  "name": "concept_class_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_class_id": {
                                  "example": "Clinical Finding",
                                  "type": "string"
                                },
                                "concept_count": {
                                  "example": 233790,
                                  "type": "integer"
                                },
                                "concept_frequency": {
                                  "example": 0.1305774978203572,
                                  "type": "integer"
                                },
                                "concept_id": {
                                  "example": 320128,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Essential hypertension",
                                  "type": "string"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of most frequent concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Most frequent concepts [by domain]",
              "tags": [
                "Clinical Frequencies"
              ]
            }
          }
        },
        {
          "path": "/association/chiSquare",
          "pathitem": {
            "get": {
              "description": "Returns the chi-square statistic and p-value between pairs of concepts. Results are returned in descending order of the chi-square statistic. Note that due to large sample sizes, the chi-square can become very large. \n\nThe expected frequencies for the chi-square analysis are calculated based on the single concept frequencies and assuming independence between concepts. P-value is calculated with 1 DOF. \n\nThis method has overloaded behavior based on the specified parameters:\n\n1) concept_id_1 and concept_id_2: Result for the pair (concept_id_1, concept_id_2)\n2) concept_id_1: Results for all pairs of concepts that include concept_id_1\n3) concept_id_1 and domain: Results for all pairs of concepts including concept_id_1 and where concept_id_2 belongs to the specified domain\n",
              "operationId": "chiSquare",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"192855\"",
                  "example": 192855,
                  "in": "query",
                  "name": "concept_id_1",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"2008271\". If this parameter is specified, then the chi-square between concept_id_1 and concept_id_2 is returned. If this parameter is not specified, then a list of chi-squared results between concept_id_1 and other concepts is returned.",
                  "example": 2008271,
                  "in": "query",
                  "name": "concept_id_2",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP domain id, e.g., \"Condition\", \"Drug\", \"Procedure\", etc., to restrict the associated concept (concept_id_2) to. If this parameter is not specified, then the domain is unrestricted. See /metadata/domainCounts for a list of valid domain IDs.",
                  "example": "Procedure",
                  "in": "query",
                  "name": "domain",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "chi_square": {
                                  "example": 370026.1780081638,
                                  "type": "integer"
                                },
                                "concept_2_domain": {
                                  "example": "Procedure",
                                  "type": "string"
                                },
                                "concept_2_name": {
                                  "example": "Instillation of therapeutic substance into bladder",
                                  "type": "string"
                                },
                                "concept_id_1": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "concept_id_2": {
                                  "example": 4021588,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 3,
                                  "type": "integer"
                                },
                                "p-value": {
                                  "example": 0,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concept pairs and chi-squared values."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Chi-square analysis on pairs of concepts",
              "tags": [
                "Concept Associations"
              ]
            }
          }
        },
        {
          "path": "/association/obsExpRatio",
          "pathitem": {
            "get": {
              "description": "Returns the natural logarithm of the ratio between the observed count and expected count. Expected count is calculated from the single concept frequencies and assuming independence between the concepts. Results are returned in descending order of ln_ratio.\n\nexpected_count = Count_1_and_2 * num_patients / (Count_1 * Count_2)\n\nln_ratio = ln(expected_count)\n\nThis method has overloaded behavior based on the specified parameters:\n\n1) concept_id_1 and concept_id_2: Results for the pair (concept_id_1, concept_id_2)\n2) concept_id_1: Results for all pairs of concepts that include concept_id_1\n3) concept_id_1 and domain: Results for all pairs of concepts including concept_id_1 and where concept_id_2 belongs to the specified domain\n",
              "operationId": "obsExpRatio",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"192855\"",
                  "example": 192855,
                  "in": "query",
                  "name": "concept_id_1",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"2008271\". If concept_id_2 is unspecified, then this method will return all pairs of concepts with concept_id_1.",
                  "example": 2008271,
                  "in": "query",
                  "name": "concept_id_2",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP domain id, e.g., \"Condition\", \"Drug\", \"Procedure\", etc., to restrict the associated concept (concept_id_2) to. If this parameter is not specified, then the domain is unrestricted. See /metadata/domainCounts for a list of valid domain IDs.",
                  "example": "Procedure",
                  "in": "query",
                  "name": "domain",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The confidence level used for calculating confidence intervals (default 0.99).",
                  "example": 0.99,
                  "in": "query",
                  "name": "confidence",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_2_domain": {
                                  "example": "Procedure",
                                  "type": "string"
                                },
                                "concept_2_name": {
                                  "example": "Closed [transurethral] biopsy of bladder",
                                  "type": "string"
                                },
                                "concept_id_1": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "concept_id_2": {
                                  "example": 2003784,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "expected_count": {
                                  "example": 0.060838982345591645,
                                  "type": "integer"
                                },
                                "ln_ratio": {
                                  "example": 7.561698473261244,
                                  "type": "integer"
                                },
                                "observed_count": {
                                  "example": 117,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of paired concepts and observed-expected frequency ratio."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Observed Count / Expected Count",
              "tags": [
                "Concept Associations"
              ]
            }
          }
        },
        {
          "path": "/association/relativeFrequency",
          "pathitem": {
            "get": {
              "description": "Calculates the relative frequency (i.e., conditional probability) between pairs of concepts. Results are returned in descending order of relative frequency. Note that due to the randomization of the counts, the calculated relative frequencies can exceed the limit of 1.0.\n\nRelative Frequency = Count_1_and_2 / Count_2\n\nThis method has overloaded behavior based on the specified parameters:\n\n1) concept_id_1 and concept_id_2: Result for the pair (concept_id_1, concept_id_2)\n2) concept_id_1: Results for all pairs of concepts that include concept_id_1\n3) concept_id_1 and domain: Results for all pairs of concepts including concept_id_1 and where concept_id_2 belongs to the specified domain\n",
              "operationId": "relativeFrequency",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"192855\"",
                  "example": 192855,
                  "in": "query",
                  "name": "concept_id_1",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"2008271\". If concept_id_2 is unspecified, then this method will return all pairs of concepts with concept_id_1.",
                  "example": 2008271,
                  "in": "query",
                  "name": "concept_id_2",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP domain id, e.g., \"Condition\", \"Drug\", \"Procedure\", etc., to restrict concept_id_2 (the base concept) to. If this parameter is not specified, then the domain is unrestricted. See /metadata/domainCounts for a list of valid domain IDs.",
                  "example": "Procedure",
                  "in": "query",
                  "name": "domain",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The confidence level used for calculating confidence intervals (default 0.99).",
                  "example": 0.99,
                  "in": "query",
                  "name": "confidence",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_2_count": {
                                  "example": 82,
                                  "type": "integer"
                                },
                                "concept_2_domain": {
                                  "example": "Procedure",
                                  "type": "string"
                                },
                                "concept_2_name": {
                                  "example": "Radical cystectomy",
                                  "type": "string"
                                },
                                "concept_id_1": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "concept_id_2": {
                                  "example": 2003805,
                                  "type": "integer"
                                },
                                "concept_pair_count": {
                                  "example": 29,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "relative_frequency": {
                                  "example": 0.35365853658536583,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of paired concepts and relative frequency."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Relative frequency between pairs of concepts",
              "tags": [
                "Concept Associations"
              ]
            }
          }
        },
        {
          "path": "/temporal/conceptAgeCounts",
          "pathitem": {
            "get": {
              "description": "Counts of ages when concepts were first observed in a patient. Different concepts will have different bin_widths. All binning schemes start with age 0, and no bin starts with an age > 90. The largest age bin includes all ages greater or equal to the starting age of the bin. For example, with a bin_width of 4, the ages of each bin are [0-3, 4-7, 8-11, ..., 84-87, 88+]. Counts in each bin are independently perturbed with a Poisson distribution. Counts < 10 are suppressed, represented by the value 1. Counts of 0 are reported as 0.\n",
              "operationId": "conceptAgeCounts",
              "parameters": [
                {
                  "description": "The dataset_id of the data set to query. Default data set is the Temporal Beta data set.",
                  "example": 4,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"313217\"",
                  "example": 313217,
                  "in": "query",
                  "name": "concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "bin_width": {
                                  "example": 2,
                                  "type": "integer"
                                },
                                "concept_id": {
                                  "example": 313217,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Atrial fibrillation",
                                  "type": "string"
                                },
                                "counts": {
                                  "description": "Array of counts ordered from 0 to the largest bin.",
                                  "items": {
                                    "example": 9000,
                                    "type": "integer"
                                  },
                                  "type": "array"
                                },
                                "dataset_id": {
                                  "example": 4,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "The concept's age distribution"
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Counts of ages when concepts were first observed in a patient",
              "tags": [
                "Temporal Clinical Data"
              ]
            }
          }
        },
        {
          "path": "/temporal/findSimilarAgeDistributions",
          "pathitem": {
            "get": {
              "description": "Finds concepts with a similar concept-age distribution as with the desired concept_id.\nUses Jaccard similarity to compare concept-age distributions\n",
              "operationId": "findSimilarAgeDistributions",
              "parameters": [
                {
                  "description": "The dataset_id of the data set to query. Default data set is the Temporal Beta data set.",
                  "example": 4,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"313217\"",
                  "example": 313217,
                  "in": "query",
                  "name": "concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "True: excludes concepts that frequently co-occur (0-day delta) with concept_id. False: do not exclude. Default is True.",
                  "example": true,
                  "in": "query",
                  "name": "exclude_related",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "description": "(Optional) True: restricts potentially similar concepts to the same type of concept as concept_id, e.g.,  the same domain_id for Conditions, Drugs, and Procedures. For drugs, if the concept is an ingredient, also restricts concept_class_id to 'Ingredient'.\n",
                  "example": true,
                  "in": "query",
                  "name": "restrict_type",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "description": "Minimum threshold for similarity. Range is 0-1, higher is more similar. Default 0.7.",
                  "example": 0.7,
                  "in": "query",
                  "name": "threshold",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                },
                {
                  "description": "Maximum number of concepts to return at each bin width. Default 20.",
                  "example": 20,
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "bin_width": {
                                  "example": 2,
                                  "type": "integer"
                                },
                                "concept_id": {
                                  "example": 313217,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Atrial fibrillation",
                                  "type": "string"
                                },
                                "counts": {
                                  "description": "Array of counts ordered from 0 to the largest bin.",
                                  "items": {
                                    "example": 9000,
                                    "type": "integer"
                                  },
                                  "type": "array"
                                },
                                "dataset_id": {
                                  "example": 4,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "The concept's age distribution"
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Find concepts with a similar concept-age distribution",
              "tags": [
                "Temporal Clinical Data"
              ]
            }
          }
        },
        {
          "path": "/temporal/conceptPairDeltaCounts",
          "pathitem": {
            "get": {
              "description": "Counts of time differences (deltas) between when a pair of concepts were first observed in a patient. given a pair of concepts (source_concept and target_concept), a positive delta indicates that source_concept was  observed before target_concept. Likewise, a negaitve delta indicates that source_concept was observed after target_concept. Performing this query with the two concepts swapped will produce a mirrored distribution.   \n  \nBin widths grow exponentially, and different concept pairs will have different bin_widths. The binning schemes are as follows (delta bins with negative values mirror the positive delta bins):  \n  bin_width=1: [0 day, 1 day, 2-3 days, 4-7 days, 8-15 days, ..., 2048-4095 days (5.6-11.2y), and 4096+ days\n  (11.2+ years)].  \n  bin_width=2: [0 day, 1-3 days, 4-15 days, 16-63 days, ..., 256-1023 days, 1024+ days (2.8+ years)]  \n  bin_width=4: [0 day, 1-15 days, 16-255 days, 256+ days]  \n  bin_width=8: [0 day, 1-255 days, 256+ days]  \n  bin_width=16: [0 day, 1+ days]  \n  The 0-day bin never gets incorporated into larger bins.\n    \nCounts in each bin are independently perturbed with a Poisson distribution. Counts < 10 are suppressed, represented by the value 1. Counts of 0 are reported as 0.\n",
              "operationId": "conceptPairDeltaCounts",
              "parameters": [
                {
                  "description": "The dataset_id of the data set to query. Default data set is the Temporal Beta data set. ",
                  "example": 4,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"312327\"",
                  "example": 312327,
                  "in": "query",
                  "name": "source_concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"313217\"",
                  "example": 313217,
                  "in": "query",
                  "name": "target_concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "bin_width": {
                                  "example": 2,
                                  "type": "integer"
                                },
                                "counts": {
                                  "description": "Array of counts ordered from the most negative bin to the largest positive bin.",
                                  "items": {
                                    "example": 9000,
                                    "type": "integer"
                                  },
                                  "type": "array"
                                },
                                "dataset_id": {
                                  "example": 4,
                                  "type": "integer"
                                },
                                "n": {
                                  "example": 6,
                                  "type": "integer"
                                },
                                "source_concept_id": {
                                  "example": 312327,
                                  "type": "integer"
                                },
                                "source_concept_name": {
                                  "example": "Acute myocardial infarction",
                                  "type": "string"
                                },
                                "target_concept_id": {
                                  "example": 313217,
                                  "type": "integer"
                                },
                                "target_concept_name": {
                                  "example": "Atrial fibrillation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "The concept pair's delta distribution"
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Counts of time deltas between",
              "tags": [
                "Temporal Clinical Data"
              ]
            }
          }
        },
        {
          "path": "/temporal/sourceToTarget",
          "pathitem": {
            "get": {
              "description": "Analysis to determine if there's a temporal relationship between the source_concept and the target_concept.  \nCompares the delta distribution between source_concept and target_concept against delta distributions from other concepts to the target_concept. Find comparable concepts by measuring similarity of the age distributions to the age distribution of the source_concept.\n",
              "operationId": "sourceToTarget",
              "parameters": [
                {
                  "description": "The dataset_id of the data set to query. Default data set is the Temporal Beta data set.",
                  "example": 4,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"312327\"",
                  "example": 312327,
                  "in": "query",
                  "name": "source_concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"313217\"",
                  "example": 313217,
                  "in": "query",
                  "name": "target_concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object"
                      }
                    }
                  },
                  "description": "The concept pair's delta distribution"
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Temporal relationship between source_concept and target_concept.",
              "tags": [
                "Temporal Clinical Data"
              ]
            }
          }
        },
        {
          "path": "/predicates",
          "pathitem": {
            "get": {
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "additionalProperties": {
                          "additionalProperties": {
                            "description": "Array of predicates",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "description": "Target map",
                          "type": "object"
                        },
                        "description": "Source map",
                        "example": {
                          "biolink:ChemicalSubstance": {
                            "biolink:Gene": [
                              "biolink:directly_interacts_with",
                              "biolink:decreases_activity_of"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Predicates by source and target"
                }
              },
              "summary": "Get supported relationships by source and target",
              "tags": [
                "translator"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "post": {
              "description": "Query the COHD API following the [NCATS Translator Reasoner Standard API] (https://github.com/NCATS-Tangerine/NCATS-ReasonerStdAPI). Only single hop queries are supported. See the example query_graph.\n    \nFor the source node, the curie must be specified (type is ignored).    \n    \nFor the target node, both the curie and type are optional. If curie is specified for the target node, then the association between the two identified concepts is returned. If curie is not specified and type is specified, the associations between the source node and all concepts with the specified type are returned. If neither are specified, then the associations between the source node and all concepts are returned.\nCOHD will attempt to map the CURIE to an OMOP concept and the node type to an OMOP domain. ",
              "operationId": "query",
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": "{\n  \"max_results\": 50,\n  \"message\": {\n    \"query_graph\": {\n      \"nodes\": [\n        {\n          \"id\": \"n00\",\n          \"curie\": \"DOID:9053\",\n          \"type\": \"biolink:Disease\"\n        },\n        {\n          \"id\": \"n01\",\n          \"type\": \"biolink:Procedure\"\n        }\n      ],\n      \"edges\": [\n        {\n          \"id\": \"e00\",\n          \"type\": \"biolink:correlated_with\",\n          \"source_id\": \"n00\",\n          \"target_id\": \"n01\"\n        }\n      ]\n    }\n  },\n  \"query_options\": {\n    \"method\": \"obsExpRatio\",\n    \"dataset_id\": 3,\n    \"confidence_interval\": 0.99,\n    \"min_cooccurrence\": 50,\n    \"threshold\": 0.5,\n    \"local_oxo\": true,\n    \"ontology_targets\": {\n      \"biolink:Disease\": [\"ICD9\", \"SNOMEDCT\", \"DOID\"],\n      \"biolink:Drug\": [\"RxNorm\"],\n      \"biolink:Procedure\": [\"ICD10PCS\", \"SNOMEDCT\"],\n      \"_DEFAULT\": []\n    },\n    \"biolink_only\": true\n  }\n}",
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "Query information to be submitted",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Message"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "description": "Invalid status value"
                }
              },
              "summary": "Query COHD following NCATS Translator Reasoner Standard API",
              "tags": [
                "translator"
              ],
              "x-swagger-router-controller": "swagger_server.controllers.query_controller"
            }
          }
        }
      ],
      "security": [],
      "servers": [
        {
          "url": "http://tr-kp-clinical.ncats.io/api/"
        },
        {
          "url": "http://cohd.io/api/"
        }
      ],
      "tags": [
        {
          "description": "COHD metadata",
          "name": "Metadata"
        },
        {
          "description": "OMOP Common Data Model concepts",
          "name": "OMOP"
        },
        {
          "description": "Clinical frequency data",
          "name": "Clinical Frequencies"
        },
        {
          "description": "Estimated association between concepts",
          "name": "Concept Associations"
        },
        {
          "description": "Concept-age distributions, concept-pair delta distributions, and temporal analyses",
          "name": "Temporal Clinical Data"
        },
        {
          "description": "NCATS Biomedical Data Translator APIs",
          "name": "translator"
        },
        {
          "description": "Implements the NCATS Translator Reasoner API standards",
          "name": "reasoner"
        }
      ],
      "x-externalResources": [
        {
          "x-description": "Department of Biomedical Informatics, Columbia University",
          "x-type": "website",
          "x-url": "https://www.dbmi.columbia.edu/"
        },
        {
          "x-description": "Observational Health Data Sciences and Informatics",
          "x-type": "website",
          "x-url": "https://www.ohdsi.org/"
        },
        {
          "x-description": "OMOP CDM",
          "x-type": "website",
          "x-url": "https://github.com/OHDSI/CommonDataModel/wiki"
        }
      ],
      "~raw": ""
    },
    {
      "_id": "bc58469a9ec0567d4ca0032b35d27b7d",
      "_meta": {
        "ETag": "I",
        "github_username": "vemonet",
        "slug": "trek",
        "timestamp": "2020-05-27T00:00:22.680188",
        "uptime_status": "unknown",
        "uptime_ts": "2020-09-17T00:08:15.893587",
        "url": "http://api.trek.semanticscience.org/v3/api-docs"
      },
      "_score": 2.8748033,
      "components": {
        "schemas": {
          "Credentials": {
            "description": "Credentials needed for programmatic access to the remote knowledge graph",
            "properties": {
              "password": {
                "description": "Password needed for programmatic access to the remote knowledge graph",
                "example": "mypassword",
                "type": "string"
              },
              "username": {
                "description": "Username needed for programmatic access to the remote knowledge graph",
                "example": "myusername",
                "type": "string"
              }
            },
            "required": [
              "password",
              "username"
            ],
            "type": "object"
          },
          "Edge": {
            "description": "An edge in the query_graph linking two nodes",
            "properties": {
              "id": {
                "description": "Local URI or identifier for this edge, which is unique within this KnowledgeGraph, and perhaps within the source reasoner's knowledge graph, e.g. https://w3id.org/biolink/cohd/association/1_8516_941473",
                "type": "string"
              },
              "source_id": {
                "description": "Corresponds to the id of the source node of this edge",
                "example": "http://api.ohdsi.org/WebAPI/vocabulary/concept/8507",
                "type": "string"
              },
              "target_id": {
                "description": "Corresponds to the id of the target node of this edge",
                "example": "http://api.ohdsi.org/WebAPI/vocabulary/concept/950641",
                "type": "string"
              },
              "type": {
                "description": "BioLink type of the edge",
                "example": "Association",
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "EdgeBinding": {
            "description": "An Edge Binding in the Results",
            "properties": {
              "kg_id": {
                "description": "One or more knowledge-graph node ids, i.e. the `id` of a KNode",
                "items": {
                  "description": "One or more knowledge-graph node ids, i.e. the `id` of a KNode",
                  "type": "string"
                },
                "type": "array"
              },
              "qg_id": {
                "description": "Query-graph edge id, i.e. the `edge_id` of a QEdge",
                "type": "string"
              }
            },
            "required": [
              "kg_id",
              "qg_id"
            ],
            "type": "object"
          },
          "KnowledgeGraph": {
            "description": "A thought graph associated with this result. This will commonly be a linear path subgraph from one concept to another, but related items aside of the path may be included.",
            "properties": {
              "edges": {
                "description": "List of edges in the KnowledgeGraph",
                "items": {
                  "$ref": "#/components/schemas/Edge"
                },
                "type": "array"
              },
              "nodes": {
                "description": "List of nodes in the KnowledgeGraph",
                "items": {
                  "$ref": "#/components/schemas/Node"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "Message": {
            "description": "A message containing the query to the Reasoner API.",
            "properties": {
              "code_description": {
                "description": "Extended description denoting the success or mode of failure in the generation of the message (e.g.: 9 results found)",
                "type": "string"
              },
              "context": {
                "description": "JSON-LD context URI (e.g.: https://rtx.ncats.io/ns/translator.jsonld)",
                "type": "string"
              },
              "datetime": {
                "description": "Datetime string for the time that this message was generated (e.g.: 2018-01-09 12:34:45)",
                "type": "string"
              },
              "id": {
                "description": "URI for this message (e.g.: https://rtx.ncats.io/api/rtx/v1/message/123)",
                "type": "string"
              },
              "knowledge_graph": {
                "$ref": "#/components/schemas/KnowledgeGraph"
              },
              "message_code": {
                "description": "Set to OK for success, or some other short string to indicate and error (e.g., KGUnavailable, TermNotFound, etc.) (e.g.: OK)",
                "type": "string"
              },
              "n_results": {
                "description": "Total number of results from the query (which may be less than what is returned if limits were placed on the number of results to return) (e.g.: 42)",
                "type": "string"
              },
              "original_question": {
                "description": "The original question text typed in by the user (e.g.: what proteins are affected by sickle cell anemia)",
                "type": "string"
              },
              "query_graph": {
                "$ref": "#/components/schemas/QueryGraph"
              },
              "query_options": {
                "additionalProperties": {
                  "description": " Dict of options that can be sent with the query. Options are tool specific and not stipulated here (e.g.: {coalesce=True,threshold=0.9})",
                  "type": "string"
                },
                "description": " Dict of options that can be sent with the query. Options are tool specific and not stipulated here (e.g.: {coalesce=True,threshold=0.9})",
                "type": "object"
              },
              "query_type_id": {
                "description": "The query type id if one is known for the query/message (as defined in [Google docs](https://docs.google.com/spreadsheets/d/18zW81wteUfOn3rFRVG0z8mW-ecNhdsfD_6s73ETJnUw/edit#gid=1742835901) ) (e.g.: Q2)",
                "type": "string"
              },
              "reasoner_id": {
                "description": "Identifier string of the reasoner that provided this message (one of trek, RTX, Robokop, Indigo, Integrator, etc.)",
                "type": "string"
              },
              "remote_knowledge_graph": {
                "$ref": "#/components/schemas/RemoteKnowledgeGraph"
              },
              "restated_question": {
                "description": "A precise restatement of the question, as understood by the Translator, for which the answer applies. The user should verify that the restated question matches the intent of their original question (it might not). (e.g.: Which proteins are affected by sickle cell anemia?)",
                "type": "string"
              },
              "results": {
                "description": "List of all returned potential answers for the query posed",
                "items": {
                  "$ref": "#/components/schemas/Result"
                },
                "type": "array"
              },
              "schema_version": {
                "description": "Version label of this JSON-LD schema (e.g.: 0.9.1)",
                "example": "0.9.1",
                "type": "string"
              },
              "table_column_names": {
                "description": "List of column names that corresponds to the row_data for each result (e.g.: [chemical_substance.name, chemical_substance.id])",
                "items": {
                  "description": "List of column names that corresponds to the row_data for each result (e.g.: [chemical_substance.name, chemical_substance.id])",
                  "type": "string"
                },
                "type": "array"
              },
              "tool_version": {
                "description": "Version label of the tool that generated this message (e.g.: RTX 0.5.0)",
                "type": "string"
              },
              "type": {
                "description": "Entity type of this message (e.g.: translator_reasoner_message)",
                "type": "string"
              }
            },
            "required": [
              "query_graph"
            ],
            "type": "object"
          },
          "Node": {
            "description": "A node in the query_graph",
            "properties": {
              "id": {
                "description": "URI or CURIE identifier for this node, e.g. http://api.ohdsi.org/WebAPI/vocabulary/concept/941473",
                "example": "http://api.ohdsi.org/WebAPI/vocabulary/concept/950641",
                "type": "string"
              },
              "name": {
                "description": "Formal name of the entity",
                "example": "Betamethasone",
                "type": "string"
              },
              "type": {
                "description": "BioLink type of the entity",
                "example": "Drug",
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "NodeBinding": {
            "description": "A Node Binding in the Results",
            "properties": {
              "kg_id": {
                "description": "One or more knowledge-graph node ids, i.e. the `id` of a KNode",
                "items": {
                  "description": "One or more knowledge-graph node ids, i.e. the `id` of a KNode",
                  "type": "string"
                },
                "type": "array"
              },
              "qg_id": {
                "description": "Query-graph node id, i.e. the `node_id` of a QNode",
                "type": "string"
              }
            },
            "required": [
              "kg_id",
              "qg_id"
            ],
            "type": "object"
          },
          "QEdge": {
            "description": "An edge in the query_graph linking two nodes",
            "properties": {
              "id": {
                "description": "QueryGraph internal identifier for this QEdge. Recommended form: e00, e01, e02, etc.",
                "example": "e00",
                "type": "string"
              },
              "negated": {
                "description": "Boolean that if set to true, indicates the edge statement is negated i.e. is not true",
                "type": "boolean"
              },
              "relation": {
                "description": "Lower-level relationship type of this edge (e.g.: upregulates)",
                "example": "related_to",
                "type": "string"
              },
              "source_id": {
                "description": "Corresponds to the id of the source node of this edge",
                "example": "n00",
                "type": "string"
              },
              "target_id": {
                "description": "Corresponds to the id of the target node of this edge",
                "example": "n01",
                "type": "string"
              },
              "type": {
                "description": "BioLink type of the edge",
                "example": "Association",
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "QNode": {
            "description": "A node in the query_graph",
            "properties": {
              "curie": {
                "description": "URI or CURIE identifier for this node",
                "type": "string"
              },
              "id": {
                "description": "QueryGraph internal identifier for this QNode. Recommended form: n00, n01, n02, etc.",
                "example": "n00",
                "type": "string"
              },
              "type": {
                "description": "BioLink type of the entity",
                "example": "Drug",
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "QueryGraph": {
            "description": "A graph intended to be the thought path to be followed by a reasoner to answer the question. This graph is a representation of a question.",
            "properties": {
              "edges": {
                "description": "List of edges in the QueryGraph",
                "items": {
                  "$ref": "#/components/schemas/QEdge"
                },
                "type": "array"
              },
              "nodes": {
                "description": "List of nodes in the QueryGraph",
                "items": {
                  "$ref": "#/components/schemas/QNode"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "RemoteKnowledgeGraph": {
            "description": "A thought graph associated with this result that is not repeated here, but stored elsewhere in a way that can be remotely accessed by the reader of this Message",
            "properties": {
              "credentials": {
                "$ref": "#/components/schemas/Credentials"
              },
              "protocol": {
                "description": "Knowledge Graph protocol, e.g. rdf, neo4j",
                "example": "rdf",
                "type": "string"
              },
              "url": {
                "description": "URL that provides programmatic access to the remote knowledge graph",
                "type": "string"
              }
            },
            "required": [
              "url"
            ],
            "type": "object"
          },
          "Result": {
            "description": "One of potentially several results or answers for a query",
            "properties": {
              "confidence": {
                "description": "Any type of score associated with this result (e.g.: 163.233)",
                "format": "float",
                "type": "number"
              },
              "description": {
                "description": "A free text description of this result answer from the reasoner (e.g.: The genetic condition sickle cell anemia may provide protection)",
                "type": "string"
              },
              "edge_bindings": {
                "description": "List of QEdge-KEdge bindings.",
                "items": {
                  "$ref": "#/components/schemas/EdgeBinding"
                },
                "type": "array"
              },
              "essence": {
                "description": "A single string that is the terse essence of the result (useful for simple answers) (e.g.: ibuprofen)",
                "type": "string"
              },
              "essence_type": {
                "description": "A Translator bioentity type of the essence (e.g.: drug)",
                "type": "string"
              },
              "id": {
                "description": "URI for this message (e.g.: https://rtx.ncats.io/api/rtx/v1/result/234)",
                "type": "string"
              },
              "node_bindings": {
                "description": "List of QNode-KNode bindings.",
                "items": {
                  "$ref": "#/components/schemas/NodeBinding"
                },
                "type": "array"
              },
              "reasoner_id": {
                "description": "Identifier string of the reasoner that provided this message (one of trek, RTX, Robokop, Indigo, Integrator, etc.)",
                "type": "string"
              },
              "result_group": {
                "description": "An integer group number for results for use in cases where several results should be grouped together. Also useful to control sorting ascending. (e.g.: 1)",
                "format": "int32",
                "type": "integer"
              },
              "result_group_similarity_score": {
                "description": "A score that denotes the similarity of this result to other members of the result_group (e.g.: 0.95)",
                "format": "float",
                "type": "number"
              },
              "result_type": {
                "description": "One of several possible result types: 'individual query answer', 'neighborhood graph', 'type summary graph'",
                "type": "string"
              },
              "row_data": {
                "description": "An arbitrary list of values that captures the essence of the result that can be turned into a tabular result across all answers (each result is a row) for a user that wants tabular output (e.g.: [ ibuprofen, CHEMBL:CHEMBL521 ])",
                "items": {
                  "description": "An arbitrary list of values that captures the essence of the result that can be turned into a tabular result across all answers (each result is a row) for a user that wants tabular output (e.g.: [ ibuprofen, CHEMBL:CHEMBL521 ])",
                  "type": "string"
                },
                "type": "array"
              },
              "score": {
                "description": "Any type of score associated with this result (e.g.: 163.233)",
                "format": "float",
                "type": "number"
              },
              "score_direction": {
                "description": "Sorting indicator for the score: one of higher_is_better or lower_is_better (e.g.: lower_is_better)",
                "type": "string"
              },
              "score_name": {
                "description": "Name for the score (e.g.: Jaccard distance)",
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "info": {
        "contact": {
          "email": "vincent.emonet@maastrichtuniversity.nl",
          "name": "Institute of Data Science at Maastricht University",
          "url": "https://d2s.semanticscience.org"
        },
        "description": "Reasoner API for the **T**ranslator **Re**d **K**nowledge graph, a BioLink-compliant RDF knowledge graph about Clinical Data.\n\nThis endpoint implements the [Reasoner API specifications](https://github.com/NCATS-Tangerine/NCATS-ReasonerStdAPI/tree/master/API) to query clinical data from the Columbia Open Health Data (COHD) integrated in a [BioLink-complying RDF](https://biolink.github.io/biolink-model/) triplestore, through a SPARQL endpoint. \n \n COHD was developed at the [Columbia University Department of Biomedical Informatics](https://www.dbmi.columbia.edu/) as a collaboration between the [Weng Lab](http://people.dbmi.columbia.edu/~chw7007/), [Tatonetti Lab](http://tatonettilab.org/), and the [NCATS Biomedical Data Translator program](https://ncats.nih.gov/translator) (Red Team).\n\nThis work was supported in part by grants: NCATS OT3TR002027, NLM R01LM009886-08A1, and NIGMS R01GM107145.\n\nThis API is registered as a Smart API at [trek.smart-api.info](http://trek.smart-api.info)\n\nThe following external resources may be useful:\n* [Reasoner API Specifications](https://github.com/NCATS-Tangerine/NCATS-ReasonerStdAPI/tree/master/API)\n* [BioLink model documentation](https://biolink.github.io/biolink-model/)\n* [Resolve COHD OMOP identifiers](http://api.ohdsi.org/WebAPI/vocabulary/concept/922802)\n* [OHDSI](https://www.ohdsi.org/)\n* [OMOP Common Data Model](https://github.com/OHDSI/CommonDataModel/wiki)\n* [Athena](http://athena.ohdsi.org/) (OMOP vocabularies, search, concept relationships, concept hierarchy)\n* [Atlas](http://www.ohdsi.org/web/atlas/) (OMOP vocabularies, search, concept relationships, concept hierarchy, concept sets)",
        "license": {
          "name": "MIT License",
          "url": "https://opensource.org/licenses/MIT"
        },
        "termsOfService": "https://opensource.org/licenses/MIT",
        "title": "TReK Clinical Reasoner API",
        "version": "1.0"
      },
      "openapi": "3.0.1",
      "paths": [
        {
          "path": "/biolink/v1/prefixes",
          "pathitem": {
            "get": {
              "description": "Returns [all prefixes and their namespace URI used by the API](https://github.com/MaastrichtU-IDS/d2s-api/blob/master/src/main/java/org/semanticscience/d2s/api/service/AbstractQueryBuilder.java#L7) in the format used to define prefixes and namespaces in SPARQL queries.",
              "operationId": "prefixes",
              "responses": {
                "200": {
                  "content": {
                    "text/plain": {}
                  },
                  "description": "Successful Operation"
                }
              },
              "summary": "Returns all prefixes and their namespace URI used by the API.",
              "tags": [
                "query"
              ]
            }
          }
        },
        {
          "path": "/biolink/v1/get/{dataset}/{class}",
          "pathitem": {
            "get": {
              "description": "This call returns **all instances** of a class in a dataset. Default and maximum limit is 1000 instances per page. Use page parameter to load more.",
              "operationId": "datasetClass",
              "parameters": [
                {
                  "in": "path",
                  "name": "dataset",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "in": "path",
                  "name": "class",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "in": "query",
                  "name": "page",
                  "required": false,
                  "schema": {
                    "format": "int64",
                    "type": "integer"
                  }
                },
                {
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "schema": {
                    "format": "int64",
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {},
                    "application/xml": {},
                    "text/csv": {},
                    "text/tab-separated-values": {}
                  },
                  "description": "Successful Operation"
                }
              },
              "summary": "Returns all instances of a class in a dataset.",
              "tags": [
                "query"
              ]
            }
          }
        },
        {
          "path": "/biolink/v1/get/{dataset}/{class}/{id}",
          "pathitem": {
            "get": {
              "description": "This call returns **all properties** of a specific instance.",
              "operationId": "datasetClassId",
              "parameters": [
                {
                  "in": "path",
                  "name": "dataset",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "in": "path",
                  "name": "class",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "in": "path",
                  "name": "id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {},
                    "application/xml": {},
                    "text/csv": {},
                    "text/tab-separated-values": {}
                  },
                  "description": "Successful Operation"
                }
              },
              "summary": "Loads all properties of a specific instance.",
              "tags": [
                "query"
              ]
            }
          }
        },
        {
          "path": "/biolink/v1/datasets",
          "pathitem": {
            "get": {
              "description": "This call returns **all datasets**, which can be used as input for other services. Note that the first line in csv is the header.",
              "operationId": "datasets",
              "responses": {
                "200": {
                  "content": {
                    "application/json": {},
                    "application/xml": {},
                    "text/csv": {},
                    "text/tab-separated-values": {}
                  },
                  "description": "Successful Operation"
                }
              },
              "summary": "Returns all datasets, which can be used as input for other services.",
              "tags": [
                "query"
              ]
            }
          }
        },
        {
          "path": "/biolink/v1/get/{dataset}",
          "pathitem": {
            "get": {
              "description": "This call returns **all classes** for this particular dataset with instances having an id.",
              "operationId": "classes",
              "parameters": [
                {
                  "in": "path",
                  "name": "dataset",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {},
                    "application/xml": {},
                    "text/csv": {},
                    "text/tab-separated-values": {}
                  },
                  "description": "Successful Operation"
                }
              },
              "summary": "Returns all classes for this particular dataset with instances having an id.",
              "tags": [
                "query"
              ]
            }
          }
        },
        {
          "path": "/reasoner/v1/query",
          "pathitem": {
            "post": {
              "description": "Query the BioLink-compliant knowledge graph using the [Reasoner API query specifications](https://github.com/NCATS-Tangerine/NCATS-ReasonerStdAPI/tree/master/API#top-level-message-class).\n\nUse this example query for COHD:\n```json \n{\n  \"max_results\": 50,\n  \"message\": {\n    \"query_graph\": {\n      \"nodes\": [\n        { \"id\": \"n00\", \"type\": \"Procedure\" },\n        { \"id\": \"n01\", \"type\": \"Drug\" }\n      ],\n      \"edges\": [\n        { \"id\": \"e00\", \"type\": \"Association\",\n          \"source_id\": \"n00\", \"target_id\": \"n01\" }\n      ]\n    },\n    \"query_options\": {\n\t   \"https://w3id.org/trek/cohd/attribute/ttest_results\": \"1.5e+02\",\n\t   \"https://w3id.org/trek/cohd/attribute/ttest_pvalue\": \"1.338936e-87\"\n    }\n  }\n}\n```",
              "operationId": "reasonerQueryCall",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {}
                  }
                },
                "description": "Reasoner API query to execute",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Message"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "successful operation"
                }
              },
              "summary": "Execute a Reasoner API query on the BioLink-compliant triplestore.",
              "tags": [
                "translator"
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Generated server url",
          "url": "http://api.trek.semanticscience.org"
        }
      ],
      "tags": [
        {
          "description": "Query BioLink-compliant datasets using the Reasoner API",
          "name": "translator"
        },
        {
          "description": "Services to query and explore the TReK BioLink datasets classes and concepts.",
          "name": "query"
        }
      ],
      "~raw": "H4sIAJetzV4C_-08C3PbNpN_BePeTCN_EvWwHTue6dw5dpq68SOxlS83Y2dUiIQk1BShEqRlfxnfb799ACT1cColTvp17jqdSAKB3cW-sQv604aZqERO9Ma-2NgKWkF7oy42dDIwMPBpI9NZrPBR90K9EYexTnQoY3GhpDWJSsXB22OcHykbpnqSaZPg5OpjMTCpyEZKbG52NzdTmdhYZjC0uXmhNjcj-HyzuZmYaayioRLDVE5GdSHFS21OdHLTCM14EmuZZOLi6GdxMztRyL7Js5KsI5nJ4Dq5TrojbYVKoonRsFIDCDVWSWaJkKsZ8uxEhXoAy5F4-_HZKMsmdr_ZHOpslPcDwN88OzzoXja6MhmqVCfK_fZQLrMI4DSzVKnmWNpMpU34XROZEX_kKr0XoScvAvLEIDVjIuPQxPm4r6U4BwGIX5SMsxHtQDw7PP_lqCaAdAXbzFQEX4ElVzM8udfJEHlSUtzXBjDdBI5ybfxIY2wiFTeBJJBRrCywX9WBhtTkQ-ChuHx7cPHupOBXIK4T_B-pEFNpRaRuVQxqEgmZMQcL2t8n-lalVmf34khNZJohm4UZoPzGKqJtH4MypWPgb1hh73Q6DaL-WAODGVSgohxIBHRSwFgMok1JJqKvsqkCFhHmDwq2fSL7DAkATZSBPS2B9T_haLrbau02a3Vx1QWdS1SW6Zm1mR8FbIFJhzhVJhFjIilX90Gy6ZYaPEkNiGdc7ikBJbJBokfB0NyCQviZNfHsApjXVXJcK9VzatIbYq_NJxOTOjEjD0X_HvUb9HVfMBXn3a3uRavVaXV26-Ls5FRctNonp63Wi729543W3kGb6T47fn16ic9en7Zbu-3tnRIbqjp8pGqoUUVRlsjpyzHiw4cg2ivQ4ZvA4lADPEKAXqDk1eKzGkNXYOJxbKaokOoOgCfArFRZk6ehsmIs70GEIrdqkMf718nmnAFefiMDJEzOZARZgIhMmKOCEqo1DMcRbU18q9gszk_P3wodASwgHQygYBPyxowiq0mfPqg-knZrQtnPY5neN0OThGqSNV90OnutDkMGgJfHs6ZRgnBTEN-hGY_BHkgPT5GypcwiaE2ei1NpZnOqbzSDOgDtTmRJMP2sIhTPCFtBtFa2LqySaQie2dEP8o1ZYCM9seXwCJiBE-89rliWvJnd2FT1ATk8fyKM5ZBVma1hWAJVGNvzwaVKb3VIYczzC4MeKyjREsPjxCrbPD3u4kKAlMkwoxCYyDEtPU4sRMM8U-jeSAaXoVaAEU3nVILipTocZRWXiJDyNK7ijTo2sGoMtg3ekJcjATgTRjXNvdUwCm5YjdE5_de4AJ0XkIMk3niANY7uGTphC-LEjS8S8LmNI0RCwFG8HbRoyAL7YBSGrj5VwTltZ8ewfE9zecFrBeZKAY1hCoT28BElJYcOgd9G6T6XAHpHgXUxR8AIi9IHb4PeCP34TKoC2ykxUHReAtypiy0jOPpWdTeJIW4STEqGvGspcIagy8BKmu1U0Qa8vQlYmSUpedfSvG03J6ka6DvFD4aK1c1zwpGHq20-Br97z5lVlqcJ4Ihj4Zf7kKVTgVuzEwk6-f7iGF1uhLEESYbdB0szNYZ39SUAl7qf0hLeN46PLlHjMWA0-7Hpe_ds0xC-6qT5u7yVTdTDOf3BVahcTcuyaB70AShYJAn-Za7jSKUBrv7hZBczJSKJ0wymEmQXwW4SNburYj8WF7nEBzkNLof4A_bBacdxhPwpRASPIKRNDBoLyanTatHnvPLkIQC3EOowr2NQ3qOAUbOIIUo2JzEwAH8-0H8wpaoaoA3NT06zHpqfSLUevlBPNDgumeCWwXFJVlPOKB2CZYpBSUOIy1MHanNzBtjm5qPgIBUcyDzOiONjeafH-VjEeqwzTEHarVarQhMwCZKeoQrEe6voG-ZAICZQFJRibCQAActbJh6H8RBp2CA7cyvnnImbx0cbkisYJMv0j1xDNgRjWZorZGI4Al1kFt9PaDXqczLceJjxHqHH-VQAceslvMI5VQAOZGwfgUhnBUWukq3ADT7fnsNCYvg2aD4-uY1kst-weKzAmNG4lXHOgB8otsOE0N7633ICMYCTyObv1iTLxu_G8XoW1_yko3XM7gSU1TtnVNVMe6vzx8xC89cxuhKYt7rl4D5jHTDyN7cPHX0ttL-3gvo84wujgF9eF9MRRGdQs8Qdy-goqJNJnlGtxkAoTYULvHYdNfUoNjfXRSLOTIaplasvDHRqM4gYEL0hsAAPMW7gg5GSGPgf1_VvEKj_Mif0hYL2aSjX3YBxWFLQIZ6rvITEFPK1SgweyVtMl0FYOlpH4A4VOKWvQTYnSQf0O7irv6E_SN1pBpWFNQFxT4yd05LK6WlOVV7dqRAPsXLmZOQOOoYT6cWDVaVyGDx6Hlu-dL5mWx7NrpZQ8I3KsT9kZtKIsY7ZgAOAhVSrQXrG9TjMPEl71Z3EWrGjBZUaqz3718lvv_2GMhLXyafrRIjrDUhre6A7kOXaa-DATqvuxhk6jtFMHCNoPdp9ZRyfJAYYiWNXfkyITzCuIxyE563WNbD7mnSXh96mJlRRnsJP8VB_bFl7ftlRmg9xhV_wsV5SgcL5HBVqkYoDa02oSUjwqFyG4Li80Fvcg0zBm_VmiKwQxF_8ljzXDOmYdXy7zuhRUSnbAheCx0esQTRDM4qaMgNV7YOCN7MM9LUqo-uNdrCj_tHqEMXrg5qQPXtIW1t7L7aeq8be7vWGIx0_4J8HUpclns0bL1nLIThQ77IA-ksT3S9zPUtMBA5Fio143gctcykVD8g-ZM5HPqzqBG3pBM1jTvBPCChcsExTSccOnakxY_0POGnjox-a6Dpgy0lmm7zUNk_ZqjYe_H-E10-rYOHvh7A9LM3CQYZ-V7Z8BbHC2qlJKZuExCSloEI1KEec6f-uQgouZd5NYIrZS6LJok9872aLRAE1EXkT1zKgZoiQxE8UJzrDVI0xB5rzllQYZKeEMMf3BQ0PFB_dVlYi6K2b_bQEFTSQUOZQVgTxdVgR9iv4uShOOBasJDy9IpdODPZ6sNoFhJYV_jLDQap8fgs_80SDWVKSQ2UoGHrjiX_tuplJhGWOkZzYcp4S7CeF9wo_2vld14UKhoFYcFE-YWQvVXriZru3t9N-3nux3d7e3SKeue2usG9fzsSJeMZECpGUOYFXHD8Xh72zXw3LoUnZ2USFxHXk0TmGYFDkIcftORLW7LTs7bR2mRc-_jwBqQzrqUl9sdN6vt1eakkHCcH3pc5KSoHnpBtKqaaGCLKFtbzUSYSbWzCam2GPj9N_0JeVDIjXLPXic7Sew7kNrAWLdqVKN5hY4piO4BiqAxXQXn7T0W9c1XhzBk9nw8KfiukrkRGv_xiurBUUux14FkhUhY5DvQLFO3JZj4gTnwknIS_WC85WSICzXmSGukdlxOJfRUYn2lKfnlZ49HMoV4_PJSspl1yLAlrx1RQ4Ti9jNQDGiw6ZvzPiPBjEIjqZku1ymhgI7sxrPNtSAzWm3rWkWoTEQjUssHmfIdFVDqCjaDyCm5AJlTbqAhJHblliXx_3AIh1VLhWguRa4zoJ4xxiY0By97nOgtFWbH41i60u-FMGkmK_LoKty5vXkmRZIIA9T0zGkR9YYqdwhC8uAnEWC2dWFa0hYDYNVrLCzlfd3Jxa8QYx0eitDeqC1i0BSHnwXbaaG_n18vyscXIk3CLKN55htN8vwn2a3QV8o0SbZmIr90kCTK3jqLZmhH8F4sjuKwEeVN0dVz3uEkfPpyU9N4WxreomcT9FxjSHZOkGsdkHA1jXcNOb7c5WzYnKkbIq9uMybeM53uo8JC41grncasxJZ6lEi8b5cBCsi4vuf8M_pm9uzKQujsFbDw1-8tUsA4ausjBwojAm7pUN9BUI_SdPFrHsq7jILQAMEzgs-uXL-AikiVawE7QYOyvoV-MHPF45GaJH1wpeBO3aXIJDg4Q-Ajozverh6MjN9vLxvoHGXB24smO8JlUywxHUabX3Gq12o_VCtDv7W9v72zvMiaS3zHs9SkvXZOClknzcB8UAHrjF5U09dljPOOV3PjumM8tIJnASkBlfrXKeTw-42QmBREFSMollCKOutLaIBoIGL635jW13eB9u970Qo-tKW7lUFITO3xBD3Ym9jvmRNcBYV3UfmTTzjIfZmIKAGSq-5pCmMJsIqYs3r98n8lbi9bgYzjxdlY7PTPazyZPI6b0n-fxNzTnBSPVmiVrFM91BrEBDrIzDdwilvlTotsKZHkfRAdCVp0VG7NQDVzo7mjOXF6VgcQPOZHFnPbo3mPTocsBaEY8X8q0CVttw8dSQmmmPr34C9UqCDjEhnrArNDO8YdiDzMJ18xBiXSx5oKOPtTUz5L-YWIrYJtVDncBDKnatrBh4udAvFX6poIiJa-nGpLuPgoURT-TUefdMaWyKgJLIwQByJL69YnV4E0PSpmLMTYBo6cMMkA1z1qTxAG-YhNpidCEA_gqscx0Eqo7tL9A68Lfg3otLNOVt0joxnF0MPuGkSVBBDRtkXb9FsN48jgS4eT24L1tmnviSS2OZgUi4b6apROeI0ukSnj7TmRhrzJLB6mqB5-QHImgNVv4n85JTT-TdykG7W3haylA0OVKMxZoLI8lsAtkszJtuKONVH1KHq9fGDIGmyFSvG-OvYEhPqIdgQWYysiOlILWLmu29f33Ya08z9X5wnmylP1_883XrX3vjDw0VnsG5fXDUe253t151f03eT5sq0tkPQx391N7d7uxt7bxotWui8ITvOlUOuPL1I6c3GQEoeC7jt7OZ-58ySxzpkOTpEDh75narRVm7s43jViDO3UQUIWUYxRUCuhdlMCLoSc4HlhEGLrehT6GREO1C9VMXW2rZCFRtZOLoJ4j9D7zXf1_ilp4HvebQLU-d-BhTVNfnrw3yuezMR-FvWn50hcdD-Hy1tPyIB_ZKYXCd6hKXBZ-kQoVZ1sqV8J_xqlBMgaeoLNJZZI6WlyrDdu-IOP8U5ctlSLAR9ohecLloocBWSP__y2nftJzmwFeh41ClnFaiWJAdPvpcNe3d9-kelFUUirn0KsQyKyZyAqAQy0yc--KFun2hWi2w7lYb_-lwkj2nwDDj-5T2_YX7VfsmkK9wi33mqv5svYFKps535xCDh-TT7fyx0hXOepn5q5oMiefy928aJC3nYNUQmTCDuA_BUclkmZD5CcdayJwsHwX5Gow_4tlC9qJMVTGoMCq2PAoyGa18mlbEu-8TOle2PSRnme0laHsJ2l7yiO15rQjzVKsnDOj_ZsGuUgv-Hm2HCrrV68Hvnqzn8GXoP9dwGBZKSNoFZtjnF0d8J4Kq_zzM787xcUpWCpTGHwGrx0jXoHDwLS0AL2r9O20cJ4vZJMylBesFY8Q3cVa7BEEvAK2k-CczZVb7hW3_cO4yx2fFUr358cDEZyY0K5JcMEmwG_GrXb6dRgNwDcps_z4frqLBxle2npzfZtcLQlXFUYdbSXT1LhIqtmpKByB642Iq72cOV8zG-N5xt3xbJ6WLs0XUKe7TkH5QY2VlQ-_1Octaz-LIXBuUJAoPIFizw-jz78Lov5AUNN3GG-q_fgkp1c76A1feQTYzJHCVd1mxKCkbMLTsszrhEqX2862gs7VVm33tYhAb-FLg761-HjvDg5gvpjAVDtOvoDcyjUSkuYJXq8CPwFeEq-eDlybNOBen1MOksxj3hWuzjPRwhK0d2-urDN_5gVnoEKtDjrq5YV9xTgYYVsO_UgLfoy3GFDU7W9vLii4rFSoHqVJcPa0W2r1TcFt2YafofhQhydHZdcV2dOLAfK5gLakEUqfE-X6uIJL2MPHonOZF9hnC8cpwXDSLvKukiKpSC8kPgyvbfCw8fueceyH0RyB8L7qo1uk-nELMQM2S1Vs9FTuo_kWAvjZqvslaEudQRpCTuYKzq7Wv5L0g65ZpX2epTO8hz2ZXxjfMfQiYZHnqU_ylDKmGCt-sSjDTgKMJFXoKHQhTY_l1At-9f1ZtBnDqYaY14q3kyjRBn0r6MxsOnMkzfOPD9w5KdtfF4S-vTl-e7PPHTqct1u5r_F_gyEN5F2MNpTxn12rhMJ7CIWgClOt-XG4a1tt98SO6ZrDOnPsA9J4z7uzHuvgxUeCW-yYdYbOCkhccJa127xK40cplEThAmHzy2PuCi8JzDwUt841R5F7Zp0uRj_QOkMRXWjjz8dvy01xHpK8YEiXccM6GuYE4iK1xf3oCU02s-KZYXnbBSdpQUSAvGh7t2sLLjVudhU32wJ1o_EMF2X1vnejvIg7pBfU3nXKW4Oa9MRDNXduxQqB2Vn-ZmkqHfufREPW3uETx8KguF9eJILmdVwA0uModI8naTJfF_xf9_xbM30gAAA=="
    },
    {
      "_id": "14cfbb82d72211adde316005a84d6e66",
      "_meta": {
        "github_username": "JohnCEarls",
        "timestamp": "2017-10-25T14:22:41.463970",
        "uptime_status": "unknown",
        "uptime_ts": "2020-09-17T00:07:58.010458",
        "url": "http://biggim.ncats.io/api/metadata/openapiv3"
      },
      "_score": 1.9837111,
      "components": {
        "responses": {
          "MaskError": {
            "description": "When any error occurs on mask"
          },
          "NoResultFound": {
            "description": ""
          },
          "ParseError": {
            "description": "When a mask can't be parsed"
          }
        },
        "schemas": {
          "Column": {
            "properties": {
              "datatype": {
                "description": "The datatype",
                "type": "string"
              },
              "interactions_type": {
                "description": "The type of interaction measured",
                "type": "string"
              },
              "name": {
                "description": "Column description",
                "type": "string"
              },
              "table": {
                "$ref": "#/components/schemas/Table"
              }
            },
            "type": "object"
          },
          "Query_request": {
            "properties": {
              "columns": {
                "description": "A comma delimited list of column names to return.\n\nGene ids are always returned and do not need to be specified. If a column is not present, then an error is returned.\n\nAvailable columns are provided by `/api/metadata/tables/{table_name}/columns`.\n\n**Default**: all columns.\n",
                "example": "TCGA_GBM_Correlation,TCGA_GBM_Pvalue,GTEx_Brain_Correlation,GTEx_Brain_Pvalue",
                "type": "string"
              },
              "ids1": {
                "description": "A comma delimited list of Entrez gene ids to select.\n                    \n**Default**: all genes.\n",
                "example": "5111,6996,57697,6815,889,7112,2176,1019,5888,5706",
                "type": "string"
              },
              "ids2": {
                "description": "Entrez gene ids to select.\n\nIf not given, the query selects any gene related to a gene in ids 1.\nIf given, the query only selects relations that contain a gene in ids1 and a gene in ids2.\n\n**Default**: all genes.\n",
                "example": "5111,6996,57697,6815,889,7112,2176,1019,5888,5706",
                "type": "string"
              },
              "limit": {
                "description": "\nThe maximum number of rows to return.\n\n**Default**: 10000\n",
                "example": 10000,
                "type": "integer"
              },
              "restriction_bool": {
                "description": "\nA list of pairs of values `column name,value` with which to restrict the results of the query to rows where the value of the column is True or False.\n",
                "example": "BioGRID_Interaction,True",
                "type": "string"
              },
              "restriction_gt": {
                "description": "\nA list of pairs of values `column name,value` with which to restrict the results of the query to rows where the value of the column is greater than the given value.\n",
                "example": "TCGA_GBM_Correlation,.2, GTEx_Brain_Correlation,.2",
                "type": "string"
              },
              "restriction_join": {
                "description": "\nThe type of join made on restrictions.\n\n**Default**: intersect\n",
                "enum": [
                  "intersect",
                  "union"
                ],
                "example": "intersect",
                "type": "string"
              },
              "restriction_lt": {
                "description": "\nA list of pairs of values `column name,value` with which to restrict the results of the query to rows where the value of the column is less than the given value.\n",
                "example": "TCGA_GBM_Pvalue,1.3, GTEx_Brain_Pvalue,1.3",
                "type": "string"
              },
              "table": {
                "description": "\nThe table to select from.\n\nAvailable tables are provided by  `/api/metadata/tables`.\n\n**Default**: BigGIM_70_v1\n",
                "example": "BigGIM_70_v1",
                "type": "string"
              }
            },
            "type": "object"
          },
          "Query_request_status": {
            "properties": {
              "message": {
                "description": "Error messages if status is __error__",
                "type": "string"
              },
              "processed_data": {
                "description": "Human readable size of query scan(determines cost of bigquery)",
                "type": "string"
              },
              "request_id": {
                "description": "The request id for this query as UUID",
                "pattern": "[0-9a-f]{12}4[0-9a-f]{3}[89ab][0-9a-f]{15}\\Z",
                "type": "string"
              },
              "request_uri": {
                "description": "List of uris of generated csvs",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "rows": {
                "description": "Number of rows returned",
                "type": "integer"
              },
              "size": {
                "description": "Human readable total size of result",
                "type": "string"
              },
              "status": {
                "description": "The query status",
                "enum": [
                  "error",
                  "running",
                  "complete"
                ],
                "example": "error",
                "type": "string"
              }
            },
            "required": [
              "request_id",
              "status"
            ],
            "type": "object"
          },
          "Study": {
            "properties": {
              "description": {
                "description": "The description of this study",
                "type": "string"
              },
              "name": {
                "description": "The name of this study",
                "type": "string"
              },
              "substudies": {
                "items": {
                  "$ref": "#/components/schemas/Substudy"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "Substudy": {
            "properties": {
              "cell_of_origin": {
                "description": "The cell type used.",
                "type": "string"
              },
              "columns": {
                "items": {
                  "$ref": "#/components/schemas/Column"
                },
                "type": "array"
              },
              "description": {
                "description": "Substudy description",
                "type": "string"
              },
              "name": {
                "description": "Sub-study name",
                "type": "string"
              },
              "tissue_hierarchy": {
                "description": "The Brenda tissue hierarchy of the cell of origin",
                "type": "string"
              }
            },
            "type": "object"
          },
          "Table": {
            "properties": {
              "name": {
                "description": "Table name",
                "type": "string"
              }
            },
            "type": "object"
          },
          "The_query_response": {
            "properties": {
              "message": {
                "description": "Error messages if status is __error__",
                "type": "string"
              },
              "request_id": {
                "description": "The request id generated.",
                "type": "string"
              },
              "status": {
                "description": "The status of the query job submission.",
                "enum": [
                  "submitted",
                  "error"
                ],
                "example": "submitted",
                "type": "string"
              }
            },
            "required": [
              "status"
            ],
            "type": "object"
          },
          "TissueSubstudies": {
            "properties": {
              "substudies": {
                "items": {
                  "$ref": "#/components/schemas/Substudy"
                },
                "type": "array"
              },
              "tissue": {
                "description": "The tissue",
                "type": "string"
              }
            },
            "type": "object"
          },
          "Tissues": {
            "properties": {
              "tissues": {
                "items": {
                  "description": "A tissue",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        }
      },
      "info": {
        "contact": {
          "email": "john.c.earls@gmail.com",
          "name": "John C. Earls"
        },
        "description": "Big GIM (Gene Interaction Miner) is a Translator Knowledge Source that contains function interaction data for all pairs of genes. Functional interaction data are available from four different sources: 1) tissue-specific gene expression correlations from healthy tissue samples (GTEx), 2) tissue-specific gene expression correlations from cancer samples (TCGA), 3) tissue-specific probabilities of function interaction (GIANT), and 4) direct interactions (BioGRID). The data is stored as a Google BigQuery table enabling fast access.",
        "title": "Big GIM(Gene Interaction Miner)",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/metadata/study",
          "pathitem": {
            "get": {
              "operationId": "get_metadata_studies",
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Study"
                      }
                    }
                  },
                  "description": "Success"
                }
              },
              "summary": "Return all available studies",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/interactions/query/status/{request_id}",
          "pathitem": {
            "get": {
              "operationId": "get_interactions_status",
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Query_request_status"
                      }
                    }
                  },
                  "description": "OK"
                },
                "404": {
                  "description": "Request id not found"
                }
              },
              "summary": "Gets the status of a query request",
              "tags": [
                "interactions"
              ]
            },
            "parameters": [
              {
                "description": "The request id for a query",
                "in": "path",
                "name": "request_id",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ]
          }
        },
        {
          "path": "/metadata/openapiv3",
          "pathitem": {
            "get": {
              "operationId": "get_open_api_spec",
              "responses": {
                "200": {
                  "description": "Success"
                }
              },
              "summary": "Return the OpenAPI v3 spec for this API",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/table/{table_name}",
          "pathitem": {
            "get": {
              "operationId": "get_metadata_table_resource",
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Table"
                      }
                    }
                  },
                  "description": "Success"
                },
                "404": {
                  "description": "Table not found"
                }
              },
              "summary": "Retrieve metadata about a table",
              "tags": [
                "metadata"
              ]
            },
            "parameters": [
              {
                "description": "the name of a biqquery table",
                "in": "path",
                "name": "table_name",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ]
          }
        },
        {
          "path": "/metadata/table",
          "pathitem": {
            "get": {
              "operationId": "get_metadata_table_resources",
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Table"
                      }
                    }
                  },
                  "description": "Success"
                }
              },
              "summary": "Retrieve list of available tables",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/study/{study_name}",
          "pathitem": {
            "get": {
              "operationId": "get_metadata_study",
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Study"
                      }
                    }
                  },
                  "description": "Success"
                },
                "404": {
                  "description": "Study not found"
                }
              },
              "summary": "Return a single study and associated substudies",
              "tags": [
                "metadata"
              ]
            },
            "parameters": [
              {
                "description": "the name of a Big GIM study",
                "in": "path",
                "name": "study_name",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ]
          }
        },
        {
          "path": "/metadata/tissue/{tissue_name}",
          "pathitem": {
            "get": {
              "operationId": "get_tissue",
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TissueSubstudies"
                      }
                    }
                  },
                  "description": "Success"
                },
                "404": {
                  "description": "Tissue not found"
                }
              },
              "summary": "Return a list of substudies and columns associated with a tissue",
              "tags": [
                "metadata"
              ]
            },
            "parameters": [
              {
                "description": "the name of tissue",
                "in": "path",
                "name": "tissue_name",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ]
          }
        },
        {
          "path": "/metadata/swagger",
          "pathitem": {
            "get": {
              "operationId": "get_swagger_spec",
              "responses": {
                "200": {
                  "description": "Success"
                }
              },
              "summary": "Return the swagger v2 spec for this API",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/tissue",
          "pathitem": {
            "get": {
              "operationId": "get_tissue",
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Tissues"
                      }
                    }
                  },
                  "description": "Success"
                }
              },
              "summary": "Return a list of available tissues",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/table/{table_name}/column/{column_name}",
          "pathitem": {
            "get": {
              "operationId": "get_metadata_column_resource",
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Column"
                      }
                    }
                  },
                  "description": "Success"
                },
                "404": {
                  "description": "Column not found"
                }
              },
              "summary": "Retrieve metadata about a tables column",
              "tags": [
                "metadata"
              ]
            },
            "parameters": [
              {
                "description": "the name of a biqquery table",
                "in": "path",
                "name": "table_name",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "description": "the name of a column in this biqquery table",
                "in": "path",
                "name": "column_name",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ]
          }
        },
        {
          "path": "/interactions/query",
          "pathitem": {
            "get": {
              "operationId": "get_interactions_query",
              "parameters": [
                {
                  "description": "\nThe type of join made on restrictions. Either `intersect` or `union`\n\n**Default**: intersect\n\n**Example**: intersect\n",
                  "in": "query",
                  "name": "restriction_join",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "\nThe maximum number of rows to return.\n\n\n**Default**: 10000\n",
                  "in": "query",
                  "name": "limit",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "\nA list of pairs of values `column name,value` with which to restrict the results of the query to rows where the value of the column is greater than the given value.\n\n**Default**: No restrictions\n\n**Example**: TCGA_GBM_Correlation,.2, GTEx_Brain_Correlation,.2\n",
                  "in": "query",
                  "name": "restriction_gt",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "\nA list of pairs of values `column name,value` with which to restrict the results of the query to rows where the value of the column is less than the given value.\n\n**Default**: No restrictions\n\n**Example**:TCGA_GBM_Pvalue,1.3, GTEx_Brain_Pvalue,1.3\n",
                  "in": "query",
                  "name": "restriction_lt",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "\nThe table to select from.\n\nAvailable tables are provided by  `/api/metadata/tables`.\n\n**Default**: BigGIM_70_v1\n",
                  "in": "query",
                  "name": "table",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Entrez gene ids to select.\n\nIf not given, the query selects any gene related to a gene in ids 1.\nIf given, the query only selects relations that contain a gene in ids1 and a gene in ids2.\n\n**Default**: all genes.\n\n**Example**:\"5111,6996,57697,6815,889,7112,2176,1019,5888,5706\"\n",
                  "in": "query",
                  "name": "ids2",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "\nA list of pairs of values `column name,value` with which to restrict the results of the query to rows where the value of the column is True or False.\n\n**Default**: No restrictions\n\n**Example**: BioGRID_Interaction,True\n",
                  "in": "query",
                  "name": "restriction_bool",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "A comma delimited list of column names to return.\n\nGene ids are always returned and do not need to be specified. If a column is not present, then an error is returned.\n\nAvailable columns are provided by `/api/metadata/tables/{table_name}/columns`.\n\n**Default**: all columns.\n\n**Example**: TCGA_GBM_Correlation,TCGA_GBM_Pvalue,GTEx_Brain_Correlation,GTEx_Brain_Pvalue\n",
                  "in": "query",
                  "name": "columns",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "A comma delimited list of Entrez gene ids to select.\n                \n**Default**: all genes.\n\n**Example**:\"5111,6996,57697,6815,889,7112,2176,1019,5888,5706\"\n",
                  "in": "query",
                  "name": "ids1",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/The_query_response"
                      }
                    }
                  },
                  "description": "Success"
                },
                "400": {
                  "description": "Bad query request."
                }
              },
              "summary": "Submit a new query request",
              "tags": [
                "interactions"
              ]
            },
            "post": {
              "operationId": "post_interactions_query",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Query_request"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/The_query_response"
                      }
                    }
                  },
                  "description": "Success"
                },
                "400": {
                  "description": "Bad query request."
                }
              },
              "summary": "Submit a new query request",
              "tags": [
                "interactions"
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "url": "http://biggim.ncats.io/api"
        }
      ],
      "tags": [
        {
          "name": "translator"
        },
        {
          "name": "ISB"
        },
        {
          "name": "gene"
        },
        {
          "name": "similarity"
        },
        {
          "name": "tissue"
        },
        {
          "name": "TCGA"
        },
        {
          "name": "GIANT"
        },
        {
          "name": "BioGrid"
        },
        {
          "name": "GTEx"
        },
        {
          "name": "BigQuery"
        },
        {
          "name": "network"
        },
        {
          "name": "DeepTranslate"
        }
      ],
      "x-origin": [
        {
          "converter": {
            "url": "https://github.com/mermade/swagger2openapi",
            "version": "2.9.2"
          },
          "format": "swagger",
          "url": "http://biggim.ncats.io/api/metadata/swagger",
          "version": "2.0"
        }
      ],
      "~raw": "H4sIADGe8FkC_-0ba3PbuPGvYNTONM4o1MOJY-dT7cTxudfkcrFvOtM4Q0MUJCFHggoAytF5_N-7WIAviZRIXZw4N9UXiXgs9r2LXfG2w8Uk7rwgt50xU4Hkc81jAc-dEz4lZ-dvyKMzJhg5F5pJGphJ8oYLJvcIV4SSS0mFCqmOJflZxDchG08ZuYgTGTCiZ1STIBaacqHIJBF2Oy-AGlNNyQQ20zAkc8qlIvGETOFE5ZHXbgcN1_dQyQhdUB7SUcjIRMYRgEkkGfPJhEkmNFGIhHpBBntEc6US9kTNWcAnPMADCPsyl0wpAzKIpWRABfxWFtiM0VDPlm4nUTSah0wBMy5Pv-x1yXAXmAEVAZM5rMuXZ8cAa38d1lzGIzriIdecIUcqmffo7Pz47SVAoGJMnu4B7ZIFurgEDjnh8dn781d7HrmcMcs7EJwCgbExoUaEZ3E8BR6CvH9NmASSkaVMwBcXUzKhShMaACuV1-mSjuY6ZAUFqdMPsxaFH2hULxaBtMy-T_FMeIHHqAzVP6dm1AviyCwXNELI_4IV5KVHTs2Szh3MLJhUTi8HXh-HFJNmFIY-3HYSiaBnWs9f9HojPp3yyBMB1crjcY_OeefuI-yJ50AWPMDSfa8PgBDHaB4L0BiFaKpgBpja3xc6GS_xFwhkzqSRhl2UjBTMpY9cs8j--rtkEwP9b70cbM-B7F3YXUtEXy_nSCuVktqRsv2t2SOKLx8yWqFnKEoDsgBRaQlyQ5COoZWwzNx2IEVU49En0C8EfIkKe1Fmw7dgkrWUOprcbAs6jK5XIV_LOTQOnG1-SkZTxUEBC0M_nvix5FNeK3izihjIJFFs7NWI25LvzziYogxmyzpoJ-AgxzT1bdlyqw3uMPjtUKo-K4jDJBKtRPsSt-ym_SkLiybQUukBxBMLo6X4rLJX6rguTOVcWDn4eINervOiBgnHvAociv7edzurrcPoD8i1GEMiRlUCoaAOt8w-NkrWmhGKEQLMJhyy-Xays9RvE36d_GbM_2xCmw-xGVBX9gjJPifckA4RBEBQnaiOCRIr7I0g8NFpJVanUkLq4hYowifEgjER1veZmfX9GkrdgRgZv2BGgAuSUcS1tvJgIokscqVRAxYRrWCvO98ZMhJNPsUjghAwL6nzHYYbTGmfj-tE51YQPsZcR1Jd44lqxPCrEwFCqVTksRqsMuTZYDDoHhwdHXSfPT84et49OBw86x4eHnWfDwbD7nDw_KA76A-Ous8ODw9hSf-gs86YY8jFooiC9oQc-Ah5T8iBDmDSqdCS_WFTNzid6JgoFgLC3pUgFZ8r8fjxKzahSagfP36BSavNVa-auMkCWSb1889O3vgv8yyxmw2-W9AwYV2Ta_onErLn0rLCsF3YimSLELpApFcynUgBBFyJs5QNmFyHN3Sp3LRJFSHHHMdExJoIBs-wdQT6ZjNWUARyPoFc0kEH_TcLTS4MfqJrlFEABIK6a2ZTsHjucZbHO24hAqAcCz6Gk0ZLcm1SuF7ENDX-o4deSfVu8ds3pNz13NZrhLgmJTdbL6fc0RWkBBkuJLj-876_GFQw-UqgV0XMM83BVH-FLIvvGlXVZFVQUMSjlgLgNTygV_c_xS6VKBCDXl8ZYyy6ltJoIgxlH2spdfHDQCcRHcODIIVj1TrmGfhatFE_V3Ad9OFTh0VEv_AoiQhQMILbFOAj45tVVS4hgeDKCBi8pkyuMW6qG1mqN-ySGuv0hpWacpwZYHbLRdtV5LpgkV0cuyY3XM_IzYwHM0uXRRB9OjwAWSsu3iwyTLiZwd0XxxFQltBlVjmVDNy2NFdzgVNTvgDTxNVeI9UK6znk3NbA2y9xJx9-yJwBy1N_gi2jOA7X3Qdevf3C3bh7KSv99YNhg8EPEn_ymoZqA-kQJYb3Eao3BeQrASHGhBUUTrdAnV0CDlYs7Va0RhukqAMmEN7AQyhrEGIR5mDysk2xglWGNMCAWBoaVoeeTQlCk0zJL2SKpZS1kLHl-WRFAqv4H5XZ609JRI3_huBjI5imITGL0aeiFrXKXW1iWgwu2YhMhDCbXbklZJrVZbBOovaE6uOBPlONYmPfhM0GpKVEOdgBFY_GgIKMOIgG5GvtbsSnuGCvWYY8p5CRSzzuQ__JEX0y-Xg7GN49zR727z4cHtHRx3z22d3V1X871XQXsmtTD8WqjMWXKvLbb-ev6rACs65iwdtyeEwTrvogaIlLJF-5zFacuXLUv53jgr1Z-RZvByRQi5IQ8-v-fdyqqqzJ-Wm89Vl63lFISPCMqsP_g5kqJBnqd1Ov_Yc2We7cbBkj3m9gYstmcEI2z42DIDGeXCA43P42fo-G9TpOROVFCzBGFad6ZtHN08O8hDRlNghrOsX6Zyddg0alEsj8pVnZeY9SRzeUF8vTopyth0p0decGGQPXT0H5hWVlBg77fVu5Ar8I2T3-pvN5yAME1fukXAnHVgcalPxsve-uQrUuEiw8m0kz2yvWOnpoHj2rHL3b3DzvnH1KCJg6KxEXfKeGIFcoN5cdKWbOKIBmlkqtmaIPzgle000jmTW5FclZld0Z0wojVH6nd0elGNRIsFQPyh3pPQuxMmZVyvSXn9EUnvafVhnA-5y7JtZP0FBS8We24Ar5i_2d7MFw9ReAcPzunCz28RKbO10YrGGsOdSHU32zoZ6lW1S4fN0rXWJb6m2-c6ve6kLBn0Kk-_w5b_XspLkbOCw5W8A1zS0gdBQnGg7NztrkdCxJwFds3n0DtXWVy42-p15ZXTegXk_zskJ7Dqb3AbpSR2jHQ_VAmLjKGYxmvVv82kn7850ttT9tbGc9r6-p_BhuIeEUUxdpl_aioFQccMyJCm2xBhF4-UDib70NXNiWygYbwOYHODrbndrJ0-VbWwk777t8fRmn5pnLEyWdlTBzieNlnRaQqRB6Pnnftrraud3Z99nu4QbBqxs6NfeLXUO0208Ww8Yh2m35WhE6bzbvrh8F9-2ahQ9CA1RLf72erbiSe-_Wfj_kFKZLNiFRwL8lFmndTFi9_H55lXKobAspjtRvmGClTf8dvYxr_K57mfWboFW92PUW3U3kJHZ35nXx38_VJ0Ww0R3vAhu7IETBbrbe7Qxp5ctddvEsy_BptZs7oePyGR4y_uv7l_V2-zZXU7CEVd-RX9JX2luZpWZc2LFpRU4hPkOYuc6aVdemAn6N3bDrTS0tM3NqC6AVza5tDimlzHbAGpLTqPtV3_9qitNKT6wBcj9Gg2uFM2_jkiqsSbR98293Noc_Eps3dcva8bh597Ada7MQ3MhJfI8eflNKsNe2lZC_cOesrDBX7RuNV53dzRIbuz-OYa72b1s6vLqWdTv-pX962sq2__9Nqe5vSk0C0a7_F2vtfgZ_RpJt_mP3vZ3Ax3tJ3NeaMn-ZvL100ynE3uyloE5Jlc4vTsoDRrjlEQXaE1LJ9bI87qojpTGj_-URfCGmPGQ8muTjlXVgEqvL7Nsv5VHB9E0sfy8PvmJsnr72xOx7JV-eZH_fb_IyynqJzF5HF0xqVy8rwFAAZArxIhmZ92RgrzTXmHTrMH2npfyWzNA78oaoJ5MY1mvkbX5YaWUfiLj7HziT5VIJNgAA"
    },
    {
      "_id": "bfd371630f0bcb198d428488d061e7b3",
      "_meta": {
        "ETag": "fa58923349a9206c2f1a43823f630a41151aa80b389e58727d78448bc30cef2d",
        "github_username": "MarkDWilliams",
        "timestamp": "2020-06-10T20:42:55.836852",
        "uptime_status": "unknown",
        "uptime_ts": "2020-09-17T00:08:53.428869",
        "url": "https://raw.githubusercontent.com/NCATSTranslator/KnowledgeProviderScaffold/master/openapi.yml"
      },
      "_score": 1.3717681,
      "info": {
        "contact": {
          "email": "mark.williams5@nih.gov",
          "name": "Mark Williams",
          "x-role": "responsible developer"
        },
        "description": "a work in progress KP example",
        "termsOfService": "https://opensource.org/licenses/MIT",
        "title": "NCATS KP Scaffold",
        "version": "3.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/query",
          "pathitem": {
            "post": {
              "responses": {
                "200": {
                  "description": "A query response object"
                }
              },
              "summary": "POST a ReasonerStdAPI formatted query to the service.  Note, the service can only accept a limited set of query types currently."
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "http://transltr.io:7072"
        }
      ],
      "tags": [
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIANBF4V4C_22RQW_bMAyF_wrhc2cbLYYCOS3YqRjaBnOAHYYdVJlOtMqiRtJpjSD_fZLsAMNQX2yJ7318pM8VRQwmumoD1V3d1m11A5ULA6WLc3VCFkdhLeaSOvWYz09ft_sOvu2gs2YYyPe52qNYdlFXj4E34ldwASLTgVEkG_DdjDFBMg15lOehQz45W7BH1SibpsmxhCa2WBMfGp_KQVCax4d9NloKaqyWkMGMxfpoUq8fzntnRsmi909MS9jUOlIQ9-IRejyhT3jOEhyN81kxJnP9tpo_fwnuWB_oVF0uSSQpXlpEkv08VxP7a84UU9kE8cq1o819e3_7wRJ2TP1k8wkWUHX5lUc3h5V4zb-wjNKqiEaPUiZs_kzIc_mMJMvUMo0p81w6PHd7MPAdjVBA7rTf7h5gIB6NKvZQ3KAEesSSIS2zBngixZt_78CaABT8DMZajJqY3o0uIwQVaLiS5ogCdmLGoH6u89DrhnEJfNu25f3fKrYr4CoGevmN6S9eyvMXLF2FyIwCAAA="
    },
    {
      "_id": "1f277e1563fcfd124bfae2cc3c4bcdec",
      "_meta": {
        "ETag": "29f52a3a8dab13a0eef0ea3840160fcbd62ac35cede3e9a69b886c0330a76a51",
        "github_username": "kevinxin90",
        "timestamp": "2020-05-27T16:57:30.094807",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:50.025189",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/quickgo/smartapi.yaml"
      },
      "_score": 1.2515262,
      "components": {
        "x-bte-kgs-operations": {
          "ma_has_subclass_ma": [
            {
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "parameters": {
                "goid": "{inputs[0]}"
              },
              "predicate": "has_subclass",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma_has_subclass_ma"
              },
              "source": "gene ontology",
              "supportBatch": false
            }
          ]
        },
        "x-bte-response-mapping": {
          "ma_has_subclass_ma": {
            "GO": "results.children.id",
            "name": "results.children.name",
            "relation": "results.children.relation"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@pharmgkb.org",
          "name": "pharmgkb help desk",
          "x-role": "responsible developer"
        },
        "description": "The QuickGO REST API provides access to key biological data from QuickGO and GOA. The services provide a unified interface to query information about ontology terms from GO (the Gene Ontology) and ECO (the Evidence & Conclusion Ontology), Gene Ontology annotations from the EBI's GOA database, and gene products (proteins from UniProt, RNA from RNAcentral and complexes from ComplexPortal). ",
        "termsOfService": "https://www.ebi.ac.uk/QuickGO/services",
        "title": "QuickGO API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/ontology/go/terms/{goid}/children",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put Gene Ontology ID here, e.g. GO:0000082",
                  "example": "GO:0000082",
                  "in": "path",
                  "name": "goid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A gene ontolgoy annotation object"
                }
              },
              "summary": "retrieve the children of specified ontology terms",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/ma_has_subclass_ma"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "https://www.ebi.ac.uk/QuickGO/services"
        }
      ],
      "tags": [
        {
          "name": "ontology"
        },
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIAPqbzl4C_51UTW8TMRD9K9aCgErJboAL6olQqqoHaGnLqaoqr3eya-K1jT_SRlH-OzP2btqUggS5JLHffL33xpvCWNDcyuKQFe_LWTkrJqyQemHwYFOswHlpNF2-zVdBBgX0_1uUYnlyxubnp3TegBdO2jCgrzpgI-Li-PKKYMw6s5IIZFwI8J4Fw5awZrU0yrRScMUaHjhbONPvgrlu2MnZvGSU0YNbSQwdMzHOopYLCQ2TOoBbcAGU9WcEt2Y0hes5tcR4bWJgRgcqtWaI7X0uhDXeBMx9AhrY2QA4SHWPj4a7YyqmMfcrdmS0UJFIeQBP9oMxVpuQ6g41Uo5Pp689jZKGrLmHSSrSUijO00QRPHuDvwLIMfC7lud4MGEXX-f5BH8I0MEhWRQtTG8V3MOAP8p_z40LXB2ULClGs54tLjN3JE4XgvWHVXV3d1dCLUsuyrisBsarkWSKFcgYFyF5QfM-RduOu75d1qwDZRnKuSTk_dSZbAwH3uLkslaAtytQ6DBHEOi5VKk-Bn4c05TGtcV2i_dUGP2GiOtNEZ36t1afGPA8M0o65bzF9obI4O1QYBxn9ESBLTycIsHaKx7MEGd56HyioRoDqtZUidtq0xrZbCvRSdU40AnWQmbNx77nbp2JCU4iIckOI5iZBfMWRHbxvkGLVNhhS2HHy9gglcyrmjTB9p4jAT2_b83TzyibQ-tB2ZboxsMZfT68o2AHP6N00GBkcBFIsXtOfqJU-1AvOlQzDRjWNgE8DqdJyZvJzgOQKXs3m6XvJ93Ns_fTzK15vDbM1D8AbZdscT-tA0yXrZ-SkfJaZS5eOlhQohcVrYHRuBe-eg5e9fy24_7Wx1oo7v0t9r692ab0D6Gpxz9U2xTPpEhNSG1jGBqSTaYqUYQE6SAFnXzB1RBRcTdHR65kWGdTeRNd3sgHIsiJJDvqgC9iyPv6qC5d4lP23zX3_LTJNkL0Jo9xPbvZFmkXo7X4iHziQXR4v-CK3qudrji9tSQ35fiLDCN-OuCfFQKV2Mn8NODP1G9o5vzcRBV8OS5Umfdi3JPfrtNFGkXx0Ym_gXaX6JHtL8gx62kkBwAA"
    },
    {
      "_id": "4f7b6f661ac61ed64190d5b26d87aff5",
      "_meta": {
        "ETag": "1c6ca8074de7917826b7c9ac6dc28027465c61817ddb902ce96cf21b4af95b17",
        "github_username": "kevinxin90",
        "timestamp": "2020-03-12T16:25:03.083494",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:17.708391",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/robokop_extend/smartapi.yaml"
      },
      "_score": 1.2515262,
      "components": {
        "x-bte-kgs-operations": {
          "associatedWith": {
            "inputs": [
              {
                "id": "hgnc",
                "semantic": "Gene"
              }
            ],
            "outputs": [
              {
                "id": "chembl",
                "semantic": "ChemicalSubstance"
              }
            ],
            "parameters": {
              "chemical_id": "HGNC:{input1}"
            },
            "response-mapping": {
              "$ref": "#/components/x-bte-response-mapping/gene-chemical"
            },
            "supportBatch": false
          },
          "contraindication": {
            "inputs": [
              {
                "id": "chembl",
                "semantic": "ChemicalSubstance"
              }
            ],
            "outputs": [
              {
                "id": "mondo",
                "semantic": "DiseaseOrPhenotypicFeature"
              }
            ],
            "parameters": {
              "chemical_id": "CHEMBL:{input1}"
            },
            "response-mapping": {
              "$ref": "#/components/x-bte-response-mapping/chemical-disease"
            },
            "supportBatch": false
          },
          "partOf": {
            "inputs": [
              {
                "id": "hgnc",
                "semantic": "Gene"
              }
            ],
            "outputs": [
              {
                "id": "panther",
                "semantic": "GeneFamily"
              }
            ],
            "parameters": {
              "chemical_id": "HGNC:{input1}"
            },
            "response-mapping": {
              "$ref": "#/components/x-bte-response-mapping/gene-genefamily"
            },
            "supportBatch": false
          },
          "treats": {
            "inputs": [
              {
                "id": "chembl",
                "semantic": "ChemicalSubstance"
              }
            ],
            "outputs": [
              {
                "id": "mondo",
                "semantic": "DiseaseOrPhenotypicFeature"
              }
            ],
            "parameters": {
              "chemical_id": "CHEMBL:{input1}"
            },
            "response-mapping": {
              "$ref": "#/components/x-bte-response-mapping/chemical-disease"
            },
            "supportBatch": false
          }
        },
        "x-bte-response-mapping": {
          "chemical-disease": {
            "@context": "http://schema.org",
            "@type": "ChemicalSubstance",
            "bts:chembl": "treats.source_id",
            "bts:contraindication": {
              "$input": "bts:chembl",
              "$source": "robokop",
              "@type": "DiseaseOrPhenotypicFeature",
              "bts:mondo": "contraindicated_for.mondo",
              "bts:pubmed": "contraindicated_for.publications",
              "bts:source": "contraindicated_for.source_database"
            },
            "bts:treats": {
              "$input": "bts:chembl",
              "$source": "robokop",
              "@type": "DiseaseOrPhenotypicFeature",
              "bts:mondo": "treats.mondo",
              "bts:pubmed": "treats.publications",
              "bts:source": "treats.source_database"
            }
          },
          "gene-chemical": {
            "@context": "http://schema.org",
            "@type": "Gene",
            "bts:associatedWith": {
              "$input": "bts:hgnc",
              "$source": "robokop",
              "@type": "ChemicalSubstance",
              "bts:chembl": "literature_co-occurrence.chembl",
              "bts:source": "literature_co-occurrence.source_database"
            },
            "bts:hgnc": "literature_co-occurrence.source_id"
          },
          "gene-genefamily": {
            "@context": "http://schema.org",
            "@type": "Gene",
            "bts:hgnc": "part_of.source_id",
            "bts:partOf": {
              "$input": "bts:hgnc",
              "$source": "panther",
              "@type": "GeneFamily",
              "bts:panther": "part_of.panther",
              "bts:pubmed": "part_of.publications",
              "bts:source": "part_of.source_database"
            }
          }
        }
      },
      "info": {
        "contact": {
          "email": "patrick@covar.com",
          "name": "Patrick Wang",
          "url": "robokop.renci.org"
        },
        "description": "An API for answering biomedical questions",
        "termsOfService": "https://robokop.renci.org/termsofservice/",
        "title": "ROBOKOP",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/simple/expand/chemical_substance/{chemical_id}/disease_or_phenotypic_feature/",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "chembl id",
                  "example": "CHEMBL:CHEMBL744",
                  "in": "path",
                  "name": "chemical_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A association object",
                  "x-bte-response-mapping": {
                    "$ref": "#/components/x-bte-response-mapping/chemical-disease"
                  }
                }
              },
              "summary": "retrieve diseases related to chemical",
              "x-bte-kgs-operations": {
                "contraindication": {
                  "$ref": "#/components/x-bte-kgs-operations/contraindication"
                },
                "treats": {
                  "$ref": "#/components/x-bte-kgs-operations/treats"
                }
              }
            }
          }
        },
        {
          "path": "/simple/expand/gene/{gene_id}/gene_family/",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "hgnc id",
                  "example": "HGNC:1771",
                  "in": "path",
                  "name": "gene_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A association object",
                  "x-bte-response-mapping": {
                    "$ref": "#/components/x-bte-response-mapping/gene-genefamily"
                  }
                }
              },
              "summary": "retrieve gene family related to gene",
              "x-bte-kgs-operations": {
                "partOf": {
                  "$ref": "#/components/x-bte-kgs-operations/partOf"
                }
              }
            }
          }
        },
        {
          "path": "/simple/expand/gene/{gene_id}/chemical_substance/",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "hgnc id",
                  "example": "HGNC:1771",
                  "in": "path",
                  "name": "gene_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A association object",
                  "x-bte-response-mapping": {
                    "$ref": "#/components/x-bte-response-mapping/gene-chemical"
                  }
                }
              },
              "summary": "retrieve chemicals related to gene",
              "x-bte-kgs-operations": {
                "associatedWith": {
                  "$ref": "#/components/x-bte-kgs-operations/associatedWith"
                }
              }
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "https://robokop.renci.org/api"
        }
      ],
      "tags": [
        {
          "name": "translator"
        },
        {
          "name": "reasoner"
        }
      ],
      "~raw": "H4sIAF9ial4C_-1XW2_bNhT-K4KWx9lKtgIB_JSmW9NhFxvrQx-GwaCoI5uLRaoklSUw9N97DkldbMlRvBbDBjQPtkOeC893Pn4k97EqQbJSxIso_n5-Ob-Mv41iIXOFA_v4AbQRStLklZ_iSlrGrZuFgokdzZXMasHvb7h6YHrOVUGWkhVAkys_GX1gckPjlXY-WqXqXpVzDZKLudKbuMbJDAzXorQh6WsZvV79FOVKR0yav0ELuYlSoQrIBGe76GMFhmwNBbagC7PM34N-ENyl3lpbmkWSDHIlzlblxtsmzl3YnfP6fXm7_Hm5cushA8QAh__YNys_HZVwHBax0iqrOP0X-XBx_SflY5sQt0HKaixyx6zSlLsb18CMko0fgr01Dv_EiKLcQQKPJZNZwrdQECprU6XGMol17dsxkdVJJgxGgrXS63ILUtmnUvB1DsxWGjGgkBvwrTVVUTD95LNj_-ABouBuIg24SMgiq6ImfuwWpnHBtoWrWX5vDZ5cgTLbEazINt1F3lLDx0poyHDC6gpwBB4ZVUyWb979-OvtLwv_df3qFTkYcmeuAKzNmRlLnIlrB50GUyJZwMP33eWl-z7mXMSMUVww1zGV_gVId3R-nKUWZk2IWcHKkiJThAsNObl-kyD3cRqkNcm4fdulWYATl1a30e83ZoYbUjNPalcIdt-aqTSHjklwqsOG1UxI2jChxHMiDdxrv94j7m1AItvo0zHN_chZIXZP07wi48gb96lFw8_RKiSbpNR2I_lLCPXu7rc3i6vr66v_C5MIgBl9eOymiIQ42mV-ZvuD04uaPqI_k71vfMzXzp_b-VZ6J_rerASyDwJhOq__R851IELn5uK9RLyELCsbGimyTusd5oi4tII7XQ9lvW9I5E89Vdlj_0LJTB27_-BVdalX7Qn31h9wzenZ49T-4GzqDpW9W-xV7a8AVVkqbW-Z5YRejmSFHg--5EFwSq6_Yvci7HoKN0SMxOC44DsSmlMQocTZLV66RnzeBsGdBsVJy78CyfA0wKgje_8LIHMW-f5T-Ixq5mjoAcNo8IZ2Jzza5hWAjwB_XLj3Cwa8aY6MIRg4m1qzCNi52z5p49yoSvPmOCOLnma24Z7ZmcHLb-gubLvBadLnGCbNmGUpFRfsyiot3BnZ2OHALgiRe2JduE6RQa8WGu8yhFeR66UzGhO0f1LYQSDI1vgoPFXlmOlkyWNOn1M_AXC8Kc8j0V24B1Eut0kXXuPWKh_Spid-BwGCVrVWXtR6kXo6d4jiUarTyLWRnkWrkZmLfgafusOq3aCfj9ROWLqLIJXWXM0U55WmlzoMoRtRyXM28slEHT8OgZ1aWR_pSQw7vuHfJ-z0Zi_PEQAA"
    },
    {
      "_id": "71add13e7c8b26b0046cfb8cf5092395",
      "_meta": {
        "ETag": "c3e9efda214faf29ead30a16ed20aee20a6852bf25db7175ca58af10bbcb8f78",
        "github_username": "kevinxin90",
        "timestamp": "2020-03-12T16:20:50.656877",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:22.140924",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/chembl/smartapi.yaml"
      },
      "_score": 1.2087345,
      "components": {
        "x-bte-kgs-operations": {
          "target": {
            "inputs": [
              {
                "id": "chembl",
                "semantic": "ChemicalSubstance"
              }
            ],
            "outputs": [
              {
                "id": "chembl",
                "semantic": "Gene"
              }
            ],
            "parameters": {
              "molecule_chembl_id": "{input1}"
            },
            "response-mapping": {
              "$ref": "#/components/x-bte-response-mapping/drug-mechanism"
            },
            "supportBatch": false
          }
        },
        "x-bte-response-mapping": {
          "drug-mechanism": {
            "@context": "http://schema.org",
            "@type": "ChemicalSubstance",
            "bts:chembl": "chembl",
            "bts:target": {
              "$input": "bts:chembl",
              "$source": "chembl",
              "@type": "Gene",
              "bts:action": "mechanisms.action_type",
              "bts:chembl": "mechanisms.target_chembl_id",
              "bts:mechanism": "mechanisms.mechanism_of_action"
            }
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@chembl.org",
          "name": "chembl help desk",
          "x-role": "responsible developer"
        },
        "description": "The ChEMBL API",
        "termsOfService": "http://www.ebi.ac.uk/chembl",
        "title": "ChEMBL API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/data/mechanism.json",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "chembl id",
                  "example": "CHEMBL744",
                  "in": "query",
                  "name": "molecule_chembl_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A drug mechanism object",
                  "x-bte-response-mapping": {
                    "$ref": "#/components/x-bte-response-mapping/drug-mechanism"
                  }
                }
              },
              "summary": "retrieve drug mechanism",
              "x-bte-kgs-operations": {
                "treats": {
                  "$ref": "#/components/x-bte-kgs-operations/target"
                }
              }
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "http://www.ebi.ac.uk/chembl/api"
        }
      ],
      "tags": [
        {
          "name": "publication"
        },
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIAGJhal4C_7VUy27bMBD8FUHNMZacNkCBnJIURVugRQOktyIwKGptMREfIZd5wNC_d5eUbTlOkV56ksSdmX0NtS6tAyOcKs-K8kM1r-blcVEqs7R0sC4fwAdlDQdPcggV9sDfn7rPPy6_FxdX3_i4hSC9cjiCf3VQ7AMQvA4_l9fgH5RMAh2iO6vrx8fHChpVCVnFu1p2oJueCdIaFBJTGUboRMnRooPeFZTxjnFPM29zRR6CsyaopgeKPkBPrXmGgBaqTymJeJ5FKutX5TBQNFBJ1CbFf6_L6Ps3aqt5WIcdX3nbRslfRRYshxtuW6xG5U0PLja9kiLxKP0ugF6Y0Au0I9UJ7EJqv24FilqD7IRRQVe3IeVclyvI8wlRa-Gf8xDQK2q-aH1cFVtOmQQ9pcJtr5vEmuYnYw-L3OBCtdkDHLuPQLqH7Y6byFAP91F5aCmAPgJP_EloN_rkK9vg4-kpIwPzRKoZn12KB6rX8CpujrcrhNz3-_k8PV_kvnjRW2GbWyCnJDM0CLONykwL51icRY48LJn9rpZWUxgMhvp1fM36s93shuSTjL1bhRn7Ki0wl4keBIa3kuwTaxSetzcMWXwHTzp_z5Vp_KqMiziuUrW7paQ505QNKpkvKmgyXH8dm4DC0OVLo7YR_43_BQxsHDkx0Po13xB8neo6Gcp0t6Jz1uOlQNlRcCn6AJM1_48Fvar9As9H5_yDgSecXPfszvRnILnzjUMPB0jRBsPZOK-9yfH5ZElbkTTFA962pFBl0v4dZLCQG99PwPlwkcRH3LS7KXT7urDLxShGlKO0JsZOKuLzYKOXk79ttugfw56zNygGAAA="
    },
    {
      "_id": "dc91716f44207d2e1287c727f281d339",
      "_meta": {
        "ETag": "6cdccba1c4582bb766840c7a935ed312f5a0b2123118f4e6df4724ab78854e7a",
        "github_username": "kevinxin90",
        "timestamp": "2020-08-26T00:09:32.585769",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:46.444012",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/biothings_explorer/smartapi.yaml"
      },
      "_score": 1.1506652,
      "components": {
        "schemas": {
          "BiolinkEntity": {
            "description": "A subclass of named_thing (snake_case)",
            "example": "disease",
            "externalDocs": {
              "description": "Biolink model entities",
              "url": "https://biolink.github.io/biolink-model/docs/NamedThing.html"
            },
            "type": "string"
          },
          "BiolinkRelation": {
            "description": "A relation, i.e. child of related_to (snake_case)",
            "example": "affects",
            "externalDocs": {
              "description": "Biolink model relations",
              "url": "https://biolink.github.io/biolink-model/docs/related_to.html"
            },
            "type": "string"
          },
          "Credentials": {
            "description": "Credentials needed for programmatic access to the remote knowledge graph",
            "properties": {
              "password": {
                "description": "Password needed for programmatic access to the remote knowledge graph",
                "type": "string"
              },
              "username": {
                "description": "Username needed for programmatic access to the remote knowledge graph",
                "type": "string"
              }
            },
            "required": [
              "username",
              "password"
            ],
            "type": "object"
          },
          "EdgeBinding": {
            "properties": {
              "kg_id": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "qg_id": {
                "type": "string"
              }
            },
            "required": [
              "qg_id",
              "kg_id"
            ],
            "type": "object"
          },
          "KEdge": {
            "description": "An edge in the thought subgraph linking two nodes",
            "properties": {
              "id": {
                "description": "Local identifier for this node which is unique within this KnowledgeGraph, and perhaps within the source reasoner's knowledge graph",
                "example": "553903",
                "type": "string"
              },
              "source_id": {
                "description": "Corresponds to the @id of source node of this edge",
                "example": "https://omim.org/entry/603903",
                "type": "string"
              },
              "target_id": {
                "description": "Corresponds to the @id of target node of this edge",
                "example": "https://www.uniprot.org/uniprot/P00738",
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/BiolinkRelation"
              }
            },
            "required": [
              "id",
              "source_id",
              "target_id"
            ],
            "type": "object"
          },
          "KNode": {
            "description": "A node in the thought subgraph",
            "properties": {
              "id": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "type": "string"
              },
              "name": {
                "description": "Formal name of the entity",
                "example": "Haptoglobin",
                "type": "string"
              },
              "type": {
                "description": "Entity type of this node (e.g., protein, disease, etc.)",
                "example": [
                  "protein"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "KnowledgeGraph": {
            "description": "A thought graph associated with this result. This will commonly be a linear path subgraph from one concept to another, but related items aside of the path may be included.",
            "properties": {
              "edges": {
                "description": "List of edges in the KnowledgeGraph",
                "items": {
                  "$ref": "#/components/schemas/KEdge"
                },
                "type": "array"
              },
              "nodes": {
                "description": "List of nodes in the KnowledgeGraph",
                "items": {
                  "$ref": "#/components/schemas/KNode"
                },
                "type": "array"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "Message": {
            "properties": {
              "knowledge_graph": {
                "description": "KnowledgeGraph object that contains all the nodes and edges referenced in any of the possible answers to the query OR connection information for a remote knowledge graph",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/KnowledgeGraph"
                  },
                  {
                    "$ref": "#/components/schemas/RemoteKnowledgeGraph"
                  }
                ],
                "type": "object"
              },
              "query_graph": {
                "$ref": "#/components/schemas/QueryGraph",
                "description": "QueryGraph object that contains a serialization of a query in the form of a graph",
                "type": "object"
              },
              "results": {
                "description": "List of all returned potential answers for the query posed",
                "items": {
                  "$ref": "#/components/schemas/Result"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "NodeBinding": {
            "properties": {
              "kg_id": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "qg_id": {
                "type": "string"
              }
            },
            "required": [
              "qg_id",
              "kg_id"
            ],
            "type": "object"
          },
          "QEdge": {
            "description": "An edge in the QueryGraph",
            "properties": {
              "id": {
                "description": "QueryGraph internal identifier for this QEdge. Recommended form: e00, e01, e02, etc.",
                "example": "e00",
                "type": "string"
              },
              "source_id": {
                "description": "Corresponds to the @id of source node of this edge",
                "type": "string"
              },
              "target_id": {
                "description": "Corresponds to the @id of target node of this edge",
                "type": "string"
              },
              "type": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkRelation"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkRelation"
                    },
                    "type": "array"
                  }
                ]
              }
            },
            "required": [
              "id",
              "source_id",
              "target_id"
            ],
            "type": "object"
          },
          "QNode": {
            "description": "A node in the QueryGraph",
            "properties": {
              "curie": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "id": {
                "description": "QueryGraph internal identifier for this QNode. Recommended form: n00, n01, n02, etc.",
                "example": "n00",
                "type": "string"
              },
              "type": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkEntity"
                  },
                  {
                    "description": "Entity types of this node (e.g., protein, disease, etc.)",
                    "example": [
                      "disease",
                      "genetic_condition"
                    ],
                    "items": {
                      "$ref": "#/components/schemas/BiolinkEntity"
                    },
                    "type": "array"
                  }
                ]
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "Query": {
            "properties": {
              "message": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "required": [
              "message"
            ],
            "type": "object",
            "x-body-name": "request_body"
          },
          "QueryGraph": {
            "description": "A graph intended to be the thought path to be followed by a reasoner to answer the question. This graph is a representation of a question.",
            "properties": {
              "edges": {
                "description": "List of edges in the QueryGraph",
                "items": {
                  "$ref": "#/components/schemas/QEdge"
                },
                "type": "array"
              },
              "nodes": {
                "description": "List of nodes in the QueryGraph",
                "items": {
                  "$ref": "#/components/schemas/QNode"
                },
                "type": "array"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "RemoteKnowledgeGraph": {
            "description": "A thought graph associated with this result that is not repeated here, but stored elsewhere in a way that can be remotely accessed by the reader of this Message",
            "properties": {
              "credentials": {
                "$ref": "#/components/schemas/Credentials",
                "description": "Credentials needed for programmatic access to the remote knowledge graph",
                "type": "object"
              },
              "url": {
                "description": "URL that provides programmatic access to the remote knowledge graph",
                "example": "http://robokop.renci.org/api/kg",
                "type": "string"
              }
            },
            "required": [
              "url",
              "credentials"
            ],
            "type": "object"
          },
          "Result": {
            "description": "One of potentially several results or answers for a query",
            "properties": {
              "edge_bindings": {
                "description": "List of QEdge-KEdge bindings.",
                "items": {
                  "$ref": "#/components/schemas/EdgeBinding"
                },
                "type": "array"
              },
              "node_bindings": {
                "description": "List of QNode-KNode bindings.",
                "items": {
                  "$ref": "#/components/schemas/NodeBinding"
                },
                "type": "array"
              },
              "score": {
                "description": "Any type of score associated with this result",
                "example": 163.233,
                "format": "float",
                "type": "number"
              }
            },
            "required": [
              "node_bindings",
              "edge_bindings"
            ],
            "type": "object"
          }
        }
      },
      "info": {
        "contact": {
          "email": "kevinxin@scripps.edu",
          "name": "Jiwen Xin",
          "url": "https://github.com/kevinxin90"
        },
        "description": "A ReasonerStdAPI for BioThings Explorer",
        "termsOfService": "https://biothings.io/about",
        "title": "BioThings Explorer ReasonerStdAPI",
        "version": "1.0.0",
        "x-reasoner_standard_version": "0.9.1"
      },
      "openapi": "3.0.1",
      "paths": [
        {
          "path": "/metakg",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "The subject type of the association, e.g. Gene",
                  "example": "Gene",
                  "in": "query",
                  "name": "subject",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The object type of the association, e.g. ChemicalSubstance",
                  "example": "ChemicalSubstance",
                  "in": "query",
                  "name": "object",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The predicate of the association, e.g. Gene",
                  "example": "physically_interacts_with",
                  "in": "query",
                  "name": "predicate",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The API providing the association, e.g. MyChem.info API",
                  "example": "MyChem.info API",
                  "in": "query",
                  "name": "api",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The data source providing the association, e.g. drugbank",
                  "example": "drugbank",
                  "in": "query",
                  "name": "provided_by",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "description": "Array of all associations",
                        "items": {
                          "properties": {
                            "api": {
                              "description": "The api providing the association, e.g. MyChem.info",
                              "properties": {
                                "name": {
                                  "description": "The api providing the association, e.g. MyChem.info",
                                  "example": "MyChem.info API",
                                  "type": "string"
                                },
                                "smartapi": {
                                  "description": "smartapi related data",
                                  "properties": {
                                    "id": {
                                      "description": "unique smartapi id for the api",
                                      "example": "8f08d1446e0bb9c2b323713ce83e2bd3",
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "description": "the url for smartapi specification",
                                      "example": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/mychem.info/openapi_full.yml",
                                      "type": "string"
                                    },
                                    "ui": {
                                      "description": "the web UI url for the API",
                                      "example": "https://smart-api.info/ui/8f08d1446e0bb9c2b323713ce83e2bd3",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "object": {
                              "description": "The object type of the association, e.g. ChemicalSubstance",
                              "example": "ChemicalSubstance",
                              "type": "string"
                            },
                            "predicate": {
                              "description": "The predicate of the association, e.g. physically_interacts_with",
                              "example": "physically_interacts_with",
                              "type": "string"
                            },
                            "provided_by": {
                              "description": "The data source providing the association, e.g. ChEMBL",
                              "example": "ChEMBL",
                              "type": "string"
                            },
                            "subject": {
                              "description": "The subject type of the association, e.g. Gene",
                              "example": "Gene",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "Association information including subject, object, predicate, api, provided_by and smartapi info."
                }
              },
              "summary": "retrieve associations within smartapi, if no parameters provided, will return all associations"
            }
          }
        },
        {
          "path": "/predicates",
          "pathitem": {
            "get": {
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "additionalProperties": {
                          "additionalProperties": {
                            "description": "Array of predicates",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "description": "Target map",
                          "type": "object"
                        },
                        "description": "Source map",
                        "example": {
                          "chemical_substance": {
                            "chemical_substance": [
                              "correlated_with"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Predicates by source and target"
                }
              },
              "summary": "Get supported relationships by source and target"
            }
          }
        },
        {
          "path": "/query/",
          "pathitem": {
            "post": {
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": {
                      "message": {
                        "query_graph": {
                          "edges": [
                            {
                              "id": "e00",
                              "source_id": "n00",
                              "target_id": "n01"
                            },
                            {
                              "id": "e01",
                              "source_id": "n01",
                              "target_id": "n02"
                            }
                          ],
                          "nodes": [
                            {
                              "curie": "MONDO:0005737",
                              "id": "n00",
                              "type": "disease"
                            },
                            {
                              "id": "n01",
                              "set": true,
                              "type": "gene"
                            },
                            {
                              "id": "n02",
                              "type": "chemical_substance"
                            }
                          ]
                        }
                      }
                    },
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "A message with question graph.",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Message"
                      }
                    }
                  },
                  "description": "A message with knowledge graph and answers."
                }
              },
              "summary": "Get answers to a question",
              "tags": [
                "0.9.2"
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "url": "https://api.bte.ncats.io"
        }
      ],
      "tags": [
        {
          "name": "0.9.2"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIAD2oRV8C_91abZPTOBL-K6rcVd1e1YyTmSyvnxZYjuMWGBig6qooKiXbSqIdWzKSPCFH8d-vuyU7tmMHZ2a4D8eH3aDo5VHr6e6nO3yb6EIoXsjJYzaZR7PobHLCJlItNQx8myRaOZ44-ixyLjOcdiWupfoq1W82MbIobCTSElcpngv8_l9yIxT7t1Q4WBpas3ausI-n05V06zKOEp1Pq20ezSbfYWIqaDsntcIFT9il4FYrYd679Mnbl2ypDXsq9Ye1VCvLnn8tMm2EwSOcMLm9WL4X5lomonlaLLWj-ZHUUx7r0tF86TKatr9d51CcfS2MDZjOwD4zHPt6asK8hXVcpdyki8a8WfQI7IiXsoAJxmHw07euKcDoUexEpBLuEODk-2cEx1dhemVO3O0cd9sNOcOVzbjTpj1e39fvVXC3tvR201w4frWizyvh39OWec7NFtcZ4YwU14Jxa3UiOT6CZRuJmzELsxyAPWFyyZRmBTdwHBjdssLoa5mK9ATmZhmDbUqjGIePzY0mBKVa5C8nyVBfSgEAGtSxZfynSOiVbLIGxhFSty38t4BSrfrY8mEtWFjLcDbTS-bWrfucMBGtIvZCKIHbi688LzwNaIjsOIBK3xyUHoPpGWwqE569L2OkU9IFuP_9IbSFESnMduJGgOvVR5mwWG8tIsy2C6nglSFm2AXy5yBSDDs3wYjhwFMPJg2AfL1Fq0UYyVjw5Abe7reH7elJvoi3N0KbcseZ1aVJxA9Rp6ZcxVxddeDWw-TWRtgC3Ep41z6fzej_3fi525vhNU1efU6ykhAEfzkJHD3ZPf0JI3dvXJxBkKsDAe0XIURMD0L5cMKLIsPVcMj0T0sgvjWN1cVnDN8ix_qiRWVYjpMoITmR25bNdz4JMAthnAz2qEJIzwP9pLhRYRl94s8LCg3nH41mhMcPu_cRYaDlSKPRHeM9z9bPXz99tWcnGkQAXub0cajnYCT6EUGmh4khgIy86A3OOxzQJpW_jrtz7d1GgLIQKVm-51aoJOirUTfDe4DuIfVWn2ALkchlCBadi1TqyPBN5MViCSIqBBrSjW-ePfnw_vQDVysBh4rpTgydwuagzFYS4GynObdAwWm-TSrLTIPWXSzLLIu2eUZmKuX4q2xEzD6-rG_kfDIauALdFzH5w0s5fbicPUzPfv31vpjF8aPkPJ6fzx-czRPxcC7O43ROeGQ6Dk-pJOSqRlROa0whsTYw_fjk1h9YPK3jgh2SjS-Eg-hZFNogX4g3GMHXsrAMckbwWkwdjhtcPzZ5va2PHtznFqnnvd8v50Uz1-wcg6epxLk8e9umftdrCczt96lTYcPi45JgJTzowXavDXVbSA4LW2eHweFPYEsTnN4H688tHpAgmtL6QltvcSNg1LqnOt3WdeLB12iCy4W1fOU_0-aLleHF2s9LV6IqEdAPJmJGFZfnwMKPKT_myVCPnQUVF5ad9Sw761l27kWV0ml1cFJCMURB9eLN7xePZ7PZvQfzB5PKNevjwyOk0kIxKJqnh5MsuYwzpWhMX-2qjRpB4-ueJ_r-2b9Eg9F_NWKJs_8yhYgI_gS2t1P_vZ2-IwXr1-xV1cH4VNwxekRUhfQAkffPL6UEHgbg3wdd9hgHPAj3daDDGMBXSm8y5IhHTDEBov8G6spo4o3UDk_hS-Y04_V1J406O5TXwcQ7eI0r-M9Ppc6kunqunHTbXjdGJZlkkLXRlzH5pwuqxtkvVvErsUiAJX_vKvtAHhqFdAXB4ned9IaJAIDlwNSMCcQhfaToNBZiPzGkT2x9hJFTWjpN4YDpG8RH3Y9o7UIm7KlnwqGXIbb337uK_CdMRiJiyVpmKdqgCipg_AMm4MslBEx7vAnqhHNTG-zwHbTBM3AHNDfPekE1vmZKwGefh0E2AUdzLLsSxpMEaIwsxPRsRK5BbnfI3KO1CiDTRpu0N0eG7259Zs-NUXLV6rVz7sfw3Z2f-70dfT7tUFD_KFji836qxYXPYeunUqF29pZrG_JqtQiyCrz7Yunj_P7Fvx3IsXsZGcIyjH2pd_7hffxUGPVoBm7yB16l188UIwNKRYZ1a12u1ijAYh8Lkd1UOmw089lsn1Cyl0qvNCQc0I_I4qUUJuhIaWkftlnLZM3gb0Fxhr4gTfijetcXiOGEAjIcuOaF3c0TlYSruqZ_s32EaMSEe_fmj2bzAXY2k_q-N6KWwXyV1hT8TVI0ChjoSlTpAnwEMKDedS7zSJvVFKwC-uf-7ACipqQ4ApFfNhrRZrOJ4AngSR0BC5-nb2ezB_OHQ9D80A9ycDfM75PXM3dn-tath6j8Bm7WnzLozgNMHs3bZx8vXz4f5G3HihevX75-fPAVhyLeP7B5llFGr1okwquA9gn_5IXTq0zH_pePQ4_ROcGLikZDqHK9X7Dsp06cExLya5ALJ0y4JOok0k-TMI2e45hA1vfYQ0_a8vf-t63eM0i00MWAVEESji4HDlFmLmIf8C_02wGQMtcq27IYKj2MZYJDXuGwoA5wS6NzBsSFuSCLC0eiTml4D3PC4tLVnQu6Oxws0_rBaKec0_a-BSrSqIdoVf2xHyOldbgZTaiY27FGy-wH_c0H-Z6naFQigxBowu0hkHOOYUOdTLxxBpjxulHVdbNvhbFR6HXu1r5G3SFdc8foN0ipLHWK8cr-_php_GPALYURQIkUjcLVtn50ba2MM9GsAnCcik52cYlbKzin2yPHMMIPKJeGhjhs4vbbkMA4uOCSjuwuGzB4t3T-cU1YU6Rj_N2XA4ZnoMRA38r_ePtg1z4YMbAQbeeH9-RdA7H3-oPc5vXPiPCahXZeWNcPWDW4_OHwviI9gvKXdP4Q53sAo4v8f6jKdyNVZZsno7Jwgz3U9FcDWpIgROxSYKgXKtQO-WMmZjNIaLMz_M-5T22dzCraHZefqwX_N_rukDoYG1_2VFuba8eu3WfinajAd-NU4EHmVS25O5WAd-20t3QPNFOfeyh0D4XuoQbcQw26x00pFbpcZIdhrWpvI1YbnS9siTqZLCDh-I55R8Eeh3gcjYfISr3TnljfbFqPbGd2T622-Nz7a8HX01in29PqXx2EDvsCB3fIDqjuVU0x4g5Eoli0yiuSwH54qbNMb2AW_rJfV-VeT2OirXIsdUuDSg_7W1pQQMSDW7flgJ99a1HdDgQjWfDuzgT1zY6_YzHdKwRvV2x5TUe-ipVSIWgW1E7CF0_WacDIRGbFBkdJS7MNlExeDHKFzPGiGMo03-XzFPJ9Pp4CcaqAUHlBTyjvdFMP2rXZet3XrXfZee15BN9S3m-AXr7yJgn_nsHe7MBOgwd_8taxvtJFhLWMpA4PL-T0ajWuWQpg8QeMhsEGuUUquOdmF4p0Si274ZmtuBaGZ4FDEPBNS4uHMmDA5xex184HnY8895QKYlbNj45wvWbnd9j_x0FBLz6lwvhGUJrlQj8Um4CT9cvwXfuHJh1y5TZ9zu7Po_P5HMZ8BYvbLTPNXZM3qsxjYQbi0c44IS7tBvo4BH_-C5l9Hy83LAAA"
    },
    {
      "_id": "c806f9a29e61e08a333260ee27a7d7e4",
      "_meta": {
        "ETag": "d44767bc4953a5d7390e363e8844167f0b6f8efdd0d0004e60dd31c93444b7c0",
        "github_username": "newgene",
        "timestamp": "2019-10-22T04:30:10.522095",
        "uptime_status": "unknown",
        "uptime_ts": "2020-09-17T00:09:01.230414",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/ebi_ontology_lookup_service_api/openapi.yml"
      },
      "_score": 1.0804154,
      "info": {
        "contact": {
          "email": "ols-support@ebi.ac.uk",
          "name": "Jupp S.",
          "x-id": "https://github.com/EBISPOT/OLS",
          "x-role": "responsible developer"
        },
        "description": "The Ontology Lookup Service (OLS) is a repository for biomedical ontologies that aims to provide a single point of access to the latest ontology versions. You can browse the ontologies through the website as well as programmatically via the OLS API. OLS is developed and maintained by the Samples, Phenotypes and Ontologies Team at EMBL-EBI.",
        "termsOfService": "https://www.ebi.ac.uk/ols/docs/about",
        "title": "EBI Ontology Service API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "The terms to search. By default the search is performed over term labels, synonyms, descriptions, identifiers and annotation properties.",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  },
                  "x-requestTemplate": [
                    {
                      "template": "{{input}}&ontology=doid",
                      "valueType": "http://biothings.io/concepts/disease_name/"
                    }
                  ],
                  "x-valueType": [
                    "http://biothings.io/concepts/disease_name/"
                  ]
                }
              ],
              "responses": {
                "200": {
                  "description": "A query response object with \"hits\" property",
                  "x-JSONLDContext": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/ebi_ontology_lookup_service_api/jsonld_context/ols_query_1.1.json",
                  "x-responseValueType": [
                    {
                      "path": "response.docs.obo_id",
                      "valueType": "http://identifiers.org/doid/"
                    }
                  ]
                }
              },
              "summary": "The search API is independent of the REST API and supports free text search over the ontologies. The default search is across all textual fields in the ontology, but results are ranked towards hits in labels, then synonyms, then definitions, then annotations."
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "https://www.ebi.ac.uk/ols/api"
        }
      ],
      "tags": [
        {
          "name": "ontology"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIANKFrl0C_5VVXYvbRhT9K4MeSgtraTd9CxSym-5DwiZealMIzWJG0rU02dFcZT7sFcb_vWdGku1uQ6EGY83ofp57zvUh456M7FX2VmS_5tf5dXYlMmW2jItDtiPrFJv48mZ85ZXXFM_3dx_E0njW3AxiRXanKhK3jx-iUU2usqr3k-u6pbPpA_Nz6E8ePy8fVr8I5YQUlnp2yrMdxJatKBV3VKtKasGjsyInfCu9kKrDE4ve8k7VBF-nTKNJ9KyMF7wVsqrIJRuP5Fp6cn4OM4ipLZeLLxxEJY0oLe8dJeN_JLMcmjZd76lEccjl8Kh1_EX6xsqukz5WqRFXyWSLniIUeXpAbzXtSAPoWkhTi06iSHxxLIdkv5Jdr8ldiceWDPuhR-5ouTyXsibZCbR-_-nuYQHs8zQMsp1bbicsI9St9717WxT7_T6nUuWyysNzwdoVNVeukCUHHz0rdCkrn4ZsZJd8P4Yec0mBXxaWxzFbcj2QUiXQnduw0YTQho4WCL5wcGXr351SjkFUfVlTo3wbyrzirkADq8flugA-2fEIW4cWMBSY_3XIgtX_3Uvk679p9mi5DlU8iTFcdnyKIMlmijs3OvMgQ-bz7fdA9tWVt9I4kIenUL30rUuYFaN1fGxohNEFMCHdJcI7krZqIw0iA5SpCUKraaRnHPof96t1eh0nPQHoxNYSaEgvfg7AaOQVL3MRE9S0lUGf7KKEKssgPaiYIgQoZ6tI1zH9ZYjhSpTBQ28O_rC3JNDoM_joeS8t7Fvlk5OWJWnwEs4AdTBshm4-Ir8yKsI930gD8sp0k1jUS6iD_GmuJ6THHXMG_ccrI7E7SnjsMBd3w6lpf0YYjYOS2BjYFhNacDyVfq76IgVOKs5CAR87au1cfNQ1IvqIdCzN0vegLEUuexsoMXsndaA1hBo7S0wFUbGxfItF5HLFBRRWUe8hPIVCHW1i90X2NKoLIbGR1gTdYzeN8FzG_D8h0yI4BcoOB2X64I_Hn-Zx_1YzlJgY7KoWwk189VMm5y0SQIZPVye508jyN9fX6ffVcG5FGpuYjQWX36jyYg-Bi69ZJM_XbEZxmPbJZPvnJXCHpKiLNUN5XFM5l7xBxXD8ESYXk8vZNkXsrhjbe1l8XC0_P_z-Hq1DAZdbxMp9Pm6ggO0Q9x-ipGX0-f3terVYS9MQkKDirPoFFg0qbxQwGopOOjCrwCrazMhudPo327hxA29gX3xzbHS9qcYS4r7aJLg2N_lNHl8C6vj5G0dXRNJ7BwAA"
    },
    {
      "_id": "1066244f2976e931654394581255630e",
      "_meta": {
        "ETag": "fd59a6875c1f41a81a692305ec66117dfdd8113bc35df1fc22988f7bf937e22d",
        "github_username": "kevinxin90",
        "timestamp": "2020-04-29T00:02:48.189637",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:15.805409",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/cord/cord_protein.yml"
      },
      "_score": 0.9909438,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned fields when passed \"fields\" parameter contains dot notation, e.g. \"fields=assoicated_with.pmd\". If \"true\" or \"1\", the returned data object contains a single \"associated_with\" field, otherwise (\"false\" or \"0\"), a single \"refseq\" field with a sub-field of \"rna\". Default: true.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated fields to limit the fields returned from the matching protein hits.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching protein hits to skip, starting from 0. Combining with \"size\" parameter, this can be useful for paging. Default: 0.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "size": {
            "description": "the maximum number of matching protein hits to return (with a cap of 1000 at the moment). Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated fields to sort on. Prefix with \"-\" for descending order, otherwise in ascending order. Default: sort by matching scores in decending order.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "protein2anatomy": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "pr"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/protein2anatomy"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "protein2bp": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "pr"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/protein2bp"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "protein2cc": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "pr"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/protein2cc"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "protein2cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "pr"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/protein2cell"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "protein2chemical": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "pr"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/protein2chemical"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "protein2disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "pr"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/protein2disease"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "protein2gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "pr"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/protein2gene"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "protein2genomicentity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "pr"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/protein2genomicentity"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "protein2ma": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                },
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "pr"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/protein2ma"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "protein2protein": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "pr"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/protein2protein"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "protein2anatomy": {
            "UBERON": "associated_with.uberon",
            "pmc": "associated_with.pmc"
          },
          "protein2bp": {
            "GO": "associated_with.go",
            "pmc": "associated_with.pmc"
          },
          "protein2cc": {
            "GO": "associated_with.go",
            "pmc": "associated_with.pmc"
          },
          "protein2cell": {
            "CL": "associated_with.cl",
            "pmc": "associated_with.pmc"
          },
          "protein2chemical": {
            "CHEBI": "associated_with.chebi",
            "pmc": "associated_with.pmc"
          },
          "protein2disease": {
            "DOID": "associated_with.doid",
            "pmc": "associated_with.pmc"
          },
          "protein2gene": {
            "HGNC": "associated_with.hgnc",
            "pmc": "associated_with.pmc"
          },
          "protein2genomicentity": {
            "SO": "associated_with.so",
            "pmc": "associated_with.pmc"
          },
          "protein2ma": {
            "GO": "associated_with.go",
            "MOP": "associated_with.mop",
            "pmc": "associated_with.pmc"
          },
          "protein2protein": {
            "PR": "associated_with.pr",
            "pmc": "associated_with.pmc"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothinigs.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the CORD Query web services. Learn more about [CORD](http://biothings.ncats.io/cord_protein)",
        "termsOfService": "http://myprotein.info/terms/",
        "title": "CORD Protein API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/protein",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple PROTEIN ONTOLOGY proteinids seperated by comma, e.g., \"ids=387,388\" Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "For a list of protein ids, return the matching protein objects",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/protein/{proteinid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "PROTEIN ONTOLOGY Protein ID, e.g. 387",
                  "example": "387",
                  "in": "path",
                  "name": "proteinid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "description": "A matching protein object"
                }
              },
              "summary": "Retrieve protein annotation object based on pr protein id, support JSONP and CORS as well.",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "CORD API metadata object"
                }
              },
              "summary": "Get metadata about the data available from CORD API."
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Pass a search term to filter the available fields, e.g. \"search=associated_with\".",
                  "in": "query",
                  "name": "search",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Pass a prefix string to filter the available fields, e.g. \"prefix=refseq\".",
                  "in": "query",
                  "name": "prefix",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "MyProtein.info metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from MyProtein.info."
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string. Examples \"PMC6836328\", \"31045\", \"PR:000001978\".",
                  "example": "PR:000001978",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "description": "a single field or comma-separated fields to return facets, for example, \"facets=pr\"",
                  "in": "query",
                  "name": "facets",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "Make protein query and return matching protein list. Support JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms seperated by comma (also support \"+\" or white space), but no wildcard, e.g., \"q=1017,1018\" or \"q=CDK2+BTK\"",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "Specify one or more fields (separated by comma) as the search \"scopes\", e.g., \"scopes=entrezprotein\", \"scopes=entrezprotein,ensemblprotein\". The available \"fields\" can be passed to \"scopes\" parameter are listed [here](http://myprotein.info/doc/query_service.html#available-fields). Default: \"scopes=entrezprotein,ensemblprotein,retired\" (either Entrez or Ensembl protein ids).",
                          "type": "string"
                        }
                      },
                      "required": [
                        "q"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with \"hits\" property",
                  "x-bte-response-mapping": {
                    "$ref": "#/components/x-bte-response-mapping/query-post"
                  }
                }
              },
              "summary": "Make protein batch query and return matching protein hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/protein2gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/protein2protein"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/protein2cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/protein2cc"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/protein2ma"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/protein2bp"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/protein2genomicentity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/protein2chemical"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/protein2disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/protein2anatomy"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://biothings.ncats.io/cord_protein"
        },
        {
          "description": "Production server",
          "url": "http://biothings.ncats.io/cord_protein"
        }
      ],
      "tags": [
        {
          "name": "protein"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIACjEqF4C_-1bbW8bNxL-K8T2PjiotJLjNnEDGLj45VK3saXaPtwdIsPg7lIS693lmuTaVg3_95sh912rlezzAXXhfEgkkkPODJ95pfLgiITFNOHOJ-LsuEN36PSIw-OpgIEHxxexpr42n1lEeYjL5ixM_u5xoec85jPlcoE0MY0Yzv5y_K-jU_Lv41McvO_zwJBonahPg8GM63nqub6IBtfslsf3PP5paBdKERp6yVQiYsW9kJGA3bIQGJTOI6wJmPIlTzQXMS48FH4aMeAPB4iYEj1n5GB0dkh-S5lckDvmEcXkLfeZcslXRmVMIiEZoZ5INfmGSy-3kDNgLBMHpIl9qlGmgS9kcJVIoRmP3yGPmslIjabnds9cLCCOFtkyFxU3MOsGhoJrK5Rha2wXkc_jY5y8ZVJlomyD2lFCZBdGYejbQ1Pco9iXi0SzAPcJUt9IbQlwt1SGVUWvkQdPWzph3b6bbHuJUtNZJkKOidqp-SCNY2Evrz5-g7dXH9KSxiqkWsj6eMGOPTiheq4MVgf5ifglEcoiOKESCHWh4b9JNsVtvgMhIgAdgEkNykWDKWdhoKrgzkYME-uoA6HN8ip9MbbRDtbiKuR2wMgqGehJ6X0RLApLBXrzmSZJyH2j2sF9_-7urj8VMurDVbLYFwELzCrlz2E_qxiJRqY5s9rjgf23gY8oDTVPwCzHZ6OLo-NTMjq9GH0dffkPybQNdIAc2IkiTL0FAbEi2iPMnbk9MsF993Z2P_Z2dncnDjkFGrBZqomfSgm8h2izRMTwr6bXzNgzjxOwVdw4TYgWZHs4HJKI3vMojXpmBfgLTe54GBIPiCOu4WzXGN8iMUpTWgJEnMfHTGtcGgV8M2JePj5mE8brZAp4Pxy2KeAzMdgk-WIivN-Zj6frOYg351qBXJkyF_ZElYIKJN6R8w8hCSUhB37BW2U6Q9l6sKNOwT2hPBHVPmK6WGAPMTDMLatqO5fmmBzwg4fiLh6NCDPWjv2m7TevNHdWx4f2_ghcHLLA7mmUWKeWjRgrM7ZXhWrBhlNXu5YpQ7WU4Gu5pz-_afo0DD3qX1d3KMZewLg3QuMKqCwB74yBaiGUFutK-OQQ9qgCk4Xviawgs0dUmiRCavLL-eh0DHQBRthzQhWYahi6a0AJotKAatqJxP9N1Rury4RgCL0kZ2qVtr4wXa6xuQLapf16C3dEMTWZShGRfE_Xqcubw_MpBkiVAu-gIE3x5wRTCHR3Ux7CR3N-5WizeWaWE8eS7AG98Dl63iv0RxPHLY3ThtSK_iyNs4EhtrOZwJ3xe2JXbsqoJdqDvxW76ebPLnVewFG8EHpOFuNKilfiw4r4HChllA1E1c_JcWX18wQ02QzYKsolR9ZnK7iD8cnBh92dDzvvIQJjSN7ZHv7wo_04Pvs0xD_bP33czW6n4uyrsx0Xd_NndPeK_8Fq6Mfvm1GC76tR4vc2uwDLBWlyzBOI9Cb36UM6RG06lN032EoW7KfUZxqsA3Izkikar8EO7yVy4nTo2a76_xvInyHRbTPPVenu70rEzey29XQ7rwbGUs6YgtzWsangyyZ9J5jJ5hHV7oRRNMPAUgTH7NAl50-IuhYal3jsW6HzxELnprPMsbdlqvmWsoZs0VCJIkGaON8DDMCU7wARjKgEDPRdj3jg8mOB9UngUxmUtdDN3vZw-2MP_tq1dDh0cPjr--_3L361pt80Z2PswH9rcXaeMJ9PF5DCMdzNNDoyl7NVOqGc-XeIJQxFWb4xyXbGSJBzaEf2QNeS_ZHh00aKtpkeA9uIvLBY6JKLWjIwyTAF0vo0xmItgVwCeAKPWB5PClQQChKgOcCSb3MmWdGrabRbAuHbAHmVdXvcuY7C74qT-_bcdy45ZFMKl_tpMxF6YKMYxYCpLQbGDiwdmeWo3yO7tFrFvdus6rxZU3O-rGcbj84vurzbb22-Ta1ybqZR52nWzwn6EbCIcq7kpn29vbC-cViPnS7TQw-5geNEVtv8YsHy9Uz1hTFiEL3LL7Ytz8vr9zMWd6UOnbS1LtjTyX1w_c-m9Z9LCUh7JqWXPJcSlCwiMORYc714tshgBWA7z1ZZwME3qmdfNo2pFhFwf2nxXdItR-iHMuFq8ewLkRqPmdjSa1IsrnlL8KIR2g3NkgZc1FVhVdO-7hSyjOUtzKG3kiI0sQRjL9V5J94aapn43s1ZnLv8SiwoJTBvDTxWBM4jeSehKB4tgaly0SNmVa6bRAGGmuMpLMFaI4-l2xipamxUSv7yqCJtnzhL9bNlvEcEuv47QAPZwuw8VMUhw4kDIb6yR17aZlWA8aIwnXr9rCxANmVMkeUiGCHbXTdVTa9absoTImQ0tleVv9Es3RMoCHGEMVWyWRpSSVIIlwpZEqksHkp62ILF5CmVdMYMDSALQH3LAwYk4IOJOaRHIPkx3VsgsAFdGxxKAJXRfKpwB1DUVIShuMMGrlEI7NklbpELrkFlpcWyVIutrr1CHnFbhGdjJUyx_G5twGJo6eK4zJ7XsQxHtDGMp8Zp5IH64Dpaz0fe1TVPQO2aQgIL04bhoUsOROTxGEeyqI3lbdWy0BC4yrMuuPZpGpqqM6Ez0x8ooDjsFBO5bxeSQ8oyw1c6E8mxul4hZda530TaLNBvZUbk0wSXm_4_tTcYCXz-q-Z1250C5G2AtQJgkb9CgNXIQirIvl0ytr2x7DL66A1A17gXiwOUVMgAL6X0K9iRrc9WZDL7Qt5eKApSV0inkChgdaIu2bNGRhdCH4t5a1bNBNI8DWkW2VmIH6OpTaMaVdWV4dB8tCHBoCcUVFcTZAsBU9WU7a02q8nH8h7bZXWQSklNiuBUC_mWUg-Q92S-tBDX7TAxk5qGq0HU5Npcjf7ww5WQV5ZpJIWMIFdiqdmSOUNRZa7GQFMFm1Ea9Vn9bsBLSw3acm5zlW3_r8i7H5xKbmmPw0e-c2tTQuJGPQtlGM4ydfszgvGZwTAgFFJDP3uzLh-ewdvNhVloCoue6SMHJl2wvywITXjX5vcKCkKcfcW_KF6XyQW71-TEetOxDXrmFVykusnLl1GTlxMIxD6G1s--5rdF6mqXn4zGG6y3r9i11LCIc80MxVyGeXb7VLSIW_olXv4Bmx3Og1Xqt-Hlo1PtJ4CmzH5zRlFkPG1tb8WWbab9sY_OqWz35uXe1XPLw2r1YZVSFjJ_JcgcQE2HCDjINfIGgSYEsHStQQDqyr8SBPa5CMUMK1UghQxcvUGgCQHsJNQgkBfXrxcH_9w_OhudNvn5bORCLBxlvY83KNShULRVangwXbnXC4afv5weNLn5YhqNb9dfv37bfm3efaVZ-HpBcD5qgQBK9uYKVmKh2iWugaL8-edrhcMaXt6AMFt-V6lXCvhc8nrv_-BrW63wdvlL5YHRSu3m85eb13v5h6PjwyY3h_l71BsC6ggoHurq5p8__71iF_Dz0f7xkhfI5DpPPaVp7L8BYtklFC-_ttnZ8ZOFWicSvkZ-i85cHO7ZFl7LbCQSnIXKvmVyJqzGq-2rdedstJPpgrzITmUxvW67rGhtWZB6TNr_x9OsydbtaWqflun5LPab-9Xy_HUbn7fKruqy1_6bUOd24BjaJmX9em3OsW4viO0tk35Y26uMYuu2M9GiZToQPKizV_rEtSwa39PG5Zx5HB-LHv8LJLYx5Ds4AAA="
    },
    {
      "_id": "7cbc3ff9b2d09cb8075715bde740ce4f",
      "_meta": {
        "ETag": "4b422653e9b67d599c545bb67162230b7614170bbd6a25a67f7c39de2d204ed1",
        "github_username": "kevinxin90",
        "timestamp": "2020-04-29T00:02:40.353938",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:15.878799",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/cord/cord_bp.yml"
      },
      "_score": 0.9909438,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned fields when passed \"fields\" parameter contains dot notation, e.g. \"fields=assoicated_with.pmd\". If \"true\" or \"1\", the returned data object contains a single \"associated_with\" field, otherwise (\"false\" or \"0\"), a single \"refseq\" field with a sub-field of \"rna\". Default: true.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated fields to limit the fields returned from the matching protein hits.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching protein hits to skip, starting from 0. Combining with \"size\" parameter, this can be useful for paging. Default: 0.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "size": {
            "description": "the maximum number of matching protein hits to return (with a cap of 1000 at the moment). Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated fields to sort on. Prefix with \"-\" for descending order, otherwise in ascending order. Default: sort by matching scores in decending order.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "bp2anatomy": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/bp2anatomy"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "bp2bp": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/bp2bp"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "bp2cc": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/bp2cc"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "bp2cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/bp2cell"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "bp2chemical": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/bp2chemical"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "bp2disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/bp2disease"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "bp2gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/bp2gene"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "bp2genomicentity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/bp2genomicentity"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "bp2ma": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                },
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/bp2ma"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "bp2protein": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/bp2protein"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "bp2anatomy": {
            "UBERON": "associated_with.uberon",
            "pmc": "associated_with.pmc"
          },
          "bp2bp": {
            "GO": "associated_with.go",
            "pmc": "associated_with.pmc"
          },
          "bp2cc": {
            "GO": "associated_with.go",
            "pmc": "associated_with.pmc"
          },
          "bp2cell": {
            "CL": "associated_with.cl",
            "pmc": "associated_with.pmc"
          },
          "bp2chemical": {
            "CHEBI": "associated_with.chebi",
            "pmc": "associated_with.pmc"
          },
          "bp2disease": {
            "DOID": "associated_with.doid",
            "pmc": "associated_with.pmc"
          },
          "bp2gene": {
            "HGNC": "associated_with.hgnc",
            "pmc": "associated_with.pmc"
          },
          "bp2genomicentity": {
            "SO": "associated_with.so",
            "pmc": "associated_with.pmc"
          },
          "bp2ma": {
            "GO": "associated_with.go",
            "MOP": "associated_with.mop",
            "pmc": "associated_with.pmc"
          },
          "bp2protein": {
            "PR": "associated_with.pr",
            "pmc": "associated_with.pmc"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothinigs.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the CORD Query web services. Learn more about [CORD](http://biothings.ncats.io/cord_bp)",
        "termsOfService": "http://myprotein.info/terms/",
        "title": "CORD Biological Process API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/geneset",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple GENE ONTOLOGY genesetids seperated by comma, e.g., \"ids=387,388\" Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "For a list of protein ids, return the matching protein objects",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/geneset/{genesetid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "GENE ONTOLOGY  ID, e.g. 387",
                  "example": "387",
                  "in": "path",
                  "name": "genesetid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "description": "A matching protein object"
                }
              },
              "summary": "Retrieve protein annotation object based on pr protein id, support JSONP and CORS as well.",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "CORD API metadata object"
                }
              },
              "summary": "Get metadata about the data available from CORD API."
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Pass a search term to filter the available fields, e.g. \"search=associated_with\".",
                  "in": "query",
                  "name": "search",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Pass a prefix string to filter the available fields, e.g. \"prefix=refseq\".",
                  "in": "query",
                  "name": "prefix",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "MyBP.info metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from MyBP.info."
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string. Examples \"PMC6836328\", \"31045\", \"PR:000001978\".",
                  "example": "PR:000001978",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "description": "a single field or comma-separated fields to return facets, for example, \"facets=pr\"",
                  "in": "query",
                  "name": "facets",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "Make protein query and return matching protein list. Support JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms seperated by comma (also support \"+\" or white space), but no wildcard, e.g., \"q=1017,1018\" or \"q=CDK2+BTK\"",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "Specify one or more fields (separated by comma) as the search \"scopes\", e.g., \"scopes=entrezprotein\", \"scopes=entrezprotein,ensemblprotein\". The available \"fields\" can be passed to \"scopes\" parameter are listed [here](http://myprotein.info/doc/query_service.html#available-fields). Default: \"scopes=entrezprotein,ensemblprotein,retired\" (either Entrez or Ensembl protein ids).",
                          "type": "string"
                        }
                      },
                      "required": [
                        "q"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with \"hits\" property",
                  "x-bte-response-mapping": {
                    "$ref": "#/components/x-bte-response-mapping/query-post"
                  }
                }
              },
              "summary": "Make protein batch query and return matching protein hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/bp2gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/bp2protein"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/bp2cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/bp2cc"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/bp2ma"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/bp2bp"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/bp2genomicentity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/bp2chemical"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/bp2disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/bp2anatomy"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://biothings.ncats.io/cord_bp/"
        },
        {
          "description": "Production server",
          "url": "http://biothings.ncats.io/cord_bp/"
        }
      ],
      "tags": [
        {
          "name": "geneset"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIACDEqF4C_-1b60_kOBL_V6zsfWC0_WLYm2FHQrrhcSy7A90LnO5ONEJO4u72ksTBdoBexP9-VX4k6Sb9gOWkEWI-QLftsqvKv3qaeQhEzjKa8-ALCbY6vU4vaJGAZyMBAw9BJDJNI20-s5TyBJdNWJL_I-RCT3jGx6rDBdJkNGU4--vRvw9OyH-OTnDwvs1jQ6J1rr50u2OuJ0XYiUTavWa3PLvn2c89u1CKxNBLpnKRKR4mjMTsliXAoAweYU3MVCR5rrnIcOG-iIqUAX84QMSI6Akje_3TffJ7weSU3LGQKCZvecRUh3xjVGYkFZIRGopCkwtcermBnAFjThyQJouoRpm6kZDxVZh_QPY0k6nqj87sdl4ioEunuRSa8ayDOuuadV1DwbWVx3C0y0UixjyiCRlIAQwp8nVwhOtumVROoE1QPsqJTMMoDF08zAt9kEVymmsW4z5xERnZLQHuVsikru7FUnXxpCe7r9pz1ZaXKDgdO9Y9IsYsY4ppe6IfpFkm7NXNjt_g3c0OaUkzlVAt5Ox4yYo9OKd6ogxSu_5E_JIL5T5QCYS61OzfJBvhNj-AAClADqCkutWi7oizJFZ1aLsRw8Qq6lhos7xOX46ttYO1txq5HTCySgZ6UnpXxNPSToHefKZ5ngDSULXd-_bd3V17JGTahmtkWSRiFptVKprAflYxEk1Mc2a1x2P7ew4baZFonoNRHh6cHJD-yXn_W__wv8SpGogAMrANRWyGUwIypbRFWGfcaZEhbrqztf25tbW9PQzICZgMmCvVJCqkBMYTNFciMvit6TUzpsyzHMwUNy5yogXZ7PV6JKX3PC3SllkBrkKTO54kJATilGs4u2OMb5objSktAR_B46NTGZdG-gsj4-Xjo5swDsdJ_7HXa5L-KzHAJH4xEeEfLMLT9QTEm3CtQC6nyak9URWgAokXFPxTSEJJwoFfcFTOZaBsLdhRF-CZUJ6U6ggBXS6whxgMerOqG86lOcajvftQ3sWjEWHMmoE_J9rsfZKjfXtrBK4LD2b3NM2tK3Mj3JChudXRWR4ezCpby4KhMiq8NdzO92-N4LqTkEbX9R3KsVew57UwuAAgT-B2ykC1EDvLdRVoPHBDqsBQ4Xsua3hsEVXkuZCa_HrWPxkAXYwh9YxQBQaaJJ0VUARRaUw1XYq_v6bqtdVlAi9EWeKZWqStQ6arNTY5QGu0X2_hjijmIiMpUuL37ASz8np4PsPsBhSSAApOk8poQjBxQCc34gl8NOfXjjabO7McBpZkB-hFxNHfXqEXGgadyjhtFK3pz9IEaxhiM5s53Bm_J3bluoxaoh34qdjNcv7s0uAVHMUroed4ujswOV0FDSvdS1DkKOfAVB7h0WS18gwM2UTXqqdDDqynVqD5wfHep-2tT1sfIdpi-N3a7P30d_txcPqlh_82f_687e6k5uLrs0uu6-Z7dPKK_8lmMI_f16MEjzdDid-brAHsFaTxSCcQ1U2e04bUh9rUx101WIgL7CMaMQ02AUkYcYrGa7DDO7kcBkv0bFf9_83ie8hom4xyUV77hzL3MZPGNp5u51XXWMopU5DEBjbte90E7xizVh9H7U4YOx0GnsRtzAQ75OwZsdZC4xKPfa9onlnR3CytZ-xtmcq9oYQhGzRRokyLhsGPAAMw5TtABCMqBwP90CIhePtMYC0SR1TGVd1zs7PZ2_zcgh_blg6H9vZ_-_jj7vlv1vTnzdkYO_DfWIWd5Szioykkbgx3M_0M53I2Kifkmf-AWMIo5LKModsZI4Hn0I7sgK4l-9Ph00aKppkWA9tIw6Rc2CHnMynA0GEKpI1ohoVZDhkE8AQesTqelKggFCRAc4AlFxMmWdmSmWutxCKyAfLKNXU6E50mP5Qnt-25Hzpkn40oXO6X9URogY1iFAOmNhgYO7B0YJajfg_s0nrF9mG9CvNmRX35up5t0D87X-bdfm_ybWqRczP9uFCztidop8AiyrmQm-b19sLaxmE9LnWZIXrINRwnstrkF0uWr8eqLYwRg-jL_GLT8m6Yf8Q6dok7W0TmGHwBZQS-_iVk0QuIAFDPJwrzFxCBGkUKVppprqcvEQ_Qjf3SF5DGHNydeskl0oxqkQK7lxatFcnTePtQpU8NfnoqCuP_cls-DcvFM74PfGKKVkBdCoCLllVJ9SRueUJYReYG5tD3SJGYyICRlGrfPrdmV6WxdxOWeQde8-yVBOaBgGeKwHnEdwPKAtASmEoV_ZurVDt5GmPgOBrBEqwcfGTcxLgzw0atbK-OKpPwYfCkBraMt4hAR34HQCAbmGsnqjykNwwgYNf28OWpy-mNT4TpImy7JB_ZlBlFlsvQgmwvu6l6stRwU6EQCaOZvSr_sPLknkBBiCOMkJKNi4RKUkDwU8iSKGT5utHC5immQoWkY2ZoAFngkW55zIAEPCoxh7QIpDKm7woENjxrg0MJoDKaLxTuAIoaiSQRd9h6NQqBPZeJW2Z2K1BZa5M8qawWV1IJT7mtpt1YBVOsoxtbpxgolnFc5cKrWIYjmhjGU7MiDUF9cB2N5yPv6prnoHZNIR2FacNwr0P2RBryDEdcDMZitW5ZaAhc-RwKrn1UJKaGzOnYVPslFHtLxUTum4XkkICM8WnNxGWslRdI6Xru60jrwvaGM6KI5rjcdO6pvcFU4JtdPUvbXCqAL-pXCoAl-wIBFiMLqSCX7pCB7W-5y2ijNwBd414si1FSIWO8lMqvYFd1drYmk9kXsvBSUZCIQnKERDGbJVomu2tLLEPoYzlvzWo-HTQvOpqldhbiR39kk6K5GunKcGg-2pBg0JMIquvproWAqVGqZlWT1fgx3yy7rA9SKanJCYJ6Wd5QuAHyns2XFuK6GSZmUtNkMYjmuTZXoz_9dCXklWUaSSEj8EqsNFsxZyjqzM0wMK-C9SiN-qx-1-CloaJsOHd-lW3hL8iiHwKbPdqT8GXuzJqTkLhHy6IYhl3KbZ_9D_sGvgBOSAMjHKkewt07uK3-weVNhCExtULLNIRjkzPYvwlITIzX5i8NFMQ5-wh_Xr4Mk3N2r8mxdakDG_nM67Uo9GqujiEaRxhfv0aa35YJq11-3B-ssd6-QM_kh2Wwm09TzI2Y97MvZde3oQUS-g_YvwgerHovepePQb1FEIyF2W_CKIqMp61sl9hKzHQ0dtFDVR1cX8FdvbTic0WG0YetUt4mZPagakME7HmNvEOgBgEsTj0EoHx8mxBYwNU7BMa-a-Ah4Ovqt4CDf-0enPZP5jn7aiREzg5cx-MdCiUUyraKx4Ppsb0FMPxyeLI3z9ehaSC-X395_bajWrv7WmPwLYDgrN8AAZTx3RU0YaHeFvag8N3ztwCHwek8VwP_NvAOhBII5XtJWSngM8hbuP-9b021wvvl18sDoxB_8_695i1c_n7_aH-er33_HvWOgBIB5Rtdaf7-ve9NuIBfDnaPnngBJ-FZESpNs-gdEDMuoXzvtc3OJX-A4DuRD0GeRg2a6uBwyzbuGmZTkeMsIKdh0unFd65WHbFqE9P7-KubVNXzqp1cbdqwoAiZtP_VplZ_rdrOVDcN05NxFtW2mknnV-151iisKoWtMsFVO0Ge1TQpywu0CcWqbSBcN0xGid-mik6rdjK-v2E6Fjwumarc3ErGjBNp4m3CQo5PP4__A3AWCfW-NwAA"
    },
    {
      "_id": "671b45c0301c8624abbd26ae78449ca2",
      "_meta": {
        "ETag": "27469bebe385813229d2d0fa1ffe7ef143c9979798ff5f19cc6f57a7a1397323",
        "github_username": "kevinxin90",
        "timestamp": "2020-09-12T00:02:48.446173",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:55.753330",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/mydisease.info/smartapi.yaml"
      },
      "_score": 0.9909438,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call. Type: string.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned disease object. If \"true\" or \"1\", all fields will be collapsed into a single level deep object (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Type: boolean. Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us with an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "facet_size": {
            "description": "the number of facet buckets to return in the response. Type: integer. Default: 10. Max: 1000.",
            "in": "query",
            "name": "facet_size",
            "schema": {
              "type": "integer"
            }
          },
          "facets": {
            "description": "a comma-separated list of fields to return facets on.  In addition to query hits, the fields notated in \"facets\" will be aggregated by value and bucklet counts will be displayed in the \"facets\" field of the response object. Type: string (list). Default: None. Max: 1000.",
            "in": "query",
            "name": "facets",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated list of fields (in dotfield notation) used to limit the fields returned from the matching disease hit(s). The supported field names can be found from any disease object or from the /metadata/fields endpoint. If \"fields=all\", all available fields will be returned. Type: string (list). Default: all. Max: 1000.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "format": {
            "description": "controls output format of server response, currently supports: \"json\", \"jsonld\", \"html\". Type: string. Default: json.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching disease hits to skip, starting from 0.  This can be useful for paging in combination with the \"size\" parameter. Type: integer. Default: None.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "prefix": {
            "description": "Pass a prefix string to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          "search": {
            "description": "Pass a search term to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          "size": {
            "description": "the maximum number of matching disease hits to return per batch. Type: integer. Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated list of fields to sort on. Prefix each with \"-\" for descending order, otherwise in ascending order. Default: sort by descending score.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "Disease": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Disease"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Disease"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "bp-disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "MESH",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "ctd.mesh",
                "size": "250"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "ctd.bp_related_to_disease.go_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/bp-disease"
              },
              "source": "ctd",
              "supportBatch": true
            }
          ],
          "chemical-disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "MESH",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "MESH",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "disgenet.xrefs.mesh",
                "size": "250"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "ctd.chemical_related_to_disease.mesh_chemical_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/mesh"
              },
              "source": "hpo",
              "supportBatch": true
            }
          ],
          "disease-bp": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "MESH",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "ctd.bp_related_to_disease"
              },
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "mondo.xrefs.mesh, disgenet.xrefs.mesh"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease-bp"
              },
              "source": "ctd",
              "supportBatch": true
            }
          ],
          "disease-chemical": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "MESH",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "MESH",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "ctd.chemical_related_to_disease"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "mondo.xrefs.mesh, disgenet.xrefs.mesh"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease-chemical"
              },
              "source": "ctd",
              "supportBatch": true
            }
          ],
          "disease-gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "disgenet.genes_related_to_disease.gene_id"
              },
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "mondo.xrefs.umls, disgenet.xrefs.umls"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease-gene"
              },
              "source": "disgenet",
              "supportBatch": true
            }
          ],
          "disease-phenotype": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "OMIM",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "HP",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "hpo.phenotype_related_to_disease"
              },
              "predicate": "has_phenotype",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "hpo.omim"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease-phenotype"
              },
              "source": "hpoa",
              "supportBatch": true
            }
          ],
          "disease-phenotype2": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "ORPHANET",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "HP",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "hpo.phenotype_related_to_disease"
              },
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "hpo.orphanet"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease-phenotype"
              },
              "source": "hpoa",
              "supportBatch": true
            }
          ],
          "disease-variant": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "DBSNP",
                  "semantic": "SequenceVariant"
                }
              ],
              "parameters": {
                "fields": "disgenet.variants_related_to_disease"
              },
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "mondo.xrefs.umls, disgenet.xrefs.umls"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease-variant"
              },
              "source": "disgenet",
              "supportBatch": true
            }
          ],
          "gene-disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "disgenet.xrefs.umls",
                "size": "250"
              },
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "disgenet.genes_related_to_disease.gene_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/umls"
              },
              "source": "disgenet",
              "supportBatch": true
            }
          ],
          "has_subclass": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "mondo.descendants"
              },
              "path": "/query",
              "predicate": "has_subclass",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "mondo.mondo"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/has_subclass"
              },
              "source": "mondo",
              "supportBatch": true
            }
          ],
          "phenotype-disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "HP",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "OMIM",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "mondo.xrefs.omim",
                "size": "250"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "hpo.phenotype_related_to_disease.hpo_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/omim"
              },
              "source": "hpoa",
              "supportBatch": true
            }
          ],
          "subclass_of": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "mondo.parents"
              },
              "path": "/query",
              "predicate": "subclass_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "mondo.mondo"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/subclass_of"
              },
              "source": "mondo",
              "supportBatch": true
            }
          ],
          "variant-disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "DBSNP",
                  "semantic": "SequenceVariant"
                }
              ],
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "disgenet.xrefs.umls",
                "size": "250"
              },
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "disgenet.variants_related_to_disease.rsid"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/umls"
              },
              "source": "disgenet",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "bp-disease": {
            "MESH": "ctd.mesh"
          },
          "disease-bp": {
            "GO": "ctd.bp_related_to_disease.go_id",
            "name": "ctd.bp_related_to_disease.go_name"
          },
          "disease-chemical": {
            "MESH": "ctd.chemical_related_to_disease.mesh_chemical_id",
            "pubmed": "ctd.chemical_related_to_disease.pubmed"
          },
          "disease-gene": {
            "NCBIGene": "disgenet.genes_related_to_disease.gene_id"
          },
          "disease-phenotype": {
            "HP": "hpo.phenotype_related_to_disease.hpo_id",
            "evidence": "hpo.phenotype_related_to_disease.evidence",
            "frequency": "hpo.phenotype_related_to_disease.frequency"
          },
          "disease-variant": {
            "DBSNP": "disgenet.variants_related_to_disease.rsid",
            "pubmed": "disgenet.variants_related_to_disease.pubmed"
          },
          "has_subclass": {
            "MONDO": "mondo.children"
          },
          "mesh": {
            "MESH": "disgenet.xrefs.mesh"
          },
          "omim": {
            "OMIM": "mondo.xrefs.omim"
          },
          "subclass_of": {
            "MONDO": "mondo.parents"
          },
          "umls": {
            "UMLS": "disgenet.xrefs.umls"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothings.io",
          "name": "Chunlei Wu",
          "x-id": "https://github.com/newgene",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the MyDisease.info disease query web services.  Learn more about [mydisease.info](http://mydisease.info/)",
        "termsOfService": "http://mydisease.info/terms",
        "title": "mydisease.info API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/disease",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple disease IDs separated by comma. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted. Type: string (list). Max: 1000.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Disease"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "A list of matching disease objects"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "For a list of disease IDs, return the matching disease object",
              "tags": [
                "disease"
              ]
            }
          }
        },
        {
          "path": "/disease/{diseaseid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Retrieve disease objects based on ID",
                  "example": "MONDO:0016575",
                  "in": "path",
                  "name": "diseaseid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Disease"
                      }
                    }
                  },
                  "description": "A matching disease object"
                },
                "404": {
                  "description": "A response indicating an unknown disease ID"
                }
              },
              "summary": "Retrieve disease objects based on ID",
              "tags": [
                "disease"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "mydisease.info metadata object"
                }
              },
              "summary": "Get metadata about the data available from mydisease.info",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/search",
                  "name": "search"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/prefix",
                  "name": "prefix"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "description": "mydisease.info metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from a mydisease.info chem object",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string.  The detailed query syntax can be found from our [docs](http://mydisease.info).  Examples: \"cancer\", \"primary ciliary dyskinesia\", \"DOID:9562\"",
                  "example": "cancer",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/facet_size",
                  "name": "facet_size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/facets",
                  "name": "facets"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make disease queries and return matching disease hits. Supports JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms separated by comma (also \"+\" or whitespace).  Does not support wildcard queries",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "a comma-separated list of fields as the search \"scopes\" (fields to search through for query term). The available \"fields\" that can be passed to the \"scopes\" parameter are listed in the **/metadata/fields** endpoint.string Default: \"scopes=_id\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make batch disease queries and return matching disease hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease-gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease-variant"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease-phenotype"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease-phenotype2"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease-chemical"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease-bp"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene-disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/variant-disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/phenotype-disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical-disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/bp-disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/has_subclass"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/subclass_of"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "http://mydisease.info/v1"
        }
      ],
      "tags": [
        {
          "name": "disease"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIACgQXF8C_-VbWXMbuRH-K6hJHmxHomjHdiqq2qrYltdWanWs5SQPlooFzoAkVjODMYCRxKj039PdwJwcXiIt2c7LWsTg6OPrE9jbQGUi5ZkM9lnw116_1w92WCDTkYKB2yBUqeWhpb9FwmWM0yYizv4xlMpOZDo2PalwScoTgR_fTfI0FpL9J8fRm10Z0RJrM7O_tzeWdpIPe6FK9lJxPRapcLO0imm1FiZTqZHDWLBIXIkYqNPBHcyJhAm1zKxUKU48UGGeCCAOB5gaMTsR7Gh6II3gRvSQARa5H-xrLvSUXYshM0JfyVCYHmO_Ca5TligtGB-q3LIvyTSqrb54gjQDyc3hvadIsBU6MSejM7ddweDsZJpHC6R1DDYnsDenh_j5SmjjGXsOGkB-kVQYhaEvt23mT7WK8pA4d9Nwj1zH8wm5eh7cXSAdfOy3LPTlp-GZ1SBPU-VE2xwnSTaHrOapiblVujle4sMdnHE7MQSjveJE_JEp48CVcQ0Lbcnxn7UY4TZ_2gOsACRA1WavmrQXKTuSIo7q0CvHiJBlO9BUU1_vR1Za7YyhttgNrHay0gm3jZPdCElKC5CysW9VNC1NEHagv3mWxTIkxezd7F5fX-_iyl1QvUhDFYmIZplwAtQ4sWo0ICuFk72M3L8tPCV5bGWGJuct5vDAALKQZCsiNpwyYCThPXasrABL45aFudZAVYx2xVQK_1p-KcgKZZqBOcFRLM-YVex5v99nCb-RSZ7s0AywcsuuZRyzISxOpIVTeuzzNBP7zFgNqGFPYmns0x474jf7tEOPzAimIMFuUnB35-UlNbH-hRi8uLvzH8iXeNZf9PsLxfmHIVk0pCetSNzqTpW6mWbvoDKhkkKuNQdLuetwXW8Y8oY-C3Qeoo2UclfDP0RoCYLBy3sQvJDM91or_UkYUPY8wgqRgQ4jOgdo4ymTicMRaNkhFVHhfQH5qhzQoRGuwa9KM14yWMPTDmxuc3C5CIA5jAc1D1U6pgs6ovAae7f-DxndEctj0e1AWrx9EgAZCChtUbMh_IgAwUAjHi9ueJI5V310cnxwst_vP3_96m-vXFTEYfRkDa9T0BM0wWh1LlA2lXY60PsQji7kcTzk4WV9h3LsB3eVm1r4anbdbSzzQOyM92WXo51rYXl6marrtGYwM5a1KoLnGRBIlEfc8oVWsw6WnDk4N9AJrfkqasefZlJUUFoKtCWJD8JWc1zyhk7F_bwCbHFMH0daJay5c0M8pTxa8inQvomY4EgdNryEH3kgg83gu7ypr_cj38zoVtSok-19FOtXtvTLWxpmaLpd0aStbQfbNQLI71REONcN5cNnpAv2lHERCpmZQjlyw0IwZ0hrRipPI0ekyjX7EqnQzKkpIM1h713cMfvsHHSdhkKfA_3noDeJ0mGhjCX-G03NpUyFkdx9Pzg5PNj_-6vXL86DVvhyuyww1K_fa8DaLNyMeCjswMj_isYO1ehKuxilGxZAvx_IejcKmMinmeF8Rdm1pba6vBDojVPx9_cf4smqF-fEzrjLuH0t7YS80nkwkdacB8zXWNMfOGs_wtqt3i6BghG2iIqcfSbVQdZ77CzPMrALw_55dnJ8SgvenXw6Y9xAVRjHvYYHdidf4MmPWPVvZFsb-aUNbOvR-gVfF3YLnGVQj6ujW8Ce8NgoMJO_gI1AVXgNmAGggjfCeHegAGGpssw4DGE7IAq5jgr4dZX7FJ2AwM4mBnfH7laUFFVokToYsluXiQFdbisg7omfYFXx0U60yscTtJsal0A3hv0qBTn3AIA9XFPEhf6MG8zIYTvnJ8qDSp0yrgWRB9OkK4mfPWtnoM-eMZFGmZKp7fmuyIEYcZD-frnpLwMZnQfdvZGttUGWe9DTk7PPi3zU700fWlQuP68vHaLDXNujdvlLao8Prdi9HJtdJIF4X-Qvu6YX7ZNdarnP9zoL115xLXlq77s8mwgweETpphu8uO8OiAPQanzf9cNs3ZUo791Gj331tV7e911eiuu-GxTSuu_6YXbflRNuBiYfhjF40nXXFusGagQB0pl5tWY27bitsvOOqDJVObl19OlQbZ6XkxvuHFx9gmbPfSaEk5oN7d4qHZOl1VeV7HSQim5Sq5gcqnNSxb2Y8zngsZqtox47HAFHWPe5EH0ePMeqEsgpYmbRpA9VHPPMULgCZjkzQBJEwBjv6KAQFpnfE6N-zKBARQdZ-Xm3S8eyHZYbcoOeMVZcPFE0luNUjqbEg98ShJGHwI146sU7VCoWPO1VsXEEeYdYJO96Ftkhb7-jE3hx6TkjbRAdYgMDuRbjPOYaOAFEocyx4C-uGnfwggSzrVzzsaA1wBlEkysZCVjigiAgjE7aYUa5XAJWuXTCEsA04IPkkBvcBpQ1ApWoa7xjoR1g40U8l3nvEoDV6uQOpkkReTIEijCvwrlsmIeXUGAiVz62-YymCKWFIQByxFjomqae99sXPHOob9b0HSz4vWs83C9HrJhwmzAFyGKHKeNRJAtYuowQA7a7zvJrCbkuoTv3NIBZldgfjwEnRYZ8xeNcUD6A4otBjACQtGYqYKlZzKdVfljb0hlKaduNpGrONVop8mNwg-sI3ayCmaphuq68nwB3M6b_FC2J8udYJtLWZVx6MmqsdV4lgV6eGJ-q--IC57sTgDXT0aHj6bTlG8nCijPamXmVlzsP6kZ_Ac9XuM9am7LpSAsGlumJAshqaiqr0mVqckXj_MgBaM8t3t1W0cM9LyhBtlO79_WypY4lZuKuH4l_xZH7e2ITEEgrDlYs4tSFjJVl7zLGsNe01Ft1ZtwUZS4lhCFjuaZsn7TepxavLLECgBzlMdWDGR_jNAAuYHsoUxetaqUMuql6djDf_5ExLpKAb6otc3i-ud8hglOXtrgJBdiA55GMKaw0ylmHpLn6WkZtdemwRF_-LmQ-uUUVDjX3tyK2uqFZRuyCUOgfNawCMh9VIE11teHCoLiI7hVjIPWr55C9PAbiagp9pw44goM6COLnwS5GILAD3Bj8IDKrdCT0DlOwub6WVDwz3vxaY5A2hxhY28CESi9Wl2_HL1LWXfndxaKD-jujZl9rIKO5Cm-8J8GJF7XmSu2Kt95M6DgCAg1map3HUMMghOTQzE88O05st1qaT1QgYpyMFrQFOl6rzMqFFEF_ltEiGMXKueGCJAd3Iqm6RusSZZuHi44XMgVf8yVJnZHtPMeBEbDZtbm0Sl12mxp9tDyeb4gdeoTvr18OlB44qnApsFAor-KyIo5W1IlrENDmcbWVpAynrRVo6YBwx7ntWe6y1ZXpRQ6xm_Asw6_kneptKRw4fvf28IP7gR9x3Pbwv2agRYzuamDVoLg9xQ9oolQat7pU5ALenh2fNrbyXzt308Y94snyYUL2v9oyP71OQ9XqQio-EgmTTPXK8a59YMLAESCwNkz9w9Jly8rJlAnhZUAaTldaWc2u0172yJD0o_dnHylDtFGv-NC1FXi7yaCc0BbjstUdEhxmdP6Hk2L9MOsEQCGyspeyaCpNwlPyJHaw_tfRb2cNRd-AZzE9-o4TVSJdanlydHhElx8qjZSfRR_JpwD3DXG1tqPvOLHWEWtLt5zT6H3RLHyHVp0N-UUcQQ7uw0jV7OqYCxGeml41M5xpI88YIdi9z-3fYqZSvQygh51nLm1QGk_ZIT03u2llNbim_UL6SB13_w68mEtRX-U6bLiEoOPia1j8gbdWwS1Ra770L-6C-r1RQ4Oo5x02T_kTwSFzIRe39B7trpCP78y7Z-8EL8p4E_AeMqSX60V4wrzCFVyNNaUHbK2jscad-KDuSRc0SNuet3UZQHvOes_tw2CBEw3ufl6FuiDUWnTmXK_4d3GncnE_E9gSEsqrnQYY6mFsa3BYFpY2gQLuXXrlzbVNTn9NbX-cUfWpZ1aGvwqOresOZaPTr6Td0DfwxLeq69o9XLe2X_xQ6tbZhKM5bEnln04_vjl-__lh1D7Pxh9M57Vk78ute9q-X76OpMzGThQxSG92KOPYBiqWZITbCgeYVM2EgyrT2hgtlMCtiZSuNe-8KM7yobH4bnMNrIAotwqV6o68gRRKyLfmFeam6T-z5qGYaa14K1WsxijtU62oH_R4ese3DXR648nCt8gDa1lZ1WANXrzqP2gdsF51si5iOtS_NHecRdkD1AIuOaa92u9NHl73m6pyaXfn8VT5PVcBNQzMPhp64MxgpsGyPZis2oHbEkiWVg-zIPlOs0hXUtHBM2_CHhgeXRF9ewhZu825JagszSZWS0A2SSMBLFvBisux6NxGt_PBy4tvAI1FPejHQ8L3mVbWH3_S6a2-9iMEFX_hzFP_f9hvVGbQf7emdWrbr-kAlq6Z6TCV4m9o3HGyDZ03n-0SDc0LikdQenkF8v-m8Lrkv5G-G0-t6a31_wCLbJIYT0gAAA=="
    },
    {
      "_id": "8d5ef70318e800e7020eba5ca812a1b0",
      "_meta": {
        "ETag": "7a09db3546b07fc7b893b1a6ef6ef696f31fb8a79eb7b63ed86c47fdd0d28798",
        "github_username": "kevinxin90",
        "timestamp": "2020-08-13T23:09:11.737217",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:44.615354",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/scigraph/smartapi.yaml"
      },
      "_score": 0.9909438,
      "components": {
        "x-bte-kgs-operations": {
          "chemical2disease": [
            {
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "chebi": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2disease-doid"
              },
              "source": "scigraph",
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "chebi": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2disease-mondo"
              },
              "source": "scigraph",
              "supportBatch": false
            }
          ],
          "chemical2gene": [
            {
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "chebi": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2gene"
              },
              "source": "scigraph",
              "supportBatch": false
            }
          ],
          "disease2chemical": [
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "CHEMBL.COMPOUND",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "mondo": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2chemical-chembl"
              },
              "source": "scigraph",
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "mondo": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2chemical-chebi"
              },
              "source": "scigraph",
              "supportBatch": false
            }
          ],
          "disease2gene": [
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "mondo": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2gene"
              },
              "source": "scigraph",
              "supportBatch": false
            }
          ],
          "gene2chemical": [
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "CHEMBL.COMPOUND",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "geneid": "NCBIGene:{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2chemical-chembl"
              },
              "source": "scigraph",
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "geneid": "NCBIGene:{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2chemical-chebi"
              },
              "source": "scigraph",
              "supportBatch": false
            }
          ],
          "gene2disease": [
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "geneid": "NCBIGene:{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2disease-doid"
              },
              "source": "scigraph",
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "geneid": "NCBIGene:{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2disease-mondo"
              },
              "source": "scigraph",
              "supportBatch": false
            }
          ]
        },
        "x-bte-response-mapping": {
          "chemical2disease-doid": {
            "DOID": "associated_with.doid"
          },
          "chemical2disease-mondo": {
            "MONDO": "associated_with.mondo"
          },
          "chemical2gene": {
            "NCBIGene": "associated_with.ncbigene"
          },
          "disease2chemical-chebi": {
            "CHEBI": "associated_with.chebi"
          },
          "disease2chemical-chembl": {
            "CHEMBL.COMPOUND": "associated_with.chembl"
          },
          "disease2gene": {
            "NCBIGene": "associated_with.ncbigene"
          },
          "gene2chemical-chebi": {
            "CHEBI": "associated_with.chebi"
          },
          "gene2chemical-chembl": {
            "CHEMBL.COMPOUND": "associated_with.chembl"
          },
          "gene2disease-doid": {
            "DOID": "associated_with.doid"
          },
          "gene2disease-mondo": {
            "MONDO": "associated_with.mondo"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@renci.org",
          "name": "Chris B."
        },
        "description": "Scibite",
        "termsOfService": "https://automat.renci.org",
        "title": "Automat CORD19 Scigraph API",
        "version": "2.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/gene/chemical_substance/{geneid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put NCBIGene ID here, e.g. 1017",
                  "example": "NCBIGene:1017",
                  "in": "path",
                  "name": "geneid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "gene2chemical",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene2chemical"
                }
              ]
            }
          }
        },
        {
          "path": "/gene/disease/{geneid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put NCBIGene ID here, e.g. 1017",
                  "example": "NCBIGene:1017",
                  "in": "path",
                  "name": "geneid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "gene2disease",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene2disease"
                }
              ]
            }
          }
        },
        {
          "path": "/chemical_substance/disease/{chebi}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put CHEBI ID here, e.g. \"CHEBI:661\"",
                  "example": "CHEBI:661",
                  "in": "path",
                  "name": "chebi",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "chemical2disease",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical2disease"
                }
              ]
            }
          }
        },
        {
          "path": "/chemical_substance/gene/{chebi}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put CHEBI ID here, e.g. \"CHEBI:661\"",
                  "example": "CHEBI:661",
                  "in": "path",
                  "name": "chebi",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "chemical2gene",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical2gene"
                }
              ]
            }
          }
        },
        {
          "path": "/disease/gene/{mondo}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put DOID ID here, e.g. \"DOID:123\"",
                  "example": "DOID:123",
                  "in": "path",
                  "name": "mondo",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "disease2gene",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease2gene"
                }
              ]
            }
          }
        },
        {
          "path": "/disease/chemical_substance/{mondo}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put DOID ID here, e.g. \"DOID:123\"",
                  "example": "DOID:123",
                  "in": "path",
                  "name": "mondo",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "disease2chemical",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease2chemical"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "https://automat.renci.org/cord19-scigraph"
        }
      ],
      "tags": [
        {
          "name": "drug"
        },
        {
          "name": "gene"
        },
        {
          "name": "disease"
        },
        {
          "name": "automat"
        },
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIABjINV8C_-1ZW0_bMBT-K1G2R5K0IDHRp9F2YpUGRUN7AoTcxE28NXZmOwwU9b_Pt7SNSegN6BjwQnt8bvm-c3xOoHBJBjHIkNtx3AO_5bfcPcdFeEyEoHBDgjkIufoMU4AmUi2Bk-wzhThEPqGx1McghfKkl1DEnK7vToUwgiykKOOIYHl2EaIR4lCqc0hTNhxfQHqLQmWYcJ6xThCAnJMUcL_inSM-UVrH-tTpDb_320eO8BhTkCXO8flA6t1CykywffEcMgcmQgipEF0WdkLnlER5KL85Wk36yOnk0XyCkNCofeQxE9udXssMQWxilEhENI9lBnNJDDGsSiLEIGCW0ESsCjkFmE0AJ1THywBPmCIlkG6DMIEpCsHkhuUjxgEOYVDIAxRNlVYMNYUsT1NA78t09ks7V_mkIhpvRCvnzlmvOzgRds6g7ySQwj0H-rHvtFvtT9IDvANpppkqNTvlGVJOZN6L9aJzlBIKf-eIwkhIOc2hpE4mB1Ta_D5T6oxThAWsCgMKWUYwgxqH_VZL_bayPsYOYIyECCieyegnFNU8laVx54049H7FzBMdQNW5efKPFI6l8QdBdipiQMxZUKceVEGcXivHmhJD7mo8lJXwTsPmNMy6ybBQ0xMzTsTZCDVSUlquSUvv65fuwOLkylXSzuFh-8q1yJmdNBOj8ny9vDwA8hFuVNOsSoy6S99Z2ZIVPZEMJWVvaB5SgiPSyIPRXYeG_lBQYLMghZ32_sEDEsqDZg5Ugq-XgwqCNgV103w1Qtac5--k1JJSGejS-dxQZdUQq7B2KhUd4SznJhMULc5kV62nKcAchVJ-oktBSEnObSNxK512v_m94en58MdZ37btmZgXZcGYNVFQIMRcwU2hWCBhdMMVQ4zkVK_es03Wrpmi3AsWF4lCP9Bl63qqF-w8ywjlXcDDRCiOwYTBBTpvUpBlkmXp7hEmSn3P6Fc3K09-GE0U008JaXfwBoEUo0u3XGVrespilReFbdCfbQD_AZwGNC8iIosnLcrT4Vl_-Caw07NCV2J1I2koxXX6tQbZ5XRsi6zuLaHzUnhai1wVyiWNvSWaz97iuwNzpebeEr7nb_Pd47fY4JV1t6Eil2Oyk67Wj_GCQFZfDSrwLVstN4JwN6vlzmBddafcFMsX2yn_CQT1Mjl_AbONHr4WeeXNVBi05N-8zUudAOAP4olvHO85bu1rgLGtVG29F0Wwtep6JXCF4bjG1NxdtqUaCdJQjb8aOz0zasbwekHrZ9F6gc1VW8yvyBozHI5Q-X8J-5LewHJ7ohpqbJVqET9_AXh_ER7NGgAA"
    },
    {
      "_id": "bf5aac143254714988018d87dc447a5c",
      "_meta": {
        "ETag": "2ac63b10aab285b9d2c061ea331b49d76bd6df60bb2ff742d5be2c5e4c98d3eb",
        "github_username": "kevinxin90",
        "timestamp": "2020-04-29T00:01:26.728864",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:34.641929",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/cord/cord_cc.yml"
      },
      "_score": 0.93676925,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned fields when passed \"fields\" parameter contains dot notation, e.g. \"fields=assoicated_with.pmd\". If \"true\" or \"1\", the returned data object contains a single \"associated_with\" field, otherwise (\"false\" or \"0\"), a single \"refseq\" field with a sub-field of \"rna\". Default: true.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated fields to limit the fields returned from the matching protein hits.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching protein hits to skip, starting from 0. Combining with \"size\" parameter, this can be useful for paging. Default: 0.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "size": {
            "description": "the maximum number of matching protein hits to return (with a cap of 1000 at the moment). Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated fields to sort on. Prefix with \"-\" for descending order, otherwise in ascending order. Default: sort by matching scores in decending order.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "cc2anatomy": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/cc2anatomy"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "cc2bp": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/cc2bp"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "cc2cc": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/cc2cc"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "cc2cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/cc2cell"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "cc2chemical": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/cc2chemical"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "cc2disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/cc2disease"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "cc2gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/cc2gene"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "cc2genomicentity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/cc2genomicentity"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "cc2ma": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                },
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/cc2ma"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "cc2protein": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/cc2protein"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "cc2anatomy": {
            "UBERON": "associated_with.uberon",
            "pmc": "associated_with.pmc"
          },
          "cc2bp": {
            "GO": "associated_with.go",
            "pmc": "associated_with.pmc"
          },
          "cc2cc": {
            "GO": "associated_with.go",
            "pmc": "associated_with.pmc"
          },
          "cc2cell": {
            "CL": "associated_with.cl",
            "pmc": "associated_with.pmc"
          },
          "cc2chemical": {
            "CHEBI": "associated_with.chebi",
            "pmc": "associated_with.pmc"
          },
          "cc2disease": {
            "DOID": "associated_with.doid",
            "pmc": "associated_with.pmc"
          },
          "cc2gene": {
            "HGNC": "associated_with.hgnc",
            "pmc": "associated_with.pmc"
          },
          "cc2genomicentity": {
            "SO": "associated_with.so",
            "pmc": "associated_with.pmc"
          },
          "cc2ma": {
            "GO": "associated_with.go",
            "MOP": "associated_with.mop",
            "pmc": "associated_with.pmc"
          },
          "cc2protein": {
            "PR": "associated_with.pr",
            "pmc": "associated_with.pmc"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothinigs.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the CORD Query web services. Learn more about [CORD](http://biothings.ncats.io/cord_cc)",
        "termsOfService": "http://myprotein.info/terms/",
        "title": "CORD Cellular Component API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/geneset",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple GENE ONTOLOGY genesetids seperated by comma, e.g., \"ids=387,388\" Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "For a list of protein ids, return the matching protein objects",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/geneset/{genesetid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "GENE ONTOLOGY  ID, e.g. GO:1990054",
                  "example": "GO:0044228",
                  "in": "path",
                  "name": "genesetid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "description": "A matching protein object"
                }
              },
              "summary": "Retrieve protein annotation object based on pr protein id, support JSONP and CORS as well.",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "CORD API metadata object"
                }
              },
              "summary": "Get metadata about the data available from CORD API."
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Pass a search term to filter the available fields, e.g. \"search=associated_with\".",
                  "in": "query",
                  "name": "search",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Pass a prefix string to filter the available fields, e.g. \"prefix=refseq\".",
                  "in": "query",
                  "name": "prefix",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "MyCellular Component.info metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from MyCellular Component.info."
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string. Examples \"PMC6836328\", \"GO:1990054\".",
                  "example": "go:GO:0044228",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "description": "a single field or comma-separated fields to return facets, for example, \"facets=pr\"",
                  "in": "query",
                  "name": "facets",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "Make protein query and return matching protein list. Support JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms seperated by comma (also support \"+\" or white space), but no wildcard, e.g., \"q=1017,1018\" or \"q=CDK2+BTK\"",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "Specify one or more fields (separated by comma) as the search \"scopes\", e.g., \"scopes=entrezprotein\", \"scopes=entrezprotein,ensemblprotein\". The available \"fields\" can be passed to \"scopes\" parameter are listed [here](http://myprotein.info/doc/query_service.html#available-fields). Default: \"scopes=entrezprotein,ensemblprotein,retired\" (either Entrez or Ensembl protein ids).",
                          "type": "string"
                        }
                      },
                      "required": [
                        "q"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with \"hits\" property"
                }
              },
              "summary": "Make protein batch query and return matching protein hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/cc2gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/cc2protein"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/cc2cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/cc2cc"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/cc2ma"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/cc2bp"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/cc2genomicentity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/cc2chemical"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/cc2disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/cc2anatomy"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://biothings.ncats.io/cord_cc/"
        },
        {
          "description": "Production server",
          "url": "http://biothings.ncats.io/cord_cc/"
        }
      ],
      "tags": [
        {
          "name": "geneset"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIANfDqF4C_-1b60_kOBL_V6zsfWC0TXfDzM0ySEg3PI5ld6B7B053pwEhJ3F3e0niYDs8FvG_X1U5TtJN-gE7J60QX2bAcdn1-NXTMw-BykXGcxlss-B9t9_tBx0WyGykYOEhiFRmeWTpZ5FymeC2iUjyf4RS2YnM5Nh0pUKajKcCv_5y9O-DE_afoxNcvFuXMZFYm5vtXm8s7aQIu5FKe1fiRmZ3MvvUdxu1SoheC5OrzMgwESwWNyIBBnXwCHtiYSItcytVhhv3VVSkAvjDBaZGzE4E2xt83We_FULfs1sRMiP0jYyE6bIvguuMpUoLxkNVWPYNt16sIWfAWCkOSJNF3KJMvUjp-DKK3iF7VujUDEan7jgvEdCl97lWVsisizrr0b4eUUjr5CGO9kSSFAnXbE-lIB1wzT4Pj3DfjdCmFGgDlI9yItOwCkvfHmaFPsgifZ9bEbOhVnERkeyOAE8rdNJU93ypenjTk9OXnbnsyAsUnI9L1j0ixiITRlh3o1_kWaac6abXr9F200tW88wk3Co9vV6x4i7OuZ0YQmrP34i_5MqUP3ANhLbS7N-0GOExP4AApVFMr97UG0mRxKYJ7XKFmFhGHStL25v01dpKJzh_a5C7BZJVC9CTsbsqvq_8FOjpZ57niYxItb279dvb2_WR0uk6mFFkkYpFTLtMNIHznGI0upiVwmlPxu7vGWykRWJlDk55eHBywAYnZ4Mvg8P_slLVQASQgWM4YjO8ZyBTyjtMdMfdDjvHQ3feb_3Ueb-1dR6wE3AZcFduWVRoDYwn6K5MZfC35VeCXFlmObgpHlzkzCq20e_3WcrvZFqkHdoBocKyW5kkLATiVFq4u0vOd5-TxozVgI_g8bFUmdQk_TeS8eLxsfxAAaeUfrPfb5P-MyNgMr-ZqfB3EeHtdgLiTaQ1IFepyXt3oylABRoNFPxTacZZIoFfCFRlyEDZOnCiLSAyoTwptxECutrgLiEMerdqOs4FXePR3nuobPFIIoxFO_BnRJu2Jzvad1Zjh4PtjU-f-v2_f8D7xR1PcxfR4EO__-HD5uaWyxW4hs7XxGrFSjCteqsLgaqp0ddiq7--b0Y8SUIeXTVPqNa-g3evhMg5cHkCvq8CVAuZtNpXQ8jDOOQG3BZ-z3UDnR1mijxX2rJfTgcnQ6CLMcGeMm7AXZOkuwSYICqPueUL0fjnVL2yuigNQ85lnql52joUtt7jSgX0TffrDdiIY2Uy0ipl_sxuMC2vh-cznHDIjYEIYaBKiSYMywgMeSOZwI90f-NqOrx00vPAkewAvYokRt9LjEnnQbd2TpdTG_pzNMEKjtjOZg42k3fM7VyVUUe0A38acb2YP7c1-A6B4juh5_j-aQVHFV8NFSftS1BVUs6Aa-6VHm1Oa8_AmCuLnfq67MAFdAOWGR7vfdx6__H9JuRmTNZ15C_N1Aj-Y7XdFv-fmPD6rxj4jfxDTPkB_r4aJUTBKUr8vc1DwIdBGo9-BnmfKqF1KI64K45Kc4PXlKl_xCNhwU-gTGOlptEKbnkn1-fBAj27Xf9_V_kr1Lxtjjqv8v3dkD2mCt3W29130yPv-CoMlLmBKwy_bwl4jHWtz63uJMynJQae5HKsFbvs9Bn510HjAq9963me2fNcL-x4nLWot29pctgaT4yqSqXz4EeAAbjyLSBCMJODg77rsBAifqawW4kjruO6M7re2ehv_NSBP7YcHS7t7f-6-ePu2a_O9WfdmZwd-G_t005zEcnRPRRzAk-jiUcZctbqIOSZf4dYwkxUVh7n5cmYCDyHbmUHdK3FHyU-XaJo-9IR4BtpmFQbu-xsqiw4LzEF0kY8w9Yth6oCeIKIWF_PKlQwDhKgO8CWbxOhRTW0mRm-xCpySfGyHPt0JzZNfqhuXnf3vuuyfTHiYNzt1UTogI9iFgOm1gQ4O7B0QNtRvwdua7One7daD3q9pAP9vpFtODg9WxTdfmuLbeZFwS3EWLZCiMND2yIYjQNDK9avxmZdkbsBk4siWNv2XhRtYhe6IPDMIysZfAFlBFH5JWTRC4jA9M8nCvMXEIEaVQr-lFlp718iHuAQ0PsSzcQSApN5iRF5xq1Kgd0Lh_ea5GlmfKgLnZaIeq8KilS5a37Oq81TUQqiV4pewMtkjZsW9TjNcmtx6Vbn0BbmMEpolVAMx5zHrR-FO7erC87bich8qG3E4FoCGvbLzDC4j_levmrfHAH1mRiJyj6zm6cxhvijEWzBGt_nsA3MEFNsNJru-qqqXD4PnnSwjvEOUxhybwEIbA2r4sRUl_TPA0itjTN8c1lW3xS94HMRrpflOLKpM44sV0kA2V5kqWZZ02KpUKlE8MyZyj-SPLETKAhxhLlMizG1dQWkKYMsqUJXLxUdHIRi0VJoPhZEA8iCiHQjYwEkEFEZXdJhUHTQDBUIXCK1hEMNoCLNFwZPAEWNVJKoWxyjkkLgzEXiVjXYElQ2hhxPeqD5PU8iU-l633Kthil2va1jUEwUiziuq9ZlLMMVbQzjrVmRhqA-MEfr_ci7uZI5qN1yKBzhMzHc72J7HsoMV8psiW1l07PQEaTx1Q6YfVQk1O3lfEy9eAXF_kIxkft2ISWUCmN8JqO8jF3tHCnL-fkq0pZpe610oojnuJ2m8NxZMFX4_taspzYWCuDb76UCYHM9R4D5yEIqqHq7bOimU6Ux1jEagK7xLJHFKKnSMRqljis4E53-2pCJzoV6uVIUlIxQJyFRLKaJFsleDhAWIfSx-u7carZwo9cZK1L3FfLHYOSKoplu5pI4pB9dSiD0JIrbZmHqIEDdRD1KavMav-ZHWxfNRa41p5ogaDbQLS0WIO_ZfFmlrtphQh8tT-aDaJZrMo39-OFS6UvHNJJCReCVWGu2Zo4omsxNMTCrgtUoSX1Ovyvw0tL7tdw7u8sN4OdU0VDtUPXobsJXtlPnTkrjGR2HYlguS273hH84IPgCOKEMjGikXs4nq_Gk69Mh5E0UkdAYokPj3JhqBve-n1COt_SvBgzkOfegfla98rIzcWfZsQupQ5f56CVaFXY5V8eQjSNk63Nk5U1VsLrtx4PhCvvda_JUfVglu9kyhSxCr1_b1Uy2ZVgR-h9w0hA8OPV-6188Bs1mPhgrOm8iOIqMty0dbLhOjGYPuxih6lmrb-YuUzgFYbG9uIb2-9fL_b7JIH24LuV1QmYOV28QGPvm1EMA2sfXCYFdqRI1xiYVSKEMN28QaEAApwYeAr6vfg04-NfuwdfBySxnn0lCxMJBOfF4g0IFhWqs4vFAM7bXAIafD0_2Zvk6pAHim_kr87uJasP2jcHgawDB6aAFAijjWyhow0JzLOxB4afnrwEOw6-zXA3928AbECogVO8lVaeAzyCvwf57X9q4ejN-sz0ghXjL-_ea12D8_cHR_ixf-_496g0BFQKqN7rK_f1736sIAT8f7B49YayU8LQIjeVZ9AaIqZBQvfe6YWf7zqlJ5EOQp1GLprq43HGDu5avqcrxKyCn5WOpFz-5WnbFskNo9vFnD6m752Unlb1py4YiFNr9t5lG_7XsOOpuWj5PxlnUOGqqnF925mmrsKYStq4El50EdVbbR10Z0BUUy46BdN3yMUr8MXV2WnYSxf6Wz7GSccVUHeaWMkZBpI23iQglPv08_g-5NSI4ijcAAA=="
    },
    {
      "_id": "2dffb89df7f970b6a07e816e255d33ec",
      "_meta": {
        "ETag": "b2919755f5f8a75d1a4293b5036445e03c89fa95c782c2f06137f73a9e5bcf93",
        "github_username": "kevinxin90",
        "timestamp": "2020-09-04T00:00:28.582092",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:07:58.247363",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/semmed/semmed_phenotype.yaml"
      },
      "_score": 0.93676925,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call. Type: string.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned disease object. If \"true\" or \"1\", all fields will be collapsed into a single level deep object (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Type: boolean. Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us with an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "facet_size": {
            "description": "the number of facet buckets to return in the response. Type: integer. Default: 10. Max: 1000.",
            "in": "query",
            "name": "facet_size",
            "schema": {
              "type": "integer"
            }
          },
          "facets": {
            "description": "a comma-separated list of fields to return facets on.  In addition to query hits, the fields notated in \"facets\" will be aggregated by value and bucklet counts will be displayed in the \"facets\" field of the response object. Type: string (list). Default: None. Max: 1000.",
            "in": "query",
            "name": "facets",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated list of fields (in dotfield notation) used to limit the fields returned from the matching disease hit(s). The supported field names can be found from any disease object or from the /metadata/fields endpoint. If \"fields=all\", all available fields will be returned. Type: string (list). Default: all. Max: 1000.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "format": {
            "description": "controls output format of server response, currently supports: \"json\", \"jsonld\", \"html\". Type: string. Default: json.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching disease hits to skip, starting from 0.  This can be useful for paging in combination with the \"size\" parameter. Type: integer. Default: None.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "prefix": {
            "description": "Pass a prefix string to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          "search": {
            "description": "Pass a search term to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          "size": {
            "description": "the maximum number of matching disease hits to return per batch. Type: integer. Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated list of fields to sort on. Prefix each with \"-\" for descending order, otherwise in ascending order. Default: sort by descending score.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "Disease": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Disease"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Disease"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "PhenotypicFeature-affected_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-affected_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-affected_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-affected_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-affected_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-affected_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-affected_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-affected_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-affects-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-affects-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-affects-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-affects-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-affects-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-affects-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-affects-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-affects-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-causes-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "causes"
              },
              "path": "/query",
              "predicate": "causes",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-causes-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-causes-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "causes"
              },
              "path": "/query",
              "predicate": "causes",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-causes-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-disrupted_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-disrupted_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-disrupted_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-disrupted_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-disrupted_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-disrupted_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-disrupts-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-disrupts-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-disrupts-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-disrupts-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-disrupts-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-disrupts-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-disrupts-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-disrupts-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-has_part-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "has_part"
              },
              "path": "/query",
              "predicate": "has_part",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-has_part-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-has_part-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "has_part"
              },
              "path": "/query",
              "predicate": "has_part",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-has_part-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-has_part-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "has_part"
              },
              "path": "/query",
              "predicate": "has_part",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-has_part-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-has_part-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "has_part"
              },
              "path": "/query",
              "predicate": "has_part",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-has_part-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-has_subclass-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "has_subclass"
              },
              "path": "/query",
              "predicate": "has_subclass",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-has_subclass-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-has_subclass-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "has_subclass"
              },
              "path": "/query",
              "predicate": "has_subclass",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-has_subclass-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-located_in-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "located_in"
              },
              "path": "/query",
              "predicate": "located_in",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-located_in-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-located_in-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "located_in"
              },
              "path": "/query",
              "predicate": "located_in",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-located_in-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-located_in-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "located_in"
              },
              "path": "/query",
              "predicate": "located_in",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-located_in-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-manifestation_of-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "manifestation_of"
              },
              "path": "/query",
              "predicate": "manifestation_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-manifestation_of-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-manifestation_of-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "manifestation_of"
              },
              "path": "/query",
              "predicate": "manifestation_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-manifestation_of-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-manifestation_of-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "manifestation_of"
              },
              "path": "/query",
              "predicate": "manifestation_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-manifestation_of-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-manifested_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "manifested_by"
              },
              "path": "/query",
              "predicate": "manifested_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-manifested_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-negatively_regulated_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-negatively_regulated_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-negatively_regulated_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-negatively_regulated_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-negatively_regulates-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-negatively_regulates-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-negatively_regulates-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-negatively_regulates-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-negatively_regulates-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-negatively_regulates-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-negatively_regulates-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-negatively_regulates-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-part_of-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "part_of"
              },
              "path": "/query",
              "predicate": "part_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-part_of-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-part_of-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "part_of"
              },
              "path": "/query",
              "predicate": "part_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-part_of-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-part_of-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "part_of"
              },
              "path": "/query",
              "predicate": "part_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-part_of-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-part_of-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "part_of"
              },
              "path": "/query",
              "predicate": "part_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-part_of-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-part_of-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "part_of"
              },
              "path": "/query",
              "predicate": "part_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-part_of-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-physically_interacts_with-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-physically_interacts_with-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-physically_interacts_with-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-physically_interacts_with-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-physically_interacts_with-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-physically_interacts_with-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-positively_regulated_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-positively_regulated_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-positively_regulated_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-positively_regulated_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-positively_regulates-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-positively_regulates-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-positively_regulates-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-positively_regulates-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-preceded_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "preceded_by"
              },
              "path": "/query",
              "predicate": "preceded_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-preceded_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-preceded_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "preceded_by"
              },
              "path": "/query",
              "predicate": "preceded_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-preceded_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-precedes-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "precedes"
              },
              "path": "/query",
              "predicate": "precedes",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-precedes-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-predisposes-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "predisposes"
              },
              "path": "/query",
              "predicate": "predisposes",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-predisposes-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-prevents-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "prevents"
              },
              "path": "/query",
              "predicate": "prevents",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-prevents-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-produced_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "produced_by"
              },
              "path": "/query",
              "predicate": "produced_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-produced_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-produced_by-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "produced_by"
              },
              "path": "/query",
              "predicate": "produced_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-produced_by-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-produced_by-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "produced_by"
              },
              "path": "/query",
              "predicate": "produced_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-produced_by-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-produced_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "produced_by"
              },
              "path": "/query",
              "predicate": "produced_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-produced_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-produced_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "produced_by"
              },
              "path": "/query",
              "predicate": "produced_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-produced_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-produced_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "produced_by"
              },
              "path": "/query",
              "predicate": "produced_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-produced_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-produces-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "produces"
              },
              "path": "/query",
              "predicate": "produces",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-produces-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-produces-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "produces"
              },
              "path": "/query",
              "predicate": "produces",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-produces-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-related_to-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-related_to-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-related_to-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-related_to-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-related_to-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-related_to-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-related_to-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-related_to-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-related_to-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-related_to-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-subclass_of-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "subclass_of"
              },
              "path": "/query",
              "predicate": "subclass_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-subclass_of-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-subclass_of-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "subclass_of"
              },
              "path": "/query",
              "predicate": "subclass_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-subclass_of-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-subclass_of-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "subclass_of"
              },
              "path": "/query",
              "predicate": "subclass_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-subclass_of-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-subclass_of-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "subclass_of"
              },
              "path": "/query",
              "predicate": "subclass_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-subclass_of-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-subclass_of-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "subclass_of"
              },
              "path": "/query",
              "predicate": "subclass_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-subclass_of-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-subclass_of-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "subclass_of"
              },
              "path": "/query",
              "predicate": "subclass_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-subclass_of-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "PhenotypicFeature-treats-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "treats"
              },
              "path": "/query",
              "predicate": "treats",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/PhenotypicFeature-treats-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "PhenotypicFeature-affected_by-BiologicalProcess": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "PhenotypicFeature-affected_by-ChemicalSubstance": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "PhenotypicFeature-affected_by-Disease": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "PhenotypicFeature-affected_by-Gene": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "PhenotypicFeature-affects-BiologicalProcess": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "PhenotypicFeature-affects-Cell": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "PhenotypicFeature-affects-CellularComponent": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "PhenotypicFeature-affects-Disease": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "PhenotypicFeature-causes-BiologicalProcess": {
            "pmid": "causes.pmid",
            "umls": "causes.umls"
          },
          "PhenotypicFeature-causes-Disease": {
            "pmid": "causes.pmid",
            "umls": "causes.umls"
          },
          "PhenotypicFeature-disrupted_by-ChemicalSubstance": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "PhenotypicFeature-disrupted_by-Disease": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "PhenotypicFeature-disrupted_by-Gene": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "PhenotypicFeature-disrupts-BiologicalProcess": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "PhenotypicFeature-disrupts-Cell": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "PhenotypicFeature-disrupts-CellularComponent": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "PhenotypicFeature-disrupts-Disease": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "PhenotypicFeature-has_part-CellularComponent": {
            "pmid": "has_part.pmid",
            "umls": "has_part.umls"
          },
          "PhenotypicFeature-has_part-ChemicalSubstance": {
            "pmid": "has_part.pmid",
            "umls": "has_part.umls"
          },
          "PhenotypicFeature-has_part-Disease": {
            "pmid": "has_part.pmid",
            "umls": "has_part.umls"
          },
          "PhenotypicFeature-has_part-Gene": {
            "pmid": "has_part.pmid",
            "umls": "has_part.umls"
          },
          "PhenotypicFeature-has_subclass-Disease": {
            "pmid": "has_subclass.pmid",
            "umls": "has_subclass.umls"
          },
          "PhenotypicFeature-has_subclass-PhenotypicFeature": {
            "pmid": "has_subclass.pmid",
            "umls": "has_subclass.umls"
          },
          "PhenotypicFeature-located_in-AnatomicalEntity": {
            "pmid": "located_in.pmid",
            "umls": "located_in.umls"
          },
          "PhenotypicFeature-located_in-Cell": {
            "pmid": "located_in.pmid",
            "umls": "located_in.umls"
          },
          "PhenotypicFeature-located_in-CellularComponent": {
            "pmid": "located_in.pmid",
            "umls": "located_in.umls"
          },
          "PhenotypicFeature-manifestation_of-BiologicalProcess": {
            "pmid": "manifestation_of.pmid",
            "umls": "manifestation_of.umls"
          },
          "PhenotypicFeature-manifestation_of-Disease": {
            "pmid": "manifestation_of.pmid",
            "umls": "manifestation_of.umls"
          },
          "PhenotypicFeature-manifestation_of-Gene": {
            "pmid": "manifestation_of.pmid",
            "umls": "manifestation_of.umls"
          },
          "PhenotypicFeature-manifested_by-Disease": {
            "pmid": "manifested_by.pmid",
            "umls": "manifested_by.umls"
          },
          "PhenotypicFeature-negatively_regulated_by-ChemicalSubstance": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "PhenotypicFeature-negatively_regulated_by-Gene": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "PhenotypicFeature-negatively_regulates-BiologicalProcess": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "PhenotypicFeature-negatively_regulates-ChemicalSubstance": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "PhenotypicFeature-negatively_regulates-Disease": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "PhenotypicFeature-negatively_regulates-Gene": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "PhenotypicFeature-part_of-AnatomicalEntity": {
            "pmid": "part_of.pmid",
            "umls": "part_of.umls"
          },
          "PhenotypicFeature-part_of-Cell": {
            "pmid": "part_of.pmid",
            "umls": "part_of.umls"
          },
          "PhenotypicFeature-part_of-CellularComponent": {
            "pmid": "part_of.pmid",
            "umls": "part_of.umls"
          },
          "PhenotypicFeature-part_of-ChemicalSubstance": {
            "pmid": "part_of.pmid",
            "umls": "part_of.umls"
          },
          "PhenotypicFeature-part_of-Disease": {
            "pmid": "part_of.pmid",
            "umls": "part_of.umls"
          },
          "PhenotypicFeature-physically_interacts_with-ChemicalSubstance": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "PhenotypicFeature-physically_interacts_with-Disease": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "PhenotypicFeature-physically_interacts_with-Gene": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "PhenotypicFeature-positively_regulated_by-ChemicalSubstance": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "PhenotypicFeature-positively_regulated_by-Gene": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "PhenotypicFeature-positively_regulates-ChemicalSubstance": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "PhenotypicFeature-positively_regulates-Gene": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "PhenotypicFeature-preceded_by-BiologicalProcess": {
            "pmid": "preceded_by.pmid",
            "umls": "preceded_by.umls"
          },
          "PhenotypicFeature-preceded_by-Disease": {
            "pmid": "preceded_by.pmid",
            "umls": "preceded_by.umls"
          },
          "PhenotypicFeature-precedes-BiologicalProcess": {
            "pmid": "precedes.pmid",
            "umls": "precedes.umls"
          },
          "PhenotypicFeature-predisposes-Disease": {
            "pmid": "predisposes.pmid",
            "umls": "predisposes.umls"
          },
          "PhenotypicFeature-prevents-Disease": {
            "pmid": "prevents.pmid",
            "umls": "prevents.umls"
          },
          "PhenotypicFeature-produced_by-BiologicalProcess": {
            "pmid": "produced_by.pmid",
            "umls": "produced_by.umls"
          },
          "PhenotypicFeature-produced_by-Cell": {
            "pmid": "produced_by.pmid",
            "umls": "produced_by.umls"
          },
          "PhenotypicFeature-produced_by-CellularComponent": {
            "pmid": "produced_by.pmid",
            "umls": "produced_by.umls"
          },
          "PhenotypicFeature-produced_by-ChemicalSubstance": {
            "pmid": "produced_by.pmid",
            "umls": "produced_by.umls"
          },
          "PhenotypicFeature-produced_by-Disease": {
            "pmid": "produced_by.pmid",
            "umls": "produced_by.umls"
          },
          "PhenotypicFeature-produced_by-Gene": {
            "pmid": "produced_by.pmid",
            "umls": "produced_by.umls"
          },
          "PhenotypicFeature-produces-ChemicalSubstance": {
            "pmid": "produces.pmid",
            "umls": "produces.umls"
          },
          "PhenotypicFeature-produces-Gene": {
            "pmid": "produces.pmid",
            "umls": "produces.umls"
          },
          "PhenotypicFeature-related_to-AnatomicalEntity": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "PhenotypicFeature-related_to-BiologicalProcess": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "PhenotypicFeature-related_to-ChemicalSubstance": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "PhenotypicFeature-related_to-Disease": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "PhenotypicFeature-related_to-Gene": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "PhenotypicFeature-subclass_of-AnatomicalEntity": {
            "pmid": "subclass_of.pmid",
            "umls": "subclass_of.umls"
          },
          "PhenotypicFeature-subclass_of-BiologicalProcess": {
            "pmid": "subclass_of.pmid",
            "umls": "subclass_of.umls"
          },
          "PhenotypicFeature-subclass_of-ChemicalSubstance": {
            "pmid": "subclass_of.pmid",
            "umls": "subclass_of.umls"
          },
          "PhenotypicFeature-subclass_of-Disease": {
            "pmid": "subclass_of.pmid",
            "umls": "subclass_of.umls"
          },
          "PhenotypicFeature-subclass_of-Gene": {
            "pmid": "subclass_of.pmid",
            "umls": "subclass_of.umls"
          },
          "PhenotypicFeature-subclass_of-PhenotypicFeature": {
            "pmid": "subclass_of.pmid",
            "umls": "subclass_of.umls"
          },
          "PhenotypicFeature-treats-Disease": {
            "pmid": "treats.pmid",
            "umls": "treats.umls"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothings.io",
          "name": "Chunlei Wu",
          "x-id": "https://github.com/newgene",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the SEMMED disease query web services.  Learn more about [mydisease.info](http://pending.biothings.io/semmed)",
        "termsOfService": "http://biothings.ncats.io",
        "title": "SEMMED Phenotype API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/phenotype",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple disease IDs separated by comma. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted. Type: string (list). Max: 1000.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Disease"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "A list of matching disease objects"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "For a list of disease IDs, return the matching disease object",
              "tags": [
                "gene"
              ]
            }
          }
        },
        {
          "path": "/phenotype/{phenotypeid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Retrieve disease objects based on ID",
                  "example": "C0004096",
                  "in": "path",
                  "name": "phenotypeid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Disease"
                      }
                    }
                  },
                  "description": "A matching disease object"
                },
                "404": {
                  "description": "A response indicating an unknown disease ID"
                }
              },
              "summary": "Retrieve disease objects based on ID",
              "tags": [
                "disease"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "mydisease.info metadata object"
                }
              },
              "summary": "Get metadata about the data available from mydisease.info",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/search",
                  "name": "search"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/prefix",
                  "name": "prefix"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "description": "mydisease.info metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from a mydisease.info chem object",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string.  The detailed query syntax can be found from our [docs](http://mydisease.info).  Examples: \"cancer\", \"primary ciliary dyskinesia\", \"DOID:9562\"",
                  "example": "cancer",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/facet_size",
                  "name": "facet_size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/facets",
                  "name": "facets"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make disease queries and return matching disease hits. Supports JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms separated by comma (also \"+\" or whitespace).  Does not support wildcard queries",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "a comma-separated list of fields as the search \"scopes\" (fields to search through for query term). The available \"fields\" that can be passed to the \"scopes\" parameter are listed in the **/metadata/fields** endpoint.string Default: \"scopes=_id\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make batch disease queries and return matching disease hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-affected_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-affected_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-affected_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-affected_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-affects-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-affects-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-affects-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-affects-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-causes-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-causes-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-disrupted_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-disrupted_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-disrupted_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-disrupts-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-disrupts-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-disrupts-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-disrupts-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-has_part-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-has_part-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-has_part-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-has_part-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-has_subclass-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-has_subclass-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-located_in-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-located_in-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-located_in-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-manifestation_of-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-manifestation_of-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-manifestation_of-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-manifested_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-negatively_regulated_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-negatively_regulated_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-negatively_regulates-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-negatively_regulates-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-negatively_regulates-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-negatively_regulates-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-part_of-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-part_of-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-part_of-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-part_of-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-part_of-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-physically_interacts_with-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-physically_interacts_with-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-physically_interacts_with-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-positively_regulated_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-positively_regulated_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-positively_regulates-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-positively_regulates-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-preceded_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-preceded_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-precedes-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-predisposes-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-prevents-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-produced_by-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-produced_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-produced_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-produced_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-produced_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-produced_by-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-produces-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-produces-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-related_to-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-related_to-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-related_to-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-related_to-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-related_to-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-subclass_of-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-subclass_of-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-subclass_of-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-subclass_of-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-subclass_of-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-subclass_of-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/PhenotypicFeature-treats-Disease"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "https://biothings.ncats.io/semmedphenotype"
        }
      ],
      "tags": [
        {
          "name": "phenotype"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        },
        {
          "name": "semmed"
        }
      ],
      "~raw": "H4sIAJyDUV8C_-VdW2_cNhb-K8TsPiRZe-zsZgvUQIFt47TIomncuot9iA2DI3FmVGvEqSjZnjX83_eQ1IWSKInyUG6HykvGEnWu3zm8HUqPM7olEd4GszM0-8f8dH46O0KzIFpSuPA482iUYC8Rv8kGByFvtibh9l-LgCbrIFqxeUD5IxHeEH7z_TqNQhKg_6b86sNx4ItHkmTLzk5OVkGyThdzj25OInK_IhGRrWIaiqdjwrY0YsEiJMgndyQE6eLZE7TxCfPiYJsENOINz6mXbggIxy8gukTJmqDLD58-fThHfsAIZgT9npJ4h-7JAjES3wUeYXOEfiQ4jtCGxgThBU0T9GWzyx6Yc7WvX3FZQVQwiw_6zVVFTxjZbIj_mgudkHjDPi8vJelcSXiwfCDycJLbJwkSqWIm5MWaRDTZbQn69uIjb3BHYpYp9xa8wHXmYsNVuPTlsW6Ai5j6qSe0l804jTQOVWs3JckU2ObMZ0_XXDa8ypjkXlQaHKHyMo7gqjB59bqwdPVSEuOIhTihcfV6IVP1spRLirPFyZoJyJ2UcvA_t5RJKG5xDM8lhW3-GpMlp_KXE0AWAAiAwU7KRic-TZYBCX0VqMU1IUcfBdGUqc9nV4yelqGjPCwvmHGm8QYnFc7yirBVTMD2LPmO-rsiYIGC-I232zDwhLtOHo7v7--P-ZPHABISedQnvmjFvDVII80a83BLAiKtH_jy_xryNmmYBFseoFmcfTxngEEuckJ8tNghUGSD5-gnmhCIS5wgL41jkCrk0YhoBP8n-JaImA2iLQQhsELpFiUUvT09PUUb_BBs0s2RaAE5IUH3QRiiBTy8CRLgMke_AijOEEtiwBJ6FQYseT1Hn_DDmaAwFyEncTOTjWZPT5m9glio_kUoeP30lN0QmSdT_e-np53m_I0JW1SsFyRkI5_WulS2ZCfn0moiwHMJcRxjiJ8nTaL7FnHdeIYDn3s8cgq708VvxEsEBGfvniFwp5gf4pjGvxAGzm4TLDcZ-NAXfEA2HKFgI3EEXpZI5ajIMoTIaimgI-ZwnX1PY4QLBRU8HQHxJIVEzQHQovhMyVwz0ZVcC_pl0jh5LH4G_pPQeUX0GaSm3C8EMAP9T93WaAF_-ABhEJLzJw94s5V5_T3A7t3p11_J_lMkUchjatwqwsyqUEzilHDLlL7RYPcl0pyHw3CBvVuVQnHtwBPlvvFtFtX6UGmDsAzdd7o02xpfaXQb0ftICZdGXJnCtwifrF0eQWBR7OMEd4bMECzJgJBJQAutdhfVe5_KaA3lkhYGrVniB5KUbeSAj6cU-ecdYAvzoeYyphtUpVwxT2GPmn1ytO9jJmAZe5U8kV15oYDdwv3goZKn5JXRgs7Qo9K2z3Fs9mTNv7jmYcRDV9eX1L0tYTug9_hZTDxk6oYpx69cLqAZhHlHiNgOpi4PyINwhkHNkqaRL4WkaYy--NRjxTykKjQMctAH2emwM3QFvo48El-B_Ffgt4BbB3lBGPD__R27DSLCAizvn3_-eH729T-_-vvVrNZ3SSodgfr7n7XD2q-7WWKPJDcs-B-pUCivGlFhNK5EgPj7haJ3rw6T68kamhvarm41c3txoFe48r___F28iOruEbEM7qLfvg-StchKV7N1kLCrGcpmWLsDHrN_4jM3dYkFpotAws9H7I2hDld9ji7T7RbigqF_X37-6UI88P7zL5cIM5gThuG8koEl52vO-Q-c8-8VW3vlpT1i6w9bLfi9c61ARoZYM9OsFaBXOGQUwuRvECMwJ7wHzABQIRvx_u6cAsJg5oSYxBBfDPA9HPs5_HSTfdE7gYDaJQws2R6XkuRz0HzowETcypEYyCVJgXCvsgYJzW8m65imqzWPG0VLkJt3--UQ5CoDANCQSyKy699ixkfkQE7miYJR4VOEYyLEg2aBnBC_eVMfgb55g0jkb2kQJfNsTeScLDFY_6wg-s1N4F_N9Csj1hZB-jPoxefLX7ty1M_VHJrPXNzNpQueMAdnVF2-FEvpi4Qc367YMRdB6N6VL3XNT_Kl6cD7nmCQgBzj5RKcQPybxe74PdgHtA0v0wVL-LixIzE9g_x3AQ3pijO4iKlHGLNLXll9s0f0B774ZIkiO34P3WEa4vh9TsEeacvas_G8Jc2wPzUPp5DO7Cme0RtBbwjuON2OF2QV-tbsUaFqJw4ykqMEQkHbtgHGhIStWFhjdgPDimQMdBW0rRm2lNY-DAradhDLybF04YUwmLNrgIJq4_b-9EPq8aHvTRCNYWKF-rcRTqgA3IcoCZKdddH3J7jBUbCEmZFocEOX9rzYoDxCnmjwsAPrnKzlLiMiK7h3R8LdTUxWALvx-rw2Vnbso6HOXkiLUbobLZ8x3c4sOYKncg57-4kmp2wnyxTU7GMkJ23NXarmlruG7XrHuPqAhABm6zGG4f4Nn9-PYphWZvZM1crCErwpC14oYbaxGk0R9kJaWEs1MfGIb7lHVImOkNcz8mwk2jBLAYPb7CqA6B1vb5Mir5bMwsZOLlcpjgBhhfwobivJj2JkW9FWdZvtjkiSZyM60FbeiYnMxQkdYZSjEB_BEgr1EZCsULcGZIWmHe_l0_hxBqkq9RH8p5IfwYEqeWseVImOsHSikreDkCSGH0qHdy33nEpCzT3wx7JURLPFuaOp2GPkG4wIi0oh2biyt5hQtOF7UDjblueNqrXVc5Pyvd5SoHLnXSMq37OLaSh29-SOWX6gQ26AEb9WxzhHH5egES9CkvvFV7O3vMQJxMk3cPN6cY-GId4ysXcKymLEQKSQoJAfLkE-IduMJt-CDlEkljuUTUdJRfPYEUqZ2JPLFEP5yQixNRysomC5EzpkJMEYqcdd_Toz74LSkOBoXm7ULnHISJe91ZIGjb0zitLg-WmdhrXBdBwbfFdZDo5j0AQQxW3Oq8_yszJHvFafb_2nMV4R8QxoBt3aXeATeETuyALCBKcjxKjc2Ian5N52IgAGs6FbYYeUcTLgrCW4hN7zcn9BAQh36VwUYfQATCna0igtHJFuFiAR3-TnbdEi9W5JIrbys43WbHs939fNA4FP6lYkVjz19rR-1qBF-mqBmUaFjLaiw_MKFkolJBFEAVnoY4Sw7wc5LGV5At89licrsmcFcmV1wVUmA4RVgf3VKuZLN7Jc4w6HKRGb09x8IZgRABIpocJnAyHelcUKCkkZKEVsV3b4W050FCb_CdLgEKMzE8yU1btD7f0KtGuE_mseSaKYIww2QaLauMhkospTe6oB_PKKZXUjWaULby85gGpMUy6Ko10tN4oIy3nUy0TKIhGZQeXVbyDz5elTqZmtJtJcgT4_iQ7EzE1FiVSfm2QFU3vPAWhPE36MqOw95Jm4AmRHyhGkzLaifJaXhcjiWP4r9OXvdbIBg9T6wVJF3rRTsaIGq08xXvjYm6205R-il7kNoBuCYV4sSk-E109FvXFQYAUAuUxDUZy0xSveDIAL2F4EkeytlLoanqbU0UF7_hPB2GWBrMKzL-FlleYaE1zIYYtskIMNdF4GoehWKrVVEkmt_uqTtqyA7_FXVpjfLm5eEkbizVjClscF-oTt6Aqz83UmIMt6FRi7ykKlzk6xS27DPlAUT7eI3d8H8qdF13chgUMwuENA_Gp2zHsgiANOWJ7thVzpk_gIUSAe3weikgvh6l1FQUEc-kCFAPNo3O2urDa8y1lPxX3ZF-WTAE2R5U3gtzq8crSRN7xWKv2U80ZqZZuGBXQ0fKSmZSOq1zwx72sdeGo41uv-qqclocf4vOyoUdMcnGzaRThC_Cx6i9kypDIN5yJJuAuRyjMdOlPWdbjWHNbM9Wq3pCjTs3MyFK5AzA7WMqH0Vh9q4maCw_ZA1PgR7n_17obGN1Iq_iiokDuv1LIUTjyhClcRoK6j2ZPCGdJbBrJoIKzhW28lT_60FFM-zoZWSEqZ-EnnS5m8aMy5HcnEAZezGk35soT_fPrxUuQMQEWUBJ7oYJqLGDy8oZ9eU_GQqJMX-TONPeVFA_yaHB318tCsHcnj-JVFh2LQPFN0FnYV513PigNTmnrzRf6DF4vPHqXqX06vn2ZqufYs3YQsr5UVY7XveM9THjvKR3U3G7zdcn-dda--5O2Ps_bPqXCdiZ0OXnbSUJ0baWhR62EgQrPcN0lEaJc990JE2ccfAg7KZckpel_tl_fxuVgpPgyHy0XtSXo7X89_pqt1ZcsH0v03N1gNAMAccX5LubkOBawPAe4md3e83ZPUe308rSGdO343Hsoxkzx_QKl9gtl8sGtrp8Vcyt9StYN3b_M8X9XBuZqd_p1K7nbL5waZu9v7PScs3VykU5U-eCT0n5Gt4qGqvAEqXMz87iKgtRcY7He3lmbc9bh-cWaAu6ezPJMr7AoAjBZoSqV7UOBwonfI430Jvt_PUxnqu-d7g-G-MQrcWqpxM7MPd2_H-0zcnMvlCh-847vfRFNFQal0Dwpc7NLd83hrl27s56kM4B2M9v4BvDEK3Jqxu-dr_UzdxL2NN2m5ltBzBZ1wtu69Z02flyob-L3prcNAQAuPCWJBe-R6OCo631DnZqdfqnzwiOh7v2AVD6rivWhovEPhMMDQfPXDBLGge__FHlBwa2nH3fB_jptb38rp0oiwruTBO77rXapVBDRVN8TBVFb13ceGwSr_s1Hi1hKB-1jQLxkMdb-7hTwVDZ1xf08pT01pve_NXynt5sZQi_4Hj5FBrwqv4qbVJMMQ5FYfMjWc6HuU_aHBppxZmItwYc_MKWwQaqYyb5kOagzmL3ujxsWx7HQQ0jqy3RsXzo9NHEWE8aikFQ6tHzxxch8k0_bgwdD1mZoqFgqNu93v1t6Ha27W73qYunYi8wvnnN4_izBEgIujPte83Tq2G5DAp1DV4mJq76ln6UPAgG-gOZr52yxw-CgZ9n27Gm7azTIUSU72IBNETXsvYw8rbq0lTBEl-lWF4RAx_tiko92SXv_DB86Qj4jWMNRmkmEIcizFTAwnLellb2iwKWcW5iJc2DNzChuEGueziaPYMM4j7XDQfILZqSlOqd_hQ0D_ueya81WF-30-lSIKV3FgUDJhjgg2NTgwV7DABgChqy9ofH7esb4g188Fvzd8pXN4qXCrz-84Z1cdLpRzwdtVL-lcnana5mfqp162SuFWpUOpmQN-rnlJ42dFWwNXT2U5wFUQGEz-hyFiOiM8NxFhNM4bhAg3e343vd_R_w_yuWMLfo56u2V5b-AQYCplUQ6PA_vKo4wRwaY2ImSuYIENGAuyXhQ4mf8d8nVn5m91b0zknnFCJ3KYpVT44F3f5bsGEFS9e6EwlYzvJhgMsv4gNExl_u8mGgxm_4PQ4OLc303Pt878B_nbrXGfm57Wj_363Zy_AHg6Z5kVjQ8eAJ3ea6Chonk_HKYyBHQVEAaDwIGImMow0FVEGAwEByLCxaGgq95vHQwO9PlUPg7hKg4MPg0xEBFuTRBc9bt-imDg6iSGH24W-0nVDt7NNQ81nJyrec3v6KkKKZqU8XJJvI4DqI9SXeChtJyLa1yIjXSQek9ce9ICTWWmG2uOxqyE9mgsshw5An39B7XrjFgLE2bCoN0-e5E18fFeDLKiVSs0PZxWa9xLqvJWg2h2uZ9mtx2eTb3y3fbu4FWbNjhVbpry09nJPpdGVNlk0RdYebM2PsyIR4eh9qTcDSs7PBoRthfZzu8JlzzyZg0exQ0THjrD26HcDRs7PBrI35us5quPVep5Ay2H4qYpF9000jK_nq_XldzKhg1eyi0zTppV9HEYNUJvb-IdX3squdQbNXg1Ggzh2J2zxuXdCKlR2LV3j5UWrbx6e68hn-Iombc81RCjrd0zBGrY-2VlYMMtwkxEYYPl6Ab9y8mhA-XLcTeBw_6sO17cXHLOGjWY5dcN6Deysw2anXi1wEAHAEu2aO9892Ew6B2OCsu255pCtLZ8llhaA_9RwjQCbmxJBrzYTBFK_1RTpJZ2zxCoaZgXlYENtwgzEYUNlsPEEBZYa18nozAt7zd5KfcMWXT3tvaYMTNOrI1Nn800r12oEM_v6-gX97pZ1E_5V-iLmzri8kYn5ca5cpVycVNDvLxnSr87lOwy63O4VWZ6t1hl0Yx_y87pHhhYY8bMYMDa2DAjHm3Weh7Z7nMZJZOyXYONcsuMUbeVbHLqjhSbnHRhYpN-w-t7E--pySw5KQ0brNR7hry6vW-ZWTcALDPTYcAyi-7lTMvMGpizQL-xy19Sl7cahLPLkib8-z_GqOT0yvIAAA=="
    },
    {
      "_id": "7c07eca4ef5ceb532d06c0180e86aedd",
      "_meta": {
        "ETag": "8c6c5f1503073f27fc1e7999760ee078645eb4e787eb9fb087c1871f7e15a777",
        "github_username": "kevinxin90",
        "timestamp": "2020-05-27T16:53:27.181976",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:49.350098",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/semmed/semmed_chemical.yaml"
      },
      "_score": 0.93676925,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call. Type: string.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned disease object. If \"true\" or \"1\", all fields will be collapsed into a single level deep object (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Type: boolean. Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us with an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "facet_size": {
            "description": "the number of facet buckets to return in the response. Type: integer. Default: 10. Max: 1000.",
            "in": "query",
            "name": "facet_size",
            "schema": {
              "type": "integer"
            }
          },
          "facets": {
            "description": "a comma-separated list of fields to return facets on.  In addition to query hits, the fields notated in \"facets\" will be aggregated by value and bucklet counts will be displayed in the \"facets\" field of the response object. Type: string (list). Default: None. Max: 1000.",
            "in": "query",
            "name": "facets",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated list of fields (in dotfield notation) used to limit the fields returned from the matching disease hit(s). The supported field names can be found from any disease object or from the /metadata/fields endpoint. If \"fields=all\", all available fields will be returned. Type: string (list). Default: all. Max: 1000.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "format": {
            "description": "controls output format of server response, currently supports: \"json\", \"jsonld\", \"html\". Type: string. Default: json.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching disease hits to skip, starting from 0.  This can be useful for paging in combination with the \"size\" parameter. Type: integer. Default: None.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "prefix": {
            "description": "Pass a prefix string to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          "search": {
            "description": "Pass a search term to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          "size": {
            "description": "the maximum number of matching disease hits to return per batch. Type: integer. Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated list of fields to sort on. Prefix each with \"-\" for descending order, otherwise in ascending order. Default: sort by descending score.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "Disease": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Disease"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Disease"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "ChemicalSubstance-affected_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-affected_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-affected_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-affected_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-affected_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-affected_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-affected_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-affected_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-affects-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-affects-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-affects-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-affects-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-affects-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-affects-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-affects-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-affects-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-affects-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-affects-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-affects-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-affects-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-affects-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-affects-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-affects-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-affects-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-causes-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "causes"
              },
              "path": "/query",
              "predicate": "causes",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-causes-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-causes-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "causes"
              },
              "path": "/query",
              "predicate": "causes",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-causes-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-coexists_with-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "coexists_with"
              },
              "path": "/query",
              "predicate": "coexists_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-coexists_with-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-coexists_with-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "coexists_with"
              },
              "path": "/query",
              "predicate": "coexists_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-coexists_with-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-coexists_with-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "coexists_with"
              },
              "path": "/query",
              "predicate": "coexists_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-coexists_with-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-coexists_with-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "coexists_with"
              },
              "path": "/query",
              "predicate": "coexists_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-coexists_with-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-coexists_with-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "coexists_with"
              },
              "path": "/query",
              "predicate": "coexists_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-coexists_with-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-coexists_with-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "coexists_with"
              },
              "path": "/query",
              "predicate": "coexists_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-coexists_with-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-coexists_with-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "coexists_with"
              },
              "path": "/query",
              "predicate": "coexists_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-coexists_with-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-coexists_with-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "coexists_with"
              },
              "path": "/query",
              "predicate": "coexists_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-coexists_with-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-disrupted_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-disrupted_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-disrupted_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-disrupted_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-disrupts-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-disrupts-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-disrupts-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-disrupts-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-disrupts-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-disrupts-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-disrupts-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-disrupts-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-disrupts-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-disrupts-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-disrupts-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-disrupts-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-disrupts-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-disrupts-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-disrupts-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-disrupts-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-negatively_regulated_by-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-negatively_regulated_by-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-negatively_regulated_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-negatively_regulated_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-negatively_regulated_by-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-negatively_regulated_by-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-negatively_regulated_by-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-negatively_regulated_by-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-negatively_regulated_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-negatively_regulated_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-negatively_regulated_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-negatively_regulated_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-negatively_regulated_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-negatively_regulated_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-negatively_regulated_by-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-negatively_regulated_by-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-negatively_regulates-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-negatively_regulates-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-negatively_regulates-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-negatively_regulates-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-negatively_regulates-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-negatively_regulates-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-negatively_regulates-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-negatively_regulates-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-negatively_regulates-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-negatively_regulates-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-negatively_regulates-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-negatively_regulates-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-negatively_regulates-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-negatively_regulates-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-negatively_regulates-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-negatively_regulates-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-physically_interacts_with-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-physically_interacts_with-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-physically_interacts_with-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-physically_interacts_with-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-physically_interacts_with-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-physically_interacts_with-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-physically_interacts_with-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-physically_interacts_with-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-physically_interacts_with-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-physically_interacts_with-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-physically_interacts_with-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-physically_interacts_with-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-physically_interacts_with-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-physically_interacts_with-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-physically_interacts_with-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-physically_interacts_with-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-positively_regulated_by-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-positively_regulated_by-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-positively_regulated_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-positively_regulated_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-positively_regulated_by-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-positively_regulated_by-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-positively_regulated_by-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-positively_regulated_by-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-positively_regulated_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-positively_regulated_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-positively_regulated_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-positively_regulated_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-positively_regulated_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-positively_regulated_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-positively_regulated_by-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-positively_regulated_by-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-positively_regulates-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-positively_regulates-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-positively_regulates-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-positively_regulates-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-positively_regulates-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-positively_regulates-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-positively_regulates-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-positively_regulates-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-positively_regulates-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-positively_regulates-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-positively_regulates-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-positively_regulates-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-positively_regulates-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-positively_regulates-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-positively_regulates-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-positively_regulates-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-prevents-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "prevents"
              },
              "path": "/query",
              "predicate": "prevents",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-prevents-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-produced_by-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "produced_by"
              },
              "path": "/query",
              "predicate": "produced_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-produced_by-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-produced_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "produced_by"
              },
              "path": "/query",
              "predicate": "produced_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-produced_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-produced_by-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "produced_by"
              },
              "path": "/query",
              "predicate": "produced_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-produced_by-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-produced_by-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "produced_by"
              },
              "path": "/query",
              "predicate": "produced_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-produced_by-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-produced_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "produced_by"
              },
              "path": "/query",
              "predicate": "produced_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-produced_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-produced_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "produced_by"
              },
              "path": "/query",
              "predicate": "produced_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-produced_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-produced_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "produced_by"
              },
              "path": "/query",
              "predicate": "produced_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-produced_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-produced_by-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "produced_by"
              },
              "path": "/query",
              "predicate": "produced_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-produced_by-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-produces-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "produces"
              },
              "path": "/query",
              "predicate": "produces",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-produces-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-produces-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "produces"
              },
              "path": "/query",
              "predicate": "produces",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-produces-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-produces-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "produces"
              },
              "path": "/query",
              "predicate": "produces",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-produces-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-produces-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "produces"
              },
              "path": "/query",
              "predicate": "produces",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-produces-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-produces-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "produces"
              },
              "path": "/query",
              "predicate": "produces",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-produces-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-related_to-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-related_to-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-related_to-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-related_to-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-related_to-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-related_to-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-related_to-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-related_to-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-related_to-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-related_to-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-related_to-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-related_to-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "ChemicalSubstance-treats-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "treats"
              },
              "path": "/query",
              "predicate": "treats",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ChemicalSubstance-treats-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "ChemicalSubstance-affected_by-BiologicalProcess": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "ChemicalSubstance-affected_by-ChemicalSubstance": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "ChemicalSubstance-affected_by-Disease": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "ChemicalSubstance-affected_by-Gene": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "ChemicalSubstance-affects-AnatomicalEntity": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "ChemicalSubstance-affects-BiologicalProcess": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "ChemicalSubstance-affects-Cell": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "ChemicalSubstance-affects-CellularComponent": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "ChemicalSubstance-affects-ChemicalSubstance": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "ChemicalSubstance-affects-Disease": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "ChemicalSubstance-affects-Gene": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "ChemicalSubstance-affects-PhenotypicFeature": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "ChemicalSubstance-causes-BiologicalProcess": {
            "pmid": "causes.pmid",
            "umls": "causes.umls"
          },
          "ChemicalSubstance-causes-Disease": {
            "pmid": "causes.pmid",
            "umls": "causes.umls"
          },
          "ChemicalSubstance-coexists_with-AnatomicalEntity": {
            "pmid": "coexists_with.pmid",
            "umls": "coexists_with.umls"
          },
          "ChemicalSubstance-coexists_with-BiologicalProcess": {
            "pmid": "coexists_with.pmid",
            "umls": "coexists_with.umls"
          },
          "ChemicalSubstance-coexists_with-Cell": {
            "pmid": "coexists_with.pmid",
            "umls": "coexists_with.umls"
          },
          "ChemicalSubstance-coexists_with-CellularComponent": {
            "pmid": "coexists_with.pmid",
            "umls": "coexists_with.umls"
          },
          "ChemicalSubstance-coexists_with-ChemicalSubstance": {
            "pmid": "coexists_with.pmid",
            "umls": "coexists_with.umls"
          },
          "ChemicalSubstance-coexists_with-Disease": {
            "pmid": "coexists_with.pmid",
            "umls": "coexists_with.umls"
          },
          "ChemicalSubstance-coexists_with-Gene": {
            "pmid": "coexists_with.pmid",
            "umls": "coexists_with.umls"
          },
          "ChemicalSubstance-coexists_with-PhenotypicFeature": {
            "pmid": "coexists_with.pmid",
            "umls": "coexists_with.umls"
          },
          "ChemicalSubstance-disrupted_by-ChemicalSubstance": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "ChemicalSubstance-disrupted_by-Gene": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "ChemicalSubstance-disrupts-AnatomicalEntity": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "ChemicalSubstance-disrupts-BiologicalProcess": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "ChemicalSubstance-disrupts-Cell": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "ChemicalSubstance-disrupts-CellularComponent": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "ChemicalSubstance-disrupts-ChemicalSubstance": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "ChemicalSubstance-disrupts-Disease": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "ChemicalSubstance-disrupts-Gene": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "ChemicalSubstance-disrupts-PhenotypicFeature": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "ChemicalSubstance-negatively_regulated_by-AnatomicalEntity": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "ChemicalSubstance-negatively_regulated_by-BiologicalProcess": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "ChemicalSubstance-negatively_regulated_by-Cell": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "ChemicalSubstance-negatively_regulated_by-CellularComponent": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "ChemicalSubstance-negatively_regulated_by-ChemicalSubstance": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "ChemicalSubstance-negatively_regulated_by-Disease": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "ChemicalSubstance-negatively_regulated_by-Gene": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "ChemicalSubstance-negatively_regulated_by-PhenotypicFeature": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "ChemicalSubstance-negatively_regulates-AnatomicalEntity": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "ChemicalSubstance-negatively_regulates-BiologicalProcess": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "ChemicalSubstance-negatively_regulates-Cell": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "ChemicalSubstance-negatively_regulates-CellularComponent": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "ChemicalSubstance-negatively_regulates-ChemicalSubstance": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "ChemicalSubstance-negatively_regulates-Disease": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "ChemicalSubstance-negatively_regulates-Gene": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "ChemicalSubstance-negatively_regulates-PhenotypicFeature": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "ChemicalSubstance-physically_interacts_with-AnatomicalEntity": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "ChemicalSubstance-physically_interacts_with-BiologicalProcess": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "ChemicalSubstance-physically_interacts_with-Cell": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "ChemicalSubstance-physically_interacts_with-CellularComponent": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "ChemicalSubstance-physically_interacts_with-ChemicalSubstance": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "ChemicalSubstance-physically_interacts_with-Disease": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "ChemicalSubstance-physically_interacts_with-Gene": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "ChemicalSubstance-physically_interacts_with-PhenotypicFeature": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "ChemicalSubstance-positively_regulated_by-AnatomicalEntity": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "ChemicalSubstance-positively_regulated_by-BiologicalProcess": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "ChemicalSubstance-positively_regulated_by-Cell": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "ChemicalSubstance-positively_regulated_by-CellularComponent": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "ChemicalSubstance-positively_regulated_by-ChemicalSubstance": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "ChemicalSubstance-positively_regulated_by-Disease": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "ChemicalSubstance-positively_regulated_by-Gene": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "ChemicalSubstance-positively_regulated_by-PhenotypicFeature": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "ChemicalSubstance-positively_regulates-AnatomicalEntity": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "ChemicalSubstance-positively_regulates-BiologicalProcess": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "ChemicalSubstance-positively_regulates-Cell": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "ChemicalSubstance-positively_regulates-CellularComponent": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "ChemicalSubstance-positively_regulates-ChemicalSubstance": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "ChemicalSubstance-positively_regulates-Disease": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "ChemicalSubstance-positively_regulates-Gene": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "ChemicalSubstance-positively_regulates-PhenotypicFeature": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "ChemicalSubstance-prevents-Disease": {
            "pmid": "prevents.pmid",
            "umls": "prevents.umls"
          },
          "ChemicalSubstance-produced_by-AnatomicalEntity": {
            "pmid": "produced_by.pmid",
            "umls": "produced_by.umls"
          },
          "ChemicalSubstance-produced_by-BiologicalProcess": {
            "pmid": "produced_by.pmid",
            "umls": "produced_by.umls"
          },
          "ChemicalSubstance-produced_by-Cell": {
            "pmid": "produced_by.pmid",
            "umls": "produced_by.umls"
          },
          "ChemicalSubstance-produced_by-CellularComponent": {
            "pmid": "produced_by.pmid",
            "umls": "produced_by.umls"
          },
          "ChemicalSubstance-produced_by-ChemicalSubstance": {
            "pmid": "produced_by.pmid",
            "umls": "produced_by.umls"
          },
          "ChemicalSubstance-produced_by-Disease": {
            "pmid": "produced_by.pmid",
            "umls": "produced_by.umls"
          },
          "ChemicalSubstance-produced_by-Gene": {
            "pmid": "produced_by.pmid",
            "umls": "produced_by.umls"
          },
          "ChemicalSubstance-produced_by-PhenotypicFeature": {
            "pmid": "produced_by.pmid",
            "umls": "produced_by.umls"
          },
          "ChemicalSubstance-produces-AnatomicalEntity": {
            "pmid": "produces.pmid",
            "umls": "produces.umls"
          },
          "ChemicalSubstance-produces-Cell": {
            "pmid": "produces.pmid",
            "umls": "produces.umls"
          },
          "ChemicalSubstance-produces-ChemicalSubstance": {
            "pmid": "produces.pmid",
            "umls": "produces.umls"
          },
          "ChemicalSubstance-produces-Gene": {
            "pmid": "produces.pmid",
            "umls": "produces.umls"
          },
          "ChemicalSubstance-produces-PhenotypicFeature": {
            "pmid": "produces.pmid",
            "umls": "produces.umls"
          },
          "ChemicalSubstance-related_to-AnatomicalEntity": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "ChemicalSubstance-related_to-BiologicalProcess": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "ChemicalSubstance-related_to-ChemicalSubstance": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "ChemicalSubstance-related_to-Disease": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "ChemicalSubstance-related_to-Gene": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "ChemicalSubstance-related_to-PhenotypicFeature": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "ChemicalSubstance-treats-Disease": {
            "pmid": "treats.pmid",
            "umls": "treats.umls"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothings.io",
          "name": "Chunlei Wu",
          "x-id": "https://github.com/newgene",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the SEMMED disease query web services.  Learn more about [mydisease.info](http://pending.biothings.io/semmed)",
        "termsOfService": "http://biothings.ncats.io",
        "title": "SEMMED Chemical API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/chemical",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple disease IDs separated by comma. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted. Type: string (list). Max: 1000.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Disease"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "A list of matching disease objects"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "For a list of disease IDs, return the matching disease object",
              "tags": [
                "gene"
              ]
            }
          }
        },
        {
          "path": "/chemical/{chemicalid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Retrieve disease objects based on ID",
                  "example": "C0004096",
                  "in": "path",
                  "name": "chemicalid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Disease"
                      }
                    }
                  },
                  "description": "A matching disease object"
                },
                "404": {
                  "description": "A response indicating an unknown disease ID"
                }
              },
              "summary": "Retrieve disease objects based on ID",
              "tags": [
                "disease"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "mydisease.info metadata object"
                }
              },
              "summary": "Get metadata about the data available from mydisease.info",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/search",
                  "name": "search"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/prefix",
                  "name": "prefix"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "description": "mydisease.info metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from a mydisease.info chem object",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string.  The detailed query syntax can be found from our [docs](http://mydisease.info).  Examples: \"cancer\", \"primary ciliary dyskinesia\", \"DOID:9562\"",
                  "example": "cancer",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/facet_size",
                  "name": "facet_size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/facets",
                  "name": "facets"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make disease queries and return matching disease hits. Supports JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms separated by comma (also \"+\" or whitespace).  Does not support wildcard queries",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "a comma-separated list of fields as the search \"scopes\" (fields to search through for query term). The available \"fields\" that can be passed to the \"scopes\" parameter are listed in the **/metadata/fields** endpoint.string Default: \"scopes=_id\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make batch disease queries and return matching disease hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-affected_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-affected_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-affected_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-affected_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-affects-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-affects-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-affects-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-affects-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-affects-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-affects-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-affects-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-affects-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-causes-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-causes-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-coexists_with-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-coexists_with-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-coexists_with-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-coexists_with-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-coexists_with-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-coexists_with-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-coexists_with-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-coexists_with-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-disrupted_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-disrupted_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-disrupts-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-disrupts-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-disrupts-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-disrupts-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-disrupts-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-disrupts-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-disrupts-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-disrupts-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-negatively_regulated_by-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-negatively_regulated_by-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-negatively_regulated_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-negatively_regulated_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-negatively_regulated_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-negatively_regulated_by-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-negatively_regulated_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-negatively_regulated_by-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-negatively_regulates-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-negatively_regulates-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-negatively_regulates-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-negatively_regulates-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-negatively_regulates-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-negatively_regulates-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-negatively_regulates-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-negatively_regulates-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-physically_interacts_with-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-physically_interacts_with-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-physically_interacts_with-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-physically_interacts_with-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-physically_interacts_with-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-physically_interacts_with-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-physically_interacts_with-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-physically_interacts_with-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-positively_regulated_by-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-positively_regulated_by-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-positively_regulated_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-positively_regulated_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-positively_regulated_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-positively_regulated_by-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-positively_regulated_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-positively_regulated_by-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-positively_regulates-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-positively_regulates-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-positively_regulates-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-positively_regulates-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-positively_regulates-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-positively_regulates-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-positively_regulates-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-positively_regulates-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-prevents-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-produced_by-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-produced_by-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-produced_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-produced_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-produced_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-produced_by-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-produced_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-produced_by-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-produces-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-produces-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-produces-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-produces-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-produces-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-related_to-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-related_to-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-related_to-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-related_to-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-related_to-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-related_to-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ChemicalSubstance-treats-Disease"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "https://biothings.ncats.io/semmedchemical"
        }
      ],
      "tags": [
        {
          "name": "chemical"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        },
        {
          "name": "semmed"
        }
      ],
      "~raw": "H4sIAAebzl4C_-VdbXPbNhL-KxjdfUh7tuze5TpTz3Tm2iTt5KZp0ro39yH2eCASstlQhEqQtnUZ__dbAHwVARKUQLkC8iUyCe4usM8ugEcL6vOMrkmC19HsAs3-MT-fn89O0CxKlhQufJ4FNMlwkInPZIWjmDe7I_H6X4uIZndRcsvmEeWPJHhF-M1Xd3kSkwj9N-dXH0-jUDySZWt2cXZ2G2V3-WIe0NVZQh5uSUJkq5TG4umUsDVNWLSICQrJPYnBunT2BG1CwoI0WmcRTXjD1zTIVwSM4xcQXaLsjqDLN-_evXmNwogRzAj6IyfpBj2QBWIkvY8CwuYI_URwmqAVTQnCC5pn6ONqUzww592-fsFtBVNhWELo37zZ0TNGVisSfsGNzki6Yu-Xl1J02Ul4sH4gCXBWjk8WZbKLhZGv7sgqCnCMvvvwlt-_Jykr-vYVOIF3mVsNV-HSx8_b_f-Q0jAPROdlMy4jT-PmYHcNKewPCt2zp2tuGb4tdJQ-rO-foPoqThIqx7t9XQxz-1KW4oTFOKNp-3plUfuytEpas8bZHRN4O6vM4H-tKZMwXOMUHsuqgflrSpZcyF_OAFUAHgAFO6sbnYU0W0YkDpsgra4JM4YkiKas-XxxxehpGTaNh-UFM800XeGspVleEUOVEhh6ln1Pw00VrCBBfMbrdQxjx7119nj68PBwyp88BYSQJKAhCUUrxocYy2FNeahlEZGDH4Xy_y3YrfI4i9Y8OIsYe_uaAQC5yRkJ0WKDoCMrPEc_04xATOIMBXmaglUxj0REE_g_w5-IiNcoWUMAgiqUr1FG0Vfn5-dohR-jVb46ES0gH2ToIYpjtICHV1EGWubot82aXCCWpQAl9CKOWPbFHL3DjxdCwlyEGzQR0BKNZk9PxXhFqej6R9HB66en4obIOkXX_35-3jucvzMxFq3RizKykk8rXSpbsrPXctREdJcW4jTFED5PiiT3HeJ949kNfB7wwKnGnS5-J0EmIDh7uYPBvWa-SVOa_koYOFtnWDlk4MNQ6AHbcIKilcQReFkilaOiSBAipeWAjpTDdfYDTRGuOtjA0wkIz3JI0hwAmo7PGnlrJqaRayG_yhlnn8tPUfgkenxL1Pljq2u_EkAMzDzbI40W8EcIAAYTuXbyiFdrmdFfAehenn_ztZw5-RWexJpRW9sya-MwS3PCh6V2jAK4h8hxYFy8wMGnltXltSPPkvsGt1lIq-NEh18Zty9VOVYbXHnyKaEPSSNWOkFlit4qdop2ZfjAiOIQZ7g3YsZgScaDzABKaOldtD31tJZpqLS0GtCtkfiRZHUbudLj-UT-eQ_YwnyNuUzpCrUlt4anGo-t8SnRvs8wgco0aKWJ4sqBAnYN96PH5vPFlcmCztCjcmx3cWzx5JZ_8ZaHEQ9d1USy7W0J2xGTxy9ixyFTN-w1fuN2gcwoLmdBxDawZ3lEAYQzrGiWNE9CaSTNU_QxpAGrNiBto2GFg97IOYddoCvwdRKQ9ArsvwK_RXx0UBDFEf8_3LBPUUJYhOX91-_fvr745p9f__1qtjV1SSk9gfrHn3XC2m-6WeKAZDcs-h9pSaivGklhNG1FgPj7QNG714TJ-8k6PTccu-1RMx8vDvSWVv73n3-KF1HdvxyWwV3N2w9Rdiey0tXsLsrY1QwV26vNES_Y3_FtW5Nbgb0iiAjL5XpnqcO7PkeX-XoNccHQvy_f__xBPPDq_a-XCDPYEMbxvJWBpeZrrvkZN_x7xdZeeWmP2Ho2quCPXqJARoYgyxREAXqBY0YhTP4GMQIbwgfADAAVshGf715TQFhCM8QkhjgTEAY4DUv4qXb6YnYCA5X8BZZqT2tLyg1ouXRgIm7lSgzskqLAuBdFg4yWN7O7lOa3dzxuGr0Eu_m0Xy9BrgoAgAzJh8ipf40ZX5GDOJknKkWVTxFOiTAPmkVyN_zll9sr0C-_RCQJ1zRKsnlBiLwmSwyjf1EJ_fYmCq9malrEGgMynEE_vL_8rS9H_dLOoeXOxd1cuuAJc3RGVeVLwaEvMnL66ZadchNE3_vypar5WclJX-YLlvGV4SleLsEJJLxZbE47d3sS0w7iG9yYPaHfRzSmt_z-h5QGhDG74n_kzJMliez0uwRnVNx7k2RRtrEn-RVMtBalTQUENp2_mG18sdMPdwTmps06Cn4gGOLVomi7uOLez2Ocviol7C86wDlMFvbGtJA3gfsDSh5hDmU3fB6ZIMTa8u0E2pZM--HWVjD5qNuDSUvsBAHYVmAnDLsIsRyMsDpI8_V0s3RLvp0xKUROMedVou3EYi1usoGdJO9Vsq0FXyVxgrirZFuG1wTRlpBbuHdP4s1NSm5BeBEY9pGs02QH2Frp9nGuUzUB7HWqrEWBTsEEQaFTZSdG-tA1fciww8QLmy5Y2IEihR0oTNikMcIOFCBsuuiYZDZZ320YvwJ6oiSDhsF0WxW9LjtB0iPffqTolU0QLnpl1mJGr2KCwNErsxM9_UizHUKURYdZkOk0WQofnfQJgkejaorQ0aiyFzgaBVOEjUaVpaDpQdf0IcMOEy9sumBhB4oUdqAwYZPGCDtQgLDpomOaBVlK7nl7i4MvjmpMNic1pFsKrabECSKqIX6KQGqIn8SFU4RNQ7ylaNlChfUgEeLZdHhmdsHMJkQymxAStrJnSuRyIqMTuKwhfIJRbkifIF00pFvLFg2ZEyCjId0ONrIUTGvMd9ey6qUW1K3C-1wXqyqKrDY0F1VOvMQJYVGrLBu3qpsyila8CgYXhYG8Ufto19zkAMFgMXJd-6cwlVcNpTQW9UWyZqc8SypLcEi4dZJijt4uoUe8DFpWrF3NvuJF1mBOWUJWHlcLaBzjNRPVW9BZjBiYFBMU83OtKCRkXcjkRXAxSoio9KrLnqQUxWMnKGeiKqjoGCrPZYritOg2iZYb0YdCJAxGHnDwfVEM74LSmOBkXpeKLXHMSN94N4sqFeNdSJQDXh4U7ow2DB3HBq9rk2u4FHoCiOJjzuvfy2O6J_yoIC8-zFN8S8Qz0DNIifdRSOARWRMGCBOaThCjsrQOnpLVdZkAWAr4EOOQMy4GnLUEl9AHftpQSADBfX2uykAHANYoG1d0WjgiXy3AIl5myNuiRR58IpkoJixKvYoCv7KyrAwEzp7ckrThqa_Ot486aqxvl7grulDIbvRht5LJuhNSCKKALPQ2QTgMoxKWskCS16_Jg53FswK5sr7xqrABwqrC_u1tynlYWTB6j-OciPI4PnwxDCMAJGmECkTqOsabulyyIVIGShXbrRpDzYHSash_hjQ4ZtCZCWbq80Njx_sF9K4T-l_wSBLlpHG0irLmGFeZTJwzUR6qBL-8YEXlalFry9tLDdA1pjiwgpPNVm4UEVbq2C5UrctUZQaVV7-FzFemz8apnXYiLTsw5CcxgZi5qSrSHnKTrKHWzxyA9jzjp5jr2UOex69AdtI4AV2MrTjAwwtT5fEc_ikO5ee7bAUDsjUP1l3kTXs7VlWBD3WMH70YzFbKAlQxy3yKYBqCBUQqil-F18_FiaeowgoAcpnHojx6jW95MwAuYHsRJXK2alT28jTVXB3o858Ixr4RKM6YDCW84qybYgg-yGWLbFCCDfq8jGIxrbSquyWStP4asrY-gzfgr-JooN7csiidpKupjK0PLA4Z2zMVFsf7TUBWzCqwdpWl0r2TYp_dhnOgOL6lMXt4DuRPi6nvgwQOweAOAfGr2SmfgSAOuGD5WhHIlSFJTxAF4elDJGrJEW7fbXRQCIc5sCGABTTtd1dxOq3PWU_VfTkXlZsAxTGPmyjUOrz1ZgXe8Lpx1qBx4rlZW69QARMNX6kp1Yj6-UBs-rQLT4XG7ZMH7Zc1wIzxftlTJa94b0N3XIQjxMdqtpgtYyrTcGmShLswqT5VqhrK7T5cK94VUfZLP5LioICdF1PAFYjZ0b3MKP2kDjVxMyte66IMRIUf4f7XL29oeiOt4o9CF0rn1b2sjRNPNI1rGbDdR7MnhTOktwxsUUBYoXe7lTx7rDnO8Xk29oyGtIm_aOVSJi-acm0nMnHA5eKUiHxP03_e_XQpcgagIsmiQL7RqcPp8PCGefqOiofEST2RP_M0aLzjiF-Tq6NddWyRDtWiedbosxhX8cKNi-rItuLE26L8wI-rzT7Lrn88v36aNQ-MzfJVzMrTOmKt9j2feeqDz-Wq7maF12vur4t-9qVsf1q03-WMDV8liHNGpNN1Pkhmx2qOAwc1CeWj95tZeB-fd3nS4_C-gt_1EgdKnnsvRAim-DhAIEltL_1e8vk7ulrxddxxuLz7lZSB-5kjrld_iaqCABtyv_jK9EgWfOLbXa_cXH6hvZtrvVrYO-R00wX9IAL8WtS5gwDjxdwgAtzdyrnj7YEt3KCPuwUjx-FtRaGLV35XFvrshAAXt2ru-Llvi2a0Pm9XYh7PYn2rgtS7lXungnYUArbel-LSDC67dvS-7r7Rpu3gspu9_vVlje6Wzw1W6APe73_HkJMkXKvPx4-EwbdEbeGh3XsTWLhFzrnsfjVRt4vLPSHtnAbDMIG3AzK8WSg4jAyTZcN4ZDi5RXAYBfoNw3jf-0L-uYwHAyJwB2S4RQq67H81QbjjfsEHstD1ncQAcWiEjIE3vLq5q2h2-uhxMfyO3jYs2p03QIVbM4S7vlfPDyPc7UuVX9ldV9xvUudX93kAAm6Rie65Wk0hmrvXryneJccbT-3DKPCFJHQPBQbUoDEKXCQE3fO4lgY09rMv5J97vjeg_IxR4OQ2ziFf927fzNbtPpB6bq7oB6i8IRQY_3KMk_t5Te-PHiFjfg-ojRftiIyDj1tcgG8wUTMFtqDhCY_gHWiGWQZLCPKFg_ANQQYMhSUEuchf-IYWLbthCSO-cB--4caAGbGEILd4E99womZVLO6PfOBcfNw5DTAy-yOI-cvOMBeRw3bjZdgoyDjPyDgKDWMuZiQc_GVhXAXKTvzLONR4zLw4iprdOJdxqPGEbXEUIWN4lnG48JhhcRQru3Er41DjPKviKDaM-ZTx-xpPmRSHdzzjORQtatZ3G8avQFv-mxkpDvx6KY62_0ePnhGe7SCoZ1TGwsgtZsVHuKg5FpsQ8YRt8RI8w7yLRST5wsD4iCQDLsYiklxkZXxEjZafsYgVX5gaH_FjwNlYRJJb7I2PeFHzOJb3Uz4wOr7utAa4nfFIoizy9wiTpvfHjyFTr3YBpBuRcfBxjNbxDCYaSscSNHyhc3wDjQGVYwdB3tA4niHIhMKxgyAn6RvP0KKnbuxgxBvaxjPcmFA2dhDkGF3jGU40VI29_ZEXNI2HO6chimZvBDF_2RnmInLYbrwMGwUZ5xkZR6FhzMWMhIO_LIyrQNmJfxmHGo-ZF0dRsxvnMg41nrAtjiJkDM8yDhceMyyOYmU3bmUcapxnVRzFhjGfMn5f4ymT4vCOZzyHokdNSu65VW4uQ4rOHT8Str3U9XnVVZ2faZgHXlUv1T12wP893lNgodHzYTg4xn056nYN0zXS1b7wWq6CwIDFGocIbzgrRxFhwlCNQ4SbC0E3vd-zHBzlc2-4JkdxYMIsjUOEYzySo37XsEbj1_9ecEQO7wyGGCFjRDC_2AHmChKYOS_ABiHgJCPgkKt7uQAD9_rFArjkeOP9_zAKPFvzO4QC89X-MAqcXOc75OveFb7WvSmRhdMZ9WQ5V3f46F3f57sOEJr9HoSCL_O-m2AwmPtHocEX5t9NNBjw_qPQ4CLr76bntZz_KH_7svp3EwMGO4BRaHBrF-Cmz9U7gWE3ZylAxM36Ptm1o3fyloc6Pi67ec3vqKUKK7qS8XJJgp43C32W3QUdjZZzcY0bsZIOat4T156UQGsqq9E2mQrV-nUyZUWCnEC-8guXbT1Mo4OZyC_YfLsyDcC0lwIT7-6lQI_QvcSq1lVWFWiQuDdCtr8BtqIgwDkj6rGWtzpCi8vDMvsBsrt0Sh4j1vMzHg0dzaZdVa27xho7wTqNlt7wnUTlgL-mUKmE3RSK-oN-EpWdNDAZGvWJwZLKMGJpvjZapTSbdhS2bprq64yjTRUDc3vZSqeGGanoZAxLYk0csaeO_pxgR4cqCdiR3B_1dnTo4GkBM_q43kuH7ufLeyNB81DHAF27HezphM1z2NAbY89gUH9APoNBquh9BjP6Q_0ZDOrkhWeKIH0SOaxBbHR-YSaWsNFmmKSVqVSPzSYT2TE6iUxkh2HumEj76JQxkR0mmWLCWBiVIPa3Y9Qvcta2aB_rGKRvuZNVnXTxfJb0Zo9nM6s_mTybWarc8mzG9KeaZzOrk3meNcr0iWhqs8x_Q6Zhk_qhrkWadjvY001Fz2BDfxI6vEED6efwBikTz-HNGEg5hzeom2yeJ4J60sxBDWKj8wszsYSNNsMkrUylemw2mciO0UlkIjsMc8dE2kenjInsMMkUE8bCqARhwY7u-70aGoubXS3ljV7JvW-UamqpGioU1fcMdXUTimX5_VnDrrKB1GBXmRoCVlUMBLldZd1Ito-0nnC1powZxQ_TaWFGKnRhs69Yk2jZU4cRqPbUocPSbmL7z1_VSup2HTWNW2aK-j1hU1N_0rKpSZWxbMrvR5ZNTR187S28U9dby5a3OnKLy1Im_Ps_4_LNXA01AQA="
    },
    {
      "_id": "d22b657426375a5295e7da8a303b9893",
      "_meta": {
        "ETag": "5e312d0aa9bca165e68f0ed2241a89fa058156e6c81e4133ca5e82378d2584a0",
        "github_username": "newgene",
        "timestamp": "2020-09-11T00:02:44.238024",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:20.867914",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/biolink/openapi.yml"
      },
      "_score": 0.93676925,
      "components": {
        "x-bte-kgs-operations": {
          "anatomy-gene": [
            {
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "outputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "anatomy_id": "{inputs[0]}",
                "direct": true,
                "rows": 200,
                "unselect_evidence": true
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/anatomy-gene-hgnc"
              },
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "outputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "anatomy_id": "{inputs[0]}",
                "direct": true,
                "rows": 200,
                "unselect_evidence": true
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/anatomy-gene-ncbigene"
              },
              "supportBatch": false
            }
          ],
          "disease-gene": [
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "direct": true,
                "disease_id": "{inputs[0]}",
                "rows": 200,
                "unselect_evidence": true
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease-gene-hgnc"
              },
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "direct": true,
                "disease_id": "{inputs[0]}",
                "rows": 200,
                "unselect_evidence": true
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease-gene-ncbigene"
              },
              "supportBatch": false
            }
          ],
          "disease-pathway": [
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "REACT",
                  "semantic": "Pathway"
                }
              ],
              "parameters": {
                "direct": true,
                "disease_id": "{inputs[0]}",
                "rows": 200,
                "unselect_evidence": true
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease-pathway"
              },
              "supportBatch": false
            }
          ],
          "disease-phenotype": [
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "HP",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "direct": true,
                "disease_id": "{inputs[0]}",
                "rows": 200,
                "unselect_evidence": true
              },
              "predicate": "has_phenotype",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease-phenotype"
              },
              "supportBatch": false
            }
          ],
          "gene-anatomy": [
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "direct": true,
                "gene_id": "NCBIGene:{inputs[0]}",
                "rows": 200,
                "unselect_evidence": true
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene-anatomy"
              },
              "supportBatch": false
            }
          ],
          "gene-disease": [
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "direct": true,
                "gene_id": "NCBIGene:{inputs[0]}",
                "rows": 200,
                "unselect_evidence": true
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene-disease"
              },
              "supportBatch": false
            }
          ],
          "gene-interaction": [
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "direct": true,
                "gene_id": "NCBIGene:{inputs[0]}",
                "rows": 200,
                "unselect_evidence": true
              },
              "predicate": "physically_interacts_with",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene-interaction-hgnc"
              },
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "direct": true,
                "gene_id": "NCBIGene:{inputs[0]}",
                "rows": 200,
                "unselect_evidence": true
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene-interaction-ncbigene"
              },
              "supportBatch": false
            }
          ],
          "gene-phenotype": [
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "HP",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "direct": true,
                "gene_id": "NCBIGene:{inputs[0]}",
                "rows": 200,
                "unselect_evidence": true
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene-phenotype"
              },
              "supportBatch": false
            }
          ],
          "pathway-disease": [
            {
              "inputs": [
                {
                  "id": "REACT",
                  "semantic": "Pathway"
                }
              ],
              "outputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "direct": true,
                "pathway_id": "REACT:{inputs[0]}",
                "rows": 200,
                "unselect_evidence": true
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/pathway-disease"
              },
              "supportBatch": false
            }
          ],
          "pathway-phenotype": [
            {
              "inputs": [
                {
                  "id": "REACT",
                  "semantic": "Pathway"
                }
              ],
              "outputs": [
                {
                  "id": "HP",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "direct": true,
                "gene_id": "REACT:{inputs[0]}",
                "rows": 200,
                "unselect_evidence": true
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/pathway-phenotype"
              },
              "supportBatch": false
            }
          ],
          "phenotype-disease": [
            {
              "inputs": [
                {
                  "id": "HP",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "outputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "direct": true,
                "phenotype_id": "{inputs[0]}",
                "rows": 200,
                "unselect_evidence": true
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/phenotype-disease"
              },
              "supportBatch": false
            }
          ],
          "phenotype-gene": [
            {
              "inputs": [
                {
                  "id": "HP",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "outputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "direct": true,
                "phenotype_id": "{inputs[0]}",
                "rows": 200,
                "unselect_evidence": true
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/phenotype-gene-hgnc"
              },
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "HP",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "outputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "direct": true,
                "phenotype_id": "{inputs[0]}",
                "rows": 200,
                "unselect_evidence": true
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/phenotype-gene-ncbigene"
              },
              "supportBatch": false
            }
          ],
          "phenotype-pathway": [
            {
              "inputs": [
                {
                  "id": "HP",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "outputs": [
                {
                  "id": "REACT",
                  "semantic": "Pathway"
                }
              ],
              "parameters": {
                "direct": true,
                "phenotype_id": "{inputs[0]}",
                "rows": 200,
                "unselect_evidence": true
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/phenotype-pathway"
              },
              "supportBatch": false
            }
          ],
          "phenotype-variant": [
            {
              "inputs": [
                {
                  "id": "HP",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "outputs": [
                {
                  "id": "DBSNP",
                  "semantic": "SequenceVariant"
                }
              ],
              "parameters": {
                "direct": true,
                "phenotype_id": "{inputs[0]}",
                "rows": 200,
                "unselect_evidence": true
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/phenotype-variant"
              },
              "supportBatch": false
            }
          ]
        },
        "x-bte-response-mapping": {
          "anatomy-gene-hgnc": {
            "HGNC": "associations.object.HGNC",
            "pubmed": "associations.publications.id",
            "relation": "associations.relation.label",
            "source": "associations.provided_by"
          },
          "anatomy-gene-ncbigene": {
            "NCBIGene": "associations.object.NCBIGene",
            "pubmed": "associations.publications.id",
            "relation": "associations.relation.label",
            "source": "associations.provided_by"
          },
          "disease-gene-hgnc": {
            "HGNC": "associations.object.HGNC",
            "pubmed": "associations.publications.id",
            "relation": "associations.relation.label",
            "source": "associations.provided_by",
            "taxid": "associations.object.taxon.id"
          },
          "disease-gene-ncbigene": {
            "NCBIGene": "associations.object.NCBIGene",
            "pubmed": "associations.publications.id",
            "relation": "associations.relation.label",
            "source": "associations.provided_by",
            "taxid": "associations.object.taxon.id"
          },
          "disease-pathway": {
            "REACT": "associations.object.REACT",
            "name": "associations.object.label",
            "pubmed": "associations.publications.id",
            "relation": "associations.relation.label",
            "source": "associations.provided_by"
          },
          "disease-phenotype": {
            "HP": "associations.object.HP",
            "name": "associations.object.label",
            "pubmed": "associations.publications.id",
            "relation": "associations.relation.label",
            "source": "associations.provided_by"
          },
          "gene-anatomy": {
            "UBERON": "associations.object.UBERON",
            "pubmed": "associations.publications.id",
            "relation": "associations.relation.label",
            "source": "associations.provided_by"
          },
          "gene-disease": {
            "MONDO": "associations.object.MONDO",
            "name": "associations.object.label",
            "pubmed": "associations.publications.id",
            "relation": "associations.relation.label",
            "source": "associations.provided_by"
          },
          "gene-interaction-hgnc": {
            "HGNC": "associations.object.HGNC",
            "pubmed": "associations.publications.id",
            "relation": "associations.relation.label",
            "source": "associations.provided_by",
            "taxid": "associations.object.taxon.id"
          },
          "gene-interaction-ncbigene": {
            "NCBIGene": "associations.object.NCBIGene",
            "pubmed": "associations.publications.id",
            "relation": "associations.relation.label",
            "source": "associations.provided_by",
            "taxid": "associations.object.taxon.id"
          },
          "gene-phenotype": {
            "HP": "associations.object.HP",
            "name": "associations.object.label",
            "pubmed": "associations.publications.id",
            "relation": "associations.relation.label",
            "source": "associations.provided_by"
          },
          "pathway-disease": {
            "MONDO": "associations.object.MONDO",
            "name": "associations.object.label",
            "pubmed": "associations.publications.id",
            "relation": "associations.relation.label",
            "source": "associations.provided_by"
          },
          "pathway-phenotype": {
            "HP": "associations.object.HP",
            "name": "associations.object.label",
            "pubmed": "associations.publications.id",
            "relation": "associations.relation.label",
            "source": "associations.provided_by"
          },
          "phenotype-disease": {
            "MONDO": "associations.object.MONDO",
            "name": "associations.object.label",
            "pubmed": "associations.publications.id",
            "relation": "associations.relation.label",
            "source": "associations.provided_by"
          },
          "phenotype-gene-hgnc": {
            "HGNC": "associations.object.HGNC",
            "pubmed": "associations.publications.id",
            "relation": "associations.relation.label",
            "source": "associations.provided_by"
          },
          "phenotype-gene-ncbigene": {
            "NCBIGene": "associations.object.NCBIGene",
            "pubmed": "associations.publications.id",
            "relation": "associations.relation.label",
            "source": "associations.provided_by"
          },
          "phenotype-pathway": {
            "REACT": "associations.object.REACT",
            "name": "associations.object.label",
            "pubmed": "associations.publications.id",
            "relation": "associations.relation.label",
            "source": "associations.provided_by"
          },
          "phenotype-variant": {
            "DBSNP": "associations.object.DBSNP",
            "name": "associations.object.label",
            "pubmed": "associations.publications.id",
            "relation": "associations.relation.label",
            "source": "associations.provided_by"
          }
        }
      },
      "info": {
        "contact": {
          "email": "cjm@berkeleybop.org",
          "name": "Chris Mungall",
          "x-id": "https://github.com/cmungall",
          "x-role": "responsible developer"
        },
        "description": "API integration layer for linked biological objects.",
        "termsOfService": "https://github.com/monarch-initiative/biolink-api/",
        "title": "BioLink API",
        "version": "0.1.1"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/bioentity/anatomy/{anatomy_id}/genes",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "CURIE identifier of anatomy IDs can be used with same results",
                  "example": "UBERON:0002037",
                  "in": "path",
                  "name": "anatomy_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "number of rows",
                  "example": 100,
                  "in": "query",
                  "name": "rows",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload",
                  "x-bte-response-mapping": {
                    "$ref": "#/components/x-bte-response-mapping/anatomy-gene"
                  }
                }
              },
              "summary": "Returns genes associated with an anatomy",
              "tags": [
                "anatomy"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/anatomy-gene"
                }
              ]
            }
          }
        },
        {
          "path": "/bioentity/disease/{disease_id}/genes",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "CURIE identifier of disease IDs can be used with same results",
                  "example": "MONDO:0016575",
                  "in": "path",
                  "name": "disease_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "number of rows",
                  "example": 100,
                  "in": "query",
                  "name": "rows",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload"
                }
              },
              "summary": "Returns genes associated with a disease",
              "tags": [
                "disease"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease-gene"
                }
              ]
            }
          }
        },
        {
          "path": "/bioentity/disease/{disease_id}/pathways",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "CURIE identifier of disease IDs can be used with same results",
                  "example": "MONDO:0016575",
                  "in": "path",
                  "name": "disease_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "number of rows",
                  "example": 100,
                  "in": "query",
                  "name": "rows",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload"
                }
              },
              "summary": "Returns pathways associated with a disease",
              "tags": [
                "disease"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease-pathway"
                }
              ]
            }
          }
        },
        {
          "path": "/bioentity/disease/{disease_id}/phenotypes",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "CURIE identifier of disease IDs can be used with same results",
                  "example": "MONDO:0016575",
                  "in": "path",
                  "name": "disease_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "number of rows",
                  "example": 100,
                  "in": "query",
                  "name": "rows",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload"
                }
              },
              "summary": "Returns phenotypes associated with a disease",
              "tags": [
                "disease"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease-phenotype"
                }
              ]
            }
          }
        },
        {
          "path": "/bioentity/gene/{gene_id}/anatomy",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "CURIE identifier of gene IDs can be used with same results",
                  "example": "NCBIGene:1017",
                  "in": "path",
                  "name": "gene_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "number of rows",
                  "example": 100,
                  "in": "query",
                  "name": "rows",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload"
                }
              },
              "summary": "Returns anatomies associated with a gene",
              "tags": [
                "gene"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene-anatomy"
                }
              ]
            }
          }
        },
        {
          "path": "/bioentity/gene/{gene_id}/diseases",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "CURIE identifier of gene IDs can be used with same results",
                  "example": "NCBIGene:1017",
                  "in": "path",
                  "name": "gene_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "number of rows",
                  "example": 100,
                  "in": "query",
                  "name": "rows",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload"
                }
              },
              "summary": "Returns diseases associated with a gene",
              "tags": [
                "gene"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene-disease"
                }
              ]
            }
          }
        },
        {
          "path": "/bioentity/gene/{gene_id}/interactions",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "CURIE identifier of gene IDs can be used with same results",
                  "example": "NCBIGene:1017",
                  "in": "path",
                  "name": "gene_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "number of rows",
                  "example": 100,
                  "in": "query",
                  "name": "rows",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload"
                }
              },
              "summary": "Returns gene interaction",
              "tags": [
                "gene"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene-interaction"
                }
              ]
            }
          }
        },
        {
          "path": "/bioentity/gene/{gene_id}/phenotypes",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "CURIE identifier of gene IDs can be used with same results",
                  "example": "NCBIGene:1017",
                  "in": "path",
                  "name": "gene_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "number of rows",
                  "example": 100,
                  "in": "query",
                  "name": "rows",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload"
                }
              },
              "summary": "Returns phenotypes associated with a gene",
              "tags": [
                "gene"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene-phenotype"
                }
              ]
            }
          }
        },
        {
          "path": "/bioentity/pathway/{pathway_id}/diseases",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "CURIE identifier of REACT pathway IDs can be used with same results",
                  "example": "REACT:R-HSA-5387390",
                  "in": "path",
                  "name": "pathway_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "number of rows",
                  "example": 100,
                  "in": "query",
                  "name": "rows",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload"
                }
              },
              "summary": "Returns diseases associated with a pathway",
              "tags": [
                "pathway"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/pathway-disease"
                }
              ]
            }
          }
        },
        {
          "path": "/bioentity/pathway/{pathway_id}/phenotypes",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "CURIE identifier of REACT pathway IDs can be used with same results",
                  "example": "REACT:R-HSA-5387390",
                  "in": "path",
                  "name": "pathway_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "number of rows",
                  "example": 100,
                  "in": "query",
                  "name": "rows",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload"
                }
              },
              "summary": "Returns phenotypes associated with a pathway",
              "tags": [
                "pathway"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/pathway-phenotype"
                }
              ]
            }
          }
        },
        {
          "path": "/bioentity/phenotype/{phenotype_id}/genes",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "CURIE identifier of phenotype IDs can be used with same results",
                  "example": "HP:0012265",
                  "in": "path",
                  "name": "phenotype_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "number of rows",
                  "example": 100,
                  "in": "query",
                  "name": "rows",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload"
                }
              },
              "summary": "Returns genes associated with a phenotype",
              "tags": [
                "phenotype"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/phenotype-gene"
                }
              ]
            }
          }
        },
        {
          "path": "/bioentity/phenotype/{phenotype_id}/pathways",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "CURIE identifier of phenotype IDs can be used with same results",
                  "example": "HP:0012265",
                  "in": "path",
                  "name": "phenotype_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "number of rows",
                  "example": 100,
                  "in": "query",
                  "name": "rows",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload"
                }
              },
              "summary": "Returns pathways associated with a phenotype",
              "tags": [
                "phenotype"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/phenotype-pathway"
                }
              ]
            }
          }
        },
        {
          "path": "/bioentity/phenotype/{phenotype_id}/variants",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "CURIE identifier of phenotype IDs can be used with same results",
                  "example": "HP:0012265",
                  "in": "path",
                  "name": "phenotype_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "number of rows",
                  "example": 100,
                  "in": "query",
                  "name": "rows",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload"
                }
              },
              "summary": "Returns pathways associated with a phenotype",
              "tags": [
                "phenotype"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/phenotype-variant"
                }
              ]
            }
          }
        },
        {
          "path": "/bioentity/phenotype/{phenotype_id}/diseases",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "CURIE identifier of phenotype IDs can be used with same results",
                  "example": "HP:0012265",
                  "in": "path",
                  "name": "phenotype_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "number of rows",
                  "example": 100,
                  "in": "query",
                  "name": "rows",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload"
                }
              },
              "summary": "Returns diseases associated with a phenotype",
              "tags": [
                "phenotype"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/phenotype-disease"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "https://api.monarchinitiative.org/api"
        }
      ],
      "tags": [
        {
          "name": "anatomy"
        },
        {
          "name": "disease"
        },
        {
          "name": "gene"
        },
        {
          "name": "phenotype"
        },
        {
          "name": "pathway"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biolink"
        }
      ],
      "~raw": "H4sIAKS-Wl8C_-2cW2_bNhTHvwrh7WEDZltJ0GbL05rL2gBrYiTtXorAoGTaZqtbSSqtYfi7j1eJutlOY8eWq5fWJSXq8M_fOSIPqc47UYxCGOPOGeic9Jye0_kDdHA4jnjBvONFIYMek79RALEvLvM-B3-7iHxBPpq5UdyLyETcFMIAieqLKcEUvE_CCfR9UfG9i0eiYspYTM_6_Qlm08TteVHQ9wL7MhL5sgWCaByFFLs-AiP0iHxuI-ks-DUjRD2CY4ajUFz4ZnANcMjQhEBRBHw4QwSMIwJ8HH5BI-DiyI8m2IM-iNzPyGO0Jx7FEAno7fgekUfsoRrbgiiExJt2cYgZ5u0_or5ojjfc5Xr1ZTuYKYvPcfQvrwDcIFH-iAjVJjq9o96RtJ3yp_FyXvhpXuzIgESjxJN9UJeJVhLi26bxh_a0TZlJQnxR01k8CHvgRLdvBgOGkEXBTBiQFY4wRZCifOEEhYWSeIrCiM3iYjFk02-w0CQM-aVyEPLlXxNECpcyAkPqc7NIvlyLq3oiHkIldkJ0FHKlZ33dmf5c_xji0aIv7FZXTpACNYaEN8nqtL74eHd9BfBINDrGnJdoDHSD4PqSAg-GwEUgoZyfbxwHQHlrgDOZ-Iwq7zAy2NhnNolSgr4mmCDBPSMJEsPvTbkHSQOlpvwWyggOJxIO9B0GsWLp4_nV3e3NmeM4x87JqdKo0IUwCVxlOIm-WTYptS2jTLVlzhj6FOWeeOQ41fZJ1xKeJ4dEe6UW-9hx5N9FjwQcLoZDj3GQmZSW0sjDEo2e9kHwG3-CcEp_BniAES46A9Inf--BD1MePWAcI0j43wywKQIsioEvAoFoUBTo0QAxnPkRHKnw4TLUNUZ2A96EEFfY-CtBY2HcL33u17yajzztV19vGOsqd1hIx02CAHJdeQt3iCUkpEBCl3bNgMLBMf5mOWPqgw-plV8mtCtimlRFU7rEyPzlBRMfpI2Wl2jv7s_1j815iW7wOV6S2VTtJZYfvL-9ubzlbnD0-tXpq85yD2qdZA0neSLMZrhzLJuyTbGs23sSy_oF1OLc4lyFs8Fjx0Sn06Q1oTaTrRbrFutKrFNAdg12tiwooS3CeH8u_pRQm5nPM4kW7T0HZ23PSpZvLs6v3_Jrz46co9OW5e2xrLjAlSjLmYDNsSzYFMSisW66KF7Fr0aetgC3AOcANmDsht80f7OKXyE0gZ55Ustwy3B-2QcsQrYMrf2kleBubjbcYvszzYNfIPgum_7qNV9_rn9sdBJxd_Xm4oNZ3T4H6cy4lVTLZ57ddd_dv-m-Ovnz9OQvp2V7J9MKk06w4TZlm-Jbt7dkflEJ-OaC9ZYQXw30k7ZrWsS3Fb5fEvKlcdzUcdDNz81to6RNPotwy66VYfzdQGTojo9ftxm6HeyjZKTluE5LN0a2abFuN6UW603tqLRk_3RbKi8Pd_3GSi3fj5BgyJtu-W753nu-NaxP4XtTS8yW759vXfnifNurS2FvdqdUcsk5LvvgU3c6CT1Z-u7tzYU8gJcpTLXEPVknNIkSog565q6KSfTIPWA0dGcKDx-aEcxdZyp6PnSRPKwaJ24gOSo0mLg-H1H1D46_6F_O6tBzsZydCctNzrDO-rR-xz2wD-k0Q3fJ8nc8qrOPV_JWq7rXuAH6oa6aOZTopEyJ1N2tKu1jrhUXpSbvEtLczq7olzpHW2ezrl3b6PVHY93upUabgCiMlsdp6mxWlY0ZjOwlIsPFoDZYDDbcpy2OlbWLdYCRsNTFw46GxXz3ATlgOct5ED5YPoN2EN0qT44PCcVcWrI58_aC3Y2cuZezZgc04yunTETnLs_vb2rjgarc-84t6hfd-VWwWoXnMj1z-0s0_qQ5DuOE0U_Ow0JaK1IhZ-BYJjtGmCD5dadOzCR8xe3zkiESHQxl30XVQqZWRDPqgaplawqNAi4_9mTqQ53t9KB_JbNW6nu-KGHF21Mft25-qzYuhFQEjYQm-oNQX-QshiySNyRxHBF2Dpk3tTI5JmUw3MSnXypMqaxTM-XNhaC9lDiNqCqxlvsUqIpr66uErQqfvlpt2S7TrFVDaC4nbSpp3mtR95Lh6nRRnuHsbdswjNO3v33TIN1x263i6c5fXmtrLdC0oDEoSa07g71_EGQJqcJ8Cukwl7bfuu7ZURlpTSHVVhbdHJq1z8VuT_rVUaJC-qe8XXeAfP47lUz1bH3YSNVXe8mutE53pTKtlweWBqj9Y-HlBUWvDCz2hwJNFX79yWA8nVG1Bzw0HadDsTe7dfFLqezK-eFhqf2CbFem0Rfpf26TzzuXKbdOMKfHlren--ppX1OCeekMe07xtUP6Xgq-z_G84li1MqUitV1Bu31maKvz9LU1bAzw5YM1BeFrEyrNUH3vwnvVhkblu7MZ-u5lkqVu86XI9rJESzPk38uMS8Vp64Lw2ZZLU4VP94Ls2-_R10Q89b_0EO6uByA9DizPS_4P5bSKo7BTAAA="
    },
    {
      "_id": "5c5a0b5bc77e5d25d1a04e1385f9fad7",
      "_meta": {
        "ETag": "b8c1bdc67be643a85cc63e0b8ed69ac5f559c55b6ed623cc2a7347b414b8ccc0",
        "github_username": "kevinxin90",
        "timestamp": "2020-08-13T23:07:39.356659",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:51.567622",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/scibite/smartapi.yml"
      },
      "_score": 0.93676925,
      "components": {
        "x-bte-kgs-operations": {
          "chemical2disease": [
            {
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "chebi": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2disease-doid"
              },
              "source": "scibite",
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "chebi": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2disease-mondo"
              },
              "source": "scibite",
              "supportBatch": false
            }
          ],
          "chemical2gene": [
            {
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "chebi": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2gene"
              },
              "source": "scibite",
              "supportBatch": false
            }
          ],
          "disease2chemical": [
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "CHEMBL.COMPOUND",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "mondo": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2chemical-chembl"
              },
              "source": "scibite",
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "mondo": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2chemical-chebi"
              },
              "source": "scibite",
              "supportBatch": false
            }
          ],
          "disease2gene": [
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "mondo": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2gene"
              },
              "source": "scibite",
              "supportBatch": false
            }
          ],
          "gene2chemical": [
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "CHEMBL.COMPOUND",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "geneid": "NCBIGene:{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2chemical-chembl"
              },
              "source": "scibite",
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "geneid": "NCBIGene:{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2chemical-chebi"
              },
              "source": "scibite",
              "supportBatch": false
            }
          ],
          "gene2disease": [
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "geneid": "NCBIGene:{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2disease-doid"
              },
              "source": "scibite",
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "geneid": "NCBIGene:{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2disease-mondo"
              },
              "source": "scibite",
              "supportBatch": false
            }
          ]
        },
        "x-bte-response-mapping": {
          "chemical2disease-doid": {
            "DOID": "associated_with.doid"
          },
          "chemical2disease-mondo": {
            "MONDO": "associated_with.mondo"
          },
          "chemical2gene": {
            "NCBIGene": "associated_with.ncbigene"
          },
          "disease2chemical-chebi": {
            "CHEBI": "associated_with.chebi"
          },
          "disease2chemical-chembl": {
            "CHEMBL.COMPOUND": "associated_with.chembl"
          },
          "disease2gene": {
            "NCBIGene": "associated_with.ncbigene"
          },
          "gene2chemical-chebi": {
            "CHEBI": "associated_with.chebi"
          },
          "gene2chemical-chembl": {
            "CHEMBL.COMPOUND": "associated_with.chembl"
          },
          "gene2disease-doid": {
            "DOID": "associated_with.doid"
          },
          "gene2disease-mondo": {
            "MONDO": "associated_with.mondo"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@renci.org",
          "name": "Chris B."
        },
        "description": "Scibite",
        "termsOfService": "https://automat.renci.org",
        "title": "Automat CORD19 Scibite API",
        "version": "2.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/gene/chemical_substance/{geneid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put NCBIGene ID here, e.g. 1017",
                  "example": "NCBIGene:1017",
                  "in": "path",
                  "name": "geneid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "gene2chemical",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene2chemical"
                }
              ]
            }
          }
        },
        {
          "path": "/gene/disease/{geneid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put NCBIGene ID here, e.g. 1017",
                  "example": "NCBIGene:1017",
                  "in": "path",
                  "name": "geneid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "gene2disease",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene2disease"
                }
              ]
            }
          }
        },
        {
          "path": "/chemical_substance/disease/{chebi}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put CHEBI ID here, e.g. \"CHEBI:661\"",
                  "example": "CHEBI:661",
                  "in": "path",
                  "name": "chebi",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "chemical2disease",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical2disease"
                }
              ]
            }
          }
        },
        {
          "path": "/chemical_substance/gene/{chebi}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put CHEBI ID here, e.g. \"CHEBI:661\"",
                  "example": "CHEBI:661",
                  "in": "path",
                  "name": "chebi",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "chemical2gene",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical2gene"
                }
              ]
            }
          }
        },
        {
          "path": "/disease/gene/{mondo}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put DOID ID here, e.g. \"DOID:123\"",
                  "example": "DOID:123",
                  "in": "path",
                  "name": "mondo",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "disease2gene",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease2gene"
                }
              ]
            }
          }
        },
        {
          "path": "/disease/chemical_substance/{mondo}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put DOID ID here, e.g. \"DOID:123\"",
                  "example": "DOID:123",
                  "in": "path",
                  "name": "mondo",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "disease2chemical",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease2chemical"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "https://automat.renci.org/cord19-scibite"
        }
      ],
      "tags": [
        {
          "name": "drug"
        },
        {
          "name": "gene"
        },
        {
          "name": "disease"
        },
        {
          "name": "automat"
        },
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIALzHNV8C_-1ZW0_bMBT-K1G2R5K0RWJan0bbiVUaFA3tCRByE7fxltiZ7TBQ1P8-39I2JqE3oEPAC-3xueX7zvE5gcIlGcQgQ27XcQ_9lt9yDxwX4QkRgsINCeYg5OozTAFKpFoMk-wLhThEPqFTqY9BCuVJP6aIOT3fnQlhBFlIUcYRwfLsIkRjxKFU55CmbDS5gPQWhcow5jxj3SAAOScp4H7FO0c8UVrH-tTpj34M2p8d49E5Ph9KtVtImYnVEY8hU2AigpAK0WVh53NOSZSH8puj1aSPnCaPphOEhEbtzx4zDzO7lvmBqQlR4hDRfCoTWEimEMOqJEIMAmYJTcCqkFOAWQI4oTpeBnjMFCWBdBuEMUxRCJIblo8ZBziEQSEPUDRTWlOoCWR5mgJ6X6bTKe1c5ZOKaLwRrJw7Z_3e8ETYOcOBE0MKDxzoT32n3Wp_kh7gHUgzzVOp2S3PkHIi816uFp2jlFD4J0cURkLKaQ4lczI5oNLm95lSZ5wiLGBVGFDIMoIZ1Dh0Wi3128r6GDuAMRIioGgm419Q1PJMVsadN-bQ-z1lnqh_qs7Nk3-kcCKNPwiuUxEDYs6COvWgCuLsWjnWlBhy1-OhrIR3GranYd5NhoWanphzIs7GqJGS0nJDWvrfvvaGFidXrpJ2j47aV65FzvykmRiV5-vl5QGQj3CjmmZdYtRd-s7KjqzoiWQoKXtD85ASHJFGHozuJjQMRoICmwUp7LY7hw9IKA-aOVAJvl4OKgjaFNRN8_UI2XCev5NSS0ploEvnC0OVVUOswtqpVHSEs5ybTFC0PJNdtZ2mAHMUSvmJLgUhJTm3jcStdNr77vdHp-ejn2cD27ZvYl6UBWPWREGBEHMFN4VigYTRDVcMMZJTvXizxVZeKZmiXAuW94hCP89l63qm1-s8ywjlPcDDWChOQMLgEps3KcgySbJ09wgRpb5n9KuLlSc_jBNF9FMi2hu-PRzF4NINV9mZnrJU5TVhGwzm8__1o2kw8yIisnjSkjwdnQ1GbwE6PSd0HVa3kYZC3KRZa4BdzcaOwOrGEiovBae1w1WRXNHVO4L53P29PyzX6uwd0Xv2Ht8_fMvdXdlzG-pxNST7aGn9FC-IY_WVoILeqpVyKwT3slLuDdV1d8ltoXypXfK_AFAvkYvXLtvo4cuQV15LhQFL_qXbvMqJ5_-LeOwbxweOW7v9G9tKzdZ7UfxaK65XAlcYimtMzcVlW6pxIA3V5Kux0_OiZgJvFrR-Dm0W2NyzxeJ-rDHD4RiV_42wb-gtLHcnqqHG1qkW8fMPRW7KWcEaAAA="
    },
    {
      "_id": "94cb5d61356b04e0be1c51c70945918b",
      "_meta": {
        "ETag": "e744d266823b027c858a1c4a6e0598a1efced12226f859b327b6ba1cc22612e8",
        "github_username": "oldray",
        "timestamp": "2020-04-16T08:49:32.411614",
        "uptime_status": "unknown",
        "uptime_ts": "2020-09-17T00:08:50.488026",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/myvariant.info/openapi_minimum.yml"
      },
      "_score": 0.92931646,
      "info": {
        "contact": {
          "email": "help@myvariant.info",
          "name": "Chunlei Wu",
          "x-id": "https://github.com/newgene",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the MyVariant.info Variant Query web services. Learn more about [MyVariant.info](http://myvariant.info/)",
        "termsOfService": "http://myvariant.info/terms/",
        "title": "MyVariant.info API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string. Examples \"rs752396467\", \"possibly_damaging\", \"CDK7\".",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  },
                  "x-valueType": [
                    "http://identifiers.org/hgnc.symbol/",
                    "http://identifiers.org/dbsnp/",
                    "http://identifiers.org/ensembl.gene/",
                    "http://identifiers.org/ensembl.transcript/",
                    "http://identifiers.org/ensembl.protein/",
                    "http://identifiers.org/ccds/",
                    "http://identifiers.org/uniprot/",
                    "http://identifiers.org/clinvar/",
                    "http://identifiers.org/omim/",
                    "http://identifiers.org/efo/",
                    "http://identifiers.org/orphanet/",
                    "http://identifiers.org/hgnc/",
                    "http://identifiers.org/pubmed/",
                    "http://identifiers.org/refseq/",
                    "http://identifiers.org/clinicalsignificance/"
                  ]
                }
              ],
              "responses": {
                "200": {
                  "description": "A query response object with \"hits\" property",
                  "x-JSONLDContext": "https://github.com/NCATS-Tangerine/translator-api-registry/blob/master/myvariant.info/jsonld_context/myvariant_context.json",
                  "x-responseValueType": [
                    {
                      "path": "_id",
                      "valueType": "http://identifiers.org/hgvs/"
                    },
                    {
                      "path": "cadd.gene.genename",
                      "valueType": "http://identifiers.org/hgnc.symbol/"
                    },
                    {
                      "path": "clinvar.rsid",
                      "valueType": "http://identifiers.org/dbsnp/"
                    },
                    {
                      "path": "cadd.gene.gene_id",
                      "valueType": "http://identifiers.org/ensembl.gene/"
                    },
                    {
                      "path": "cadd.gene.feature_id",
                      "valueType": "http://identifiers.org/ensembl.transcript/"
                    },
                    {
                      "path": "cadd.gene.ccds_id",
                      "valueType": "http://identifiers.org/ccds/"
                    },
                    {
                      "path": "clinvar.uniprot",
                      "valueType": "http://identifiers.org/uniprot/"
                    },
                    {
                      "path": "clinvar.omim",
                      "valueType": "http://identifiers.org/omim/"
                    },
                    {
                      "path": "clinvar.rcv.accession",
                      "valueType": "http://identifiers.org/clinvar/"
                    },
                    {
                      "path": "clinvar.rcv.conditions.identifiers.omim",
                      "valueType": "http://identifiers.org/omim/"
                    },
                    {
                      "path": "clinvar.rcv.conditions.identifiers.efo",
                      "valueType": "http://identifiers.org/efo/"
                    },
                    {
                      "path": "clinvar.rcv.conditions.identifiers.orphanet",
                      "valueType": "http://identifiers.org/orphanet/"
                    },
                    {
                      "path": "clinvar.gene.id",
                      "valueType": "http://identifiers.org/hgnc/"
                    },
                    {
                      "path": "dbnsfp.ensembl.proteinid",
                      "valueType": "http://identifiers.org/ensembl.protein/"
                    },
                    {
                      "path": "docm.pubmed_id",
                      "valueType": "http://identifiers.org/pubmed/"
                    },
                    {
                      "path": "evs.gene.accession",
                      "valueType": "http://identifiers.org/refseq/"
                    },
                    {
                      "path": "clinvar.rcv.clinical_significance",
                      "valueType": "http://identifiers.org/clinicalsignificance/"
                    }
                  ]
                }
              },
              "summary": "Make variant query and return matching variant hits"
            }
          }
        },
        {
          "path": "/variant/{variantid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Variant HGVS ID, dbSNP ID",
                  "in": "path",
                  "name": "variantid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  },
                  "x-valueType": [
                    "http://identifiers.org/hgvs/",
                    "http://identifiers.org/dbsnp/"
                  ]
                }
              ],
              "responses": {
                "200": {
                  "description": "A variant object",
                  "x-JSONLDContext": "https://github.com/NCATS-Tangerine/translator-api-registry/blob/master/myvariant.info/jsonld_context/myvariant_context.json",
                  "x-responseValueType": [
                    {
                      "path": "cadd.gene.genename",
                      "valueType": "http://identifiers.org/hgnc.symbol/"
                    },
                    {
                      "path": "clinvar.rsid",
                      "valueType": "http://identifiers.org/dbsnp/"
                    },
                    {
                      "path": "cadd.gene.gene_id",
                      "valueType": "http://identifiers.org/ensembl.gene/"
                    },
                    {
                      "path": "cadd.gene.feature_id",
                      "valueType": "http://identifiers.org/ensembl.transcript/"
                    },
                    {
                      "path": "cadd.gene.ccds_id",
                      "valueType": "http://identifiers.org/ccds/"
                    },
                    {
                      "path": "clinvar.uniprot",
                      "valueType": "http://identifiers.org/uniprot/"
                    },
                    {
                      "path": "clinvar.rcv.accession",
                      "valueType": "http://identifiers.org/clinvar/"
                    },
                    {
                      "path": "clinvar.rcv.conditions.identifiers.omim",
                      "valueType": "http://identifiers.org/omim/"
                    },
                    {
                      "path": "clinvar.rcv.conditions.identifiers.efo",
                      "valueType": "http://identifiers.org/efo/"
                    },
                    {
                      "path": "clinvar.rcv.conditions.identifiers.orphanet",
                      "valueType": "http://identifiers.org/orphanet/"
                    },
                    {
                      "path": "clinvar.gene.id",
                      "valueType": "http://identifiers.org/hgnc/"
                    },
                    {
                      "path": "dbnsfp.ensembl.proteinid",
                      "valueType": "http://identifiers.org/ensembl.protein/"
                    },
                    {
                      "path": "docm.pubmed_id",
                      "valueType": "http://identifiers.org/pubmed/"
                    },
                    {
                      "path": "evs.gene.accession",
                      "valueType": "http://identifiers.org/refseq/"
                    },
                    {
                      "path": "clinvar.rcv.clinical_significance",
                      "valueType": "http://identifiers.org/clinicalsignificance/"
                    }
                  ]
                }
              },
              "summary": "For a given variant id, return the matching variant object"
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "http://myvariant.info/v1"
        }
      ],
      "tags": [
        {
          "name": "variant"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIAB0cmF4C_-1XXW_bNhT9K4SeVsCR0nZrsT41SPbRrU0zOMgekiCgqGuJnUQqJKXEMPzfd0lKshVbqrz1ZVheEps8PLy8H-derwJZgqAlD96R4HV4HB4HMxJwsZC4sApqUJpLYTdf-i3DTQ72-6flFVWcChNaNDm5-GC3E9BM8dI0h84kqwoQhtoFIhfEZECenGy-kD8qUEvyADHRoGrOQIfkI1AlSCEVEBrLypDr_uHb7zJjyndRVCzrreXohTMVVKE_L-aezZqzH-xwkT3BJJrKjHu6oIU7c5pVIgdO_qws4vFISf9-BbqUQvM4B5JADTk6UlkIFJTn7jbIy_f9uzwFT1pjNFqTcpNVcchkEQl4SEFAsF4jznoB3Y_Q61VQqXz4AfXLPa6_UDKpmPO7ZwrWt9YpNG0o2wc2VAHeuVmkQkgftf76vQ1Sf8koKnROjWxuKKnJtHNh5NH2Ywreq7oqCurWgk_0LyDN5cQhCRUJUWAqG3NqWMZF2iEybnTg6BVebDrPdJb5xN0YuesSn2HaKOQNyU-PtChz0OQmUPrtD69e__jm-zdvb_DcTVBKbSO7vEtoQVOE--XTs98REFpqBfcVV2AjaVQFLq41zSu4XJbWnus2VjzB_OcLjgaHUqVRlgoW6mURy9zl3AAsibUoxwAgNBRxHtqEmYJzYXLemIIulTTAxRiUsUSP7VeCW5ZRipwLjO8YRBa8GDUY83_suCozKmDUChuRsf2yigtIxhAKFhruv_ZSzmiueSpwmVHBMGq2XDTLUDFccRifOoHPUFSB21mnM-BL6tXxsfv_JLNPmgJqwUTGX4AZ8oDagnlra-cmIBgO1CizbISswV5tZ-3Kla-lvEOVmll12OwOO7DGTHCi0J5mNElcaro_rkYnk23VR5_TZ0uILWmyaU0Zjdh2wDv7JTfAuQCKAvZPaLcrdIDc1twBzL5E9zqxqc6pTF0x7yWzRTqVyRf0_sCyOqQMG7-bOaa-sdWQQUrs6gm3laLD3uFvZ_TADeAb_qQcsDJ28AsacZv8ik4M997kMuyQqrey2WNKYqEXZfikiRxeCV336bNLVoRejA-ogVa9e1RQa__cg9OtlfrhWDVKf7ct9Yck826bcH3g8ei3-efzj2enOKPCoxmYIM9PTy7nR5dUpIA9BKLNcHaEQz5qfsqxuyyjOJdxVFCNc9TTafKLliJP7pi_Z7PbroQWgM3JDalRsxmtmg88WQ8NfD9LRShJeQ2im-p4MmsnPvvTYGfq831sbO7r7t3Mfy4su-Nf-0Pj11-u5uTD2Ywk8fz8Aj_9y3mu1hMGuW_Y6nd989Vm_tyO_0_t-LmPPvfR5z763-mj6_Xf-brIYocTAAA="
    },
    {
      "_id": "67932b75e2c51d1e1da2bf8263e59f0a",
      "_meta": {
        "ETag": "c6166c790fb277b7afb299d91fd2aac06c6708541d2159ef679c69ff262de972",
        "github_username": "konradrenner",
        "timestamp": "2020-07-09T15:24:00.217715",
        "uptime_status": "unknown",
        "uptime_ts": "2020-09-17T00:08:47.547525",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/mygene.info/openapi_minimum.yml"
      },
      "_score": 0.92931646,
      "info": {
        "contact": {
          "email": "help@mygene.info",
          "name": "Chunlei Wu",
          "x-id": "https://github.com/newgene",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the MyGene.info Gene Query web services. Learn more about [MyGene.info](http://mygene.info/)",
        "termsOfService": "http://mygene.info/terms/",
        "title": "MyGene.info API",
        "version": "3.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string. Examples \"CDK2\", \"NM_052827\", \"204639_at\". The detailed query syntax can be found at http://docs.mygene.info/en/latest/doc/query_service.html",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  },
                  "x-valueType": [
                    "http://identifiers.org/hgnc.symbol/",
                    "http://identifiers.org/refseq/",
                    "http://identifiers.org/unigene/",
                    "http://identifiers.org/uniprot/",
                    "http://identifiers.org/pdb/",
                    "http://identifiers.org/biocarta.pathway/",
                    "http://identifiers.org/kegg.pathway/",
                    "http://identifiers.org/wikipathways/",
                    "http://identifiers.org/pharmgkb.pathways/",
                    "http://identifiers.org/reactome/"
                  ]
                }
              ],
              "responses": {
                "200": {
                  "description": "A query response object with \"hits\" property",
                  "x-JSONLDContext": "https://github.com/NCATS-Tangerine/translator-api-registry/blob/master/mygene.info/jsonld_context/mygene_context.json",
                  "x-responseValueType": [
                    {
                      "path": "hits._id",
                      "valueType": "http://identifiers.org/ncbigene/"
                    },
                    {
                      "path": "hits.entrezgene",
                      "valueType": "http://identifiers.org/ncbigene/"
                    },
                    {
                      "path": "hits.symbol",
                      "valueType": "http://identifiers.org/hgnc.symbol/"
                    },
                    {
                      "path": "hits.taxid",
                      "valueType": "http://identifiers.org/taxonomy/"
                    }
                  ]
                }
              },
              "summary": "Make gene query and return matching gene hits"
            }
          }
        },
        {
          "path": "/gene/{geneid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Entrez or Ensembl gene id, e.g., 1017, ENSG00000170248. A retired Entrez Gene id works too if it is replaced by a new one, e.g., 245794",
                  "in": "path",
                  "name": "geneid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  },
                  "x-valueType": [
                    "http://identifiers.org/ncbigene/",
                    "http://identifiers.org/ensembl/"
                  ]
                }
              ],
              "responses": {
                "200": {
                  "description": "A gene object",
                  "x-JSONLDContext": "https://github.com/NCATS-Tangerine/translator-api-registry/blob/master/mygene.info/jsonld_context/mygene_context.json",
                  "x-responseValueType": [
                    {
                      "path": "symbol",
                      "valueType": "http://identifiers.org/hgnc.symbol/"
                    },
                    {
                      "path": "unigene",
                      "valueType": "http://identifiers.org/unigene/"
                    },
                    {
                      "path": "uniprot.Swiss-Prot",
                      "valueType": "http://identifiers.org/uniprot/"
                    },
                    {
                      "path": "pdb",
                      "valueType": "http://identifiers.org/pdb/"
                    },
                    {
                      "path": "pathway.biocarta.id",
                      "valueType": "http://identifiers.org/biocarta.pathway/"
                    },
                    {
                      "path": "pathway.kegg.id",
                      "valueType": "http://identifiers.org/kegg.pathway/"
                    },
                    {
                      "path": "pathway.reactome.id",
                      "valueType": "http://identifiers.org/reactome/"
                    },
                    {
                      "path": "pathway.wikipathways.id",
                      "valueType": "http://identifiers.org/wikipathways/"
                    },
                    {
                      "path": "pathway.pharmgkb.id",
                      "valueType": "http://identifiers.org/pharmgkb.pathways/"
                    }
                  ]
                }
              },
              "summary": "For a given gene id, return the matching gene object"
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "http://mygene.info/v3"
        }
      ],
      "tags": [
        {
          "name": "gene"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIAJA2B18C_81WTXPbNhD9Kzs8tTMSKctOneRUj-162sZOOvIkB8ujAckViYgEaADURzT6710A1JctKfLUh_pgS8DDw2L37VvPA1mhYBUPPkJwGnbCTtCCgIuhpIV5MEaluRTNpt0y3BRov9_OblBgaKFw8eVPu5eiThSvTHPiSiZ1icIwuwByCCZH2DxmP8E_NaoZTDAGjWrME9QhfEKmBJRSIbBY1gYeNo49_pIbU32MonKWLdeiX11sqEr9edjzPDaEHUgHiiw8kRRbYtxDBSvdgcu8FgVy-FZbxLStpH-tQl1JoXlcIKQ4xoLSpiwES8YLdxUW1e8bF_nzPF2GoSmOjJu8jsNElpHAiYUGiwXh7Msp0wR9mAe1KvaEPj7dkeUvSqZ14lLsaYLFo80Fyxq-5dP8da2NxzIhpK_O9vqTLcn2klFM6IIZ2dBXzOTaZS7yaPsxQ59MXZclc2vBLRsh2JvBwYCJFBSa2paXmSTnIvPbOTc6cMSKrjSrbKxi8rpch_cyE15J2igiDeF6ysqqQA394PLq726fDvSDu9tB5133fffcf-12zn47_TBgph-EcJ_b0hoqJ6ZNtHpGCplCwgTECENZU_TMQFOaVCY63KwPiohShNrYLZ-XQSPqMDdlYWNW-FRzhVYWRtXoRDJmRY33s8o-9GFZeJ5S6_Ahp0yEUmVRnokk1LMyloVT7x6YwqHGp0OIWnAb8k8glZLmEKRK40PbMZcJU4aFVigTNjuEHWGWHYOb8BFvYPpgaDlTZTaKw2PACskCZEnpsLLWSU4N7URsfD0Cryfq08fWygbQS7_b6bi_z3R40ahnCQYZf8fEwIS6n0Rnld4PgBJMFmJmjc802K-bUpi7NnNmQGfCAZkJgTfVsu9VIombIrsu3qIhpMIfzg3egM0r8limLRG_JKNmO_6NBJZCliQZV5pp-6_e57tPV5fk6jg1e2z37vLivte-ZyJDKitGa19r0xCkMmScCj6L4kLGUck0GdGWBX_XUhTpIPGXNFvLr6HdJaU4T49cxub2N08X-_zxD6mAQcbHKLwP8rS1NEg7LrdN0gvpkE3669Ze6dL70iqvnQaALr8m0ZVxsb4cwyxswUnn5LwF13e9m479OTnvdM_eh3BhY7P2BQ3DjT8GE6lGGoyUwIfADXBNyKpgCUFjsn2geQdS4JK_e_bu_MPZfzLEtSr3dzf6171pcz-rxE979606pPHtY4lWNv-cxDp72Jtwrdv0v4N5BZ-fCVt8NAaOJXATY_uw9-dwNSyOb_6X82Unsxstx7NuT6KdjMt58QrW9YjZybg51l7Buj0NdzKvBuHxrDtm5__PXReLfwHrmvLutwwAAA=="
    },
    {
      "_id": "77ed27f111262d0289ed4f4071faa619",
      "_meta": {
        "ETag": "927041a4b491cce1ceec962d788b27664bcd563851dda24b9e6fae5c704493f4",
        "github_username": "kevinxin90",
        "timestamp": "2020-05-28T00:00:49.181095",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:43.643688",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/MGIgene2phenotype/smartapi.yaml"
      },
      "_score": 0.92663187,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call. Type: string.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned chem object. If \"true\" or \"1\", all fields will be collapsed into a single level deep object (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Type: boolean. Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us with an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "facet_size": {
            "description": "the number of facet buckets to return in the response. Type: integer. Default: 10. Max: 1000.",
            "in": "query",
            "name": "facet_size",
            "schema": {
              "type": "integer"
            }
          },
          "facets": {
            "description": "a comma-separated list of fields to return facets on.  In addition to query hits, the fields notated in \"facets\" will be aggregated by value and bucklet counts will be displayed in the \"facets\" field of the response object. Type: string (list). Default: None. Max: 1000.",
            "in": "query",
            "name": "facets",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated list of fields (in dotfield notation) used to limit the fields returned from the matching chem hit(s). The supported field names can be found from any chem object or from the /metadata/fields endpoint. If \"fields=all\", all available fields will be returned. Type: string (list). Default: all. Max: 1000.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "format": {
            "description": "controls output format of server response, currently supports: \"json\", \"jsonld\", \"html\". Type: string. Default: json.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching chem hits to skip, starting from 0.  This can be useful for paging in combination with the \"size\" parameter. Type: integer. Default: None.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "prefix": {
            "description": "Pass a prefix string to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          "search": {
            "description": "Pass a search term to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          "size": {
            "description": "the maximum number of matching chem hits to return per batch. Type: integer. Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated list of fields to sort on. Prefix each with \"-\" for descending order, otherwise in ascending order. Default: sort by descending score.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "Gene": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Gene"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Chem"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "disease_related_to_gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "MGI",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "_id",
                "size": "300"
              },
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "mgi.associated_with_disease.doid"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/mgi"
              },
              "source": "mgi_gene2phenotype",
              "supportBatch": true
            }
          ],
          "gene_related_to_disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "MGI",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "mgi.associated_with_disease"
              },
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene_related_to_disease"
              },
              "source": "mgi_gene2phenotype",
              "supportBatch": true
            }
          ],
          "gene_related_to_phenotype": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "MGI",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "MP",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "mgi.associated_with_phenotype"
              },
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene_related_to_phenotype"
              },
              "source": "mgi_gene2phenotype",
              "supportBatch": true
            }
          ],
          "phenotype_related_to_gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "MP",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "outputs": [
                {
                  "id": "MGI",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "_id",
                "size": "300"
              },
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "mgi.associated_with_phenotype.mp"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/mgi"
              },
              "source": "mgi_gene2phenotype",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "gene_related_to_disease": {
            "DOID": "mgi.associated_with_disease.doid",
            "name": "mgi.associated_with_disease.name"
          },
          "gene_related_to_phenotype": {
            "MP": "mgi.associated_with_phenotype.mp",
            "pubmed": "mgi.associated_with_phenotype.pubmed"
          },
          "mgi": {
            "MGI": "_id"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothings.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the MGIgene2phenotype query web services.",
        "termsOfService": "https://biothings.io/about",
        "title": "MGIgene2phenotype API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/gene",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple MGI Gene IDs separated by comma. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted. Type: string (list). Max: 1000.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Gene"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "A list of matching gene objects"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "For a list of chemical IDs, return the matching gene object",
              "tags": [
                "gene"
              ]
            }
          }
        },
        {
          "path": "/gene/{geneid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Retrieve gene objects based on MGI Gene ID  Supports JSONP and CORS as well.",
                  "example": "MGI:101864",
                  "in": "path",
                  "name": "geneid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Gene"
                      }
                    }
                  },
                  "description": "A matching gene object"
                },
                "404": {
                  "description": "A response indicating an unknown gene ID"
                }
              },
              "summary": "Retrieve gene objects based on ID",
              "tags": [
                "gene"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "MGIgene2phenotype metadata object"
                }
              },
              "summary": "Get metadata about the data available from MGIgene2phenotype",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/search",
                  "name": "search"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/prefix",
                  "name": "prefix"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "description": "MGIgene2phenotype metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from a MGIgene2phenotype gene object",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string.",
                  "example": "mgi.associated_with_disease.doid:\"DOID:0110293\"",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/facet_size",
                  "name": "facet_size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/facets",
                  "name": "facets"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make queries and return matching gene hits. Supports JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms separated by comma (also \"+\" or whitespace).  Does not support wildcard queries",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "a comma-separated list of fields as the search \"scopes\" (fields to search through for query term). The available \"fields\" that can be passed to the \"scopes\" parameter are listed in the **/metadata/fields** endpoint.string Default: \"scopes=_id\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make batch gene queries and return matching gene hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene_related_to_phenotype"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene_related_to_disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/phenotype_related_to_gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease_related_to_gene"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://pending.biothings.io/mgigene2phenotype"
        },
        {
          "description": "Production server",
          "url": "http://pending.biothings.io/mgigene2phenotype"
        }
      ],
      "tags": [
        {
          "name": "gene"
        },
        {
          "name": "phenotype"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIADH_zl4C_91a62_cNhL_VwjdfUhSe3edBMXVQIFr69RwgcRuHOAOyBoLrsTdZS2JCkn5cYb_95sZUs_VY203jzYfYi1FDufxmweHugtUJlKeyeCQBa8ms8ks2GOBTFcKBu6CUKWWh5aeRcJljNM2Is7-vZTKbmS6NhOpcEnKE4Evfzv5z5t37L8n73DwZl9GtMLazBxOp2tpN_lyEqpkeimuZHoj0x9mbqJWMa3XwmQqNXIZCxaJKxEDfzq4hzmRMKGWmZUqxYlHKswTAezhAFMrZjeCvT0-WYtUvMw2IlX2NhPsUy70LbsWS2aEvpKhMBPc0AqdmNPVuRur81gXbMqXKrc0X1rH3_YOP52d4IwroY1n7QC0iBzjjjAKQx_v2uy_SUN9m1kRsTOtojwkKdwCpJbruM4U2CgCniYN5pK1bLKCm25tNEb-AdQvUBF87QUqLI6z3M7FSIuhYpinMErmao6TiZpDVvPUxNwq3RwvOXTMZNxuDIFzSlzgU6aMw2vGNayypQH-qcUKafxjCvgDjAF2zLSaNI2UXUkRR3U0l2PExRgFmmrq6_3ITqudf9UWu4HddlY64baxsxshNWkBKjb2ZxXdll4NFOiZZ1ksQ7LK9Gb_-vp6H1fuA0BEGqpIRDTLhBvgxqlVo0daKZziZeT-tlCX5LGVWUweyY7BNuzkyAAAkWcE_fKWgSQJn7B3ygrwXW5ZmGsNbMXorkyl8NfyS0F-LdMstwz2YnnGrGIHs9mMJfxGJnmyRzMgblh2LeOYLWFxIi3sMmEfAISHzFgNmGHPYmns8wl7y28OiYKLBIhT4NhNCu7vvcKkJtk_koQX9_f-BUUnL_vL2WxQn38YUkZDfdKKxK3utKmbaabH3qlK9rjWHJzkviMS_sRQMAyBYPEQ3YOhNzC1_EOEltAXvH4Eq4MMvtFa6ffCgJ37uCqUBdaLaB9gjKdMJg5CYF8HUsSDjwEUNXPAhUakBr8qzXgpHe4MdGKE0h5Qt7lOyfZdYge1WOVC1AVRp0AxvcP_ZXRPcq5Fd8BoCfReAEIgIzWUy5bcAPsQXGtAZ-w8zzKl4fVv56fvzkDqiP1y-v6ccQPYjmMCnrjhSVYmlcOD2cG_vn_tsi8FUYhtdYd2HAdNdFqdC1RZZbQOOH-J0AdmiZc8vKxTKMf-4sHzqS6_g6N3O1Anrp03v-4Kur0ul6eXqbpOHZ2Toy0_G4E2rOjzJlAhj7jlg470EPA48Ltw0Imlfpu0tLFdqRXMlqpsqeFY2GoOlX4UXtzPK8ATx6p0pVWyXWg2NFRqpaWlAuRPUZYRXIeNyOBHvpCfZvBe3tTX-5HP5mu729Wp9zHm9StbVuYdB4q-HNO2uYPwA_LL73RScXG7nSCgGJ9wY1QosXpaXMM5ahFJMLwRk0jJ6HAeHJ2eHB3ODg5mL394NQ8GXOnTt5pDnpYBVjwUdmHk_0SDQjW6ExUDWbvhW_j7C3nWk3IYymm2JN9Rd22t7a4vdJPGrvj728-65GvD1atrHJQJFV2OwsU82Ehr5gHzB6Hbv3B9_RbPV_gKTnNUpPqiull4oLyTnUraMhi67S5wu694Hn-SQz0pGD3Bob7aSf7T4DneuQO1zTqO8ewZj40C3_gOHAMObdeAGUAnhCA4b7MjBfCC9MmMwxCe06OQ66jAXtc5nFISMNjZXuBu2_2Kk-KQWCRyQ87qSiPgy5EC5p75CVYVL-1Gq3y9QWepSQl8fwACVUEw9wAAGq5bAa62FCyDtAzbAzkXHMqNSpsyrgWxB9OkO7C-eNEuCV-8YCKNMiVTO_HtiiOx4qD9w5LojwsZzYPupsWf1p8YD5tnp-cfhgLT783AWZwm_r4BdInR0oXKnWJpV6SkHvjSiv3LtdnHzUnqoUjZNZ2aGwstYqoSrVq0OrGPJ-SLzYeSKfev06oaxrsT8vtvk7lwtq3Wb-eau6oO6wgltyonX0ZHhoJ_Xk5u-DD4d4K25j794aRme3Gyy-l1tM6uMlwHq-gbWsXkRQ6Zxb2HwxrAFIl7l5uwkxWIg-W9C8rz4GAOHAAvRZQs-qWhimOeGQpQIClnBviBmBfjBQyLhMg8TYzzMUsFBbPKsx2VjmV7LMcxVkjFihsAir9yncrVLQngSYIm8hBEEc-9bpdKxYKnkyoariDTiCFl1-uGDmV7ik7bxZ3WlqpBdQgMDN1arPOYa5AE4IQKV7kuL5P2sFeN-TXXfC1oDUgG8eNKRgKWuLAH8KKd9phRLnvAKpdALKFLAzhID7lBMmCsFZhEXWO7mygA4SGZy0pnBF2141CH0GSIPFkCR5hJcS5b5uElnCNQKh_QfA4rgmfhBYAcsRa6ZqmDWbvX3sN98-jWIYKnXZPhcVVBJYQjwhQgi52kjEeRLGDpagAM1O5mwa8l5LoUPvc8gFuV2F-vASdFTXTF41xQEkD1xaBGAEhacxUIZ1nMb6uKoEbSOUrp2I002nOjUar8HcTAhyjd7IKZqmf1UH0_A-m2XP85ehJVTLFMpK3ruAxj1H1ptPYpsIFRnhlfmflaEic78iCXKaqyFajbU-HpbT0qkm8V1NtVWFWDudjpRn-EmFcEzlqDqBlCC9bHLER5YzcDlSeQMQO5A0J_wgCc5xYv0Kqk4a6CS3jt1S7fvGINFp5YdaHo7imO3PPGJqCQVvqrRMSpg4KVR5wxwbCZMBqntiDiivtLCdnHWK6prCOTQzwC6MgSJYDDVR5T4Z_xNU4DvAKklzJ1SapWs2J0qlcE_WGPfHBIfN8yGYtzvq3aIf-ZK1XchAJpIPNKxpRNGucWB6NeY41xW7V7R4zlu9D97BbHLThcfS5mq974GLMDGdBfK48izGcSqFHdCWAwEQ4xvWPeo1ZkD8_jeQ9XU7o7c6gRHGxB-J4H-5h1wAmQsPsUBKJkJPQeU0BcX0s6IsGZuvG2JiARh7xXIwBHVj1sK99pHbLUffne5Z_j8iOPZutiIaNeUzfu8nHiRe38XLtTq58XO7aA5IKlWec2dCYMoRo0_ZVmx47t03Tz8wBIFKergfNf-0uBbaWQCeixzBDBKlYu9Bb8OJQTP9WNRZce2wJcdHydUAjVr0Y6_z7gO4hf4E_QvRP46YNFtEpddnsYvbQ87ve_DgvC--9fL5ReOK5wKfBfmK0SsWKOVtSZazDQlnG3lWQJZ6odeOkAb8e-7VnuUqunRXEX9LUL3N748c65i01KI9U9Fxdg2Hc43GeCb4_pSzoDlk-tDN2dXeo_PHMlTGM-Xnm1FxwVjQr3fVijDVBWskP3aYHPvdQR8p8kFnLRZnDUC4tLucX2JXC7RbssHrC_Gtw5qT_OLu6DeoeTIhPuvBEcYitZY7Sf6wIPVWs_YwaqLvOKum6RABU04OFwt6WYv-_n9_d_SK_9babPa_C3Z-3pZ35nGf4qODYOvOEfb78HYabRX_ubmr4mI-m2rxU3ZPouWw7Zfhsqj_f1hftqypd8wavZ7Cu5-Ngl_rcEAuDVm7u_hft5Df5Vfb0HM3-i4Us-JklWXCt8TktW6bs9YySB3znX2wW_tep-aC7NuR9JI3cIgF10h2bMlwkV-COz_TwqHtfSbQKgLEIw_Ps_OEMGhw8xAAA="
    },
    {
      "_id": "ed0ee52921c7cbce24033ffd1369922e",
      "_meta": {
        "ETag": "ec2d4d650f1241548c939fdf1a08b8b7ec50f7107e39a1e47eb0cb9cab523970",
        "github_username": "kevinxin90",
        "timestamp": "2020-05-27T17:02:52.788565",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:30.856497",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/semmed/semmed_disease.yaml"
      },
      "_score": 0.92663187,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call. Type: string.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned disease object. If \"true\" or \"1\", all fields will be collapsed into a single level deep object (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Type: boolean. Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us with an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "facet_size": {
            "description": "the number of facet buckets to return in the response. Type: integer. Default: 10. Max: 1000.",
            "in": "query",
            "name": "facet_size",
            "schema": {
              "type": "integer"
            }
          },
          "facets": {
            "description": "a comma-separated list of fields to return facets on.  In addition to query hits, the fields notated in \"facets\" will be aggregated by value and bucklet counts will be displayed in the \"facets\" field of the response object. Type: string (list). Default: None. Max: 1000.",
            "in": "query",
            "name": "facets",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated list of fields (in dotfield notation) used to limit the fields returned from the matching disease hit(s). The supported field names can be found from any disease object or from the /metadata/fields endpoint. If \"fields=all\", all available fields will be returned. Type: string (list). Default: all. Max: 1000.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "format": {
            "description": "controls output format of server response, currently supports: \"json\", \"jsonld\", \"html\". Type: string. Default: json.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching disease hits to skip, starting from 0.  This can be useful for paging in combination with the \"size\" parameter. Type: integer. Default: None.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "prefix": {
            "description": "Pass a prefix string to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          "search": {
            "description": "Pass a search term to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          "size": {
            "description": "the maximum number of matching disease hits to return per batch. Type: integer. Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated list of fields to sort on. Prefix each with \"-\" for descending order, otherwise in ascending order. Default: sort by descending score.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "Disease": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Disease"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Disease"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "Disease-affected_by-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-affected_by-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-affected_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-affected_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-affected_by-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-affected_by-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-affected_by-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-affected_by-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-affected_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-affected_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-affected_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-affected_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-affected_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-affected_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-affected_by-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-affected_by-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-affects-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-affects-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-affects-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-affects-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-affects-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-affects-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-affects-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-affects-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-affects-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-affects-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-affects-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-affects-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-affects-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-affects-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-affects-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-affects-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-caused_by-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "caused_by"
              },
              "path": "/query",
              "predicate": "caused_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-caused_by-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-caused_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "caused_by"
              },
              "path": "/query",
              "predicate": "caused_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-caused_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-caused_by-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "caused_by"
              },
              "path": "/query",
              "predicate": "caused_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-caused_by-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-caused_by-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "caused_by"
              },
              "path": "/query",
              "predicate": "caused_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-caused_by-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-caused_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "caused_by"
              },
              "path": "/query",
              "predicate": "caused_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-caused_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-caused_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "caused_by"
              },
              "path": "/query",
              "predicate": "caused_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-caused_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-caused_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "caused_by"
              },
              "path": "/query",
              "predicate": "caused_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-caused_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-caused_by-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "caused_by"
              },
              "path": "/query",
              "predicate": "caused_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-caused_by-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-causes-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "causes"
              },
              "path": "/query",
              "predicate": "causes",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-causes-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-causes-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "causes"
              },
              "path": "/query",
              "predicate": "causes",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-causes-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-coexists_with-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "coexists_with"
              },
              "path": "/query",
              "predicate": "coexists_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-coexists_with-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-coexists_with-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "coexists_with"
              },
              "path": "/query",
              "predicate": "coexists_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-coexists_with-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-coexists_with-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "coexists_with"
              },
              "path": "/query",
              "predicate": "coexists_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-coexists_with-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-coexists_with-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "coexists_with"
              },
              "path": "/query",
              "predicate": "coexists_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-coexists_with-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-coexists_with-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "coexists_with"
              },
              "path": "/query",
              "predicate": "coexists_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-coexists_with-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-coexists_with-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "coexists_with"
              },
              "path": "/query",
              "predicate": "coexists_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-coexists_with-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-coexists_with-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "coexists_with"
              },
              "path": "/query",
              "predicate": "coexists_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-coexists_with-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-coexists_with-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "coexists_with"
              },
              "path": "/query",
              "predicate": "coexists_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-coexists_with-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-derives_from-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "derives_from"
              },
              "path": "/query",
              "predicate": "derives_from",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-derives_from-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-derives_from-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "derives_from"
              },
              "path": "/query",
              "predicate": "derives_from",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-derives_from-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-derives_info-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "derives_info"
              },
              "path": "/query",
              "predicate": "derives_info",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-derives_info-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-disrupted_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-disrupted_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-disrupted_by-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-disrupted_by-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-disrupted_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-disrupted_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-disrupted_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-disrupted_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-disrupted_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-disrupted_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-disrupted_by-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-disrupted_by-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-disrupts-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-disrupts-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-disrupts-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-disrupts-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-disrupts-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-disrupts-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-disrupts-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-disrupts-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-disrupts-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-disrupts-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-disrupts-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-disrupts-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-disrupts-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-disrupts-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-negatively_regulated_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-negatively_regulated_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-negatively_regulated_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-negatively_regulated_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-negatively_regulated_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-negatively_regulated_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-negatively_regulated_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-negatively_regulated_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-negatively_regulated_by-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-negatively_regulated_by-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-negatively_regulates-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-negatively_regulates-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-negatively_regulates-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-negatively_regulates-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-negatively_regulates-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-negatively_regulates-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-negatively_regulates-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-negatively_regulates-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-physically_interacts_with-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-physically_interacts_with-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-physically_interacts_with-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-physically_interacts_with-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-physically_interacts_with-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-physically_interacts_with-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-physically_interacts_with-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-physically_interacts_with-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-physically_interacts_with-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-physically_interacts_with-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-physically_interacts_with-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-physically_interacts_with-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-positively_regulated_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-positively_regulated_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-positively_regulated_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-positively_regulated_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-positively_regulated_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-positively_regulated_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-positively_regulates-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-positively_regulates-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-positively_regulates-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-positively_regulates-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-positively_regulates-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-positively_regulates-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-positively_regulates-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-positively_regulates-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-prevented_by-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "prevented_by"
              },
              "path": "/query",
              "predicate": "prevented_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-prevented_by-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-prevented_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "prevented_by"
              },
              "path": "/query",
              "predicate": "prevented_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-prevented_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-prevented_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "prevented_by"
              },
              "path": "/query",
              "predicate": "prevented_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-prevented_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-prevented_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "prevented_by"
              },
              "path": "/query",
              "predicate": "prevented_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-prevented_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-prevented_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "prevented_by"
              },
              "path": "/query",
              "predicate": "prevented_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-prevented_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-prevented_by-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "prevented_by"
              },
              "path": "/query",
              "predicate": "prevented_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-prevented_by-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-prevents-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "prevents"
              },
              "path": "/query",
              "predicate": "prevents",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-prevents-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-related_to-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-related_to-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-related_to-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-related_to-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-related_to-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-related_to-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-related_to-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-related_to-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-related_to-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-related_to-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-related_to-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-related_to-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-related_to-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-related_to-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-related_to-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-related_to-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-treated_by-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "treated_by"
              },
              "path": "/query",
              "predicate": "treated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-treated_by-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-treated_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "treated_by"
              },
              "path": "/query",
              "predicate": "treated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-treated_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-treated_by-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "treated_by"
              },
              "path": "/query",
              "predicate": "treated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-treated_by-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-treated_by-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "treated_by"
              },
              "path": "/query",
              "predicate": "treated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-treated_by-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-treated_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "treated_by"
              },
              "path": "/query",
              "predicate": "treated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-treated_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-treated_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "treated_by"
              },
              "path": "/query",
              "predicate": "treated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-treated_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-treated_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "treated_by"
              },
              "path": "/query",
              "predicate": "treated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-treated_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-treated_by-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "treated_by"
              },
              "path": "/query",
              "predicate": "treated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-treated_by-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Disease-treats-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "treats"
              },
              "path": "/query",
              "predicate": "treats",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Disease-treats-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "Disease-affected_by-AnatomicalEntity": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "Disease-affected_by-BiologicalProcess": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "Disease-affected_by-Cell": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "Disease-affected_by-CellularComponent": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "Disease-affected_by-ChemicalSubstance": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "Disease-affected_by-Disease": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "Disease-affected_by-Gene": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "Disease-affected_by-PhenotypicFeature": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "Disease-affects-AnatomicalEntity": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "Disease-affects-BiologicalProcess": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "Disease-affects-Cell": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "Disease-affects-CellularComponent": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "Disease-affects-ChemicalSubstance": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "Disease-affects-Disease": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "Disease-affects-Gene": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "Disease-affects-PhenotypicFeature": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "Disease-caused_by-AnatomicalEntity": {
            "pmid": "caused_by.pmid",
            "umls": "caused_by.umls"
          },
          "Disease-caused_by-BiologicalProcess": {
            "pmid": "caused_by.pmid",
            "umls": "caused_by.umls"
          },
          "Disease-caused_by-Cell": {
            "pmid": "caused_by.pmid",
            "umls": "caused_by.umls"
          },
          "Disease-caused_by-CellularComponent": {
            "pmid": "caused_by.pmid",
            "umls": "caused_by.umls"
          },
          "Disease-caused_by-ChemicalSubstance": {
            "pmid": "caused_by.pmid",
            "umls": "caused_by.umls"
          },
          "Disease-caused_by-Disease": {
            "pmid": "caused_by.pmid",
            "umls": "caused_by.umls"
          },
          "Disease-caused_by-Gene": {
            "pmid": "caused_by.pmid",
            "umls": "caused_by.umls"
          },
          "Disease-caused_by-PhenotypicFeature": {
            "pmid": "caused_by.pmid",
            "umls": "caused_by.umls"
          },
          "Disease-causes-BiologicalProcess": {
            "pmid": "causes.pmid",
            "umls": "causes.umls"
          },
          "Disease-causes-Disease": {
            "pmid": "causes.pmid",
            "umls": "causes.umls"
          },
          "Disease-coexists_with-AnatomicalEntity": {
            "pmid": "coexists_with.pmid",
            "umls": "coexists_with.umls"
          },
          "Disease-coexists_with-BiologicalProcess": {
            "pmid": "coexists_with.pmid",
            "umls": "coexists_with.umls"
          },
          "Disease-coexists_with-Cell": {
            "pmid": "coexists_with.pmid",
            "umls": "coexists_with.umls"
          },
          "Disease-coexists_with-CellularComponent": {
            "pmid": "coexists_with.pmid",
            "umls": "coexists_with.umls"
          },
          "Disease-coexists_with-ChemicalSubstance": {
            "pmid": "coexists_with.pmid",
            "umls": "coexists_with.umls"
          },
          "Disease-coexists_with-Disease": {
            "pmid": "coexists_with.pmid",
            "umls": "coexists_with.umls"
          },
          "Disease-coexists_with-Gene": {
            "pmid": "coexists_with.pmid",
            "umls": "coexists_with.umls"
          },
          "Disease-coexists_with-PhenotypicFeature": {
            "pmid": "coexists_with.pmid",
            "umls": "coexists_with.umls"
          },
          "Disease-derives_from-ChemicalSubstance": {
            "pmid": "derives_from.pmid",
            "umls": "derives_from.umls"
          },
          "Disease-derives_from-Gene": {
            "pmid": "derives_from.pmid",
            "umls": "derives_from.umls"
          },
          "Disease-derives_info-ChemicalSubstance": {
            "pmid": "derives_info.pmid",
            "umls": "derives_info.umls"
          },
          "Disease-disrupted_by-BiologicalProcess": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "Disease-disrupted_by-CellularComponent": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "Disease-disrupted_by-ChemicalSubstance": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "Disease-disrupted_by-Disease": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "Disease-disrupted_by-Gene": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "Disease-disrupted_by-PhenotypicFeature": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "Disease-disrupts-AnatomicalEntity": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "Disease-disrupts-BiologicalProcess": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "Disease-disrupts-Cell": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "Disease-disrupts-CellularComponent": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "Disease-disrupts-Disease": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "Disease-disrupts-Gene": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "Disease-disrupts-PhenotypicFeature": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "Disease-negatively_regulated_by-BiologicalProcess": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "Disease-negatively_regulated_by-ChemicalSubstance": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "Disease-negatively_regulated_by-Disease": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "Disease-negatively_regulated_by-Gene": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "Disease-negatively_regulated_by-PhenotypicFeature": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "Disease-negatively_regulates-BiologicalProcess": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "Disease-negatively_regulates-ChemicalSubstance": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "Disease-negatively_regulates-Disease": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "Disease-negatively_regulates-Gene": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "Disease-physically_interacts_with-BiologicalProcess": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "Disease-physically_interacts_with-CellularComponent": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "Disease-physically_interacts_with-ChemicalSubstance": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "Disease-physically_interacts_with-Disease": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "Disease-physically_interacts_with-Gene": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "Disease-physically_interacts_with-PhenotypicFeature": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "Disease-positively_regulated_by-ChemicalSubstance": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "Disease-positively_regulated_by-Disease": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "Disease-positively_regulated_by-Gene": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "Disease-positively_regulates-BiologicalProcess": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "Disease-positively_regulates-ChemicalSubstance": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "Disease-positively_regulates-Disease": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "Disease-positively_regulates-Gene": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "Disease-prevented_by-AnatomicalEntity": {
            "pmid": "prevented_by.pmid",
            "umls": "prevented_by.umls"
          },
          "Disease-prevented_by-BiologicalProcess": {
            "pmid": "prevented_by.pmid",
            "umls": "prevented_by.umls"
          },
          "Disease-prevented_by-ChemicalSubstance": {
            "pmid": "prevented_by.pmid",
            "umls": "prevented_by.umls"
          },
          "Disease-prevented_by-Disease": {
            "pmid": "prevented_by.pmid",
            "umls": "prevented_by.umls"
          },
          "Disease-prevented_by-Gene": {
            "pmid": "prevented_by.pmid",
            "umls": "prevented_by.umls"
          },
          "Disease-prevented_by-PhenotypicFeature": {
            "pmid": "prevented_by.pmid",
            "umls": "prevented_by.umls"
          },
          "Disease-prevents-Disease": {
            "pmid": "prevents.pmid",
            "umls": "prevents.umls"
          },
          "Disease-related_to-AnatomicalEntity": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "Disease-related_to-BiologicalProcess": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "Disease-related_to-Cell": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "Disease-related_to-CellularComponent": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "Disease-related_to-ChemicalSubstance": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "Disease-related_to-Disease": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "Disease-related_to-Gene": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "Disease-related_to-PhenotypicFeature": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "Disease-treated_by-AnatomicalEntity": {
            "pmid": "treated_by.pmid",
            "umls": "treated_by.umls"
          },
          "Disease-treated_by-BiologicalProcess": {
            "pmid": "treated_by.pmid",
            "umls": "treated_by.umls"
          },
          "Disease-treated_by-Cell": {
            "pmid": "treated_by.pmid",
            "umls": "treated_by.umls"
          },
          "Disease-treated_by-CellularComponent": {
            "pmid": "treated_by.pmid",
            "umls": "treated_by.umls"
          },
          "Disease-treated_by-ChemicalSubstance": {
            "pmid": "treated_by.pmid",
            "umls": "treated_by.umls"
          },
          "Disease-treated_by-Disease": {
            "pmid": "treated_by.pmid",
            "umls": "treated_by.umls"
          },
          "Disease-treated_by-Gene": {
            "pmid": "treated_by.pmid",
            "umls": "treated_by.umls"
          },
          "Disease-treated_by-PhenotypicFeature": {
            "pmid": "treated_by.pmid",
            "umls": "treated_by.umls"
          },
          "Disease-treats-Disease": {
            "pmid": "treats.pmid",
            "umls": "treats.umls"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothings.io",
          "name": "Chunlei Wu",
          "x-id": "https://github.com/newgene",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the SEMMED disease query web services.  Learn more about [semmed disease](http://pending.biothings.io/semmed)",
        "termsOfService": "http://biothings.ncats.io",
        "title": "SEMMED Disease API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/disease",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple disease IDs separated by comma. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted. Type: string (list). Max: 1000.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Disease"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "A list of matching disease objects"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "For a list of disease IDs, return the matching disease object",
              "tags": [
                "gene"
              ]
            }
          }
        },
        {
          "path": "/disease/{diseaseid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Retrieve disease objects based on ID",
                  "example": "C0004096",
                  "in": "path",
                  "name": "diseaseid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Disease"
                      }
                    }
                  },
                  "description": "A matching disease object"
                },
                "404": {
                  "description": "A response indicating an unknown disease ID"
                }
              },
              "summary": "Retrieve disease objects based on ID",
              "tags": [
                "disease"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "mydisease.info metadata object"
                }
              },
              "summary": "Get metadata about the data available from mydisease.info",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/search",
                  "name": "search"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/prefix",
                  "name": "prefix"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "description": "mydisease.info metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from a mydisease.info chem object",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string.  The detailed query syntax can be found from our [docs](http://mydisease.info).  Examples: \"cancer\", \"primary ciliary dyskinesia\", \"DOID:9562\"",
                  "example": "cancer",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/facet_size",
                  "name": "facet_size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/facets",
                  "name": "facets"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make disease queries and return matching disease hits. Supports JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms separated by comma (also \"+\" or whitespace).  Does not support wildcard queries",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "a comma-separated list of fields as the search \"scopes\" (fields to search through for query term). The available \"fields\" that can be passed to the \"scopes\" parameter are listed in the **/metadata/fields** endpoint.string Default: \"scopes=_id\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make batch disease queries and return matching disease hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-affected_by-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-affected_by-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-affected_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-affected_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-affected_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-affected_by-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-affected_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-affected_by-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-affects-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-affects-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-affects-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-affects-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-affects-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-affects-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-affects-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-affects-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-caused_by-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-caused_by-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-caused_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-caused_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-caused_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-caused_by-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-caused_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-caused_by-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-causes-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-causes-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-coexists_with-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-coexists_with-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-coexists_with-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-coexists_with-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-coexists_with-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-coexists_with-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-coexists_with-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-coexists_with-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-derives_from-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-derives_from-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-derives_info-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-disrupted_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-disrupted_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-disrupted_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-disrupted_by-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-disrupted_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-disrupted_by-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-disrupts-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-disrupts-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-disrupts-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-disrupts-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-disrupts-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-disrupts-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-disrupts-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-negatively_regulated_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-negatively_regulated_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-negatively_regulated_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-negatively_regulated_by-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-negatively_regulated_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-negatively_regulates-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-negatively_regulates-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-negatively_regulates-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-negatively_regulates-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-physically_interacts_with-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-physically_interacts_with-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-physically_interacts_with-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-physically_interacts_with-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-physically_interacts_with-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-physically_interacts_with-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-positively_regulated_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-positively_regulated_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-positively_regulated_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-positively_regulates-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-positively_regulates-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-positively_regulates-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-positively_regulates-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-prevented_by-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-prevented_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-prevented_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-prevented_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-prevented_by-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-prevented_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-prevents-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-related_to-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-related_to-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-related_to-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-related_to-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-related_to-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-related_to-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-related_to-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-related_to-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-treated_by-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-treated_by-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-treated_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-treated_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-treated_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-treated_by-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-treated_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-treated_by-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Disease-treats-Disease"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "https://biothings.ncats.io/semmed"
        }
      ],
      "tags": [
        {
          "name": "chemical"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        },
        {
          "name": "semmed"
        }
      ],
      "~raw": "H4sIAD2dzl4C_-VdbW_kthH-K8S2Hy6pvXbaNEAMBGhyvhZX9HLXOEU_nA2DK3Ft1VpxI0q2twf_9w5JvVASSXFXtOvl5kt8EjXkzPMMOUMNtV9mdE0yvE5mZ2j2p_np_HR2hGZJtqRw4cssolmBo0L8TVY4SXmzW5Ku_7JIaHGbZDdsnlD-SIZXhN98e1tmKUnQv0t-9fE4icUjRbFmZycnN0lxWy7mEV2dZOThhmREtsppKp7OCVvTjCWLlKCY3JMURpfPnqBNTFiUJ-sioRlveE6jckVgcPwCoktU3BJ08e7Dh3fnKE4YwYyg30qSb9ADWSBG8vskImyO0D8IzjO0ojlBeEHLAn1mZLUicf3U1Rs-VhgqmCUG_eaqoiey7Vd80AXJV-zj8kKKrpWEB9sHsggXtX2KpJAqVoM8rwb546f3_PY9yVml2jeAAdeYDxquwqXPX_rqf8ppXEZCd9mMyyjzVLX1cBzV8GdPV3xA-KaSXUMX3ZJVEuGU995exVlGpZm714V1u5eKHGcsxQXNu9ebkXQvq6NZ4-KWCZqdVECIf6wpk-Rb4xyeKhp7_D4nSy7jdyfAJaAMUIGdtI1OYlosE5LGKjWba2IUYxJEU6Y-X11xelo6i_KwvODWM81XuOj0LK8IS-UELM-Kn2i8aVwUJIi_8XqdAoIcrJPH44eHh2P-5DEQg2QRjUksWjEONJZmzbmDFQmRtk9i-f8e21ZlWiRr7pIVad-fM-AdH3IBnrPYIFBkhefoZ1oQ8ERcoKjMcxhVyv0P0Qz-X-A7Irw0ydbgdtAVKteooOib09NTtMKPyapcHYkWMAsU6CFJU7SAh1dJAb3M0a-bNTlDrMiBSehNmrDiqzn6gB_PhIS5cDJoIpglGs2enip7JblQ_bNQ8Orpqboh5ppK9T-enlrN-R8mbNGxXlKQlXxaC6lsyU4qVxdOXY8Q5zkG73nSTG0_Iq4bn9MA84j7TWN3uvgPiQpBwdm3OwzYOsx3eU7zXwgDsE0Dq00GGMaiHxgbzlCykjwClCVTOSuq-UHMZCWwI-d0nf2V5gg3Cip8OgLhRQlTMyeAQfGZMm3NxOJxJeTXU8bJl-qPJH4S-t4Q_ezRU-wXAnyB1aZvZ7SAf8RAXxgg75s84tVazuJvgXLfnn7_nVwt-RU-g3Vmm3oosy4Ji7wk3CYtKhrWvsQEBzN9usDRnSqhubbnU-RUz3bzZ72TmMgrnfZb3QRr9Kwyu8voQ6Y4ysCjXMnbOE69vla-AxbFMS6w1WG24ZJ0B-n-WmqZIeqvO5tqrHMekKJ6pI1Be5b4GynaNjK445OJ_Oc9cAvzsHKZ0xXqSu6Yp7FHzz4126eYCbrMo84sUV15IYddw_3kUX2-uvJsTueIqLTtLsBWT_bwxT2EEXdd3SrSR1vSdou1458iyZBTN6QXv_JxgcwkrZdAxDaQpjyiCNwZwpklLbNYDpKWOfoc04g1OUd30BDeoHdyyWFn6BKwziKSX8L4LwG3hFsHRUma8P_HG3aXZIQlWN4___j-_Oz7P3_3x8tZb-WSUiyO-ttrXbCmLTdLHJHimiX_JR0J7VUnKYzmHQ8Q_34h7520YHI92UBzR9v1reZuL070Tq_8369_iRdebY-FpXM36_ZDUtyKWelydpsU7HKGqtxqs8fR-gees6nbKZAogoi4jtUHoQ5XfY4uyvUa_IKhv198_PmTeODtx18uEGaQDabpvDMDy56veM__x2x_km9Nmpcm-Nb_bZ_gN-sugfQMsT-m2SVAb3DKKLjJH8BHIBt8AM4AUWE24uvdOQWGZbRATHKIbwPEEc7jmn66NF-sTjBA7eYFlt0etyOps886dGDCb2UkBuOSomBwb6oGBa1vFrc5LW9uud8oWsK4-bLfhiCXFQFAhtwMkUv_GjMekYM4OU80HTWYIpwTMTxolshU-Ouv-xHo118jksVrmmTFvNoNOSdLDNY_a4T-cJ3ElzP9noi37Y_xGfTTx4tfbXPUP7tzaJ25hDuXLviEufWMqpsvxbb5oiDHdzfsmA9B6G6bL3XN61z2GC-XYHoSXy82xz9muKBiJ_hdViTFxjIbOct8C_O-FznVHvVFuWAFj2R9CP0poSm94WI_5TQijPkQquz6TRX16ZbAlLhZJ9FfCQaaeBH6N75_5gnZMsX52_rZaUKZZ_oxD9RjvmnHfFOO-aEb80015oFmzB_FIlwyv3NcK3EKzRQpvojWivRGtVbkRLK1grzRrRU5hXBdNP1RjnmxmMdZI6LkEcJMds1DLX_O0JE6ySG6krw5RUfsM1lzKtQdYf4cpCN2kpMMUPbiKDHEwveEXfMdIn-Id6RO0boWxDdmPQ4vYXm59h3bdqR6Y3lH6kSSd2R543hH6iSwO7B4Y7iU6i_CbQROmWobIb6JwjyRhHknCPNBDo9haUZu4Mo9STfXObkBkb4nBFMH3iA3dTCRASax3ghh6mAKPzQy2bNCyZ4VR_YMIE5zwPXthnFdQWCSFXA78h4omrvwZmpzFxPtbRbszW3MXTwTrr5m2jVlybPOtKYOpmJqEDvJ3EOZ7FkNwZ7BCh7nPq30SQbOyT208rvh1BHqDy1Vqj-LqlKnYq_K8jeRqVI9YD2Z4jmRvl1Qb4xRRE7JE1QxvminyPRGOkWmPyy8EU6ROYVuPUy9rI1FTrDnyUoROYV6qhhf1FNkeqOeInMi9RRJ3qinyJxCvR6m_qinzJ1X8i18-_iwKuhLWzynKfrY0FJUXfCSC4RF7aRs3Km2KCha8bfyuCpU4o2650zmLgXNo8WRbS2SZqi8iiGnqah3kDUE9XE2WRLQHk2r6iPm6P0SNOJlmbKC5nL2DS_6hOHUJS312ZmIpileM1FNAspixGBIKUEpP1qHYkLWlUxelJOijIjKk7YMQ0rRPHaESiaqFCrFUH1GTBTLJDdZstwIHSqRYIwy4uT9qjLvgtKU4Gzelq4sccqIzd5qkZfG3pVEafD6rOLA2mA6zg1eZyODvBw0AUZxm_N63Pqk4BE_t8SLococ3xDxDGi2zul9EhN4RNaoAMNET0eIUVnqA0_Jap9CEAxymDthh5JxMQDWEiChD_zok5AAgm06N2VpIwRTylg1SgsgytUCRsTLnnhbtCijO1KI4qaq9KQqOKorXWpH4KnYDckVpL457Z-7Moy-W3KrUaGSreiwWwlXq4QUgigwC73PEI7jpKalLNji9TTylFn1rGCurLe6rMYAbtVw_-Ym5_sXsoDtHqclEeU63HwpmBEIkimuAp66TvGmLd9SREpHaXy7U_NkON3WmPxnmAa3MTpz4Ux7nmFbe78B7Qau_xX3JFHeliarpFBt3Mxkou5de8ILcHnDqkq6qvaPt5c9gGpMU0CPs01vbhQeVvfRL5xry-bkDCqv_gAzXz19KqcIuhNprcAYTmIBcYOpKRodg0nWdJpXDmB7WfAjle3qIc8ENyQ7Uo5jVrYVBwp4oZw8LsD_SmP5922xAoP01sFWRd7UqlhTlTqmGC8FH52ttAVxYpW5S2AZgiAwF8V4AvVTcQIjabgChFyWqSjXXOMb3gyIC9xeJJlcrZRKQz5NqdGBef4TzmizQFXzPjbhVWdvNCb4JMMW2aAmG-i8TFKxrHSqTSWTjHiNjbY9EzSCV3VUyTzcukiW5KvnGmx7gGpssJalsDpr7EKyalWBiFWWbloXRdu4HddAcZzEMOzxNZA_LZa-T5I4BAMcguKXs2O-AoEfcMHyywYwV8YkP0IUhOcPiahtRbh7V1FQCIc1UBHAIprb4apOy9jAemruy7XoXD3-3y07v05iI-CdY9684ZVS-6ycwFRrfTVdwELDIzVtN6KeNxIJojHw1PTYr4TunhyHFePj0lK1qzlEPrSLAEL82awWs2VK5TRcD0nSXQypPeWmM2VfhyvNwfVaL7MlReGyn1PycAV8dmstC0rv9K4mbhY4NTuiBke4_9231zS_lqPij4IKNXitlu3gxBPq4DoD6Ovo9qQAQ6LlMBYNhTX99lvJs5CG8vLGQ-0143Ig_FMPF3LGojnv4kjOFnC5KlWX34f514d_XIiJAqgAz0fiEy_NbgDHnxS3VDQVh4TEVFnmkfJFFX5NBkKjkofbW_ITJJ3thSY8nil6CguKk_5nzWFRzVmbRf0HPygz-yL1_Xx69TRTj6rMylXK6nMCIir7ia8x7ZHLOn67XuH1miNzZt9dqdsfV-2dq_t5ECCONZCBvtwyxoL-1wyy3HA8IGDrHdZdwBzsqr5qZId7wIcEs24HfAfMh7verxlzzR79AWGufUOxA-ZtbP16ke5IPhB81dh3e1SHb4heM76a91kHhLT2bd4OmIs3eK8ZZvmK8YCQrd-p7hhLd9-jvvbAuvfW98Ci7ME7760wZweQLLO9Rpo5J8lMD3A4yfG-A2lLik3gHUAyvPewuibBBowPIfndd4ydk14DxqElu_uO50iSa0DxEJLbfUfWOak1YBxOMrvvSNqSWEusG3ryGkIU7JS09jC2fC8noJS10XJPUbZ_1agLs6KrHugQUtdwANWnr-MgBp3CBgTveBo7inXYqWw4WDuks6NYh5PShoOrMa0dRTPs1DYchB3S21GsQ0hxw0FUn-Y6xcbhprphRc0j6a4NaxbaOsv2GVE2ssIyLYIHEBXvOaqu8XAfX_uXa0PallI13VesR78z3EO8q7MZ-CC2qYID2LBd5Qxq2NtW4cHtsH3lin3gC3Zw2Lss367YBxRuB4ezOfh2RTfwba7gEHfZ7nLFPohtr-AQNmx_bRN7B7wNFmRUPrYdZsZ-5Hc5QorQVVX3FPnxX1HpAt9V2Yh7CPN4aOjqZ_FxQA2_YBOiI3NV9xxq8-8N6XGXKndwt__GUFC4K6ruK-6jvwjVw72jshH3sLdXQsPdYXPFEfdwtlZCw9i4seKIbNjbKqGh7bCp4oh7EKF4YOgaQnE3QMPeTgkuJBvfTBnFPewvQNRK7jfaLt-AaDXVghxCjUIoYOorE0YAPIikae-hdU-WTDgHlyTtPaZjyZEJyYNIivYeXfdkyIRzQEnQ3qNpTX5ssVHwSU8QUZNbstPD2f0XzUN6_WDQek9ZsNWv0ndJYTSEC0fCjroPgyMOMfkkjoQTsR8GH4zx_CQWhB3tHwYzHHKBSRwJIVM4DCbo84hdwWeHF2uycAjBdowymQMvDi6-DIoXu0WWLrwIOqYMigPbRJMuyAcaIwSFuXN00AN8fbthfLaAFvw3FHMcHcZpY6Pee0qKbXAc0MRiDDeuhB0zHA5XHKKHyVwJJ444HF4YI4rJbAh7j-pwGOKwTzWZKyHEoYfDCH1EOpkEYb8ZP6CwdPzduStXKEsO72W6Qet95YkzhkOWmAzhwpGAgtGD4IM5EJ3CgiACi4PA3xBU7Ag-O7w1goVDCLbj6sAceBH0uhAUB7ZZEVyQD3wrM3A2uGxg7saLQGOEoNB3jg76gOfkHjoN_6fcVEX3FXgrVkPwOxobQQ88DgwMdpe4zw33wFf7wHB3Wd3dcA8ovg8MY3M874Zs4C8UA0Pb5bWhG-5BxOeBoWuIx8cAZeFNz2y_4WSj03Ivo8qJ3IQtaND5VKvmnuJrw2kAtaqtAewQvukTEqj67_q4ABl0QhwUxOPJsAPeYSfCIeHtkAQ74B1OhBUStsYoywHRsBPfkFB2SHod8A4h4Q0JVX2y6xgzh1vRGlo0PVKzasK7yAk-gBeMrZp7irYNpwHYqrYGsENIiEMCVZ8QuwAZdEIcFMTjCbED3mEnxCHh7ZAQO-AdTkIcErbGhNgB0bAT4pBQdkiIHfAOISEOCVV9QuwYM4ebEIcWTY8kxFa8WWjLLttnTNnIcsuDSn5HL0v0XcvDyyWJzPsdX6RmIFhpOBfXeM8riYV6T1x7Uvij9lAl2b6lajI-z13okgzPXbQO5lmwLrzy3EW1oj8DW_rLi7cumAvdmUEyM0s1UHwXSQ603kGsC5V3EGum7w7CXCi7g1gDTXdEeYyaW4iNcMkc5uCm2UBye8cie0DNqfKsBJ0o3E7TicJ1ZJ0o0k7ZicIHxPXABDN9dxfOzJZlemHMKMmBAFvIpOQxYfUnTexOpjYddtC5O9LP0OE8yrY7n7-ORnDw15GWOv7Ejziov46GzuqXURbHndJRTPLknrDrZU5XI-xSmw666dy09zKwlAfBSbakjsPnTY29iJvDXuy_at_pRWk67EW9ae_F7n--etE5ny_Zds_z1cuQTJ4E231uei8jmUjdyiScWQQPFqApwpyIuJNkC_l2kudEuJ0km0i2MzqjxNpG8ja_VtZ2ZHhq0K-pnfMw7AR6sWHo2PZindup-WLDGPD4JXpm2xORuQyAOfa-Nf-89u5IO699usC8a4fbfZC-HYLxucE4zC23GIwd9BcejI4DLzwE-wT0woMZ8POF-7evwM8zmC0-gqoMRf_UcCCGds7D0DL0pTof0uEFembbm565DIA59u5oca99jkyKz9y7C8w7dzjyhSilU6XlsDP1pr2TEfZ46mUEMU-9aLnoSfbIwuOplyG3JgtmNrMwk0wNN-1n7VvRbbuBcOWWTfwg7_cg0krz6fLtBJ8uX4fhdKl2Uk-XP6CzH26YY54d5dtPzbTi23YD8cotm_gBtT2ItFJ7unw7tafL11F7ulQ7tafLH1DbDzfM1J4in5mNzPTS6vkf_vsfCuyED5wkAQA="
    },
    {
      "_id": "5a7d625d50fc518d33db48cf39ce9b30",
      "_meta": {
        "ETag": "6ead06031da89d5b892628e839958f0fe64af93568c9065971d15d9c9fdc1a3f",
        "github_username": "kevinxin90",
        "timestamp": "2020-05-27T16:53:11.366566",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:47.529874",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/semmed/semmed_biological_process.yaml"
      },
      "_score": 0.92663187,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call. Type: string.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned disease object. If \"true\" or \"1\", all fields will be collapsed into a single level deep object (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Type: boolean. Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us with an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "facet_size": {
            "description": "the number of facet buckets to return in the response. Type: integer. Default: 10. Max: 1000.",
            "in": "query",
            "name": "facet_size",
            "schema": {
              "type": "integer"
            }
          },
          "facets": {
            "description": "a comma-separated list of fields to return facets on.  In addition to query hits, the fields notated in \"facets\" will be aggregated by value and bucklet counts will be displayed in the \"facets\" field of the response object. Type: string (list). Default: None. Max: 1000.",
            "in": "query",
            "name": "facets",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated list of fields (in dotfield notation) used to limit the fields returned from the matching disease hit(s). The supported field names can be found from any disease object or from the /metadata/fields endpoint. If \"fields=all\", all available fields will be returned. Type: string (list). Default: all. Max: 1000.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "format": {
            "description": "controls output format of server response, currently supports: \"json\", \"jsonld\", \"html\". Type: string. Default: json.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching disease hits to skip, starting from 0.  This can be useful for paging in combination with the \"size\" parameter. Type: integer. Default: None.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "prefix": {
            "description": "Pass a prefix string to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          "search": {
            "description": "Pass a search term to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          "size": {
            "description": "the maximum number of matching disease hits to return per batch. Type: integer. Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated list of fields to sort on. Prefix each with \"-\" for descending order, otherwise in ascending order. Default: sort by descending score.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "Disease": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Disease"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Disease"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "BiologicalProcess-affected_by-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-affected_by-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-affected_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-affected_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-affected_by-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-affected_by-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-affected_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-affected_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-affected_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-affected_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-affected_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-affected_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-affected_by-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-affected_by-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-affects-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-affects-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-affects-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-affects-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-affects-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-affects-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-affects-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-affects-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-affects-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-affects-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-affects-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-affects-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-affects-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-affects-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-affects-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-affects-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-caused_by-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "caused_by"
              },
              "path": "/query",
              "predicate": "caused_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-caused_by-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-caused_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "caused_by"
              },
              "path": "/query",
              "predicate": "caused_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-caused_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-caused_by-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "caused_by"
              },
              "path": "/query",
              "predicate": "caused_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-caused_by-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-caused_by-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "caused_by"
              },
              "path": "/query",
              "predicate": "caused_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-caused_by-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-caused_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "caused_by"
              },
              "path": "/query",
              "predicate": "caused_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-caused_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-caused_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "caused_by"
              },
              "path": "/query",
              "predicate": "caused_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-caused_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-caused_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "caused_by"
              },
              "path": "/query",
              "predicate": "caused_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-caused_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-caused_by-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "caused_by"
              },
              "path": "/query",
              "predicate": "caused_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-caused_by-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-causes-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "causes"
              },
              "path": "/query",
              "predicate": "causes",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-causes-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-causes-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "causes"
              },
              "path": "/query",
              "predicate": "causes",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-causes-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-disrupted_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-disrupted_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-disrupted_by-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-disrupted_by-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-disrupted_by-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-disrupted_by-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-disrupted_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-disrupted_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-disrupted_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-disrupted_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-disrupted_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-disrupted_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-disrupted_by-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-disrupted_by-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-disrupts-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-disrupts-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-disrupts-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-disrupts-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-disrupts-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-disrupts-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-disrupts-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-disrupts-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-disrupts-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-disrupts-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-disrupts-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-disrupts-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-negatively_regulated_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-negatively_regulated_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-negatively_regulated_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-negatively_regulated_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-negatively_regulated_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-negatively_regulated_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-negatively_regulated_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-negatively_regulated_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-negatively_regulated_by-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-negatively_regulated_by-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-negatively_regulates-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-negatively_regulates-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-negatively_regulates-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-negatively_regulates-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-negatively_regulates-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-negatively_regulates-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-negatively_regulates-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-negatively_regulates-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-physically_interacts_with-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-physically_interacts_with-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-physically_interacts_with-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-physically_interacts_with-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-physically_interacts_with-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-physically_interacts_with-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-physically_interacts_with-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-physically_interacts_with-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-positively_regulated_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-positively_regulated_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-positively_regulated_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-positively_regulated_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-positively_regulated_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-positively_regulated_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-positively_regulated_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-positively_regulated_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-positively_regulates-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-positively_regulates-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-positively_regulates-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-positively_regulates-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-positively_regulates-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-positively_regulates-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-prevents-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "prevents"
              },
              "path": "/query",
              "predicate": "prevents",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-prevents-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-related_to-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-related_to-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-related_to-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-related_to-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-related_to-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-related_to-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-related_to-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-related_to-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-related_to-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-related_to-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-related_to-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-related_to-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-related_to-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-related_to-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "BiologicalProcess-treats-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "treats"
              },
              "path": "/query",
              "predicate": "treats",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/BiologicalProcess-treats-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "BiologicalProcess-affected_by-AnatomicalEntity": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "BiologicalProcess-affected_by-BiologicalProcess": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "BiologicalProcess-affected_by-CellularComponent": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "BiologicalProcess-affected_by-ChemicalSubstance": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "BiologicalProcess-affected_by-Disease": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "BiologicalProcess-affected_by-Gene": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "BiologicalProcess-affected_by-PhenotypicFeature": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "BiologicalProcess-affects-AnatomicalEntity": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "BiologicalProcess-affects-BiologicalProcess": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "BiologicalProcess-affects-Cell": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "BiologicalProcess-affects-CellularComponent": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "BiologicalProcess-affects-ChemicalSubstance": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "BiologicalProcess-affects-Disease": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "BiologicalProcess-affects-Gene": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "BiologicalProcess-affects-PhenotypicFeature": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "BiologicalProcess-caused_by-AnatomicalEntity": {
            "pmid": "caused_by.pmid",
            "umls": "caused_by.umls"
          },
          "BiologicalProcess-caused_by-BiologicalProcess": {
            "pmid": "caused_by.pmid",
            "umls": "caused_by.umls"
          },
          "BiologicalProcess-caused_by-Cell": {
            "pmid": "caused_by.pmid",
            "umls": "caused_by.umls"
          },
          "BiologicalProcess-caused_by-CellularComponent": {
            "pmid": "caused_by.pmid",
            "umls": "caused_by.umls"
          },
          "BiologicalProcess-caused_by-ChemicalSubstance": {
            "pmid": "caused_by.pmid",
            "umls": "caused_by.umls"
          },
          "BiologicalProcess-caused_by-Disease": {
            "pmid": "caused_by.pmid",
            "umls": "caused_by.umls"
          },
          "BiologicalProcess-caused_by-Gene": {
            "pmid": "caused_by.pmid",
            "umls": "caused_by.umls"
          },
          "BiologicalProcess-caused_by-PhenotypicFeature": {
            "pmid": "caused_by.pmid",
            "umls": "caused_by.umls"
          },
          "BiologicalProcess-causes-BiologicalProcess": {
            "pmid": "causes.pmid",
            "umls": "causes.umls"
          },
          "BiologicalProcess-causes-Disease": {
            "pmid": "causes.pmid",
            "umls": "causes.umls"
          },
          "BiologicalProcess-disrupted_by-BiologicalProcess": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "BiologicalProcess-disrupted_by-Cell": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "BiologicalProcess-disrupted_by-CellularComponent": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "BiologicalProcess-disrupted_by-ChemicalSubstance": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "BiologicalProcess-disrupted_by-Disease": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "BiologicalProcess-disrupted_by-Gene": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "BiologicalProcess-disrupted_by-PhenotypicFeature": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "BiologicalProcess-disrupts-AnatomicalEntity": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "BiologicalProcess-disrupts-BiologicalProcess": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "BiologicalProcess-disrupts-Cell": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "BiologicalProcess-disrupts-CellularComponent": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "BiologicalProcess-disrupts-Disease": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "BiologicalProcess-disrupts-Gene": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "BiologicalProcess-negatively_regulated_by-BiologicalProcess": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "BiologicalProcess-negatively_regulated_by-ChemicalSubstance": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "BiologicalProcess-negatively_regulated_by-Disease": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "BiologicalProcess-negatively_regulated_by-Gene": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "BiologicalProcess-negatively_regulated_by-PhenotypicFeature": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "BiologicalProcess-negatively_regulates-BiologicalProcess": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "BiologicalProcess-negatively_regulates-ChemicalSubstance": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "BiologicalProcess-negatively_regulates-Disease": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "BiologicalProcess-negatively_regulates-Gene": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "BiologicalProcess-physically_interacts_with-BiologicalProcess": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "BiologicalProcess-physically_interacts_with-ChemicalSubstance": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "BiologicalProcess-physically_interacts_with-Disease": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "BiologicalProcess-physically_interacts_with-Gene": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "BiologicalProcess-positively_regulated_by-BiologicalProcess": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "BiologicalProcess-positively_regulated_by-ChemicalSubstance": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "BiologicalProcess-positively_regulated_by-Disease": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "BiologicalProcess-positively_regulated_by-Gene": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "BiologicalProcess-positively_regulates-BiologicalProcess": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "BiologicalProcess-positively_regulates-ChemicalSubstance": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "BiologicalProcess-positively_regulates-Gene": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "BiologicalProcess-prevents-Disease": {
            "pmid": "prevents.pmid",
            "umls": "prevents.umls"
          },
          "BiologicalProcess-related_to-AnatomicalEntity": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "BiologicalProcess-related_to-BiologicalProcess": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "BiologicalProcess-related_to-CellularComponent": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "BiologicalProcess-related_to-ChemicalSubstance": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "BiologicalProcess-related_to-Disease": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "BiologicalProcess-related_to-Gene": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "BiologicalProcess-related_to-PhenotypicFeature": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "BiologicalProcess-treats-Disease": {
            "pmid": "treats.pmid",
            "umls": "treats.umls"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothings.io",
          "name": "Chunlei Wu",
          "x-id": "https://github.com/newgene",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the SEMMED disease query web services.  Learn more about [mydisease.info](http://pending.biothings.io/semmed)",
        "termsOfService": "http://biothings.ncats.io",
        "title": "SEMMED Biological Process API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/geneset",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple disease IDs separated by comma. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted. Type: string (list). Max: 1000.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Disease"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "A list of matching disease objects"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "For a list of disease IDs, return the matching disease object",
              "tags": [
                "gene"
              ]
            }
          }
        },
        {
          "path": "/geneset/{genesetid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Retrieve disease objects based on ID",
                  "example": "C0004096",
                  "in": "path",
                  "name": "genesetid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Disease"
                      }
                    }
                  },
                  "description": "A matching disease object"
                },
                "404": {
                  "description": "A response indicating an unknown disease ID"
                }
              },
              "summary": "Retrieve disease objects based on ID",
              "tags": [
                "disease"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "mydisease.info metadata object"
                }
              },
              "summary": "Get metadata about the data available from mydisease.info",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/search",
                  "name": "search"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/prefix",
                  "name": "prefix"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "description": "mydisease.info metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from a mydisease.info chem object",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string.  The detailed query syntax can be found from our [docs](http://mydisease.info).  Examples: \"cancer\", \"primary ciliary dyskinesia\", \"DOID:9562\"",
                  "example": "cancer",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/facet_size",
                  "name": "facet_size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/facets",
                  "name": "facets"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make disease queries and return matching disease hits. Supports JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms separated by comma (also \"+\" or whitespace).  Does not support wildcard queries",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "a comma-separated list of fields as the search \"scopes\" (fields to search through for query term). The available \"fields\" that can be passed to the \"scopes\" parameter are listed in the **/metadata/fields** endpoint.string Default: \"scopes=_id\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make batch disease queries and return matching disease hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-affected_by-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-affected_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-affected_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-affected_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-affected_by-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-affected_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-affected_by-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-affects-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-affects-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-affects-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-affects-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-affects-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-affects-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-affects-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-affects-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-caused_by-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-caused_by-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-caused_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-caused_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-caused_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-caused_by-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-caused_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-caused_by-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-causes-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-causes-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-disrupted_by-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-disrupted_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-disrupted_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-disrupted_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-disrupted_by-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-disrupted_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-disrupted_by-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-disrupts-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-disrupts-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-disrupts-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-disrupts-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-disrupts-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-disrupts-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-negatively_regulated_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-negatively_regulated_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-negatively_regulated_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-negatively_regulated_by-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-negatively_regulated_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-negatively_regulates-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-negatively_regulates-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-negatively_regulates-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-negatively_regulates-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-physically_interacts_with-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-physically_interacts_with-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-physically_interacts_with-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-physically_interacts_with-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-positively_regulated_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-positively_regulated_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-positively_regulated_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-positively_regulated_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-positively_regulates-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-positively_regulates-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-positively_regulates-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-prevents-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-related_to-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-related_to-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-related_to-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-related_to-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-related_to-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-related_to-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-related_to-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/BiologicalProcess-treats-Disease"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "https://biothings.ncats.io/semmedbp"
        }
      ],
      "tags": [
        {
          "name": "chemical"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        },
        {
          "name": "semmed"
        }
      ],
      "~raw": "H4sIAPeazl4C_-VdW3PbNhb-KxjtPiRdW3Z2s52pZzqzbZx2stM0ad2dfYg9HoiEJNYUwQKgHa3H_30PAF5F8CaBTgXmJTIJnOt3gAPgQHqc0ZhEOA5mF2j2j_n5_Hx2gmZBtKTw4HHm0UhgT6jPZIODUDZbkzD-1yKgYh1EKz4PqOwS4Q2RL9-skygkAfpvIp9-Pg181UWImF-cna0CsU4Wc49uziLysCIR0a0YDVVvRnhMIx4sQoJ8ck9CkI7NnqCNT7jHglgENJINL6mXbAgIJx8gukRiTdDV2_fv314iP-AEc4L-SAjbogeyQJyw-8AjfI7QTwSzCG0oIwgvaCLQp8027TCXat-8kLKCqGAWH_SblxU942SzIf5LKbQgbMM_LK806UxJ6Fh0iDwsMvuIQGgVUyG_D2hIV4GHQ_SRUZCNo-8-vpMt7wnjqZavwB1SeSk_PIVHnx53LQG9_cRTZtDNJI2EhWWz10VKNVnEs6cbKR1epdQzP3prspHSSf7FUxxFVNu8-lyZuvpIMBzxEAvKqs9zWaqPtTxamhiLNVeYO5MQ4UQDMKY8_YAZ9BK5Rf7KyFLS-MsZAAvwA7jgZ0WjM5-KZUBCv4zT_JmSoouCasrL_dMnvXrryCl11g_6caZsg0WFs36iLMUIWJ6L76m_zeMVKKjPOI5D8KB01tnn04eHh1PZ8xSgQSKP-sRXrbh0NNZmZTLaREC07QNf_7-Dt00SiiCW8ZmG2btLDsiTIgvio8UWgSIbPEc_U0EgLLFAXsIYSBXKYEQ0gv8FviMqZIMohhgEViiJkaDo1fn5Odrgz8Em2ZyoFjAkCPQQhCFaQOdNIIDLHP22jckF4oIBktCLMODi5Ry9x58vFIW5ijhoopClGs2enlJ7BUyp_kkpePP0lL5QA0-q-t_Pz1vN-TtXtqhYLxBko3sbXapb8rNLbTUV1pmEmDEM0fNkGOe-Q1I3OcCBzz0ZN7nd6eJ34gkFwdnrPQRuFfMtY5T9Sjg4u0mwzGTgQ1_xAdlwhIKNxhF4WSNVoiIdH9RYlgA6mITr7AfKEM4VLOHpBIiLBMZpCYAGxWelYWumZpIbRT8bMs4e0w-B_6T0XRHz6LGj2K8E8AJTz66d0QL-8AG-IKDkTT7jTayH9DcAudfn33ytp075RI5g5ZjNRZlVQShYQqRNCq8YUPscAxyM9OECe3dlCvmzIx8iD43sfvFsDpIm8OqgfW0aYBsjK4nuIvoQlQKlFlF9wZsHTtouix2wKPaxwK0BMwRLOhx0-Buh1eyi3XmnkqahTNLcoDuW-JGIoo3O9ORgov-8B2xhmWMuGd2gKuWKeXJ77NgnQ_shZgKWzKuMEumTZwrYGN4Hn8v90yejBV1Pj2rb7uPYtOeOf_GOh5EMXdMssuttDdsBc8cvasWhh25Ya_wm5QKaQZhNgYhvYc3yGXkQzpDOLGkS-VpImjD0yacezxcgVaEhvUFv9ZTDL9A1-DryCLsG-a_Bb4G0DvKCMJD_-1t-F8CEE2D9_vLDu8uLb_759d-vZzszl6bSEqh__FknrMOmmyX2iLjlwf9IhULxtBcVTlklAtTfzxS9B02YUk9e07yn7Xat1t9eEugVrvLvP_8Ur6K6PRfWwZ3P2w-BWKtR6Xq2DgS_nqF0bbU94mz9vVyzlfdWYKEIJPwsV6-lOlL1ObpK4hjigqN_X334-aPq8ObDr1cIc1gNhuG8MgJrzjeS8xdc7R8UWweNSwfE1hfbJ_ijdZdAR4baLDPsEqAXOOQUwuRvECOwGnwAzABQYTSS890lBYRFVCCuMSS3AXwPMz-Dn2mZr2YnENC4eYE129NCkmz1maUOXMWtzsRALk0KhHuRNhA0eynWjCartYybkpYgt5z2ixTkOgUA0NCbIXrqjzGXGTmQ0-NEzij3KcKMKPGgWaCXwl99tZuBfvUVIpEf0yAS83Q35JIsMVj_Iif67W3gX8_MeyLWtj-6R9CPH65-axujfqmOodnKxd2xdCEHzMEjqmm8VHvoC0FO71b8VIqgdG8bL03Nz4o96XRL-hQvl-AE4t8utqffRVhQtSf8NhKB2LaMS3tQf5PuN18lCy5kVmqXfO2tXfKlXT17RD-uCQx-2zjwfiAYAGGZ_I9yz8yuD2E-T0LM3mRUbJHno4GPK6EtUhsLxnw8CHPb8OXjQZdbhS0fA7IeTvhYI2ZB2w5sS_TsA7cgPgJ0C-LWwFuQHAG-BXE7AK4iYQwIc8uWHWUEg8yIJbGwGRNVkvbDokJ_bJNYc2GF6gjxUaFvJ0Rq2LAcJSn9MZKTnLRVSI8Zgdw61LhdGIwy10dkBe_uSbi9ZWQFxMcbNppYjeDSJlbWPNzEYIRxpYmVHWwZqPNncj5_Js_zUd1uK8jj9ZbLv4F0EAloCMn9rdw6GsMbzcysmaqZxQheb2ZmyTmUB880SjaxGsNqDazsYaCBwWhO4c_kEf5M7rA2uDByL9vbcy0j2puCjpA8loiP4M8S9RG8WKI-hrFHSDBK1O2grew--xmrYKB4Cck3-oyjIFQ_c30sShMMR2pbmqgzLXmghbCqTNGNK2dZgqKNPPPA6TGwbFSt4p33KRfrLD0pTnoNosozIkZDdZqkT2iymwP6wIX4O3Vzc_RuCRrJohd9Pnk9eyVLakCc7MAwq0z2aBjimKuzOlAWIw4ihQSF8hYD8gmJU5ryyDNEEVHnesUhl6Zi6HaCEq7OgFLFUFaBr44ig1UULLdKh5QkGCPxJLRfpuZdUBoSHM2Lg8ElDjlps3f5CN1g75SiNnh2LaRmbTCdxIY8xdQDMgNNAFHS5rLaKbuUcSKrwuVRc8Lwiqg-oFnM6H3gE-iiTwABYYrTCeJUH6RCL32WKhTAIGu5U3ZIuCQDzlqCS-iDLCxXFIBwm875oX8HwEpFQgallSOSzQIkkofKsi1aJN4dEeroOD3YS49zs3PELBBk8rUirOSpV-e7Ve0N0lcLmgwqpLRLOux3QF4ooYkgCshC7yKEfT_IYKmPw-Vppa7hT_sq5OrT7OtUBgirHPurFZMLBF0ecI_DhKjDUGm-EMwIAIlKoQKRGod4WxyOl0jqQMlju3Ki3HB3IDf5zzAMDjE674OZolp0qL1fgHa10H8pI0kVD4TBJhBlG-cjmaoqNNbPg19e8LROIa2skO01B1CNG8oTcbTdGRtVhGU8dssSiqIEPYLqp9_CyJcNn6UazepAminQ5Sc1gfRzU16S0-UmXTHTPHMA2hMhL6wUs4e-c5WD7KR02SW1rSrXlGUIuhhTfgp9_XktNmCQnXmwUFE2bVUsr_npUkwW2nWOVsZyAzXL3AUwDUECyVSpg_L6uapvDXKsACCXSaiKYWK8ks0AuIDtRRDp2apUxyGHqXJ20Dz-qWBss0BaUdg14KWVzQYTfNRpi26QgQ10XgahmlYqtTwaSY3-6pK2qLju8FdaCN4sblaCRNhmLGGL8vQuYVumwvQmVx-QpbMK5K66MKZ1UmyTu-ccqIp1G8TungNlbzX1fdTAIRjcoSB-PTuVMxDEgSSsL5HCWOkTdoIoEGcPgaocQrj6tqSgIg5zYIkA9yhrd1dai9zmrKf8vZ6LskWAoajvNvAbHV65RCcb3pQqy0r3W8qVVAYWMNHITM3IRlVLeWpJ2Zh4Gjju1plV7-XBjPFh2VITZbiiV7eLcoT6mM8Ws2VI9TCciaThrkQq7hCYTLmrw43hWmCmV7MlVVmYnTuI8ARidrCWgtI7c6iplwKHzYFo8CO8__r1LWW3WirZFVTInFdoWQinepSFqwiwq2O_nsoZ2ls9ZDFA2MB3t5W-adJQvPc4G1iRp0WSV2qv9NhFmWR2oscNeJyWBOpL-f95_9OVGjIAFNDfk88MWzoyumGaXlPVSZVlq-EzYV7pQrt8ppOjTh71HS996buy5ZCnzLOSxsqq6m7lRX49x1DdvMg-yNLk2aPW_NP5zdOsXBw8SzYhzyozVab2vZx3iksuWU53u8FxLL110b73krU_TdvvUU8pUwRVUkpqmksbDS2hPA48GDYpJwkI42btQYioe-84ENHAY3KIMG6wH4SIIuU7BhwUu9RT9H45TTvE5_VDj-PwvuGwZpI4MB5aHYQIdVB1HCDQZ2qT9Ht2nHhYUlg7QjySpLB-9DnNpNB0BLwnIvikVozcERzw3itF3uV-VU18PPE_MTdntd77uXZSi3-HnN530d-JgGkt9t1BQO9FficC3F3cu-PtjkV9p4-ntZh3x--9F_GdCHBx8e6On9sW7b3y8-ks1t3K3Hst0hsR0PKlAU4u0XN9jx4D7V_3UAVBSesuGLi1VHfR3ebl-hAXT2TJ7qTzu5ftA5AwlaW7i0josXwfgAQXl_Auer1xGT_A11NZyrvo_x7L-QFIcGtJ76K_zcv6gfn8FJb2rmb6Hcv7fkjg7s7v3A1_846ZnXf4d1KZvDM-75vDN3q__jWEzmzdlFU7en8bvy6y6uiqvn3cPZFtHIeB0L2ZMxgVU5kI3EVFj0lhMCpcTP_cRUBjKjjY71PZ6nEXCz02fAajwq1tH3d9b978GZ4oTmQLyO0VQ8dG0ABUTOU6RqauK1jocyGj0LkDAk5uFjjk6tZNgm73TmwZ6JDj-y__ulHg8LLPIY93Lfe6_exkQu-Qh1sT-X5z9YQSeMdm8X6JeyMK-v_Ui5vb_w36Hz1GBv2ETxUyjSYZhqCp5IhTQ1CPDNISglzML6eGlsbs0xJGpnIEMTXc9DiYsIQgt1Y3U8OJee1zODT4lDNg7iJc-J65Lx-EmglnvY6iZr98dxhqJpLpOoqQITnuMFw4n5s4iojeWUkjHIb88qubeUmjBY4eMgN_1bcKohazDEWSi7POFFHTOP9YxMpU8top4qdHhmsRSW7lNFPEizm7GQ6R3r-f7miCY9b_-IHT2691DDWZZBiCJjNZTQxBfSYqOwhyMjWeGFqa02I7GHEskZkYOhqSmIOhwaecv3AX4cL3zFz4INRMOGdxFDX7ZSvDUOP8HOQoNnrPPs1wYOReCuJmqpoqd_zO3_VS3ee5qmY_M6KTEEEncq-yUPjovd_muxoQynp3QmEqOaabYOiRTw5Cw1RyRzfR0CNPHIQGFxMCNz3fmBQM8vdUSuDdxECPQvdBaHBrReimz82rv2EJ4EQu7TqaAHZf3O1Gg2AwYLi5_teqHb3HdzxU83Gm5o18Y6aqpGj_LW3DtsCj1rb6K9pz9UzKsNH-Kb9Tz566f3fdsO4cjZlpWTMasyKMRmNhStRGY5bmAeMhwTABjcCM94E3b-DB-9BPv6rKLs0eYXIQgz6hcRCD5nA4iGyfEDiIQQPsD0ZIF9T3YtD684gFh7xZjUfxpheXGtTtUW4FvDU27bC3xsYEfmvE20PAGptaIFhFUXM42GDDmz3AzWR5D5o9wLMPddOPJBRky29rxCsve7NoDTX7_NrNZp-fyfX2ubRHoX1-tXAcARitcWmTX0dSlrVqYsN7sWgKpQPJ9oLzgTxaIHwg5SYYWbB1J3T24zHkC8YKlg29ahI0tdtDoHZgfAGBTCj6AmK0j5RfQKBaDDyvDHw4dHkfUfhgOQYjdiQ5egJ1JO594HA462H3sQthGvvVJGpuuZdYJqd8MWHakfrFxKpBZ2xJBtx4Kwll7lUXqaHdHgJ1-Ov5BTKi-fnFqAPmWWXgw5HC-4jCB8sxGCAjydHHIRZY12ttSxzTl3Uu2YsWyu3VnQWTol2NTelVP0btGLLJqR0lNjmZHGOTfnsSbJNTDdFWXd-6zjuYU-1EuqCtX9Xopo81Tfj3f82JKlu55QAA"
    },
    {
      "_id": "26ce0569ba5b82902148069b4c3e51b4",
      "_meta": {
        "ETag": "5e82ee533ea2a7bda1be332c771c57bfaf38fdcb",
        "github_username": "JDRomano2",
        "timestamp": "2019-05-16T17:14:28.440703",
        "uptime_status": "unknown",
        "uptime_ts": "2020-09-17T00:08:53.443049",
        "url": "https://raw.githubusercontent.com/JDRomano2/ncats-apis/master/date/openapi_date.yml"
      },
      "_score": 0.91554856,
      "info": {
        "contact": {
          "email": "jdr2160@cumc.columbia.edu",
          "name": "Joseph D. Romano",
          "x-id": "https://github.com/JDRomano2",
          "x-role": "responsible developer"
        },
        "description": "Web API to query DATE data stored in MySQL. Primary features are MySQL-like syntax for filtering database table rows and the ability to perform JOINs remotely.",
        "termsOfService": "https://github.com/JDRomano2/ncats-apis/blob/master/date/terms.md",
        "title": "DATE API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/api/{tablename}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "One of the table names documented at http://date.nsides.io, or liste in the response to '/api/tables'.",
                  "in": "path",
                  "name": "tablename",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "One or more table columns to include in the query's response. If omitted, all table columns will be returned in the response.",
                  "in": "query",
                  "name": "_fields",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "One or more tuples delimited by logical operators, where each tuple is a comparison applied to a specific table column. Follows syntax specifications described at https://github.com/o1lab/xmysql#row-filtering--where",
                  "in": "query",
                  "name": "_where",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "JSON-formatted list where each element is a JSON object where keys are table columns and values are the corresponding cell values. Users can pass parameters with a MySQL-like syntax to perform filtering within the table."
                }
              },
              "summary": "Prints contents of {tablename} by row"
            }
          }
        },
        {
          "path": "/api/{tablename}/{id}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "in": "path",
                  "name": "tablename",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "in": "path",
                  "name": "id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "If {id} is a valid primary key, the response is a JSON array of length 1, consisting of a JSON object representation of the row with the matching primary key."
                }
              },
              "summary": "Fetches a single row from {tablename} by primary key {id}"
            }
          }
        },
        {
          "path": "/api/tables",
          "pathitem": {
            "get": {
              "responses": {
                "200": {
                  "description": "JSON-formatted list of table names"
                }
              },
              "summary": "Lists all available tables (i.e., valid values for {tablename})"
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "http://date.nsides.io"
        }
      ],
      "tags": [
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIAHWa3VwC_61WTW_jNhD9KwP1kBawJScFethTF0gXSLDdpE2LHopFQVEje3ZJUSEpJ4Lh_94ZUv6Is0E32PpgR9TwcWbem8dsCtdjp3oq3kDxY7koF8UMCupaxwubYo0-kOvk5Xl-FSkalOfLt3_8Am9vr2SxwaA99XEK_QtreQPRwf2AfoQU26ioIETnsQHq4Nfx7rf3Jdx6sopDWlRx8BhAeczv5oY-I4Sxi-oRWuehJRPRU7dMULUKCPxjELx74H1dA3GFoGoyFEc5vEfP-yxc31x9CODRuohmLCVj7RhWx1Rkp2yq6NoF7FdwWcLvzqrOSdzj3LtcL-fWuy6QHNjgGg03zksIWkVGIj41_uL8p8XPerC61M4MtiZVYjNkIGokaBVjH95U1ZLiaqg5zFbXl_m8i2IrDUZvw017h35NGv9rS9VpFcOcCQxVbVxdWRUYoeIOYZWgStsk3MCAzCYD_r0pBm92yAwswSWXxjSW5L5A6K13zaDlCTJMsf0oqarlhLdrYfSqC0YxyTmiV3EVUpMrTrHaJL4keJsWl5gZCIMVEeSjqIsBhB-UP1wLR7ugHoVtSXHiAzP8xWKRfk8Sv767-TAXDagYWXaGQoSHFbLEUOkVoEHLpwCxfEBiwdWfUO9iPuOY9ZhllijtstLWygyTWEV02vmcTyPy1GjMFFHCn9wxrkd10KsQ-MtzIVHWHphPPve52I-ke9C8RPPYyGkpnbLYblOHd3gnTOx6ludZloSM3Ln7gXgKeS36AZ_TfdOh9H1_FAhOgMaxsrld3EgV4YvamQHPqXQZYcp1R5MUdZZEkCDDWRrDoFc8Pom5OPYp8RCl3FTcoZp_WkLThEMtyVeKF1L3YN0z1vh86rQZmn1qCeMs7FMs4aoFZ0mkMgPFHD5FeCBeqqUkdqouu9hxieVJc1tlAr6myKS6V9Y49EaoQUOcOOfEA2LckrQyIAYloxhmx5pPO7Li2UlYPhR4rFXfG-Lt3CU26R41taSf1F_CO2eMOO2k0l2UkrwkBUmyPojjxLLcuVF19WjHcG--4xme76U9n-8Lf2X3PqYROLWWakPNi_7yDiMDSvWBMfLlAa139tRm-uliYhOABPi1nsMikvjcYnYBao6xZk-n4uA8yns1ythxDks2hvOZmGDgWZLp5_WnDuWxZxCextT-3bhKMclW5IFNT69k89Hx_6drfK2u-eL7RrQjnrN7vMTue25XSKOr1nwrJ_nmHfA9lVjOJkIm-5b_Ko5o_-Gb7hWh4OCWnLV8_gWiGSQYYAkAAA=="
    },
    {
      "_id": "5219cefb9d2b8d5df08c3a956fdd20f3",
      "_meta": {
        "ETag": "50a39fd8cb3d50b14e4bee341bb5fae58ebf4a603cccd0df00170bb68f96cde1",
        "github_username": "kevinxin90",
        "timestamp": "2020-09-11T00:01:16.822173",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:48.313024",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/tcga_mut_freq/smartapi.yaml"
      },
      "_score": 0.89674616,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call. Type: string.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned chem object. If \"true\" or \"1\", all fields will be collapsed into a single level deep object (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Type: boolean. Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us with an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "facet_size": {
            "description": "the number of facet buckets to return in the response. Type: integer. Default: 10. Max: 1000.",
            "in": "query",
            "name": "facet_size",
            "schema": {
              "type": "integer"
            }
          },
          "facets": {
            "description": "a comma-separated list of fields to return facets on.  In addition to query hits, the fields notated in \"facets\" will be aggregated by value and bucklet counts will be displayed in the \"facets\" field of the response object. Type: string (list). Default: None. Max: 1000.",
            "in": "query",
            "name": "facets",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated list of fields (in dotfield notation) used to limit the fields returned from the matching chem hit(s). The supported field names can be found from any chem object or from the /metadata/fields endpoint. If \"fields=all\", all available fields will be returned. Type: string (list). Default: all. Max: 1000.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "format": {
            "description": "controls output format of server response, currently supports: \"json\", \"jsonld\", \"html\". Type: string. Default: json.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching chem hits to skip, starting from 0.  This can be useful for paging in combination with the \"size\" parameter. Type: integer. Default: None.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "prefix": {
            "description": "Pass a prefix string to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          "search": {
            "description": "Pass a search term to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          "size": {
            "description": "the maximum number of matching chem hits to return per batch. Type: integer. Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated list of fields to sort on. Prefix each with \"-\" for descending order, otherwise in ascending order. Default: sort by descending score.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "Association": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Association"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Association"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "disease-gene": [
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "SYMBOL",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "association.freq_by_sample,subject.SYMBOL",
                "q": "object.id:\"{inputs[0]}\"%20AND%20association.freq_by_sample:>0.1",
                "size": "1000",
                "sort": "-association.freq_by_sample"
              },
              "predicate": "gene_has_variant_that_contributes_to_disease_association",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease-gene"
              },
              "source": "Multiomics Provider",
              "supportBatch": false
            }
          ],
          "gene-disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "SYMBOL",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "association.freq_by_sample,object.MONDO",
                "q": "subject.SYMBOL:'{inputs[0]}'%20AND%20association.freq_by_sample:>0.1",
                "size": "1000",
                "sort": "-association.freq_by_sample"
              },
              "predicate": "gene_has_variant_that_contributes_to_disease_association",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene-disease"
              },
              "source": "Multiomics",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "disease-gene": {
            "SYMBOL": "hits.subject.SYMBOL",
            "frequency": "hits.association.freq_by_sample"
          },
          "gene-disease": {
            "MONDO": "hits.object.MONDO",
            "frequency": "hits.association.freq_by_sample"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothings.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the TCGA Mutation Frequency KP query web services.",
        "termsOfService": "https://biothings.io/about",
        "title": "TCGA Mutation Frequency KP API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/association",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple association IDs separated by comma. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted. Type: string (list). Max: 1000.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Association"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "A list of matching association objects"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "For a list of association IDs, return the matching disease object",
              "tags": [
                "association"
              ]
            }
          }
        },
        {
          "path": "/association/{associationid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Retrieve association objects based on Association ID  Supports JSONP and CORS as well.",
                  "example": "NRAS-TCGA-LUAD",
                  "in": "path",
                  "name": "associationid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Association"
                      }
                    }
                  },
                  "description": "A matching association object"
                },
                "404": {
                  "description": "A response indicating an unknown association ID"
                }
              },
              "summary": "Retrieve association objects based on ID",
              "tags": [
                "association"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "KP metadata object"
                }
              },
              "summary": "Get metadata about the data available from the API",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/search",
                  "name": "search"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/prefix",
                  "name": "prefix"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "description": "metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string.",
                  "example": "object.MONDO:\"MONDO:0005061\"",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/facet_size",
                  "name": "facet_size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/facets",
                  "name": "facets"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make queries and return matching association hits. Supports JSONP and CORS as well.",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease-gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene-disease"
                }
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms separated by comma (also \"+\" or whitespace).  Does not support wildcard queries",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "a comma-separated list of fields as the search \"scopes\" (fields to search through for query term). The available \"fields\" that can be passed to the \"scopes\" parameter are listed in the **/metadata/fields** endpoint.string Default: \"scopes=_id\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make batch disease queries and return matching disease hits",
              "tags": [
                "query"
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://biothings.ncats.io/tcga_mut_freq_kp"
        },
        {
          "description": "Production server",
          "url": "http://biothings.ncats.io/tcga_mut_freq_kp"
        }
      ],
      "tags": [
        {
          "name": "gene"
        },
        {
          "name": "disease"
        },
        {
          "name": "association"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        },
        {
          "name": "biothings_graph"
        }
      ],
      "~raw": "H4sIAE2-Wl8C_-Vae3PcthH_Khi2ncjuvZS6malm0qkcOR6l0SOWO23Hp7nBkbg7RCRBA6Ckq0bfvbsL8Hk83slKnKT1HxYPBBb7-O0DCz4EKhMpz2RwxII_jSajSTBggUwXCgYeglClloeWnkXCZYzTViLO_jaXyq5kujQjqXBJyhOBL787_eebc_av03McvB_KiFZYm5mj8Xgp7Sqfj0KVjG_ErUzvZfqXiZuoVUzrtTCZSo2cx4JF4lbEwJ8OHmFOJEyoZWalSnHiiQrzRAB7OMDUgtmVYO-_eXvMznI_-K0WH3ORhmv290sGT3rN7sScGaFvZSjMCHe2QifmYnHlxurM1iUc87nKLc2X1jHas9Xx5SlOvRXaeGYPQa8oA24NozD04aEt0Js01OvMiohdahXlIdF1C5BaruNu7tKQW-LRhks-S3I7WwAzs5sMd9zYZRftfUlfoy740otSWH8pUuG2LUYiaQQ3rUFujAolaa71Ik2V7Rgn4zWHrOapiblVujlecr9leLbUPFs5ATJuV4bAPa6zhAOZMg72GddAwpZW-70WCyT4uzHAGKAKEDTjatI4UnYhRRzVnaIcI5Z2UaCppr7ej-y12rlpbbEb2G9npRNuGzu7EdIWQdzY1ypal8EBKNAzz7JYhqS-8f3w7u5uiCuHACxwChWJiGaZcAXcOLVqdGwrhdO_jNzfFlqTPLYyg1BQMw87PTGAXWQbnWW-ZiBMwkfsXFkBUYBbFuZaA2cx-jtTKfy1_EZQhJBpllsG27E8Y1axw8lkwhJ-L5M8GdAMiECW3ck4ZnNYnEgLu4zY-3UmjpixGjDEDmJp7IsRO-P3R0TBhRKYgky7ScHjo9eZ1CT-BxLy-vHRv6A458X_cjLpVemPxsOypkFpReJWd5rVzTTj46avlVxyrTm41GNHaD1mKB_GVLB9iF7T0L-a_yhCS3AMXn0C473svtFa6XfCgOG3MVeoDmwZ0T7IX8pk4jAF1naoRXT4wEGxNweUaIRu8K3SjJdCtrA1gA1srlMCQ6kAH8e88EEt-jWi2TVtVY8m44faDxk9kgqWoju4tGR9JwBKkAS71M_mwE4E6GbHDf4Zu8qzTGmY8d3VxfklqCZi31y8uwIi4A5xTFgV9zzJXCI7f3d8NcRsNvz-H8cnLv3jOAbHeihoiBE0sW11LlDFlZE7nOFzxM6Qx_Gchzd1CuXYbzz6Pjdg7B8muv2uJxj4WPCqK4Zvddg8vUnVXdryvw1n3c8JTk92-SRomUfc8l4HfAq-nJu4CNMJt-1ma6kIasaCu1KhLS28FbaaQ9UoxSf38xYwxrFiXmiV0LgvQUt9lMK3lFHA_Tk6gcCow0ao8COfyWMzeC_v6-v9yM_mde0qpbCLU-anmNCvLC3ZazwHuSfkkR_o7ONCcTv8O2ZHZxfnJxdH08D9hZLmz5OvDqdBD84__lpzwPMi-IKHws6M_I9oUKhG96JiIAE3PAJ_fyZ_eFYOQjnNhuR76q6ttf31hYGrsSv-_vVnTXKs_mrV9R3KFHgn7YrcfhqspDXTgPmT0Po3XE-f4ekKX8FxjupNX0F3Vgwo9mivIrUMgG7Xa2oUza0Y3izNEFkjgn1Zqmv62Jfyw6pZsf9aXDMsexrXqIdfsFPwLE9_VpR8hqf_Yj2Gj70dBuen1A7s6C6wAx4bBU77R_BYOD3eAYrBbSA2vhgxdqIA96myzDhUY_sgCrmOCqfoag9QrgQGOxsf3G07rDgpTqtFpWAoirhKC_hypIC5Az_BquKlXWmVL1foxTUpge_3QKCqHaceAEDDNVEgBswFy8B3YXsg56JWuVFpU8a1IPZgmnTH5pcv2xXmy5dMpFGmZGpHvotyIhYctH9UEv16JqNp0N1L-cnaJrvj-eXF1fu-iPlDM6IXR5H_3cg-xzBedkD64nwxBxXQFcEdn5Uwm3HzoSp2OtxirXLCJYKScdB0MbmBR8Bqgnxzn1xwUrODN9rn_LazmK2idQeraGetYkKE03JxSeGUBipH4h4-I3a6AHGwhnYBZhpA9T1gwEvh8UVLMlRxzDNDzgaScmaAH_DfGG9LWCRE5mlizIpZKsgxK5Q6Kh3LBiw3ZEQvFSt68RRL5DKVizUJ4EmCJvIQRBEvvG7nSsWCp6PKsxcQNUWfsus5sEPZnqLTdnEBtaFqUB0CA8OQFss85hokATihwlWuywufAbaDMVfkmi8FrQHJwBduZSRgiXNhgBftNGBGuUgIq1wwtIQuDeAgPeQGyYCxFmASdYcdZaIAhPtkLrP2DnTVzhwdQpMh8mQOHGFWwLlsnoc3UKyjVN4zfTwuAkHhBYAcsRS6ZqnDSbudvYX75vmoQwRPuybDp2W4SghHhClAFjtNGY8iWcDS5TMMN65579cScl06mnoewK1K7C-XgJMiv9_yOBcUzVB9MagRAJLWXAWCWhbzdZXdaiSdo5SO3UgJWy4NSpWfQwx8itLNPpip2jlP1fcBSLfh-i_Qkyj7xzKRtq7jMoyVTacyDVBgA6McGF9l-LoIJzvyIJcpKowFqNtT4em6HhXJtwrq7Yqiqidc7HSjX0PMKwJnrS_WDKEF67ssRHljPwOV1fQuA7lid3vCAJznFu-oqqThLmpLeA1q91tesQaLKKwgUHT3FEfueWUTUEgr_VUi4tRewcpyfZdgeGLfGac2IOIK1RsJ2cdYrqlEIZNDPALoyBIlgMNFHlMRm_ElTgO8AqTnMnVJqlZ_YXSqVwTbwx75YJ_4vi-xK875jmOH_JeuVHETCqSBzAsZUzZp1OAORluNtYvbqhO6w1i-Qbud3eLoAAeFn4vZqm28i9meDOhvbncizGcSKHpdNdubCPuY3jPvUb9vC8-78x6upnR36VAjONiC8D0Nhph1wAmQMERAlFTpSOgBU0Bc30kq9-F82HhbE5CIQ96rEYDjl-63lW9n9lnqsXzv8s9x-4uK5ml8JqOtFm_cmuPE69qRsHbjVD8CdWwBOQYrtM5t6JgTQlFothecHTu2D4jNi3jIFxeLnubPljv5Td2QQeixzBfBIlYuEBdsOcwTW9WNQJc623Jcd3wHUMi2XZt0pvvpPjyAEXDeJ0tqlbrpdjt6aXm83Sk77Anvv3o1U3rmuMKlIEZhxErSijlaUWeuwUBbxv1WkkGcxfbgpQPKHfu2Z7m7oy3904eg0RR1G-KXMr6V6T7jo7shCgNg4NTKkL7DK5uh8MKVLo1FV_8-e33xfXvVW-q9um-wGqf_soCtX-GO6LOz-Xpm6NpqYHJXYFe0P9ausmR0NA0eHPsfJteP0-APX06Oz0_g_-00j_46GR0GVeQOhtvnBlVSCrAwDHwFQD2W8ju42Yqb2S3XEoSe4TlyRhWenOdWmJlVM6_yWf2uutbimiU8y9B0R_0d6mL-0M_f6G-DSLl23zaeYbdTJTI0-JEhHnvp-z9fRb7GzBj4UzsZp9HurlBx5XKX0khz4PLGU-3eAZXd-PoUsNQvOEuoNBF09EUNLl_8f6GleaOxBS0dIMFWlQtc3YS7ospDgQr82BSvgTYdeVF8SFvO6dHs4yZEHzyKitVt6z-NPvz7L9xbk74iLQAA"
    },
    {
      "_id": "eb28713e2e23160e80e88f3a5dabcca4",
      "_meta": {
        "ETag": "58ddb1cdc1f0824e725a2d02bf1fdc499492e158e0c6a7051b7bfa1db83f9e87",
        "github_username": "kevinxin90",
        "timestamp": "2020-03-12T16:20:11.288144",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:52.510608",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/RGD/smartapi.yaml"
      },
      "_score": 0.81124556,
      "components": {
        "x-bte-kgs-operations": {
          "hasHomolog": {
            "inputs": [
              {
                "id": "rgd",
                "semantic": "Gene"
              }
            ],
            "outputs": [
              {
                "id": "symbol",
                "semantic": "Gene"
              }
            ],
            "parameters": {
              "geneid": "{input1}"
            },
            "response-mapping": {
              "$ref": "#/components/x-bte-response-mapping/gene-homolog"
            },
            "supportBatch": false
          }
        },
        "x-bte-response-mapping": {
          "gene-homolog": {
            "@context": "http://schema.org",
            "@type": "Gene",
            "bts:hasHomolog": {
              "$input": "bts:rgd",
              "$source": "RGD",
              "@type": "Gene",
              "bts:symbol": "ensemblGeneSymbol"
            },
            "bts:rgd": "rgd"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@rgd.org",
          "name": "rgd help desk",
          "x-role": "responsible developer"
        },
        "description": "The RGD API",
        "termsOfService": "http://www.rgd.org",
        "title": "RGD API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/genes/{geneid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "RGD id",
                  "example": "620465",
                  "in": "path",
                  "name": "geneid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A RGD object",
                  "x-bte-response-mapping": {
                    "$ref": "#/components/x-bte-response-mapping/gene-homolog"
                  }
                }
              },
              "summary": "retrieve rgd data",
              "x-bte-kgs-operations": {
                "associatedWith": {
                  "$ref": "#/components/x-bte-kgs-operations/hasHomolog"
                }
              }
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "https://rest.rgd.mcw.edu/rgdws"
        }
      ],
      "tags": [
        {
          "name": "translator"
        },
        {
          "name": "gene"
        }
      ],
      "~raw": "H4sIADthal4C_61UyW7bMBD9FUHN0bactM3BJ6cokPbUoCnQQ5EDRY0lNuJScuQFgv-9M6Rly4aDXnqiONub92bEPrcOjHAqX2T5-9l8Ns8nWa7MypKhz9fgg7KGnbfJhQpb4Pv3x8_Zw9NXtlUQpFcOD5E_GshGXgSvw7fVM_i1kjG1QXSLothsNjNfVzPra46T1qCQGHGN0DGS3FkDrcsI4pWDtlNvE76H4KwJqmyBvGtoiYjnENBCtRGGEpcDwH5PrkA9ECNy_urzzrdDM4G6oXoY29FyM4OqK-h7E67Qe_K26iTfslQv378wTVEfCg_NoxcmtAItRUxGpGowkHKcwCZEwgUbQ9Hzoap9tNWQxAid1sLvEmn0ishmLEwlUOSxiqfKeCQ2xlFVmiffGe0KHx5VCvPwp1MeKrKi74C13Artkt73d_MP9x85LMiGNI6t4c5FZ6C2DIv8MjlOBhKzu_k8nheoD3FFbPkbaORxsCXCdEidauEcV-TMGw8rTnlXSKvJDQZDcT0-yjhtrLat5Xb2x8qvdZjyhghuIHUmQrBSCYTqpyJl_gF1XqBoRPhygolAp5RY603cUSpflXEdHkanqsPWR51JZYNKsunxuDO2w8v4sNOlbd9OOVuQftgLCukj9u0-jz9H55z1-EmgZDFWog0wmub_H8nVymfRbFjyuwBbHD0caQGHd2M5LGEkTIYSw4IlPCnJlgvVr2YdhCQrUF-6bNn5fFT3JsrF7gGCjcF2Xg5PYlqGv_e8-RFWBQAA"
    },
    {
      "_id": "1c056ffc7ed0dd1229e71c4752239465",
      "_meta": {
        "ETag": "64d5b9bd9459bc95de8a3a05ddc2a7972a355c55563fc457482a05d38924be84",
        "github_username": "kevinxin90",
        "timestamp": "2020-05-27T16:55:36.889299",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:57.097800",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/ols/smartapi.yaml"
      },
      "_score": 0.81124556,
      "components": {
        "x-bte-kgs-operations": {
          "disease_has_subclass_disease": [
            {
              "inputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "id": "{inputs[0]}"
              },
              "predicate": "has_subclass",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease_has_subclass_disease"
              },
              "source": "disease ontology",
              "supportBatch": false
            }
          ]
        },
        "x-bte-response-mapping": {
          "disease_has_subclass_disease": {
            "DOID": "_embedded.terms.obo_id",
            "description": "_embedded.terms.description",
            "name": "_embedded.terms.label"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@pharmgkb.org",
          "name": "pharmgkb help desk",
          "x-role": "responsible developer"
        },
        "description": "The OLS REST API provides access to key biological data from OLS. The services provide a unified interface to query information about ontology terms from GO (the Gene Ontology) and ECO (the Evidence & Conclusion Ontology), Gene Ontology annotations from the EBI's GOA database, and gene products (proteins from UniProt, RNA from RNAcentral and complexes from ComplexPortal). ",
        "termsOfService": "https://www.ebi.ac.uk/OLS/services",
        "title": "Ontology Lookup Service API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/ontologies/doid/children",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put Disease Ontology ID here, e.g. DOID:0050686",
                  "example": "DOID:0050686",
                  "in": "query",
                  "name": "id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A DISEASE ontolgoy annotation object",
                  "x-bte-response-mapping": {
                    "$ref": "#/components/x-bte-response-mapping/hasChildren"
                  }
                }
              },
              "summary": "retrieve the children of specified ontology terms",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease_has_subclass_disease"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "https://www.ebi.ac.uk/ols/api"
        }
      ],
      "tags": [
        {
          "name": "ontology"
        },
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIAImbzl4C_51U247bNhD9lYFatAngldwWDYp9qrM2AgNBvYjTp2BhUNRYZk2RDEntrmH43ztDSt5LN1u0T5bJM2cu5wyPhXVohFPFJRS_lNNyWkygUGZr6eBY3KIPyhq-_ClfRRU18v-ViVbb9gAfrd33Dtbob5VEmF0vGddgkF65OER_3iGsPq7h02L9mSHgvL1VBAIhJYYA0cIeD1ArJlVSaGhEFLD1tuPAEpgh5BxhjAYBvVFbhQ0oE9FvBRVATF979AfgLnwnuAQQte0j2LFmwnYhk39YwZtI3B_QUIkD4C0I08DiarhbcDJD3D_AlTVS9zyUB_DkaTDFGhtT3iFH4ni__DFQtllqrBYBJylJy6HUT9PLGOANfUVUY-CfRl3TwQQ-_THLJ_Qh0URPA-JoaTun8R4H_FX-e219FPptCUkx7nW1HfRhMXYxunBZVXd3dyXWqhSy7PcVTbkaB8xxkqYlZEw-MKJLkW4nfNfua9ihdkDy7Rl5f-FtNoXH4KhrVWuk21vU5C7PEOyE0ik3Bf4-0pTWt8XpRPecmLxGiC_Hovf622VaHSr26z89dp2HyNJkuuJ0w_2LduAduxhtUFDmh1OaqQlaRDvEORF3IXVfDQEKQ9VY1VRyp3Tj0aTbFvOMQt91wh_yGKJX1H4SfgSD3UJwKLNfn1qxSPk8VRLPUxjrUk1eSf5Oxn6pdTL3XAUkVz3YcDknmTzZDMu2hPlqOb-cTn-dvvvtHTN4_Norjw2FR98ja3Qv2D3M9xwc5I4UTG3Gg0uQQC0aVu9mctYd87x-nk7T77MiZzBfrhez9SI339rHmwK2_gvJbclOdcSLkfKiE85xJmb83uOWqb6r2PjW0CaE6mV8tRPhatTplEyWgfs2XLAt84LmWb_C-xReNXnKG2LfhL6WWoSwGQ7JNznRA0mq-ht5aUCvkaXClHF9HIpUzShNkoQEMVHJdHbOzz4iUekBjXnVHzGnKNv7_AgMac5G5Ft6I_97use2HaOOue4v05tTkda7d47epPciyh3db4Xm5-9sm83_1fh1NUiO1-30L_M_5u6plg12NTYNNmVa19LWdpP3ctzS5wgtatQvbOpz3ONrMs_pb7vATsqRBwAA"
    },
    {
      "_id": "b2dd6372009df54206670648e16eaa90",
      "_meta": {
        "github_username": "ntatonetti",
        "timestamp": "2018-03-01T22:12:06.659852",
        "uptime_status": "unknown",
        "uptime_ts": "2020-09-17T00:07:58.125430",
        "url": "https://raw.githubusercontent.com/tatonetti-lab/nsides/master/nsides/nsides_oas3.yaml"
      },
      "_score": 0.8,
      "components": {
        "callbacks": {},
        "examples": {},
        "headers": {},
        "links": {},
        "parameters": {},
        "requestBodies": {},
        "responses": {},
        "schemas": {},
        "securitySchemes": {}
      },
      "externalDocs": {
        "description": "",
        "url": "http://nsides.io"
      },
      "info": {
        "contact": {
          "email": "nick.tatonetti@columbia.edu"
        },
        "description": "The NSIDES API makes several data resources available that are useful for studying adverse drug reactions and drug-drug interactions. Unless otherwise noted, drugs are coded in RxNorm identifiers and outcomes are coded as SNOMED identifiers.\n\nThe following resources are available through this API: \n\n1. AEOLUS, a cleaned up version of the FDA Adverse Event Reporting System\n1. nSides,,confounding-corrected disproportionality statistics using multiple machine learning models\n1. SIDER, side effect data from the drug product labels\n1. GOTE, a resource of GPCRs and their targeted downstream pathways\n1. VA, a list of known and critical drug-drug interactions\n1. OMOP, access to the common vocabulary for name and concept identifier mapping\n1. SNOMED, vocabulary for mapping names and concept identifiers\n1. LAB, a knowledge resource that maps adverse events to common clinical pathology reports\n",
        "license": {
          "name": "Apache 2.0",
          "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "termsOfService": "http://nsides.io/terms/",
        "title": "NSIDES",
        "version": "1.0.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/snomed/getOutcomeFromSnomedId",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getOutcomeFromSnomedId",
              "parameters": [
                {
                  "description": "Snomed outcome concept id.",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "default": {
                  "description": "Default response"
                }
              },
              "summary": ""
            }
          }
        },
        {
          "path": "/druginfo/jobIndexes",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "jobIndexes",
              "parameters": [
                {
                  "in": "query",
                  "name": "drugs",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "default": {
                  "description": "Default response"
                }
              },
              "summary": ""
            }
          }
        },
        {
          "path": "/aeolus/ingredientList",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "ingredientList",
              "parameters": [],
              "responses": {
                "default": {
                  "description": "Default response"
                }
              },
              "summary": ""
            }
          }
        },
        {
          "path": "/aeolus/drugReactionCounts",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "drugReactionCounts",
              "parameters": [
                {
                  "description": "The starting position (for pagination) of results to pull",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "default": {
                  "description": "Default response"
                }
              },
              "summary": ""
            }
          }
        },
        {
          "path": "/nsides/topOutcomesForDrug",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "topOutcomesForDrug",
              "parameters": [
                {
                  "description": "One or more drugs to pull the top estimates for. For example use 1309944 for amiodarone.",
                  "in": "query",
                  "name": "drugs",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Number of top outcomes to pull (e.g. 10)",
                  "in": "query",
                  "name": "numResults",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The model type used to estimate the statistics. Can be dnn (default), lrc, or nopsm.",
                  "in": "query",
                  "name": "model",
                  "required": false,
                  "schema": {
                    "default": "dnn",
                    "enum": [
                      "dnn",
                      "lrc",
                      "nopsm"
                    ],
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "default": {
                  "description": "Default response"
                }
              },
              "summary": ""
            }
          }
        },
        {
          "path": "/aeolus/reactionListMedDRA",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "reactionListMedDRA",
              "parameters": [],
              "responses": {
                "default": {
                  "description": "Default response"
                }
              },
              "summary": ""
            }
          }
        },
        {
          "path": "/nsides/estimateForDrug_Outcome",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "estimateForDrug_Outcome",
              "parameters": [
                {
                  "description": "One or more drugs to pull the top estimates for. For example use 1309944 for amiodarone.",
                  "in": "query",
                  "name": "drugs",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The outcome identifier (snomed) to get the disproportionality estimate for. For example use 313217 for atrial fibrilation.",
                  "in": "query",
                  "name": "outcome",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The model type used to estimate the statistics. Can be dnn (default), lrc, or nopsm.",
                  "in": "query",
                  "name": "model",
                  "required": false,
                  "schema": {
                    "default": "dnn",
                    "enum": [
                      "dnn",
                      "lrc",
                      "nopsm"
                    ],
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "default": {
                  "description": "Default response"
                }
              },
              "summary": ""
            }
          }
        },
        {
          "path": "/omop/reference",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "reference",
              "parameters": [
                {
                  "description": "The adverse event to pull reference (e.g. case and control) data. ",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "default": {
                  "description": "Default response"
                }
              },
              "summary": ""
            }
          }
        },
        {
          "path": "/aeolus/drugpairReactionCounts",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "drugpairReactionCounts",
              "parameters": [
                {
                  "description": "The starting position (for pagination) of results to pull",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "default": {
                  "description": "Default response"
                }
              },
              "summary": ""
            }
          }
        },
        {
          "path": "/sider/drugForEffectFreq",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "drugForEffectFreq",
              "parameters": [
                {
                  "description": "The umls id for the effect",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "default": {
                  "description": "Default response"
                }
              },
              "summary": ""
            }
          }
        },
        {
          "path": "/lab/ae_to_lab",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "ae_to_lab",
              "parameters": [],
              "responses": {
                "default": {
                  "description": "Default response"
                }
              },
              "summary": ""
            }
          }
        },
        {
          "path": "/va/get_ddi_alerts",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "get_ddi_alerts",
              "parameters": [],
              "responses": {
                "default": {
                  "description": "Default response"
                }
              },
              "summary": ""
            }
          }
        },
        {
          "path": "/omop/conceptsToName",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "conceptsToName",
              "parameters": [
                {
                  "description": "A comma separated list of omop concept ids.",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "default": {
                  "description": "Default response"
                }
              },
              "summary": ""
            }
          }
        },
        {
          "path": "/sider/drugForEffect",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "drugForEffect",
              "parameters": [
                {
                  "description": "The umls id for the effect",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "default": {
                  "description": "Default response"
                }
              },
              "summary": ""
            }
          }
        },
        {
          "path": "/aeolus/reactionListSNOMED",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "reactionListSNOMED",
              "parameters": [],
              "responses": {
                "default": {
                  "description": "Default response"
                }
              },
              "summary": ""
            }
          }
        },
        {
          "path": "/gote/gpcrFromUniprot",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "gpcrFromUniprot",
              "parameters": [
                {
                  "description": "Uniprot id for the GPCR",
                  "in": "query",
                  "name": "uniprot",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "default": {
                  "description": "Default response"
                }
              },
              "summary": ""
            }
          }
        },
        {
          "path": "/aeolus/drugpairList",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "drugpairList",
              "parameters": [],
              "responses": {
                "default": {
                  "description": "Default response"
                }
              },
              "summary": ""
            }
          }
        },
        {
          "path": "/aeolus/drugpairReactionListMedDRA",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "drugpairReactionListMedDRA",
              "parameters": [],
              "responses": {
                "default": {
                  "description": "Default response"
                }
              },
              "summary": ""
            }
          }
        }
      ],
      "security": [],
      "servers": [
        {
          "url": "https://www.nsides.io/api/v1"
        }
      ],
      "tags": [
        {
          "name": "translator",
          "x-id": "http://ncats.nih.gov/translator/"
        },
        {
          "name": "Adverse Drug Reaction Reporting Systems",
          "x-id": "http://purl.bioontology.org/ontology/MESH/D016907"
        },
        {
          "name": "drug"
        },
        {
          "name": "protein"
        },
        {
          "name": "pathway"
        }
      ],
      "~raw": "H4sIALZ6mFoC_-1ZUU_bSBD-Kys_FSnYpFR3ap8uJaGHBKQi7b1cK7SxN8ke9q67uwaiiv9-34ztJIQQOF1bkNon4vXM7Mw3M9-Ol6-Rug7KGZn3beqjN-JrlCmfOl0GbQ2eo6gjosrl9HMWQvkmSYzXkIm1jW7wLsgp6f39NTKyUCQWnDQ-l8E60r3e1dmqciqDj42exVN7mSxFEzK2tNHLLpXzSvRdNRVnSqbkDn6U1gVtpmI090EVfsMGJZyNx9paE2xup_PYumnSPiQng9GfSX-v-9vrvd9v75hhp9srpbNBabO2KMPsSs6jm8_Y2itHbtbhr4Dk4cfV1VW8QCqRpU4uu7VWaovSGmVCjbdTXyrlw1ubacUrhGopHTYMtXFeccpDyy9Fcm0uFg9epZXTYT5KZ6pYyqhrWZT58nmmZLZi05O0XDymMs_HMm2s0oo2E8tOpkAQSeDfUNEcqtHpRRyQPaNC0H-kNq-KsZaxyqq6NHTIGbTT0VF_MKJkrRXXh5kS9UvRe38kCnmhvPAKoMpcZDJIgbBt5VIsy0tsK8e5EmEmg5BOicqrSZWLiXXChyqbU2XIpnIon9CuKwfaJuOlXV7XBtA2r2Lx0QAiL2yYKXeloWuQ-KzD8p43Sm2mMmiJs-tT6wqBtJqgJxo7sWVbBWRVrQpLL0anw5NBf1U4_mQ-GQp6YvPcXpG_KwFCdzVIZ6vpDH-1J3DeCNLtxqI3GB5_HHWEFGmupMFWVSkoZuoQO4GCEof9nmhbaHCJ7e-0DpsyI6rPTgfZndjKZHi9m1rnVIr4RaY9WoDVLAgC1QWUZdA-6NQDezJWVHnQqDCkLp1powRccobfAIXc8zaU4LOOoGYQajKB9Tq3E2cLdpdzgr2yCq8Qfqv4bvhhQIG2GFF4794fnNWgQ1M7EaSbKnbXXhkfkPFCNE1aG_mrRyZyuE3qFwZirI46RCBUZxvLgnWHJ8P30E5Tqo9g2VkkugDSlzaV4yqXbs71R_xQm7UmVWVYyTqwKUtAUmPBNdFZV29E2Iy_x07t0nHvLcVDceQqm6olONwWMOQXPaAo9ex443QK0uCYCSFmRKhThmGb2rMpI2rNbrwX70XMM6kC73DrL-i5RLqVeFlL3D4eiPgkv2fqbdR9cnx0MDgdDXahFM9CkdcUoVzhh5MRiBRymw6ZhEX4eGDyrUkz8Qb9liVI_bDuvUMU04gXjzIWwSv-a0vklFLK69E9GuucC0LXjAPI2c3pdRv7l4jZ-EulnSKLwVXqLrPVhltiWMlmHC2Il90L85LNonRRANENHxG3yB6mJxJ9tul07tevRKsQMW37qihQWe3xvX6is0xCFU_8nvxjx0cmU9fNbvfgtiL1eKyYQTfj9RwgkApHlk-wKVzT6JVjsMQ2ENYk7wDxgx0neNvh6AAEHrZmcIP0t656OtpwRtQHTWm95rHtBTFcKVFt7M0O8TCCRuzMTWWV58-lKWraSYItG5Lwh9bRELoN2A3S36RF1lwc4nilo8I61YwmDXh8LMEJgTFSFzLgBAHisYAzopkAaVQS3f29169fveIDRxbaZtJhdHuQkGj8vcd5UxVndSIfFcEp5kOchzSkwNvF0NSG8ULF01h093b-h0c8dqw5M5G5v6dYWVzQBoRQRq60IDKqy4EnFgfSiDGgN6jopvp2OiJ3aYfSYmzpiwewZB_aso1giFYUQKQKaZ9hkAMie9HnH06G7chMBHeisv5Zb1vpb5B-MlJserfNX9OK501rboviPpWfpIvtMtxHMXw71KyMuC_qeWyHggHI9VR_9_th0VsbI9vv7r_s_l4HBrcxpk702OF7iAzEv0jhCUjBFrYEJUyUUyZV25mgFfoeQ8WtL5pFxyz2bI6OVPrFR1hwNt_h78xYRM9r3qS2L6V2_21026Dxa3xbA5hOAMf4glsGfNVwiKgfgva28PdAtSpyD75kbiMKqa9BngtsuRyjNs-DPcevbWAthZ7slL-U9NF_nmX6XObKbe-bNcknc5pptLkD8B_sqdw-j6xJfuuC7PF1kBRekVm6O2tvx8jPlbsKHz_jxn50U_-EDb1hlq8vHh87yzfST9YwUxtUMi1TR5d0H42m_8VsbfQ10cenvFpqPJj4xvpq3uk6-pmOFw9dZt2Sew5XWasTzuM-P7doPUlAJAQXjSw1rey3d-jtv-fYj5t_AZABc-l1HQAA"
    },
    {
      "_id": "52f5867b9cc9cf8664565cc9ef2af276",
      "_meta": {
        "ETag": "463dd92625d12cd0f2fdb7a11fb0c561ccc2186f1cbdcec4b50ecc4e5fcb7718",
        "github_username": "kevinxin90",
        "timestamp": "2020-04-29T00:00:17.019393",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:46.239281",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/cord/cord_anatomy.yml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned fields when passed \"fields\" parameter contains dot notation, e.g. \"fields=assoicated_with.pmd\". If \"true\" or \"1\", the returned data object contains a single \"associated_with\" field, otherwise (\"false\" or \"0\"), a single \"refseq\" field with a sub-field of \"rna\". Default: true.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated fields to limit the fields returned from the matching anatomy hits.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching anatomy hits to skip, starting from 0. Combining with \"size\" parameter, this can be useful for paging. Default: 0.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "size": {
            "description": "the maximum number of matching anatomy hits to return (with a cap of 1000 at the moment). Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated fields to sort on. Prefix with \"-\" for descending order, otherwise in ascending order. Default: sort by matching scores in decending order.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "anatomy2anatomy": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "uberon"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/anatomy2anatomy"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "anatomy2bp": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "uberon"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/anatomy2bp"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "anatomy2cc": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "uberon"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/anatomy2cc"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "anatomy2cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "uberon"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/anatomy2cell"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "anatomy2chemical": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "uberon"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/anatomy2chemical"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "anatomy2disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "uberon"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/anatomy2disease"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "anatomy2gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "uberon"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/anatomy2gene"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "anatomy2genomicentity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "uberon"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/anatomy2genomicentity"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "anatomy2ma": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                },
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "uberon"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/anatomy2ma"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "anatomy2protein": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "uberon"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/anatomy2protein"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "anatomy2anatomy": {
            "UBERON": "associated_with.uberon",
            "pmc": "associated_with.pmc"
          },
          "anatomy2bp": {
            "GO": "associated_with.go",
            "pmc": "associated_with.pmc"
          },
          "anatomy2cc": {
            "GO": "associated_with.go",
            "pmc": "associated_with.pmc"
          },
          "anatomy2cell": {
            "CL": "associated_with.cl",
            "pmc": "associated_with.pmc"
          },
          "anatomy2chemical": {
            "CHEBI": "associated_with.chebi",
            "pmc": "associated_with.pmc"
          },
          "anatomy2disease": {
            "DOID": "associated_with.doid",
            "pmc": "associated_with.pmc"
          },
          "anatomy2gene": {
            "HGNC": "associated_with.hgnc",
            "pmc": "associated_with.pmc"
          },
          "anatomy2genomicentity": {
            "SO": "associated_with.so",
            "pmc": "associated_with.pmc"
          },
          "anatomy2ma": {
            "GO": "associated_with.go",
            "MOP": "associated_with.mop",
            "pmc": "associated_with.pmc"
          },
          "anatomy2protein": {
            "PR": "associated_with.pr",
            "pmc": "associated_with.pmc"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothinigs.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the CORD Query web services. Learn more about [CORD](http://biothings.ncats.io/cord_anatomy)",
        "termsOfService": "http://myanatomy.info/terms/",
        "title": "CORD Anatomy API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/anatomy",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple UBERON anatomyids seperated by comma, e.g., \"ids=387,388\" Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "For a list of anatomy ids, return the matching anatomy objects",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/anatomy/{anatomyid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "UBERON Anatomy ID, e.g. UBERON:0009552",
                  "example": "UBERON:0009552",
                  "in": "path",
                  "name": "anatomyid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "description": "A matching anatomy object"
                }
              },
              "summary": "Retrieve anatomy annotation object based on pr anatomy id, support JSONP and CORS as well.",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "CORD API metadata object"
                }
              },
              "summary": "Get metadata about the data available from CORD API."
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Pass a search term to filter the available fields, e.g. \"search=associated_with\".",
                  "in": "query",
                  "name": "search",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Pass a prefix string to filter the available fields, e.g. \"prefix=refseq\".",
                  "in": "query",
                  "name": "prefix",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "MyAnatomy.info metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from MyAnatomy.info."
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string. Examples \"PMC6836328\", \"31045\", \"PR:000001978\".",
                  "example": "associated_with.pmc:PMC6525145",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "description": "a single field or comma-separated fields to return facets, for example, \"facets=pr\"",
                  "in": "query",
                  "name": "facets",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "Make anatomy query and return matching anatomy list. Support JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms seperated by comma (also support \"+\" or white space), but no wildcard, e.g., \"q=1017,1018\" or \"q=CDK2+BTK\"",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "Specify one or more fields (separated by comma) as the search \"scopes\", e.g., \"scopes=entrezanatomy\", \"scopes=entrezanatomy,ensemblanatomy\". The available \"fields\" can be passed to \"scopes\" parameter are listed [here](http://myanatomy.info/doc/query_service.html#available-fields). Default: \"scopes=entrezanatomy,ensemblanatomy,retired\" (either Entrez or Ensembl anatomy ids).",
                          "type": "string"
                        }
                      },
                      "required": [
                        "q"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with \"hits\" property"
                }
              },
              "summary": "Make anatomy batch query and return matching anatomy hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/anatomy2gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/anatomy2protein"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/anatomy2cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/anatomy2cc"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/anatomy2ma"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/anatomy2bp"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/anatomy2genomicentity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/anatomy2chemical"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/anatomy2disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/anatomy2anatomy"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://biothings.ncats.io/cord_anatomy/"
        },
        {
          "description": "Production server",
          "url": "http://biothings.ncats.io/cord_anatomy/"
        }
      ],
      "tags": [
        {
          "name": "anatomy"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIAJHDqF4C_-1b608jORL_V6ze_cBo8wKGGQYJ6YbHzbK7QBY43UkThJxuJ_HS3W5sN5BF_O9XVe5n0iSB46QR4suQ2C67qvyrpzMPnkpEzBPp7TBvs9Pr9LwW82Q8UjDw4Pkqtty39FlEXIa4bCLC5B9DqexExnJsOlIhTcwjgbO_Hf378IT95-gEB-_bMiASaxOz0-2OpZ2kw46vou61uJXxvYy_9NxCrUKi18IkKjZyGAoWiFsRAoPae4Q1gTC-lomVKsaFB8pPIwH84QBTI2Yngu2fnh2wP1Ohp-xODJkR-lb6wnTYH4LrmEVKC8aHKrXsOy69XEPOgLFMHJAm9rlFmbq-0sEVj7lV0fQD8miFjszp6NztmYsFxNE0W9ZBxXVpXZcopHVCEVtf3SL2tX-Ek7dCm0yUdVA7SojswigMfX-YFfcw9vU0sSJgfa2C1CepHQHuluqwqugl8nTxuLkjlm280r6XKDcfZ0LkqMjm3bHlYKzc9dXHb_D-6kNW89iEsIeujxf8uIMTbieG0NrNT8QviTIOwwnXQGgLHf-sxQi3-QmkiAB2ACfTLRd1R1KEganCOxshJpZRB8rS8ip9MbbSDs7mKuRugGTVAvRk7J4KpoWtAj195kkSSp9U271v393dtUdKR224SxH7KhABrTL-BPZzitFoZlYKpz0ZuL8zAInS0MoEDPNfe4dnpycs0zGsBsAAPUd4DqcMhIl4i4nOuNNiA9xtd3P7c2tze3vgsRNlBdgqt8xPtQaOQ7RVpmL4a_m1IDuWcQI2ihunCbOKrfd6PRbxexmlUYtWgJ-w7E6GIRsCcSQtnN0ho5smpCpjNQDDe3zMdCU1if2dhLt8fMwmyNtkYm_0ek1if2WESJYvZmr4l_DxdDsB8SbSGpArU-HUnWhSUIHGm_H-qTTjLJTAL3ipTGcoWwt2tCm4JZQn4tZHJBcL3CEEvtyeqhZzScfkMO8-FHfxSCKMRTPiZ0TLLjJ3TUcH7tayC94BrX_Z2tpAHsQ9jxLnzeYnJW2G1lcFa8GSV78Cq1OBKirh13BnP75x-jwMh9y_ru5QjL2Cea-EzCdgMwfCMwGqhXBarCuhlMN5yA2YL3xPdAWlLWbSJFHast_OT0_6MBNglD1n3IDZhmFnCUBBVB5wyxei8n9T9crqcmG4f8Rypp7S1jdhyzUuX0AbdV9v4Y44picjrSKW79nx6vLm8HyGMfa5MeApDKQq_oRhGoGubyRD-EjnV46mzTNjHXiOZBfolS_RC1-hbxp4ndI4XVCt6M_ReCsYYjObCdyZvGdu5aqMOqJd-NeIm8X8uaXeKziKV0LP8fRrJc0r8eFEfAmUMsoZRNXPyXHl9PMMNLks2Cmqww6d-zZwB_3j_U_bm582NyAaY3jeXO993HIf-2fo1Xu99S-ft7Pbqfj9GXh1ksjfwc22NrbWP24tuMqbHzEAGPm3qNkDfl-NErxhjRK_N1kK2DJIk1sBgzyAMqM2JEvcJUsZAsB6slRgxH1hwV4gX2OZ6vFi3PBuogfeAj27Vf9_k_kRkt8mg30qBf7L0H3UMt7G09286ZLtnAkD-a7nEsXXTQmPMc_NY6zbCeNqhoG5mI65Y4edPyMOO2hc4rHvxc8zi5-bhaWPuy2q8RuKHrbGQ6OKlGng_QIwAFO-A0QIZhIw0A8tNoQgECusXgKf66CslG5213vrn1vwz7ajw6H9g983ftm7-N2Z_qw5k7ED_40F23kifDmCpDAWuBu1PzKXs1Y6oZz5D4glDE5ZBjLIdsbYkHPoRnZB11r8neHTxY6mmZYA24iGYbGwwy5q6cEgwxRI6_MYS7kEogzwBB6xPJ4VqGAcJEBzgCXfJ0KLooMz04QJlO9C5lXWA-pMbBT-VJzcdud-6LADMeJwuTuridACG8UoBkytCTB2YOmQlqN-D93Sao33YbWa9GZJRfq6nq1_en6xyLv92eTbzIuc2xB92QouDjdt8mDUGxxa0b4em7YicwMmF3mwpuV5mbwxFvGiIL-QFgS2QsYvJffBSb-Y1n8pJWDihZTD5KWUoGQVgcnFVtrpi0UGvALKX6yyQIIXMy--7KJheekspKSbj6UPZWrU4IOnKiXflriyaVAsrvk18HcR2U0W3nHRouqomqAtTvbKqNvAHPoVrULy-hgluc076c5QyxT1biLi3DlXvHYpAb0VyNgwOI_lXYCi8HMEVKGi7ypLiACDwtEIlmBVkEe9dYwpNTYq5Xp5VJFgD7y52tcx3mIKnfQdoIGtYR4dmuKQ3sCDYFzZIy9Ls3yd_B1Mp8N2lsAjmzrmyHIRNpDtRTdVTYQabmqoVCh47K4qf2OZuydQEOIIo58W4zTkmqUQ2AyypFJdPHS0sJWKaU6q-VgQDSALPNetDASQgL9ldEiLQZpCXVggcKHXEg41gIo0nxrcARQ1UmGo7rARSwqBPReJW2RtS1BZaY_MVU1PV0mhjKQroLOxEqZYOjc2UjG0LOK4zHOXsQxHNDGMp8ZpNAT1wXU0no-8m2uZgNoth1QTponhXoftq2goYxzJ4isWolXLQkOQJs-P4NpHaUj1YcLHVNsXUOwtFBO5bxZSQnIxxlc2iuRYBz8hZdaBX0XaLNCvZUbk8wSXUx-fuxuMFD7fVTOw9YUC5AX7UgGwHH9CgKeRhVSQJ3dY3_W1sstoozcAXeNeIg5QUqUDvJTSr8gYEufabEUm2hcy7EJRkGRCZoVEgagTLZI9azksQuhjMe_MajbVo4cdKyI3C_HjdOTSqJn654o4pI8uJBB6QsVtNZV1EKD6o2xNNVlNPpb3xy6rg1xrTimCVy25G4oyQN6z-bJKXTfDhCYtD58G0SzXdDX208crpa8c00gKGUGuxFKzJXNEUWWuxsCsClajJPU5_a7AS0O12HDu7CrXun8i737wKrmlOw4f686dTSmNG7UclGE4y9TdzwDcwxHhGFAK6aFPvRTaDnO9wyxjxKwfXN9EERU1MFrUEA4od3A_Ewgp1lv68YGBeOee5C-Kh2J2Ie4tO3aute8iIL1oq9TOMvbtdJapY4jKPsbZr76Vt0Ue65Yfn_ZXWO8epGt5YhH0ZtMVuhl6P9sper0NbY5h_gF7FN6D0_D33uWjV20DeClYgHtU9yaCo9h44tK2iKvjqHOxh96q7NTmpeBVBLsgRHYWJ9X5-na2vlaOkGIqlc2bxdA-VHwIif1cPe-YaMIEFrc1TEDl-WYxsSdVqMbIFJBCwm7eMdGECWw-1DBR_pznTQDjOYy9Y6OOjaI1UwMIdfbeCDp-_XayP8vWN-pcvuNhHg-upzsLhkoH8o2g4vy0ARPI07uzWAiOai-6hpK8of9G8NE_m2Wqn79YvCNjHhnFc069HsFXmjcCiP0_miqSdzQ0FiGkmRoU8hekN4KGg9Ojg1m2DvJHsndIzEOieEGsO4j8XfKtOIlfD_eO5vxEJuR5OjSWx_47QpqdRvFG7dqyzcvne6YPXhL5T_yiEmXH_mLDbKQSnP122jQ5ViRxra-27JyVdqJuzKvsVPsvOQu3y6ylYUEFDDOV37I9qahqmJ6MY392v1rxsGzj80bZTV32Mtdcth2kcU2Tun69Lk1ZthdkAA2Tfljbq4xzy7ajENIwHSgZ1NkrneRSFsn_NHE5EUOJz1qP_wXNOczXpTgAAA=="
    },
    {
      "_id": "6bc54230a6fa7693b2cd113430387ca7",
      "_meta": {
        "ETag": "5e7512d15d24b57b52cb15604aaa6c24192f48ef00da9732f23aab3707b2061b",
        "github_username": "kevinxin90",
        "timestamp": "2020-04-29T00:00:40.725359",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:46.545658",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/cord/cord_gene.yml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned fields when passed \"fields\" parameter contains dot notation, e.g. \"fields=assoicated_with.pmd\". If \"true\" or \"1\", the returned data object contains a single \"associated_with\" field, otherwise (\"false\" or \"0\"), a single \"refseq\" field with a sub-field of \"rna\". Default: true.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated fields to limit the fields returned from the matching gene hits.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching gene hits to skip, starting from 0. Combining with \"size\" parameter, this can be useful for paging. Default: 0.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "size": {
            "description": "the maximum number of matching gene hits to return (with a cap of 1000 at the moment). Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated fields to sort on. Prefix with \"-\" for descending order, otherwise in ascending order. Default: sort by matching scores in decending order.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "gene2anatomy": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "hgnc"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2anatomy"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "gene2bp": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "hgnc"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2bp"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "gene2cc": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "hgnc"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2cc"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "gene2cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "hgnc"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2cell"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "gene2chemical": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "hgnc"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2chemical"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "gene2disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "hgnc"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2disease"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "gene2gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "hgnc"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2gene"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "gene2genomicentity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "hgnc"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2genomicentity"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "gene2ma": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                },
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "hgnc"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2ma"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "gene2protein": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "hgnc"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2protein"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "gene2anatomy": {
            "UBERON": "associated_with.uberon",
            "pmc": "associated_with.pmc"
          },
          "gene2bp": {
            "GO": "associated_with.go",
            "pmc": "associated_with.pmc"
          },
          "gene2cc": {
            "GO": "associated_with.go",
            "pmc": "associated_with.pmc"
          },
          "gene2cell": {
            "CL": "associated_with.cl",
            "pmc": "associated_with.pmc"
          },
          "gene2chemical": {
            "CHEBI": "associated_with.chebi",
            "pmc": "associated_with.pmc"
          },
          "gene2disease": {
            "DOID": "associated_with.doid",
            "pmc": "associated_with.pmc"
          },
          "gene2gene": {
            "HGNC": "associated_with.hgnc",
            "pmc": "associated_with.pmc"
          },
          "gene2genomicentity": {
            "SO": "associated_with.so",
            "pmc": "associated_with.pmc"
          },
          "gene2ma": {
            "GO": "associated_with.go",
            "MOP": "associated_with.mop",
            "pmc": "associated_with.pmc"
          },
          "gene2protein": {
            "PR": "associated_with.pr",
            "pmc": "associated_with.pmc"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothinigs.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the CORD Query web services. Learn more about [CORD](http://biothings.ncats.io/cord_gene)",
        "termsOfService": "http://mygene.info/terms/",
        "title": "CORD Gene API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/gene",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple HGNC geneids seperated by comma, e.g., \"ids=387,388\" Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "For a list of gene ids, return the matching gene objects",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/gene/{geneid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "HGNC Gene ID, e.g. 387",
                  "example": "387",
                  "in": "path",
                  "name": "geneid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "description": "A matching gene object"
                }
              },
              "summary": "Retrieve gene annotation object based on hgnc gene id, support JSONP and CORS as well.",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "CORD API metadata object"
                }
              },
              "summary": "Get metadata about the data available from CORD API."
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Pass a search term to filter the available fields, e.g. \"search=associated_with\".",
                  "in": "query",
                  "name": "search",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Pass a prefix string to filter the available fields, e.g. \"prefix=refseq\".",
                  "in": "query",
                  "name": "prefix",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "MyGene.info metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from MyGene.info."
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string. Examples \"PMC6836328\", \"31045\", \"PR:000001978\".",
                  "example": "hgnc:238",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "description": "a single field or comma-separated fields to return facets, for example, \"facets=hgnc\"",
                  "in": "query",
                  "name": "facets",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "Make gene query and return matching gene list. Support JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms seperated by comma (also support \"+\" or white space), but no wildcard, e.g., \"q=1017,1018\" or \"q=CDK2+BTK\"",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "Specify one or more fields (separated by comma) as the search \"scopes\", e.g., \"scopes=entrezgene\", \"scopes=entrezgene,ensemblgene\". The available \"fields\" can be passed to \"scopes\" parameter are listed [here](http://mygene.info/doc/query_service.html#available-fields). Default: \"scopes=entrezgene,ensemblgene,retired\" (either Entrez or Ensembl gene ids).",
                          "type": "string"
                        }
                      },
                      "required": [
                        "q"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with \"hits\" property",
                  "x-bte-response-mapping": {
                    "$ref": "#/components/x-bte-response-mapping/query-post"
                  }
                }
              },
              "summary": "Make gene batch query and return matching gene hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene2gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene2protein"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene2cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene2cc"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene2ma"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene2bp"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene2genomicentity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene2chemical"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene2disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene2anatomy"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://biothings.ncats.io/cord_gene"
        },
        {
          "description": "Production server",
          "url": "http://biothings.ncats.io/cord_gene"
        }
      ],
      "tags": [
        {
          "name": "gene"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIAKnDqF4C_-1b608kNxL_V6zOfWCVebEkuwQJ6ZbHbUgCTIDTnbSDkLvbM-PQ3W5sNzBB_O9XVe7nTM8MkD1piciHXXC77Hr86unNg6dSkfBUejvM2-oNegOvwzyZjBUsPHiBSiwPLP0sYi4j3DYVUfpPXyo7lYmcmJ5USJPwWODXX47-c3jC_nt0gov3XRkSibWp2en3J9JOM78XqLh_LW5lci-TnwZuo1YR0WthUpUY6UeCheJWRMCg9h5hTyhMoGVqpUpw44EKslgAf7jA1JjZqWD7p2cH7PdM6Bm7Ez4zQt_KQJge-01wnbBYacG4rzLLvuDWyw3kDBjLxQFpkoBblKkfKB1eTUQi3iGDVujYnI7P3YGFTEAZz3BPD1XWp0192i6tE4cY-gw72KfhEX65FdrkEmyCtlEw5BJWYenLw7yUh0mgZ6kVIRtqFWYBCesI8LRMR3X9rhIDr1o4ft2ha8-8RGH5JGe-AEF1X7HCk0Q5UzXXb9BWzSWreWIibpVurpeMuFtTbqeGkNmn6_CnVBkH1pRroLKlVv-hxRjP-A54jwFfgBvTrzb1x1JEoanjOF8hDtZRh8rS9jp9ufakE5xz1cjdAgmqBSjJ2D0VzkqnBHr6madpJAPSa_--e3d31x0rHXfBgiIJVChC2mWCKZznFKPRn6wUTnUydH_PwSLOIitT8MCfP5_sM1QvbASEAClHLPozBnLEvMNEb9LrsBEetLu1_bGztb098tiJsgL8kVsWZFoDsxH6I1MJ_G35tSBflUkKfogHZymzim0OBgMW83sZZ3GHdkAssOxORhHzgTiWFu7ukXvNUtKSsRoA4T0-5mqSmiT-QnJdPj7mHyii5BK_HwzaJP7ECIms2MyU_4cI8HY7BfGm0hqQK9fezN1oMlCBRqN4_1KacRZJ4BciESoMBevAcTaDuIPCxNwGCF_31R1PiCvcp-4jl3QBAbv_4PT_SGxPRDvA58Qhu1HYOTpwRmJgHbxN3PM4dbEpX5FEge5UB6C71Gsq1upMoOAVnlos8e17W8CjyOfBdf2Ecu0r-OuT8NaGhwVcnQnQK2RBt6kCSAFPnxtwR_h9OkmCAncdZrI0VdqyX85PT4ZAFmJiPGfcgBdGUW8N6kBGHnLLVwLur-n4yXqi_AmpkxVMLdPUZ2GrPS7Fo9e5X2_BOBwrirFWMSvO7HlNeQtcPsPPhtwYcHwD1UUwZZj_MZKNZQQ_0v21q-nw3BlHniPZBXoVSAyqVxhqRl6vckmXG2v6czTeEzywnc0UbCbvmdv5VEYd0S78acTNav7cVu8rRIivhJ7j2eeiOKvA4eR7CY5yyjk41S4pEOU08wwcuZLVqajHDl2MNqD94fH-h-2tD1vvIa1int3aHPzwo_txeLYzwP82f_q4ndulFtwxIOy839peYa6bbzG6G_mnaGAef38aJUS8BiX-3uYN4K8gTYF0Bqmbipku1Dfc1Te5ocFD8gQ-5oGw4BNQXbFcyWgCt7yLuh55KzTt9v3_HeNbKFbb3HJZyfqHIYs0KtTW29130yc_ORMG6lPPVXdft447xuKU0qg7BlNnDoFmvsZSr8fOn5FnHSgu8cK3NuWZbcrNyibFmYqa75YehW3wyKiyJBp53wMAwI3vAAuCmRRc812H-RDnE4XNRhhwHVaNzc3u5mDzYwf-2HZ0uLR_8Ov77_cufnVOP-_I5ObAf2trdZ6KQI5nULMJPI0mEnm42agCUMH8O8QS5p-8whjlJ2MGKDh0K7ugay3-RHC69LCw3BHgD7EfuS09dtHI-qMcSiBkwBNsuFIoGoAVCILVrawEA-PaeQFs-TIVWpSzlPpEJFSBS4ZX-SimN7Vx9F15bddd-q7HDsSYg0F31nHeAXfEfAW8bAhwauDkkDaiNg_dvrIBe_e0bvFmTa_4dcPX8PT8YlUI-70tgJllEYyGZ74V3YKgGwOLKOdSbtr3Ozt1KTY9Lo-LPobBddERmWwLfiWz1xPTVeSpIPSq4Ne2ndri99WM6ZmEoDorZPIi2gDC-ssIgxeRAaheQuanLyKDP1QMTppYaWcvExNwDt7xMh2FEqKceZlRecKtioHpS4fdimgx0T5UFVNLgJ6pjCJg6nqmUbm5Ef0gKsboEzzP_bhpVWtUr9tW14BVSm5hDiORVhGlBEyh3BaTb-eHVe16NxVJEcJrsb2SgGb7MjEM7mPFCKDs-hwBtacY7fL2tJfGIaaOozFswXahSImbmHMabNR69eqqsvIeeQuNr2O8wxTG9DuAAtvAAjsy5SWDkQeZunZG0ZPmhTxFSPic-d28skc2dcKR5TK_INurLFWvklos5SsVCZ44UxVvIgt2AgUhjjBHajHJIq5ZBhnQIEsq0-XDRAfHolgDZZpPBNEAsiBC3cpQAAmEWEaXdBjUMDRRBQKXoC3hUAOoSPOZwRNAUWMVReoOh6qkEDhzlbhlSbcGlbXZyEI7tbx9imQsXQOdr1UwxdZ5cS6KmWMVu1UFvI5fOL-NW7wyyWIfdAe2WLwcuTbXMgWFWw4VKHwjVgc9tq9iXya4kudi7E3rPoUuIE1RP4HBx1lELWPKJ9TYlyAcrJQRWW-XUEIhMsH3MMrP2BovETGfo68VNU_fG7nvBDzFvTSK585wscJXtnqFtrmS-6KBX8s9tudLuF8OKKSC2rnHhm6WlVuii0EAFI1niSREMZUO0SJVOJEJFNONrzWZ6FyoukstQREKFRIShaJJtEr2fASxCpuP5XfnTfM1IT3LWBG7r5A2TseuPprria6IQ_rRZQKCTqS4rde8zv7Uk1RDqTZ_KdaKsdhlfZFrzakg8OoNeEujBrB7Nl9Wqet2mNBHy6PlIJrnmkxjP_xwpfSVYxpJoRAolFhptmKOKOrMNRiYV8HTKEl9Tr9P4KWlg2y5d36XG9cvKagfvKKAdHfhY9u5cyil8ZSOwzEs5_W3e6rHlyOCMAAU6sDAzUSLp14Ic1NF-6hP6NDMN6QKwT3eR5TRLf2TAANZzb2VX5RPuuxC3Ft27MLo0OU5enRWmZ1n5fPpPCPHkHsDzKafAitvyyLVbT8-HT5hv3s6blSDZWqbL0rIEPQwtlMOdVsmHX7xA44pvAen0y-Dy0evPgmgiSydOBUchcb71s5FXB9Go4s9DE3VmLbo365e2u-VDQbppOhS_kZo2YdmDY2_X6jizfpz1seutLI-dI1_I-vvSRWpCTajQAqltnmz_pz1cUpQWb_ooF8tBP69d3h2ejLPzCcSC2FwmI813lDQQEE5OamgkP97qleKg9WsvFm-tLyboDbMXhv_vVr7n5-2MIKCvQWAZTCoT30rPBSD8leLhOHZPCPDYvb_hoEGBso3kVovgE8dr9b0-7-1dQNvdp9vAEgpldGLJ5hXa_eD06ODeVYOinelN-M3jF--t9Wcvni_e72O__Ph3tGC7-dinWe-sTwJ3rCwEAjKh1s3ulzxbwqqueKDl8ZBi756uNxxE7mWr7FK8Su07C0fJ4pkrcZR6y5ZfwzNNf76MVWDvO6svBNt2ZD5Qrv_BabRaa07kPyr5XMJpdb6fd2p560im5rIVQW47iwotdo-6poxXT2x7iBI3C0fg6g6qMpR686iZNDyOVQyrDFWxby1zFFwaeNvKnyJjzuP_wN5J5zfUjcAAA=="
    },
    {
      "_id": "8f08d1446e0bb9c2b323713ce83e2bd3",
      "_meta": {
        "ETag": "846f7a462e065abd3b97830b42c653e02c2e68141e64bf124cf6cc0d74176535",
        "github_username": "newgene",
        "slug": "mychem",
        "timestamp": "2020-05-28T00:00:39.113364",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:30.394843",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/mychem.info/openapi_full.yml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call. Type: string.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned chem object. If \"true\" or \"1\", all fields will be collapsed into a single level deep object (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Type: boolean. Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us with an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "facet_size": {
            "description": "the number of facet buckets to return in the response. Type: integer. Default: 10. Max: 1000.",
            "in": "query",
            "name": "facet_size",
            "schema": {
              "type": "integer"
            }
          },
          "facets": {
            "description": "a comma-separated list of fields to return facets on.  In addition to query hits, the fields notated in \"facets\" will be aggregated by value and bucklet counts will be displayed in the \"facets\" field of the response object. Type: string (list). Default: None. Max: 1000.",
            "in": "query",
            "name": "facets",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated list of fields (in dotfield notation) used to limit the fields returned from the matching chem hit(s). The supported field names can be found from any chem object or from the /metadata/fields endpoint. If \"fields=all\", all available fields will be returned. Type: string (list). Default: all. Max: 1000.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "format": {
            "description": "controls output format of server response, currently supports: \"json\", \"jsonld\", \"html\". Type: string. Default: json.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching chem hits to skip, starting from 0.  This can be useful for paging in combination with the \"size\" parameter. Type: integer. Default: None.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "prefix": {
            "description": "Pass a prefix string to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          "search": {
            "description": "Pass a search term to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          "size": {
            "description": "the maximum number of matching chem hits to return per batch. Type: integer. Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated list of fields to sort on. Prefix each with \"-\" for descending order, otherwise in ascending order. Default: sort by descending score.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "Chem": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Chem"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Chem"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "contraindicatedBy": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "CHEMBL.COMPOUND",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "chembl.molecule_chembl_id",
                "size": "250"
              },
              "predicate": "contraindicated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "drugcentral.drug_use.contraindication.umls_cui"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chembl"
              },
              "source": "drugcentral",
              "supportBatch": true
            }
          ],
          "contraindication": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CHEMBL.COMPOUND",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "drugcentral.drug_use.contraindication"
              },
              "predicate": "contraindication",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "chembl.molecule_chembl_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/contraindication"
              },
              "source": "drugcentral",
              "supportBatch": true
            }
          ],
          "metabolize": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "SYMBOL",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "DRUGBANK",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "drugbank.id",
                "size": "250"
              },
              "predicate": "metabolize",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "drugbank.enzymes.gene_name"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/drugbank"
              },
              "source": "drugbank",
              "supportBatch": true
            }
          ],
          "metabolizedBy": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "DRUGBANK",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "SYMBOL",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "drugbank.enzymes"
              },
              "predicate": "metabolic_processing_affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "drugbank.id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/metabolizedBy"
              },
              "source": "drugbank",
              "supportBatch": true
            }
          ],
          "target": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "DRUGBANK",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "SYMBOL",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "drugbank.targets"
              },
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "drugbank.id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/target-drugbank"
              },
              "source": "drugbank",
              "supportBatch": true
            },
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CHEMBL.COMPOUND",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "SYMBOL",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "drugcentral.bioactivity"
              },
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "chembl.molecule_chembl_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/target-drugcentral"
              },
              "source": "drugcentral",
              "supportBatch": true
            }
          ],
          "targetedBy": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "SYMBOL",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "DRUGBANK",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "drugbank.id",
                "size": "250"
              },
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "drugbank.targets.gene_name"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/drugbank"
              },
              "source": "drugbank",
              "supportBatch": true
            },
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "SYMBOL",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "CHEMBL.COMPOUND",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "chembl.molecule_chembl_id",
                "size": "250"
              },
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "drugcentral.bioactivity.uniprot.gene_symbol"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chembl"
              },
              "source": "drugcentral",
              "supportBatch": true
            }
          ],
          "treatedBy": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "CHEMBL.COMPOUND",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "chembl.molecule_chembl_id",
                "size": "250"
              },
              "predicate": "treated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "drugcentral.drug_use.indication.umls_cui"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chembl"
              },
              "source": "drugcentral",
              "supportBatch": true
            }
          ],
          "treats": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CHEMBL.COMPOUND",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "drugcentral.drug_use.indication"
              },
              "predicate": "treats",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "chembl.molecule_chembl_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/treats"
              },
              "source": "drugcentral",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "chembl": {
            "CHEMBL.COMPOUND": "chembl.molecule_chembl_id"
          },
          "contraindication": {
            "SNOMED": "drugcentral.drug_use.contraindication.snomed_concept_id",
            "UMLS": "drugcentral.drug_use.contraindication.umls_cui",
            "name": "drugcentral.drug_use.contraindication.concept_name"
          },
          "drugbank": {
            "DRUGBANK": "drugbank.id"
          },
          "metabolizedBy": {
            "SYMBOL": "drugbank.enzymes.gene_name",
            "action": "drugbank.enzymes.actions",
            "function": "drugbank.enzymes.general_function",
            "name": "drugbank.enzymes.name"
          },
          "target-drugbank": {
            "SYMBOL": "drugbank.targets.gene_name",
            "action": "drugbank.targets.actions",
            "function": "drugbank.targets.general_function",
            "name": "drugbank.targets.name",
            "pubmed": "drugbank.targets.pmids"
          },
          "target-drugcentral": {
            "SYMBOL": "drugcentral.bioactivity.uniprot.gene_symbol",
            "action": "drugcentral.bioactivity.action_type",
            "name": "drugcentral.bioactivity.target_name"
          },
          "treats": {
            "SNOMED": "drugcentral.drug_use.indication.snomed_concept_id",
            "UMLS": "drugcentral.drug_use.indication.umls_cui",
            "name": "drugcentral.drug_use.indication.concept_name"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothings.io",
          "name": "Chunlei Wu",
          "x-id": "https://github.com/newgene",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the MyChem.info chem query web services.  Learn more about [MyChem.info](http://MyChem.info/)",
        "termsOfService": "http://MyChem.info/terms",
        "title": "MyChem.info API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/chem",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple chemical IDs separated by comma. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted. Type: string (list). Max: 1000.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Chem"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "A list of matching chemical objects"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "For a list of chemical IDs, return the matching chemical object",
              "tags": [
                "chemical"
              ]
            }
          }
        },
        {
          "path": "/chem/{chemid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Retrieve chemical objects based on ID - currently one of: [InChiKey](https://en.wikipedia.org/wiki/International_Chemical_Identifier#InChIKey), [DrugBank accession number](https://www.drugbank.ca/documentation), [ChEMBLID](https://www.ebi.ac.uk/chembl/faq#faq40), [ChEBI identifier](http://www.ebi.ac.uk/chebi/aboutChebiForward.do), [PubChem CID](https://pubchem.ncbi.nlm.nih.gov/search/help_search.html#Cid), [UNII](https://www.fda.gov/ForIndustry/DataStandards/SubstanceRegistrationSystem-UniqueIngredientIdentifierUNII/).  Supports JSONP and CORS as well.",
                  "example": "USNINKBPBVKHHZ-CYUUQNCZSA-L",
                  "in": "path",
                  "name": "chemid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Chem"
                      }
                    }
                  },
                  "description": "A matching chemical object"
                },
                "404": {
                  "description": "A response indicating an unknown chemical ID"
                }
              },
              "summary": "Retrieve chemical objects based on ID",
              "tags": [
                "chemical"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "MyChem.info metadata object"
                }
              },
              "summary": "Get metadata about the data available from MyChem.info",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/search",
                  "name": "search"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/prefix",
                  "name": "prefix"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "description": "MyChem.info metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from a MyChem.info chem object",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string.  The detailed query syntax can be found from our [docs](http://MyChem.info).  Examples: \"Fludara\", \"CHEMBI:63599\", \"DB01073\".",
                  "example": "Fludara",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/facet_size",
                  "name": "facet_size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/facets",
                  "name": "facets"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make chemical queries and return matching chemical hits. Supports JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms separated by comma (also \"+\" or whitespace).  Does not support wildcard queries",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "a comma-separated list of fields as the search \"scopes\" (fields to search through for query term). The available \"fields\" that can be passed to the \"scopes\" parameter are listed in the **/metadata/fields** endpoint.string Default: \"scopes=_id\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make batch chemical queries and return matching chemical hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/metabolizedBy"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/target"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/treats"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/contraindication"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/metabolize"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/targetedBy"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/treatedBy"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/contraindicatedBy"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://mychem.info/v1"
        },
        {
          "description": "Production server",
          "url": "http://mychem.info/v1"
        }
      ],
      "tags": [
        {
          "name": "chemical"
        },
        {
          "name": "drug"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIACf_zl4C_-1b63PbNhL_VzDKfUhyFqW0aW_qmc5cLKeNLvGjcX03re3RgCQkoSYJBiBtqxn977e74JvUw688evchEwkCFvv87WIBf-ypWEQ8lr1d1vvWGTrD3g7ryWiqYOBjz1NRwr2EPouQywCnzUUQ_9OVKpnLaGYcqXBJxEOBP47maRQIyf6T4uhNX_q0JEliszsYzGQyT13HU-EgEtczEQk7S6uAVmthYhUZ6QaC-eJKBMCd7i1hji-Mp2WcSBXhxH3lpaEA5nCAqSlL5oIdLEZzETrIPfPgE_uQCr1g18JlRugr6QnjMPZOcB2xUGnBuKvShJ1V1l08RVaB08rY4BkymQgdmqPpiSWUC9WYSZNotkysRFWeXh2P8bcroU0mxgvQN0qH7MEoDJ19bIr6OvL0Ik6Ez4618lOPJLYLkFqqg6qGw4VXcHP1Aom3CG4i00HlAkXis4zB3NY4R3o8sLvko75OZ_URHkXKWqo-TuapDyWaRybgidL18cLdLC8xT-aGvHKATNCnWBnrqDHXsCop9Pk3LaZI48kA_A7cC9zGDMpJA18lUykCv-rGxRhxsYkCTTXV9dnIVqttYFUW24HtdlY65EltZztCatICVGySPeUvinAGCvSZx3EAxkOrDG7619fXfVzZBz8Qkad84dMsg-rlVq0agzGRwipe-vb_hnOFaZDIGMI3dw423jfgZ8gz-rC7YCBJyB12qBIBYcsT5qVaA1sBhipTEfyf8EtBIS2jGCIU9mJpzBLFXgyHQxbyGxmm4Q7NAMhI2LUMAubC4lAmsIvDfl3EYpeZRIPPsKeBNMkzhx3wm12i4FCIwhTk2E7qLZeZwqQm2c9IwovlMvuBgCmT_ZvhcK0-_zCkjJr6ZCJCu7rTpnamGSBaECTk7HGtOQTJsgMEXzEUDNEPLO5heJRaV-4fwkvIA3sv78DuWiZfa630e2HA1qs4yxUGFvRpH2COR0yG1o3AxtZR0ScyHCAgTME3NHpr7yelGS8krLrTDlBPUgBxtP8q0XsVyCqR6oJ2IdAYfKRRf0nyzkQ3eDQEey_AWyAxtRTNXG5AFMDU8T7rV1waVAf8A61xNJrLt2JhUwxitYica3kpY-FL7ig9G-C3wRiMpCOyDA8mo2yfydgHehJwRT9BSmOg9GyHne0D2u7x6JJxD9Ib5hUWpaErdLkNxLaDoOzCNMfjgHeV3Ik0RvPXB3vvxvv1JcKVDvec9JK05QaDKf_wBP69HGZr9sYQmDlTReJsLXXlgPLsCD-CUa-59h1fIZHj1EX52Ki6d5y6lHwiD6hEAXyQc2emrgYGErc3H2D5MbGfnXkSBk9G0kdip4fjcV2Cqc9pIWw6jvwUAn0x2OcJP0l45AMXZnCSuga-eOK9mIGjaVLJycJArPZPIwmOOY5mgAcSxCwNgDsNAE_YSRrHSoPx_3VydHgM_u2z0dH7E8YNIFkQEMyIGx7GthY4PTkcH77dO97799s3b37vj347Pf3lcPT7yav-O1t14SRMbVU8t07aq4NTolOB0VLGaweafYrMB54ZuNy7rHGcj33lufO-iL8Fzndj50pIs2D-sivvrkTcNLqM1HVUBdAW1G6FamsBFVTKfQittVh6G2eywWAzQ6dvrbZRQzPVCjxns1BoQxE_i6ScY08HmGPs1yvwLI4nk6lWYfWwUdNMoYmGZnJHv4-CLOpV9ZGNfKJYjeF3eVNdn408WrxtY0ur2LuYNFvZsCxvHyQ7Soqmna2r3qKU-IUOpxavIZf8ikwBTRnkFREzC0jSN8yDKIbadqpSyC_EoUo1O4M0brqOq5iYXtukY3bZee-nIIVkx8-B-_Pe6A2k-vHu999-98MPdmR_b_hi-I9vz3vNbJWtWxOMH77UrHS_nDLlnkgmRv4pahTK0a2oGCgMapGK3z9RnN4rK6KcpiX5lrpram17faFj13bF719-HqcoXn8UssFcpOdrmcwJgs57c5mY8x7LTtaLr_iwdoAH9qJ6wDlSGCqIs6Nau6ZB4Z2tSugCc-3eF7j3Z-z23Cu67oVM94iuz9Yn-rC2S2Rjg9qmHU0i9pQHRkGg_B2iRGl2DT4Drgp4hEluX4GLRSphxvoQdoF8D851uf91dXkoPwGDnc0rbrftl5zk7Ye8UjAUubbqAr4sKWDuaTYhUfmPyVyrdDbHyKlICXxjoi8rjvPMAYCG7YXZZB9zg4U3kLNIUWxU2JRxLYg9mCZtK-T582a1-fw5E5EfKxklTtYM2xdTDtrfLYj-OJF-lv1b6frBul-bMfT46OTXdSj1Sx1F8wPKXxdNXUTMO2BqF2LSJYubiP7lzPSRCZJ-HWJ2TSfvclUAqOPvLdYAT-fihGusjG-7Sgu-tvjoXIXm1jzXf37vcBdB7yblnfSDkt5lYU1YS-DCuma5sp0qP5Y1ZQcSLlRKUIQ4BAei82JyDYIAnkJ0VZ5lb5xU770725zlN54ZygTdwSqJrwICARtY-X2gDROIssoZzmHjKYiDRxWbU857L_AgBLzkIJ9fJngqCHhsCF9BUs4M8AOQHeDFJJzVRJzRxDQVsEgQFpfAZKl0LNthKY6xXCqWX49R-pCzSE4XJEBGEjSReiCKeJbp1lUqEDxySjCfQqIU65RdLXs6lJ1RtNrOb3pbqgbVoWNg5tFilgZcgyTgTqhwPJPmt6w7eJGD5UGq-UzQGpAM4O9K-gKWWNQG96KddphRNvnBKpv_EvIuDc5BekgNkgFjTcEk6hrvgogCEF4nc1GobfCuytGuQ2gyBLXUqRDAucxNvUs4E6FUGRZnKTjH_jwKwHPETOiKpV4MmxdRK7ivH0M7RMhoV2S4W1FTCmGJMAWexcYR474vc7e0JQzmF3vtlq0lz7UVyHnGA4RV4fuzGfhJXtJd8SAVlL9QfQGoERwkqoSKL00c8EVZ0FRI2kApArtWBay47itUfggYeBulm218puzm3VbfT0G6Vug_w0iigi-QoUyqOi5gjHo_rTsvNMpTkxWWWSmMky15kMt0dJB4tKiiIsVWTr1ZRJYlpMVOO_ojYF4OnJUGWh1Cc9Y3WYjyxnYGKg5QmwxkzzerEwb4eZrg7XKZNOxziMK9dirXeJliqaOGRaNtnuGnwLef8S4K6uh6-itFxKlrBStOaJsEw8bIRpxquYg9m1xKyD4GihSqSsnkQ2o-ysJLwA-naUDnlpjPcBr4K7i0K-2lZLXkRnSqVgSrYY9icJ34WftnE85lDecO-Y9tqWIn5J4GMk9lQNmkduyybrTSWJu4LRvhG4yV9edXs5ufFuFs-FjMlrcGm5hdkwGzNxcbPSzLJFCd2gPM2kS4jukt8x61VVfwvDnv4WpKd8fWawQHW5B_n_f6mHUgCJAwICBKqrQv9A5TQFxfSzrhMV7_tSIgEYe8VyEAJ2693lZZ13idpZbF7zb_jIoXUPXOy0T6K01de-iCEy8qx__KbWP1uNuxBSQXLM06t6EjLT1KWF1pduzYbAbU385Aojiarjm2Np_RtJVCJqCPRYboTQNloTfnx3o58VPe63TpsSnARcfTnVyo1WqkY_sDPBKCEYjTW4uYKHXZHWH0Y8KD1fHXYUH4_fuXE6UnlitcCvznZitFLJmjFVXmagw0ZdxuJVnCmmoLXjqct2Pf5ix79WcP5XnR0A95HOOvNj6qDZPdxitJepAjoj8XEEYO_QDUTn472Dt61zkF38tO8nnTNPJysOucqXkwKSbBAr56uv3JPhazDYx-PqebaTtpLdP5lM1MV2duwXQ-PWcai4LUDQnL2rPiUPotwQCO4XAZtGTLxh1XKqR-JZNFRmjSLWnXgjSSEN6JFdwsQrB_W5KuhXbGhJyMGLatr1VM4ucJFGtO2eZyoLT1RFzh9vDo4PX-NitNpECFk5yAfXF0evDuZJvFaRiYiZfKnm06NXpvGwVorritGK31txemRaImUi0Y9t-f_rz36vBtzd2kb2Wnl3I2K-NN-ztndHRwfHR6uJ8_5XIDJ4QE6KWBmNjvyF4FR1od2jaKAHJlx5E9LLHKm3d6LXti6x2lccsdCo963684uraAoLfsuAxy8w94k9P7SHuYs-HFsle9S2mpYi44lEMEoBtvkJY571lH2v7RQKFoqqNDHiXSs39iYLvdxeO97E04vtPDDihdMGUq8yYQi_QwEtIAn04hR4FjuFRzGZVqr4ZrOGoPhTVGsphvsPEz_vVC7Yp5UoX-Nf3bZqpo9tWz5_baPiR5eGtn2PhVW_sOZqo5SDxfGCQbLCZYMmgAXzPByn-1Z9zbzM3Uap_DPJxxO5LKfWy8Bq4exOJNhPziDJ-XCQ9s-5xsFud5lj97DFfoyNb_Ey5Byb6xeh9O7Nx0-URmg8d1gOwik3bvqJEe1_xdF6L_d4KaE7RU9Kju0DYIcVS5eH6MzG8r4azP1_vmu-GD1ADt8-ldHKHDgA9RAWZtxM6M3va9Ry_1Ksm_rPIera5_HHu3j_afx963N99nLwEfpfZbDcgPa_xtux0P5A13ywOfzikeNB3YxkGlJHxoTPjUTrKxT_QFecgdqsUVXYRH84n2I6-_gm-sb7t9tR7SMNYn9JTlcvlfMzVde9NDAAA="
    },
    {
      "_id": "f339b28426e7bf72028f60feefcd7465",
      "_meta": {
        "ETag": "a0217cac9983d7279eb704c4709421a7821dde7aa580d6aa4d7aa166085f1972",
        "github_username": "kevinxin90",
        "slug": "go_cc",
        "timestamp": "2020-07-29T22:38:27.595044",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:34.480689",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/go_cc/smartapi.yaml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call. Type: string.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned chem object. If \"true\" or \"1\", all fields will be collapsed into a single level deep object (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Type: boolean. Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us with an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "facet_size": {
            "description": "the number of facet buckets to return in the response. Type: integer. Default: 10. Max: 1000.",
            "in": "query",
            "name": "facet_size",
            "schema": {
              "type": "integer"
            }
          },
          "facets": {
            "description": "a comma-separated list of fields to return facets on.  In addition to query hits, the fields notated in \"facets\" will be aggregated by value and bucklet counts will be displayed in the \"facets\" field of the response object. Type: string (list). Default: None. Max: 1000.",
            "in": "query",
            "name": "facets",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated list of fields (in dotfield notation) used to limit the fields returned from the matching chem hit(s). The supported field names can be found from any chem object or from the /metadata/fields endpoint. If \"fields=all\", all available fields will be returned. Type: string (list). Default: all. Max: 1000.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "format": {
            "description": "controls output format of server response, currently supports: \"json\", \"jsonld\", \"html\". Type: string. Default: json.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching chem hits to skip, starting from 0.  This can be useful for paging in combination with the \"size\" parameter. Type: integer. Default: None.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "prefix": {
            "description": "Pass a prefix string to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          "search": {
            "description": "Pass a search term to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          "size": {
            "description": "the maximum number of matching chem hits to return per batch. Type: integer. Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated list of fields to sort on. Prefix each with \"-\" for descending order, otherwise in ascending order. Default: sort by descending score.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "Geneset": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Geneset"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Geneset"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "has_part": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "_id"
              },
              "predicate": "has_part",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "part_of.go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/has_part"
              },
              "source": "Gene Ontology",
              "supportBatch": true
            }
          ],
          "has_subclass": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "children"
              },
              "predicate": "has_subclass",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/has_subclass"
              },
              "source": "Gene Ontology",
              "supportBatch": true
            }
          ],
          "part_of": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "part_of.go"
              },
              "predicate": "part_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/part_of"
              },
              "source": "Gene Ontology",
              "supportBatch": true
            }
          ],
          "subclass_of": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "parents"
              },
              "predicate": "subclass_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/subclass_of"
              },
              "source": "Gene Ontology",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "has_part": {
            "GO": "_id"
          },
          "has_subclass": {
            "GO": "children"
          },
          "part_of": {
            "GO": "part_of.go"
          },
          "subclass_of": {
            "GO": "parents"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothings.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the Gene Ontology Cellular Component query web services.",
        "termsOfService": "https://biothings.io/about",
        "title": "Gene Ontology Cellular Component API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/geneset",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple GO geneset IDs separated by comma. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted. Type: string (list). Max: 1000.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Geneset"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "A list of matching geneset objects"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "For a list of geneset IDs, return the matching geneset object",
              "tags": [
                "geneset"
              ]
            }
          }
        },
        {
          "path": "/geneset/{genesetid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Retrieve geneset objects based on GO geneset ID.  Supports JSONP and CORS as well.",
                  "example": "GO:0098791",
                  "in": "path",
                  "name": "genesetid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Geneset"
                      }
                    }
                  },
                  "description": "A matching geneset object"
                },
                "404": {
                  "description": "A response indicating an unknown geneset ID"
                }
              },
              "summary": "Retrieve geneset objects based on ID",
              "tags": [
                "geneset"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "DISEASES metadata object"
                }
              },
              "summary": "Get metadata about the data available from DISEASES",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/search",
                  "name": "search"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/prefix",
                  "name": "prefix"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "description": "DISEASES metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available object",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string.",
                  "example": "parents:\"GO:0098791\"",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/facet_size",
                  "name": "facet_size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/facets",
                  "name": "facets"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make queries and return matching geneset hits. Supports JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms separated by comma (also \"+\" or whitespace).  Does not support wildcard queries",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "a comma-separated list of fields as the search \"scopes\" (fields to search through for query term). The available \"fields\" that can be passed to the \"scopes\" parameter are listed in the **/metadata/fields** endpoint.string Default: \"scopes=_id\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make batch geneset queries and return matching geneset hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/has_subclass"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/subclass_of"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/part_of"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/has_part"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://biothings.ncats.io/go_cc"
        },
        {
          "description": "Production server",
          "url": "http://biothings.ncats.io/go_cc"
        }
      ],
      "tags": [
        {
          "name": "ontology"
        },
        {
          "name": "cellular component"
        },
        {
          "name": "geneset"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIAGT6IV8C_91abW_bOBL-K4TuPqS9xHZvi71rgAWu2-aKLLBJtilwBzRBQEu0zY0kqiQVxxfkv-_MkNSbZdlJdtvN9Usdii_z8swzw5HuIlWInBcyOmTRd6PJaBLts0jmMwUDd1GscstjS79FxmWK0xYiLf41lcouZD43I6lwSc4zgQ9_Ov7P0Qn77_EJDt4eyIRWWFuYw_F4Lu2inI5ilY2vxY3Mb2X-ZuImapXSei1MoXIjp6lgibgRKcino3uYkwgTa1lYqXKc-F7FZSZAPBxgasbsQrAPIhfsNLcqVfMVeyfStEy5Zu9UBpvCZPalFHrFlmLKjNA3MhZmhOdboTNzOjt3Y02Rm3qO-VSVluZL68TdeuDbs2NccCO08YK_AhujPigAjMLQ57uuckd5rFeFFQk70yopY9LRLcDdSp32y5jH3JKkc3UVx3jM2tbbNhzc7xJ153MvdPC58vq788JoHIwRB2O0n8_BdEZ0Bsk_7SGreW5SbpVuj1dSOrEKbheGgDoOO-MfhTL-B9ew0FYW_6sWM9zmL-NKPjOuJ40TZWdSpEkT3NUYCbJtB5pqmuv9yE6rXbg1FruB3U5WOuO2dbIbIUtpAVY29keVrKogR-_gb14UqYwppsa3B8vl8gBXHgA-RB6rRCQ0y8QLkMaZVWOAWimc7WXi_u-ALitTKwsI6Q-nzHuHHb83gECUGnE-XSFOMj5iJ8oKCGZuWVxqDYKlGLBM5fC_5deCAl3mRWkZnMbKglnFXk0mE5bxW5mV2T7NACKxbCnTlE1hcSYtnDJin1aFOGTGagAO20ulsS9G7Gd-e0g7OC6AKSizmxTd33uTSU3afyYdL-_v_QOiK6_93yeTQYv-asgcLQNKKzK3uterbqYZf6ijpZKQa80hWO572PEtQ92QFsHtMYZJZXc1_VXEllAYvX6EwINiHmmt9EdhwN-bBAsmAx8mdA7IxnMmMwcl8LIDK6LC0wHRZQno0IjY6N9KM14p2MDTPmxuS50TADYoHjUorOKgSzoiEMf4zv-QyT2pPBf9HNLR7aMAyEDO6pqaTbkBZYBxW_AfMXZeFoXSMOOn89OTMzBDwt6dfjxn3ADk05TwKG55Vvhsc3o4mbz55z_evHJZGseQ95qRXoketXFrdSnQjLUje4D-NWgx5mk65fF1c4dq7JkT61PJYDcK6I-rTXh3cf66j5Y3BmOZX-dqmTfAuhaE28EOiwZiDSzKE275YIA9BEsuHBxj9EJrs4u6peXx-dHb86NzFmSsTNmxwQdQu5pDxSExj_vzBlDFsYydaZWxsGfLJJUNOjYJCH-KaYzgOm4xgx_5SkFawHN521zvR_6wQNvqRWfVxzjTr6x92pNLus50SHxA-viF7iaOjbvMD0vRRIcXjRxwEQ3A_suflf6fRt4zHgt7ZeT_RGuHenSnXQzk3FZk4N9fKS6elH5QT7Om-Y6261ptd3shg7VOxb___AmTAmq4GHX9gCoLLqVdUNRfRAtpzUXE_P1m9YzL5Z_x0oSP4JJGJaYvktcKBlR5tFNNWpGeO_EST_yGN-0nxdST-OgJMfXN7uhfBm_oLiKoIdZzPWd7PDUKwuNvEBtwDVsCZgCgwEJwj2bvFSAsV5YZhyG8fycx10mAX9_9mrISCNjbOODu2INaknDtCynZULy62gbkcluBcHt-glXhoV1oVc4XGC8NLUHuT7BBndovPABgD9eFgGibClZwg3UtbOf4oTqo8imDHE3iwTTp7qAvX3ZrupcvmciTQsncjnwb4r2YcbD-YbXpD1cyuYj6mxG_W99hO3OenZ5_GuKmX9rcGer__18OnSJhVmy5K6P28SW1vKdWHFzPzQGKQLoP8WXf9PGCmytTTuMUsDnAOr1rw7orNXvoUkC8fcQylBaXAsM5P9UL1vPGXV1W9dDCSpUUlxiUjAPSwuRWPEKsZug37lMZTmq3AEe7XBy3ls11tuoRFXGuVUoR4VAWXlY40ADkcHMfPiN2PAN1sFp3BHsRQZ2_z0CWwHihpxmrNOWFIbIBTTkzIA_wV4pvTVgiROH3RM5OGQAS4V1HqdulZ9k-K3GMBa2Q0d1bFuRSOc_lbEUK-C3BEmUMqogX3rZTpVLB81HNbDPIGmLI2M0aoMfYfkdn7fAias3UYDoEBtKwFnN691AagBMaXJW6euWzj_1kzJWl5nNBa0Az4IIbmQhY4igM4EUn7TOjXCaAVS4ZWEKXBnCQHUqD24CzZuAStcSWNO0AGw_pXFUtW9DVuN30KE2OKLMpSIRZEeeyaRlfw7UAtfLM5PNRIMIQBYAcMRe64alXk24_fIP07ZtYjwp-74YOj8vwtRJuE6YAWew4ZzxJZICly-dIt67779cScl06vvAyQFhV2J_PASehvrnhaSmIzdF8KZgRAJI3QiWRpkj5qs7ujS1doFSB3UqJG946VCY_AQ58iNHNLpipG0gPtfceaLcW-i8wkqj6SWUmbdPGFY1Rn6vVeSdiA6fsGV9l-boQJ7vtQS8TKqwZmNvvwvNVkxUptsLu3Yqqrqccd7rRH4DzAnE2WnFtCg2ib_MQ5Y3dHFTdJrY5yBX7mxMG4Ly0-JKrThrufW0Fr_3GCzJvWINFJFZQqLr7lSbu98JmYJBO-qtVxKmDilXXlW2KYW9gK0-tQcQV6tcSso-xUCTgM3I58BFAR1YoARzOypSK-ILPcRrgFSA9lblLUo36E9mpWRFspj2KwSH1fQdkG8_5HmeP_meuVHETAtJA55lMKZu07iAORhudtU3auve6xVm-JbxZ3HB1govSHyVs3ajeJuxABvSvfrcizGcSKEpdNT-YCIeE3jHvUWdxg8zb8x6upnR35lAjOPiC8H0RHWDWgSDAjYEBUVOlE6H3mYLN9VLSdQfux62nDQVpc8h7jQ3g-qmHfeUbp0Oeuq-eu_zzofk1RrsTcSWTjd5uvXLHiZeN63Dj1Vbz-tdzBOQXrM56j6ErXgwFodlcbPac2L0ct9_iQ644nQ1c5Hpe6K_bhRxBP6s8Ec1S5Qg4iOSwTiLV7xr6TNnV4bLnI4Kg12ZL0l329_liAUYgYB-spVXquj_U6KHl6eZA7PEjPP_-9ZXSV04qXAoqBOfVWtbC0YqmcC0BujrutpKc4by1gyw9EO45tzvLvZHa0HEAzzbbCO5A_Lzm3DGT0rjVvmMFGA5TEvdFAtEBODy3MsaR8A3cu_qrL4xcV8w8bm2nMVDVthEQfJpABRT51EvNHff5XlOlnn7qNPzAZmh05xT7PLm8j5rtSOId3HshOJAnWXlr87XZnrvKYD664HC4UxLmH_j5a50dYN5Sx-ufHJK4rvb7EfOZf9NHZmt2eJ6TV_27znWnNhV6hj7tdNwe49LQeXtm7kSZR3O17tGgzzP0ZqMJ-hhPVs3Q5-TKYOw1qiVNHu_EDkS-Cdu6zvQjnFmn1u6-fcn1Dt3QTV1tpg5TWjxYBX7jactmNZ7CDPIW_PsN4-6ueOQvAAA="
    },
    {
      "_id": "4652c55b62f5c20dd35acb3141b0a376",
      "_meta": {
        "ETag": "638ccc79344185a185c5a724dd326439d0a17ddbcfc70e7acc75280e074e1b3c",
        "github_username": "kevinxin90",
        "timestamp": "2020-05-27T16:55:12.354211",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:59.487808",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/pharos/smartapi.yaml"
      },
      "_score": 0.8,
      "components": {
        "x-bte-kgs-operations": {
          "chemical2disease": [
            {
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "chebi": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2disease-doid"
              },
              "source": "pharos",
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "chebi": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2disease-mondo"
              },
              "source": "pharos",
              "supportBatch": false
            }
          ],
          "chemical2gene": [
            {
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "chebi": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2gene"
              },
              "source": "pharos",
              "supportBatch": false
            }
          ],
          "disease2chemical": [
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "CHEMBL.COMPOUND",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "mondo": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2chemical-chembl"
              },
              "source": "pharos",
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "mondo": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2chemical-chebi"
              },
              "source": "pharos",
              "supportBatch": false
            }
          ],
          "disease2gene": [
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "mondo": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2gene"
              },
              "source": "pharos",
              "supportBatch": false
            }
          ],
          "gene2chemical": [
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "CHEMBL.COMPOUND",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "geneid": "NCBIGene:{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2chemical-chembl"
              },
              "source": "pharos",
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "geneid": "NCBIGene:{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2chemical-chebi"
              },
              "source": "pharos",
              "supportBatch": false
            }
          ],
          "gene2disease": [
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "geneid": "NCBIGene:{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2disease-doid"
              },
              "source": "pharos",
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "geneid": "NCBIGene:{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2disease-mondo"
              },
              "source": "pharos",
              "supportBatch": false
            }
          ]
        },
        "x-bte-response-mapping": {
          "chemical2disease-doid": {
            "DOID": "associated_with.doid"
          },
          "chemical2disease-mondo": {
            "MONDO": "associated_with.mondo"
          },
          "chemical2gene": {
            "NCBIGene": "associated_with.ncbigene"
          },
          "disease2chemical-chebi": {
            "CHEBI": "associated_with.chebi"
          },
          "disease2chemical-chembl": {
            "CHEMBL.COMPOUND": "associated_with.chembl"
          },
          "disease2gene": {
            "NCBIGene": "associated_with.ncbigene"
          },
          "gene2chemical-chebi": {
            "CHEBI": "associated_with.chebi"
          },
          "gene2chemical-chembl": {
            "CHEMBL.COMPOUND": "associated_with.chembl"
          },
          "gene2disease-doid": {
            "DOID": "associated_with.doid"
          },
          "gene2disease-mondo": {
            "MONDO": "associated_with.mondo"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@renci.org",
          "name": "Chris B."
        },
        "description": "Scibite",
        "termsOfService": "https://automat.renci.org",
        "title": "Automat PHAROS API",
        "version": "2.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/gene/chemical_substance/{geneid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put NCBIGene ID here, e.g. 1017",
                  "example": "NCBIGene:1017",
                  "in": "path",
                  "name": "geneid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "gene2chemical",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene2chemical"
                }
              ]
            }
          }
        },
        {
          "path": "/gene/disease/{geneid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put NCBIGene ID here, e.g. 1017",
                  "example": "NCBIGene:1017",
                  "in": "path",
                  "name": "geneid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "gene2disease",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene2disease"
                }
              ]
            }
          }
        },
        {
          "path": "/chemical_substance/disease/{chebi}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put CHEBI ID here, e.g. \"CHEBI:661\"",
                  "example": "CHEBI:661",
                  "in": "path",
                  "name": "chebi",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "chemical2disease",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical2disease"
                }
              ]
            }
          }
        },
        {
          "path": "/chemical_substance/gene/{chebi}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put CHEBI ID here, e.g. \"CHEBI:661\"",
                  "example": "CHEBI:661",
                  "in": "path",
                  "name": "chebi",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "chemical2gene",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical2gene"
                }
              ]
            }
          }
        },
        {
          "path": "/disease/gene/{mondo}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put DOID ID here, e.g. \"DOID:123\"",
                  "example": "DOID:123",
                  "in": "path",
                  "name": "mondo",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "disease2gene",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease2gene"
                }
              ]
            }
          }
        },
        {
          "path": "/disease/chemical_substance/{mondo}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put DOID ID here, e.g. \"DOID:123\"",
                  "example": "DOID:123",
                  "in": "path",
                  "name": "mondo",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "disease2chemical",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease2chemical"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "https://automat.renci.org/pharos"
        }
      ],
      "tags": [
        {
          "name": "drug"
        },
        {
          "name": "gene"
        },
        {
          "name": "disease"
        },
        {
          "name": "automat"
        },
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIAHCbzl4C_-1ZW0_bMBT-K1G2R5q0RWJSn9bLBJUGrVbtCRByE9N4S-zMdhgo6n-fb2kbk9Ab0CHghfb43PJ95_icQO6SFGKQIrfjuMde02u6R46L8C0RgtwNCOYg4OozTACKpVoE4_QrhThAHqEzqY9BAuVJP6KIOT3PnQthCFlAUcoRwfJsEqAp4lCqc0gTNrqdQHqHAmUYcZ6yju-DjJMEcK_knSMeK62uPnXGZ90fo4nTHQ_l8R2kzMRoi_RlaCY8C6kQXeZ2HmNKwiyQ3xytJn1kNH4yDT-NACXMnV_LfMDMuC6eO6TZTAZeSmYQw7IkRAwCZglNoLKQU4BZDDihOl4KeMQUBb506wcRTFAA4huWTRkHOIB-Lg9QOFdaM6gJY1mSAPpQpNMu7Fzlk4povBakjDsX_d7wVNg5w4ETQQqPHOjNPKfVbH2RHuA9SFLNS6HZKc6QciLzXq0OnaOUUPgnQxSGQsppBiVjMjmg0uYPqVJnnCIsYFUYUMhSghnUOLSbTfXbyrqLHcAYCRBQ9JLpLyhqdy4r4r4x5bDxe8Yaot6pOjdP_pnCW2n8yQ9IImJAzJlfpe6XQZxfK8eaEkPuZjwUlfBBw-40LLrJsFDREwtOxNkU1VJSWG5JS__sW29ocXLlKmnn5KR15VrkLE7qiVF5vl1eHgH5BDeqaTYlRt2lH6zsyYqeSIaSojc0DwnBIanlwehuQ8NgJCiwWZDCTqt9_IiE4qCeA5Xg2-WghKBNQdU034yQLef5BymVpJQGunS-NFRZ1cTKrZ1KRUc4zbjJBIWrM9lVW2kCMEeBlJ_qUhBSknHbSNxK573vXn90Ph79vBjYtn0Tc1IUjFkTBQVCzBXcFIoFEoY3XDHESEb1om32WLti8mIrWF0jcv04l83rud6qszQllPcADyKheAtiBlfIvElAmkqOpbsneCj0G0a_vFc15IdprHh-TkB7w3cHoxhbut1KG9NzFqq8JGyDwWL6v3kwDWSNkIgsnrUgz0cXg9E7QE7PCF2F5U2kpgy36dQKXNeTsR-uuquExmuhaa1vZSDXtPSeWL5wcx8Oyo3aek_wXrrBD4_eamuXFtyaalyPyAH6WT_EK8JYfhUogbduldwJwEOskgcDddMdclckX2mH_C_w08vj8mXLNnr8CtQo7qTcYCX_vm1e4MTj_0U88ozjI8etXPqNbaliq70oeq3VtlEAlxuGK0zNrWVbqlEgDdXQq7DTs6Ji-G4XtHoGbRfYXLL58nKsMMPBFBX_g7Cv5x0s9yeqpsY2qRbx8w99uHpqpxoAAA=="
    },
    {
      "_id": "a7f784626a426d054885a5f33f17d3f8",
      "_meta": {
        "ETag": "2799c2006e3a48520453c7dbdbd055a034f4272a074a357b7bc48dc566784c85",
        "github_username": "kevinxin90",
        "timestamp": "2020-09-10T02:29:42.058814",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:42.571973",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/DISEASES/smartapi.yaml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call. Type: string.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned chem object. If \"true\" or \"1\", all fields will be collapsed into a single level deep object (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Type: boolean. Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us with an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "facet_size": {
            "description": "the number of facet buckets to return in the response. Type: integer. Default: 10. Max: 1000.",
            "in": "query",
            "name": "facet_size",
            "schema": {
              "type": "integer"
            }
          },
          "facets": {
            "description": "a comma-separated list of fields to return facets on.  In addition to query hits, the fields notated in \"facets\" will be aggregated by value and bucklet counts will be displayed in the \"facets\" field of the response object. Type: string (list). Default: None. Max: 1000.",
            "in": "query",
            "name": "facets",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated list of fields (in dotfield notation) used to limit the fields returned from the matching chem hit(s). The supported field names can be found from any chem object or from the /metadata/fields endpoint. If \"fields=all\", all available fields will be returned. Type: string (list). Default: all. Max: 1000.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "format": {
            "description": "controls output format of server response, currently supports: \"json\", \"jsonld\", \"html\". Type: string. Default: json.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching chem hits to skip, starting from 0.  This can be useful for paging in combination with the \"size\" parameter. Type: integer. Default: None.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "prefix": {
            "description": "Pass a prefix string to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          "search": {
            "description": "Pass a search term to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          "size": {
            "description": "the maximum number of matching chem hits to return per batch. Type: integer. Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated list of fields to sort on. Prefix each with \"-\" for descending order, otherwise in ascending order. Default: sort by descending score.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "Disease": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Disease"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Disease"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "disease-gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "SYMBOL",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "DISEASES.associatedWith"
              },
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "DISEASES.doid"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease-gene"
              },
              "source": "DISEASES",
              "supportBatch": true
            }
          ],
          "gene-disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "SYMBOL",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "DISEASES.doid",
                "size": "250"
              },
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "DISEASES.associatedWith.symbol"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene-disease"
              },
              "source": "DISEASES",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "disease-gene": {
            "SYMBOL": "DISEASES.associatedWith.symbol",
            "category": "DISEASES.associatedWith.category"
          },
          "gene-disease": {
            "DOID": "DISEASES.doid"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothings.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the DISEASES query web services.",
        "termsOfService": "https://biothings.io/about",
        "title": "DISEASES API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/disease",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple MONDO Disease IDs separated by comma. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted. Type: string (list). Max: 1000.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Disease"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "A list of matching disease objects"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "For a list of disease IDs, return the matching disease object",
              "tags": [
                "disease"
              ]
            }
          }
        },
        {
          "path": "/disease/{diseaseid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Retrieve disease objects based on MONDO disease ID  Supports JSONP and CORS as well.",
                  "example": "MONDO:0016537",
                  "in": "path",
                  "name": "diseaseid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Disease"
                      }
                    }
                  },
                  "description": "A matching disease object"
                },
                "404": {
                  "description": "A response indicating an unknown disease ID"
                }
              },
              "summary": "Retrieve disease objects based on ID",
              "tags": [
                "disease"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "DISEASES metadata object"
                }
              },
              "summary": "Get metadata about the data available from DISEASES",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/search",
                  "name": "search"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/prefix",
                  "name": "prefix"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "description": "DISEASES metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from a DISEASES disease object",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string.",
                  "example": "DISEASES.doid:\"DOID:0110389\"",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/facet_size",
                  "name": "facet_size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/facets",
                  "name": "facets"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make queries and return matching disease hits. Supports JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms separated by comma (also \"+\" or whitespace).  Does not support wildcard queries",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "a comma-separated list of fields as the search \"scopes\" (fields to search through for query term). The available \"fields\" that can be passed to the \"scopes\" parameter are listed in the **/metadata/fields** endpoint.string Default: \"scopes=_id\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with the \"hits\" property",
                  "x-bte-response-mapping": {
                    "$ref": "#/components/x-bte-response-mapping/query-post"
                  }
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make batch disease queries and return matching disease hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease-gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene-disease"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://pending.biothings.io/DISEASES"
        },
        {
          "description": "Production server",
          "url": "http://pending.biothings.io/DISEASES"
        }
      ],
      "tags": [
        {
          "name": "gene"
        },
        {
          "name": "disease"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIAJaPWV8C_9Vaa2_bRhb9KwPufnCy1sNN2t0aKLDJOlu4aGw3DtBdRIYxIkfS1BSHmRna1hr673sffEoUKcdtmuRL5OE87uPcc-9c8iEwqUpkqoNjEbwYjofj4FAEOpkZGHgIQpN4GXr6rZZSxzhtoeL0n1Nt_EInczfUBpckcqnw4U-nv745E_85PcPB-4GOaIX3qTsejebaL7LpMDTL0Y261cm9Tr4f80RrYlpvlUtN4vQ0ViJStyoG-WywhjmRcqHVqdcmwYknJsyWCsTDAWFmwi-UODm9fPPq8s2l-JgpuxJ3aiqcsrc6VG6I53hll-58dsljddHq-ozk1GSe5mvPYpUbv7o4xQe3yrpckCOwGcqHB8EoDH142BT2TRLaVepVJC6sibKQZOYFuFtm47os4JEIRBk2ZCokwLO29u_btX_TK9RWznPxC2_OVaL4wGIk0k5JtzEok8SwI5rj5IXmkLcycbH0xjbHS7FYlFT6hSPYjYoT8Y_UOAZjKi0s9KW9_2rVDLf5ywjABQACYLhRNWkUGT_TKo7qUC3HSJC-HWiqq6_PR_ZazcFTW8wD-51s7FL6xsk8QpayCqzs_GsTrcqQhR3ot0zTWIfkmNH94O7uboArBwAMlYQmUhHNcuECpGGzWgw3rxXbXkf8_wballnsdQoB-vb87ORcnLCDxOmJA_Sh4Aj06UqAOks5FGfGK4hO6UWYWQuyxRiZwiTwv5c3iiJXJ2nmBRwoslR4I47G47FYynu9zJaHNAOYwYs7HcdiCouX2sMpQ_F-lapj4bwF7IiDWDv_bCjeyvtj2oGDHqag2DwpWK9zq2lLBvhAal6t1_kD4p_cAN-Mx51G_c2RRRo21F4teXWrY3mmG51UgVRKKK2VEC_rFrp7JVA35DnwfIiRIvLAEGb6mwo9ATF4-QkCd4r5xlpj3ykHLt8lWGEy8GFE54BsMhF6yWgCLzNeERU5IxBfZoAOi6AN_m2skKWCUYWnQ9jcZzYhAOxQPKgxV0lPV3REwR2jh_yHjtak8ly108iGbu8UQAaS0KapxRT-iADBeQRUEgtxmaWpsTDnp8vzswswRCT-df7uUkgHoI9jQqS6l8uUEwttcDweH3337Yu_c-7FYeS_BlcV8gdN8HqbKbRl5c0WtH8OegxlHE9leFPfoRz7ygn2qYywHw-0B9cu0HOwv2yj550RmSU3iblLanDdisR-xMOijoADi8pIetkZZY_BEocD00YrtHa7aLNgLEq4QsbSlBs2-FH5ag6VgkQ__OctoEpicTqzZlnWmw2TlDbYsEmB8KeYBoxtwwYz5COfKUhTeK7v6-vzkT8s0Hq9yFb9FGfmKzd8KqtbREei2XQyI_QRueUXuqEwS28mhUKAYWR0dDwJTs5PT47HR0fjF__4fhJ0hMXHLzU9PI3cZzJU_trp_6nGDtXoXrs4SMuNyMG_P1PcPCk9oZ5uS_M9bbdptf3thdHQOBX__vITKgVWd8XK3YEyS95pvyBWmAQL7d0kEPk9aPUV19Rv8WaFj-AyR1VoXklvFRSo8nCvsrUkPz7xCk_8E2_kT4qpJ_HRE2LqT7vLf-y8yXNEUHus5Q4vDmTsDITH3yA24K52B5gBgAILwWVbnBhAWGK8cIwhvKRHobRRAb-2SzhlJRCwtcEg-dhBJUlxNyxStqN45doH5OKtQLiDfII3xUO_sCabLzBealqC3O9hgyr1T3IAwB7cqoBomyqRSod1L2zH_FAeVPpUSKtIPJim-aL6_Plmzff8uVBJlBqd-GHeqzhRMwnWPy43_eFaR5OgvWPxuzUn-pnz4vzyfRc3_dLkzuJ-0MGh1N-dejUoFg2WICYqtlOi9vlcZA2IctZfOTNPkYZLDt6Xp9tYuDTvzdwNUATSvYuF26YXrZJB1fLdfy2uGZSd4Su2XLVoOz88VOVTS_ivTEbxh8EH5fiknNyIO4jJJVpS5ikLJzX7gcN9LpC95XGVlVpEReRZExPy2e_Fqwh2I4AAN8_DZChOZ6AOVuVMpJPgaAISgCwFsxUNztDEsUwdkQpoKoUDeYCnYnwnIiKl0nxP5OZYJIoIqIpG3qVl2aHIHMEq10oUrXviTD1P9GxFCuRbgiWyEFRRz3LbTo2JlUyGFYPNIDuoLmPXc32LsfMd2drFa6YtU4PpEBhIt1bNs1ha0ATghAY3mS1f9BxicxlzYmblXNEa0Ayi81ZHCpYwVQG86KRD4QwzPqxi0veELgvgIDtkDrcBZ83AJeYO-9O0A2zcpXNZnfSgq3aLaVGaHJEtpyARZj-cK6ZZeAPlP2qVc0WedwpqKqIAkKPmytY8dTTebI7vkL5542pRId-7psOnZfJKCd5EGECWOE2EjCJdwJLzNhIgvwrI1xJyOe1OchkgrErsz-eAk6KOuZVxpohf0XwxmBEAktRCBegrjeWqyuK1LTlQysBupL4dryBKk58BBz7G6G4fzFSNpMfa-wC02wr9ZxhJVOXEeql93cYljVFvpNGGJ2IDpxy4vJrK6z-czNuDXq6opGZg7nwXmazqrEixVey-WTlVdRNzJ4_-AJxXEGetfdOk0EL0Pg9R3tjPQeWtoc9BXNTvThiA88zjG68qafCL2xJeh7W3ZblhHRaLWNOg6vwrjvj3wi_BIBvpr1IRp3YqVl5L-hTDHkAvT21BhAvyGw3Zx3lpqWgilwMfAXR0iRLA4SyLqVhP5RynAV4B0lOdcJKq1ZnITvWKYDftUQx2qZ93Ovp4Lu91tuh_waUKTyiQBjrPdEzZpHHXYBjtdFaftFUPtsdZeWt4t7jFFQkuRH-UsFXDuk_YjgyYvwfuRVieSaAw5fq6MxF2Cb1n3qMO4g6Z-_MerqZ0d8GoURJ8QfieBAPMOhAEuDF_uAEsGSl7KAxsbu80XUDgHtx4WlOQNoe8V9sArpm221d5g7TLU-vyOeefk_rXGc2Ow7WOdnq78f4dJ17Vrr21V1z1C1nLEZBfsDprPYYuXSEUhG53sdly4uYluPlKH3LF-azjatXydn_bLuQI-lnmiWAWGybgQiTGOolUvVtoM-WmDlctXxQUeu22JN0uf5_PF2AEAvbRWnpjbtpDjR56Ge8OxBY_wvPvXl4be81S4VJQoXBepWUlHK2oC9cQYFPH_VaSM9hbe8jSAuGWczdn8RuoHT2Ah6BxsecD8VubS2YmY3GrQ2YFGM77BvzdHr53IkIAlydehzRWXvPhARcxjTWX_337-vznzVU_UleBv-xq9AHKUrZ66QW5yYQaSfNXIMMgT7zUbMk_EYzx4bWnDw8d3PPCxluzoKWTOi1-YBs0eGBVP4yv1kG9Edl88UYnL5QEYiUP9DZgmXKoVHuN6ad6AVcUddef2vlqdmfIkI2mS5dfW5zU69htLPT69bEu6gcCOaEqDYJvvuUvLZ_q3CbAhm61nJr4S_J2s5_GJNLRQt2I8IfCV_06Y5sOxuaGO5O7Zpdz1tu4e2AwbQcP_Ps_FCpGYF4sAAA="
    },
    {
      "_id": "59dce17363dce279d389100834e43648",
      "_meta": {
        "ETag": "7896a8ffb8ec4c0ba55ef30ca7755cae5eb14d217ec38a2026fa3f6501a03f89",
        "github_username": "newgene",
        "slug": "mygene",
        "timestamp": "2020-08-15T00:00:12.798307",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:18.492533",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/mygene.info/openapi_full.yml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned fields when passed \"fields\" parameter contains dot notation, e.g. \"fields=refseq.rna\". If \"True\" or \"1\", the returned data object contains a single \"refseq.rna\" field, otherwise (\"False\" or \"0\"), a single \"refseq\" field with a sub-field of \"rna\". Default: True.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated fields to limit the fields returned from the matching gene hits. The supported field names can be found from any gene object (e.g. http://mygene.info/v3/gene/1017). Note that it supports dot notation as well, e.g., you can pass \"refseq.rna\". If \"fields=all\", all available fields will be returned. Default: \"symbol,name,taxid,entrezgene,ensemblgene\".",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching gene hits to skip, starting from 0. Combining with \"size\" parameter, this can be useful for paging. Default: 0.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "size": {
            "description": "the maximum number of matching gene hits to return (with a cap of 1000 at the moment). Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated fields to sort on. Prefix with \"-\" for descending order, otherwise in ascending order. Default: sort by matching scores in decending order.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          "species": {
            "description": "can be used to limit the gene hits from given species. You can use \"common names\" for nine common species (human, mouse, rat, fruitfly, nematode, zebrafish, thale-cress, frog and pig). All other species, you can provide their taxonomy ids. Multiple species can be passed using comma as a separator. Default: human,mouse,rat.",
            "in": "query",
            "name": "species",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "Gene": {
            "properties": {
              "AnimalQTLdb": {
                "type": "string"
              },
              "FLYBASE": {
                "type": "string"
              },
              "HGNC": {
                "type": "string"
              },
              "HPRD": {
                "type": "string"
              },
              "MGI": {
                "type": "string"
              },
              "MIM": {
                "type": "string"
              },
              "RATMAP": {
                "type": "string"
              },
              "RGD": {
                "type": "string"
              },
              "TAIR": {
                "type": "string"
              },
              "Vega": {
                "type": "string"
              },
              "WormBase": {
                "type": "string"
              },
              "Xenbase": {
                "type": "string"
              },
              "ZFIN": {
                "type": "string"
              },
              "_id": {
                "type": "string"
              },
              "accession": {
                "type": "object"
              },
              "aliase": {
                "type": "string"
              },
              "ec": {
                "type": "string"
              },
              "ensembl": {
                "type": "object"
              },
              "entrezgene": {
                "format": "int64",
                "type": "integer"
              },
              "generif": {
                "properties": {
                  "pubmed": {
                    "$ref": "#/components/schemas/int64_or_array"
                  },
                  "text": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "genomic_pos": {
                "type": "object"
              },
              "go": {
                "type": "object"
              },
              "homologene": {
                "type": "object"
              },
              "interpro": {
                "type": "object"
              },
              "locus_tag": {
                "type": "string"
              },
              "map_location": {
                "type": "string"
              },
              "miRBase": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "other_names": {
                "$ref": "#/components/schemas/string_or_array"
              },
              "pathway": {
                "type": "object"
              },
              "pdb": {
                "$ref": "#/components/schemas/string_or_array"
              },
              "pfam": {
                "type": "string"
              },
              "pharmgkb": {
                "type": "string"
              },
              "pid": {
                "type": "string"
              },
              "pir": {
                "type": "string"
              },
              "prosite": {
                "type": "string"
              },
              "reagent": {
                "type": "object"
              },
              "refseq": {
                "type": "object"
              },
              "reporter": {
                "type": "object"
              },
              "summary": {
                "type": "string"
              },
              "symbol": {
                "type": "string"
              },
              "taxid": {
                "format": "int32",
                "type": "integer"
              },
              "type_of_gene": {
                "type": "string"
              },
              "umls": {
                "type": "object"
              },
              "unigene": {
                "type": "string"
              },
              "uniprot": {
                "properties": {
                  "Swiss-Prot": {
                    "$ref": "#/components/schemas/string_or_array"
                  },
                  "TrEMBL": {
                    "$ref": "#/components/schemas/string_or_array"
                  }
                },
                "type": "object"
              },
              "wikipedia": {
                "properties": {
                  "url_stub": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "required": [
              "_id",
              "taxid"
            ],
            "type": "object"
          },
          "MinimalGene": {
            "properties": {
              "_id": {
                "type": "string"
              },
              "entrezgene": {
                "format": "int64",
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "symbol": {
                "type": "string"
              },
              "taxid": {
                "format": "int32",
                "type": "integer"
              }
            },
            "required": [
              "_id",
              "taxid"
            ],
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MinimalGene"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Gene"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "enablesMF": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "parameters": {
                "fields": "go.MF"
              },
              "predicate": "functional_association",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "entrezgene"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/functional_association_mf"
              },
              "source": "entrez",
              "supportBatch": true
            }
          ],
          "hasGeneProduct": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "ENSEMBL",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "UNIPROTKB",
                  "semantic": "Protein"
                }
              ],
              "parameters": {
                "fields": "uniprot.Swiss-Prot"
              },
              "predicate": "has_gene_product",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "ensembl.gene"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/has_gene_product"
              },
              "supportBatch": true
            },
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "ENSEMBL",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "ENSEMBL",
                  "semantic": "Protein"
                }
              ],
              "parameters": {
                "fields": "ensembl.protein"
              },
              "predicate": "has_gene_product",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "ensembl.gene"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/has_gene_product"
              },
              "supportBatch": true
            }
          ],
          "hasHomolog": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "MGI",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "pantherdb.ortholog"
              },
              "predicate": "homologous_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "entrezgene"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/homologous_to"
              },
              "supportBatch": true
            }
          ],
          "hasTranscript": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "ENSEMBL",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "ENSEMBL",
                  "semantic": "Transcript"
                }
              ],
              "parameters": {
                "fields": "ensembl.transcript"
              },
              "predicate": "gene_to_transcript_relationship",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "ensembl.gene"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene_to_transcript_relationship"
              },
              "supportBatch": true
            }
          ],
          "involvedInBP": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "go.BP"
              },
              "predicate": "functional_association",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "entrezgene"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/functional_association_bp"
              },
              "source": "entrez",
              "supportBatch": true
            }
          ],
          "involvedInCC": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "go.CC"
              },
              "predicate": "functional_association",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "entrezgene"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/functional_association_cc"
              },
              "source": "entrez",
              "supportBatch": true
            }
          ],
          "involvedInPathway": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "WIKIPATHWAYS",
                  "semantic": "Pathway"
                }
              ],
              "parameters": {
                "fields": "pathway.wikipathways"
              },
              "predicate": "functional_association",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "entrezgene"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/functional_association_wikipathways"
              },
              "source": "CPDB",
              "supportBatch": true
            },
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "REACT",
                  "semantic": "Pathway"
                }
              ],
              "parameters": {
                "fields": "pathway.reactome",
                "species": "human"
              },
              "predicate": "functional_association",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "entrezgene"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/functional_association_reactome"
              },
              "source": "CPDB",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "ENSEMBL": "ensembl.gene",
          "HGNC": "HGNC",
          "NCBIGene": "entrezgene",
          "OMIM": "MIM",
          "PHARMGKB": "pharmgkb",
          "PHAROS": "pahros.target_id",
          "SYMBOL": "symbol",
          "UMLS": "umls.cui",
          "description": "summary",
          "functional_association_bp": {
            "GO": "go.BP.id",
            "evidence": "go.BP.evidence",
            "pubmed": "go.BP.pubmed",
            "term": "go.BP.term"
          },
          "functional_association_cc": {
            "GO": "go.CC.id",
            "evidence": "go.CC.evidence",
            "pubmed": "go.CC.pubmed",
            "term": "go.CC.term"
          },
          "functional_association_mf": {
            "GO": "go.MF.id",
            "evidence": "go.MF.evidence",
            "pubmed": "go.MF.pubmed",
            "term": "go.MF.term"
          },
          "functional_association_reactome": {
            "REACT": "pathway.reactome.id",
            "name": "pathway.reactome.name"
          },
          "functional_association_wikipathways": {
            "WIKIPATHWAYS": "pathway.wikipathways.id",
            "name": "pathway.wikipathways.name"
          },
          "gene_to_transcript_relationship": {
            "ENSEMBL": "ensembl.transcript"
          },
          "has_gene_product": {
            "ENSEMBL": "ensembl.protein",
            "UNIPROTKB": "uniprot.Swiss-Prot"
          },
          "homologous_to": {
            "ENSEMBL": "pantherdb.ortholog.Ensembl",
            "FlyBase": "pantherdb.ortholog.FlyBase",
            "HGNC": "pantherdb.ortholog.HGNC",
            "MGI": "pantherdb.ortholog.MGI",
            "POMBASE": "pantherdb.ortholog.PomBase",
            "RGD": "pantherdb.ortholog.RGD",
            "SGD": "pantherdb.ortholog.SGD",
            "TAIR": "pantherdb.ortholog.TAIR",
            "ZFIN": "pantherdb.ortholog.ZFIN",
            "dictyBase": "pantherdb.ortholog.dictyBase",
            "inTaxon": "pantherdb.ortholog.taxid"
          },
          "inTaxon": "taxid",
          "name": [
            "name",
            "other_names"
          ]
        }
      },
      "info": {
        "contact": {
          "email": "help@mygene.info",
          "name": "Chunlei Wu",
          "x-id": "https://github.com/newgene",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the MyGene.info Gene Query web services. Learn more about [MyGene.info](http://mygene.info/)",
        "termsOfService": "http://mygene.info/terms/",
        "title": "MyGene.info API",
        "version": "3.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/gene",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/species",
                  "name": "species"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple geneids seperated by comma, e.g., \"ids=1017,1018\" or \"ids=695,ENSG00000123374\". Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Gene"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "a list of matching gene objects"
                }
              },
              "summary": "For a list of gene ids, return the matching gene objects",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/gene/{geneid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Entrez or Ensembl gene id, e.g., 1017, ENSG00000170248. A retired Entrez Gene id works too if it is replaced by a new one, e.g., 245794",
                  "example": "1017",
                  "in": "path",
                  "name": "geneid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Gene"
                      }
                    }
                  },
                  "description": "A matching gene object"
                }
              },
              "summary": "Retrieve gene annotation object based on Entrez or Ensembl gene id, support JSONP and CORS as well.",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "MyGene.info metadata object"
                }
              },
              "summary": "Get metadata about the data available from MyGene.info."
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Pass a search term to filter the available fields, e.g. \"search=clinvar\".",
                  "in": "query",
                  "name": "search",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Pass a prefix string to filter the available fields, e.g. \"prefix=refseq\".",
                  "in": "query",
                  "name": "prefix",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "MyGene.info metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from MyGene.info."
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string. Examples \"CDK2\", \"NM_052827\", \"204639_at\", \"chr1:151,073,054-151,383,976\", \"hg19.chr1:151073054-151383976\". The detailed query syntax can be found from our [docs](http://docs.mygene.info/en/latest/doc/query_service.html).",
                  "example": "CDK2",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/species",
                  "name": "species"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "description": "a single field or comma-separated fields to return facets, for example, \"facets=taxid\", \"facets=taxid,type_of_gene\".",
                  "in": "query",
                  "name": "facets",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "relevant when faceting on species (i.e., \u201cfacets=taxid\u201d are passed). It\u2019s used to pass species filter without changing the scope of faceting, so that the returned facet counts won\u2019t change. Either species name or taxonomy id can be used, just like \u201cspecies\u201d parameter.",
                  "in": "query",
                  "name": "species_facet_filter",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "when passed as \u201cTrue\u201d or \u201c1\u201d, the query returns only the hits with valid Entrez gene ids. Default: False.",
                  "in": "query",
                  "name": "entrezonly",
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "description": "when passed as \u201cTrue\u201d or \u201c1\u201d, the query returns only the hits with valid Ensembl gene ids. Default: False.",
                  "in": "query",
                  "name": "ensemblonly",
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "Make gene query and return matching gene list. Support JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/species",
                  "name": "species"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms seperated by comma (also support \"+\" or white space), but no wildcard, e.g., \"q=1017,1018\" or \"q=CDK2+BTK\"",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "Specify one or more fields (separated by comma) as the search \"scopes\", e.g., \"scopes=entrezgene\", \"scopes=entrezgene,ensemblgene\". The available \"fields\" can be passed to \"scopes\" parameter are listed [here](http://mygene.info/doc/query_service.html#available-fields). Default: \"scopes=entrezgene,ensemblgene,retired\" (either Entrez or Ensembl gene ids).",
                          "type": "string"
                        }
                      },
                      "required": [
                        "q"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with \"hits\" property"
                }
              },
              "summary": "Make gene batch query and return matching gene hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/enablesMF"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/involvedInBP"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/involvedInCC"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/involvedInPathway"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/hasTranscript"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/hasGeneProduct"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/hasHomolog"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://mygene.info/v3"
        },
        {
          "description": "Production server",
          "url": "http://mygene.info/v3"
        }
      ],
      "tags": [
        {
          "name": "gene"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIAI0lN18C_-0ca1MbOfKvqLz3IakzwyvZbFKVqgOSsNwG8AJ7e3uBcslj2dZmZjTRaCDeFP_9utWal60ZGwK7V5XLB7ClltTvl0S-9FQqEp7K3ivW2w22gq1en_VkMlEw8KUXqsTw0NjPIuYyQrCZiNJ_xPOpSERgIWFFwmOBcwezPImEZL_mOPp5Q47tCmPS7NXm5lSaWT4KQhVvJuIGNyAorSK7WossVUkmR5FgY3EtIkBO924BZiyyUMvUSJUg4BsV5rEA3HCAqQkzM8GO54cFSgw_sZ9zoefsRoxYJvS1DEUWsPeC64TFSgvGRyo37ENt2dUTxBQQrVG3-RRxNELH2enknPYpaFqAtECbFlwaoqiO097gCOeuhc4cGcBwSx2iB6Mw9OHLIqlvk1DPUyPGbKDVOA8txbQAd8t1VOdwHZ3rXdx8acNV23h2uUKS-NQhWMjays-eUIzwJFEkk-b4JxREc8honmQRN0o3x0dSmZlM4Cx7asrNLLPqt2mPw0-pykgjU65hlSk59zctJrjHd5ugYaBIoCDZZgW0OZEiGmd1dXUjFoNVq7NUhFI0lhdDa60fK2OPq29Qjq21A1lgbTkNWEZpAUzOzL4az0vLhfX2M0_TSIZWLpufN25ubjYmSscbIHORhGosxhYqC2ewHzFWo-EZJA2_yjH9XlCkOI-MTMFUUTIAA-oEqziq6mjOgISY95kIpkGfXeIer7e3tl_04ccPlz2mtBv8_uXz_tuT88Mt_Le9s7v74tllL2Anygiwam5YmGsNlERoyUwl8Nvwj8JavExSsGA8Ok-ZUWwbtmAx_yzjPO5bCPAoht3IKGIjWBxLA9gF1kLnKYnQaNC23u2t46HUlh0fLNFXt7duwvolx46dra1OFv-eWf40OCqNiGm1V8gEmW0eOpMq0eNac7CcW48P5CySQBw4v5ibEG3GCoKp0e8iNBmRlOUgBY0q0XsHLK_WWFCgsQ8sMjm4ROSWf6Oa8dct_MoeYM1y8wupwK2lcCr85rnk2IwWf6AivAXWxqOowKlQGqsurNKNF1s7z34I2B5ijGJibodDWsZulP6YgRooJidMgl5kAJlGPCSF5AxiDiiQKPbfefb8xctnSJ74zOOUHDYeSiEQv6H7qRsckdlr6orRuUBWV9L2KNdje6ev9y4hj6IRDz_WdyjHHsA_fa0JrWE4PjPZ82r1knWcCZAVpBwEVKm5g2cjnoEawfcOtc3yNFXasH-en54MYI8xOzg9O2c8A88VRcEKQwIm8jE3vNOGvk6I7YJYYFo9bSnwauPcoTAVDOVU6Evo6zUoAMd0bqJVXM_Qgl6T6kL97-BABjzLwKozyOjCGcPkC2PAREbw0aJQO91uToYPcYeWvA4jmVxzDeGmsnhKVeox3sL21jBwP3opSEx-ZgS5LoK06DX8zMSnbvwItPcADugxdYfou48KuZWrNYk4cwf9ofKAWBSwtxQDMuD-wZufdi57mLWcHA-3nu_8sPOCvu5sPft-9-WQG_oazvT2q-3n2_2tF7v9refPNvDz7g-7_ZcvvieI2XT7ZVCAAZQDAhgLErALJBMolxF4l0-E0Bzqms8s5AnmLBOVgx-xNKtcsw9jFWZlmYJfgnqyLpJNyKkh58Ep4sjQ1T7BzMTR02Ah3CGpHcr16X8x1H1tIp7JP0RjMX5fD28QQwNr_L7emRAXGmfid5_XAH8GfCw8AoYZm0hvQG7NKbd2BgGexGVuE8hwDPgOSOqZEy3qHg2_Bl2SY9LG-kgfBTdUkyEqT7eHoWX38IBaROKaJ5CAz4RDE30gFp4kL_ZEBgLLg3xnaztsIIwjY8ahTE_Bj4rx04AdGTv6ErJ9jMXAAJwq93J-9UaaGTqQcMaTqXW5YGJZCAUNpr0FEhCsFZUXVCUgI5G3OA0cz0F8kE8mdKDbTICTgM3hjOJI5BCKCFBWiYrnmIU6u0UU--z3HLLtSEK5QiS6hY66Uj864w8tGVrUhkTkPWRhRUCsxISE0LkAc3a4YD1mx7ZpgMon8kjEnswVXzA8k8ge4AW75pEsE_GipgjYGzHhUB2-Yu94lIku8oRdiju3EDVSKhI8-UuoauR3dyTLrl2brsdPzh-7_fCo6b0N1WciA-a3ZfmFUAmPIm234oQ4DKK97DHX15gvJSDH2FGwcqZtMHd33rVZPWD5HLDzOyT6pBpXeOD_G1d_cuPqU2fbikRtm7ae1hV7Ajauyprusvd36lrdgC5BQEnBHT_tsxFEmkRhh2kccj2u-l2flrtdn15jtvX3_YufLnu-FpT1E4C_t9l2jhKbzLF_gbvZBrbLBJ5UuUGB_FPURRv4qDi6dDtjHlBgSCOvyQFTFuAd7jtf5hIFm7JW2filU0Ug0kU-544hPFenVqHOhnS0IgD5ALFUeHvu_uz1u_LYDTr0ac0lr8C875pGgMsTQVG8tZLPnq7XIvz0gA3C1e5vcHp-0eUCf_Y5wOzuHnCEDm-VH8TtfG7OXueMjNj4OM02lLUpQK_LzfnAoY5BKWfH7zr8i3chFPQquhbjo2R_cP-1Bwf3XzvgZnbD53fdYMazC7wSsRK9x2Ish93Nzj1W_6hiFSnQ8StSrWrJcrz6UiUeHj81V7l1BCl1Py5L4IYTAOcQo8JxF0IRqCudqqc_3YlvFZk8yKFBahVZz4iRhJvi7rCqAMin1hPLmourKLA3oxLSRziPFa28sn9DC1z_JtAJR8d5NIEZm5y6gLCNHrdxeq3PVp1QloSXvfqGhGqfKXRmNxJM_sllzyamxf5blz0IUUvLi6XkGmA6H224ahMxdNiWjhUx7pJNPT1YkeeWd8hLkgHeoOZgcNBimkdcYwWlM0QJ-x7FBW4fL4Ew-OeaT4Vdg3WgVtdyjEUXeCxmD6kKPFhAkclYzdOgRpbpeYY7AKMmKorUDV4hWYbAnp2ZfZHLrNDDWj9zqcRvL-kjGUuqSd1YpZjYAlq-pEFHTDHZZSrFdrY4zTxtJJ7M651wCIeos96bX7rcwUTmaf1GDjB0hzXVv0iAixyj4QuayuuswdkJWDeaAvxaaomWl3cFI5ohfx6PVNRHUvvU1mjNW7oaHGV6vUqm2O_xSBTFkuTxCPRr6TrOVpUg2eyjTEEpDde2CWJFsRWwAxWPZIIjLlBjN6ruadBDyKzWVpjkkW31pHxqG5clO7Y6aXStKw-FErKUKb6zsCkBNsNaSHQ3qytJdRnDE-dfQp4irL2cdQ2XWOHrjXr6tt2JfdGyW4k9ttVasG83OlwFiXXABtSrd5LYQEcJjMa9RDK2rSs9RolULlei0jdmazTZfSElL7kEGSrkZ7hoLJqLumh3rcMVulmUdL6wV7Wkmj6mkppVx6m8FmVvLmC_OfOFdRjHgX1g4tarOMaA2hJb6x29WR5zCISxgmV9Bqzuw-a5NJNo3mcJUGCgcOuzP8RI84nMZqjfHDL6EDiDTUytpjbtTOUU9GMPjF_Ve241r-KcPszKRgsOUD8uarwCrWZtkmNEdGUepzskqxWqLj0ihOiAuTV6dKukdFvOk5gOyxctzbJ1L5Exj36-eD8eeTeCbd69_21_7_xt2_SPhycHrXODszdtc8eHR61TR8dtU2d7F8d7g9bZw9bjLvaOztrm_iWmvG3uV8jd9nkm2ub_LZJRx_R_3h2dtM0N5bhtioeQgLinWxVAcaWFAJHsOFWErTMUqNq2rUKahaDE1bm-75_VK9XSF_bpqYKWE59-pfkodr2TzrLT7j9Ueuheodh3cJ9Nqwvy4A5YqFiGw1RlbeRNVdvMjKqSgnAPBBKsgbq2-UiFeTaEIrWN9TFPhwDEzaJY6zDyrEvZnBPwzlnXNbQ-czW7aV2T36mrJlvoS52HuPu-Ex63IZ3OuI6nH1t9T9puIqnUrVNaZdK0ckoLyMYT00Yo5Y7tszbz1W3zVZ_DezZlkW2zNq9ctrzdnTbLq9-stW2ax1GrQeSJ7FyaSOCl8Rn2OeQk2cagmL2zVlzot8f77--xtsX6byQkvWIsvc3ZXEfDzOSjtd3JUv9tSE-xSEBXfhSOpQ2mbaG2w93fz-12eYOH1LN7MWOxj9h8mQjl1-mko1NXSL_OUttqWuSpTXMXKJlEips6JVREWLSqlxvrqMGV531kQVuNrgWkbMPyAV5i2pjx-c4kGqU--ssWO2l41F7U-ONePTLjUsC_kF5F4ppKu0TjeiutJBZ9QSsuPpVfPncRih7HtfSUv_SqRjGdhg-Cz4tkHvfpU9oOw64JTX-RcHKwf3To_v4Aki-eGBnSSyQUO5qPys3iosPTRfBjFYkQu1V7oZHXEvvqV7YMzXVYu97u2fgHjhASDarG88S-wOfRECoSFUpKQGzAb7Rayy4SpEkBtcOXbsxGxQeMj70vROyHravbXv1Gqe7PbHIl-NhGzDVu2SiG2o7PPtay1Uug4rphCIlUigJ71d16LuA3HPymnxPDeAK6j6xcaG1XUm5I5u3JuY1cd5HmLydHg7PTi5_2F1dh_BRQ6dEfINTFBsjYqD5MHTpdAnNxOqgF5a-Snq0RgnvLr8U0HkmsS5yiZw4PI7mWNQ8kt4LTabHdtyw0Z4LF_VCL-d3Lm2KvoRW-KT46XWEppzpll8JWUHGNRwGwZ0ZXWn-Zx_yThddgUim52qXiA_rOljX1G8yrdWzMNK48m1K3mmjUsIIZahFR7J_JtPfNmOUqRpCsGzffD2mny1nPvkRNAzZF4HKxJ_aoWQ9d5H8TNtySDI2WZXxw8MgyPhBRhIntQYH0o8qYHlx8yzIOwyUZD8re3z0FDdyeKQtrXx76Rf_r0U9Hg72LH3_d--18KaMq3rI0RX8weLP_EIJ3zc3Atonoc_at60GTFy1J8wOJ_uzt3sFFp8zXlLBHNVbJXAseGhUTCeXVZc9eun3rOlDy5pZaLP7VvpveotFdNSI_0IeFuwiU7Snd6NmLPfg6-HHv7PgQquFXtRsAN356TqKbaZUFhuupMK7deP7b8f7pe3s0NTdh7Jfj9xYee9xBmEscKxLGxeyrX1PmpvSqW0z6bYVzgbe89kLftjn7ntIOueI5rajm-vXCv71Kb2bTltMyNHN3D-SpM4JqvkmuB9Q9N0XAd1HXnsVsjRceKA97PFAlx-iO1wfiKrLB6bG7W_YBDVRc4EQ3uz4gnEHtaAU4JwB3AeyDsFPVZa0PxE4Vd51dGXKLTixUH-t45Fe1_6rCF76CwtoaYbUNWI67Di7dgO_QYrI8kJy5D6L7lJCupQW-pUjIiduELChH-jY_LMdJi8o7ZDfqvrv_KqUat986jh-lvuP3B_7jYdxzPIx6j4fxVcfHE9_xx-_8x8O453gY9R4P43Q8_PsvcNaSMmhHAAA="
    },
    {
      "_id": "bffe279a1387ef956a423e2e8a133cf6",
      "_meta": {
        "ETag": "09e6629c5b8ca8528f8b28f1f2196efb110793dcdb1e794a33c09d717b34a96f",
        "github_username": "kevinxin90",
        "timestamp": "2020-04-29T00:00:28.250569",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:50.123346",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/cord/cord_genomic_entity.yml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned fields when passed \"fields\" parameter contains dot notation, e.g. \"fields=assoicated_with.pmd\". If \"true\" or \"1\", the returned data object contains a single \"associated_with\" field, otherwise (\"false\" or \"0\"), a single \"refseq\" field with a sub-field of \"rna\". Default: true.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated fields to limit the fields returned from the matching genomicentity hits.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching genomicentity hits to skip, starting from 0. Combining with \"size\" parameter, this can be useful for paging. Default: 0.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "size": {
            "description": "the maximum number of matching genomicentity hits to return (with a cap of 1000 at the moment). Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated fields to sort on. Prefix with \"-\" for descending order, otherwise in ascending order. Default: sort by matching scores in decending order.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "genomicentity2anatomy": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "so"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/genomicentity2anatomy"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "genomicentity2bp": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "so"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/genomicentity2bp"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "genomicentity2cc": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "so"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/genomicentity2cc"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "genomicentity2cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "so"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/genomicentity2cell"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "genomicentity2chemical": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "so"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/genomicentity2chemical"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "genomicentity2disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "so"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/genomicentity2disease"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "genomicentity2gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "so"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/genomicentity2gene"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "genomicentity2genomicentity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "so"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/genomicentity2genomicentity"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "genomicentity2ma": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                },
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "so"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/genomicentity2ma"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "genomicentity2protein": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "so"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/genomicentity2protein"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "genomicentity2anatomy": {
            "UBERON": "associated_with.uberon",
            "pmc": "associated_with.pmc"
          },
          "genomicentity2bp": {
            "GO": "associated_with.go",
            "pmc": "associated_with.pmc"
          },
          "genomicentity2cc": {
            "GO": "associated_with.go",
            "pmc": "associated_with.pmc"
          },
          "genomicentity2cell": {
            "CL": "associated_with.cl",
            "pmc": "associated_with.pmc"
          },
          "genomicentity2chemical": {
            "CHEBI": "associated_with.chebi",
            "pmc": "associated_with.pmc"
          },
          "genomicentity2disease": {
            "DOID": "associated_with.doid",
            "pmc": "associated_with.pmc"
          },
          "genomicentity2gene": {
            "HGNC": "associated_with.hgnc",
            "pmc": "associated_with.pmc"
          },
          "genomicentity2genomicentity": {
            "SO": "associated_with.so",
            "pmc": "associated_with.pmc"
          },
          "genomicentity2ma": {
            "GO": "associated_with.go",
            "MOP": "associated_with.mop",
            "pmc": "associated_with.pmc"
          },
          "genomicentity2protein": {
            "PR": "associated_with.pr",
            "pmc": "associated_with.pmc"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothinigs.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the CORD Query web services. Learn more about [CORD](http://biothings.ncats.io/cord_genomic_entity)",
        "termsOfService": "http://mygenomicentity.info/terms/",
        "title": "CORD Genomic Entity API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/genomicentity",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple PROTEIN ONTOLOGY genomicentityids seperated by comma, e.g., \"ids=387,388\" Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "For a list of genomicentity ids, return the matching genomicentity objects",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/genomicentity/{genomicentityid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Sequeence Onotlogy ID, e.g. SO:0001537",
                  "example": "SO:0001537",
                  "in": "path",
                  "name": "genomicentityid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "description": "A matching genomicentity object"
                }
              },
              "summary": "Retrieve genomicentity annotation object based on pr genomicentity id, support JSONP and CORS as well.",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "CORD API metadata object"
                }
              },
              "summary": "Get metadata about the data available from CORD API."
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Pass a search term to filter the available fields, e.g. \"search=associated_with\".",
                  "in": "query",
                  "name": "search",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Pass a prefix string to filter the available fields, e.g. \"prefix=refseq\".",
                  "in": "query",
                  "name": "prefix",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "MyProtein.info metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from MyProtein.info."
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string. Examples \"PMC6836328\", \"31045\", \"PR:000001978\".",
                  "example": "so:SO:0001537",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "description": "a single field or comma-separated fields to return facets, for example, \"facets=pr\"",
                  "in": "query",
                  "name": "facets",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "Make genomicentity query and return matching genomicentity list. Support JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms seperated by comma (also support \"+\" or white space), but no wildcard, e.g., \"q=1017,1018\" or \"q=CDK2+BTK\"",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "Specify one or more fields (separated by comma) as the search \"scopes\", e.g., \"scopes=entrezgenomicentity\", \"scopes=entrezgenomicentity,ensemblgenomicentity\". The available \"fields\" can be passed to \"scopes\" parameter are listed [here](http://mygenomicentity.info/doc/query_service.html#available-fields). Default: \"scopes=entrezgenomicentity,ensemblgenomicentity,retired\" (either Entrez or Ensembl genomicentity ids).",
                          "type": "string"
                        }
                      },
                      "required": [
                        "q"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with \"hits\" property",
                  "x-bte-response-mapping": {
                    "$ref": "#/components/x-bte-response-mapping/query-post"
                  }
                }
              },
              "summary": "Make genomicentity batch query and return matching genomicentity hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/genomicentity2gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/genomicentity2protein"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/genomicentity2cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/genomicentity2cc"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/genomicentity2ma"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/genomicentity2bp"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/genomicentity2genomicentity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/genomicentity2chemical"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/genomicentity2disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/genomicentity2anatomy"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://biothings.ncats.io/cord_genomic_entity/"
        },
        {
          "description": "Production server",
          "url": "http://biothings.ncats.io/cord_genomic_entity/"
        }
      ],
      "tags": [
        {
          "name": "genomicentity"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIAJzDqF4C_-1b61MjNxL_V1STfGArfrEku4Qqqm55HCFZsANcJVdritLMyLbCzGiQNIBD8b9ftzRPW36wcFVLii-LPaNudbd-_ZT3wRMpS2jKvR3ibXV6nZ7XIh5PRgIePHiBSDQNtPnMYsojXDZhUfovnws94Qkfqw4XSJPQmOHbX4__ODwlfx6f4sP7Ng8Nidap2ul2x1xPMr8TiLh7zW55cs-Tn3t2oRSRoZdMpSJR3I8YCdkti0BA6T3CmpCpQPJUc5HgwgMRZDED-fABESOiJ4zs988OyO8Zk1Nyx3yimLzlAVMd8plRmZBYSEaoLzJNvuDSyw2UDATL1QFtkoBq1KkbCBlejVkiYh5cwT5cT9-hqJrJWPVH55Z1oR3wiKf5aru4g1bsmtVdQ8e11dDIeGSXkkOzlnwaHOOaWyZVrt4mHAVqjSrAU3j05WHWBIdJIKepZiEZSBFmgbGEJUBumYzqxl9Pxy7uOrfTKv5PYX-JxqDjXKUCNw3bWRmKVzRJhD3m5vMbPOfmIy1poiKqhWw-L4Wz26dUT5RBdbe5Lz5KhbKIT6kEcl1a_3vJRsjsO1AsBpACjepWi7ojzqJQ1Z0hf2JEWUUdCm2W1-nLZ2txsB5aI7cPjMaSgbWU3hPhtPRsoDefaZpGPDAG7t637-7u2iMh4zYcL0sCEbLQrFLBBPhZw0h0Ss2ZtSEP7d8ZzMRZpHkKbjw4618cHp-S_ulF_3P_6L-kYXOgBkwBP4pA9qcElItpi7DOuNMiQ-S-u7X9sbW1vT30yKnQDDydahJkUgKHCD2diAT-anrNTBTgSQoejoyzlGhBNnu9HonpPY-zuGVWQJTR5I5HEfGBOOYa9u4YL52mxnRKS4CL9_iY245LY4YvRtnLx8f8hYlVuRne93ouM3wiBqekWEyE_xcLcHc9AfUmXCvQKzfp1O6oMjCBxJPy_i0koSTiIC_EuIblUMMW8NUZhDbUKqY6QJTPLLMbGmAWflf3qUuzZdMRug8zZ_RoVBszt2fMqHyOYAPsMNKHXSIxnpLjA3ui5Ly_A6ex-dPWR5SH3dM4tWGx-YIbRuindUDPCOU1D0fLjKHxKqA6TvPbd-OARpFPg-s6h_LZCwSCtTC7FEpzID1jYGBI1jOrK5AVoPepAieH76mcw3KLqCxNhdTk1_P-6QCoQ8zn54QqcPEo6qwAMChPQ6rpUqQ-z_hrG9DkeEjqpBBqkeWOmK7W2MoEPdl-vYVTo1gIjaSIScGz4zX1LQD7BAcdUKUgqigoioIJwRoFw-SIR_DR7F_b2jDPnXfoWZJdoBcBx4h9hXFs6HUqp7VpuWY_S-Ot4ZpuMVM4M35P7Mp1BbVEu_CvYjfL5bNLvRcIHS-EnpMp1Fua8cTUkBU-rIpfA6WccgZRzX0KXFn7PAFNtt62huqQQxvSFZzB4GT_w_bWh633kLkxlW9t9n78yX4cnGG0h3j_88ft_HRquUCJHVc6mDu5m28xAyj-N2vAH7-vRwnBr0GJ312OAa4L2hSgJ1AimKKpDXUUtXVUfuDgLHl9MKIB0-AeUNqR3NJ4DvbxbiqH3hI721X_fw_5Fupkl38uqpb_UuY8GsWxc3f7XnWNq5wxBaWxZ2vIl60WT7AEbiZWyw-TaY6EBakdS0woz56Qgi1MLlGEt57piT3TzdKOyZ6ZmR04eiOyQSMlympp6P0AkAC3vgN0MKJScNZ3LeJD_E8ENjlhQGVYNVQ3u5u9zY8t-Gfb0uGj_YPf3v-wd_GbDQOzrm0cH-R39nnnKQv4CGrDhCE3M2PJw89GFZAK4d8hljAv5cXHMOeMaaGQ0D7ZBVtL9ncDpTZ5LH7fYuAzsR_NEHXIRaNWGOYoA_0DmmAPmEKpAVJCvKwEIiVOCAWd0EFgyZcJk6wcHDmHPqEIbBa9ygdQnYmOo-_K_dt293cdcsBGFA595-lKtcCbMeuBmBsMggMIeWhI8QwOLcF8u_huvSb3ZkWL-7LxcNA_v1gWE393RUS1KCSaaaKvWbsgaMcgIuq5UBr3enuEbRPaHtcItD7G1bXDLYrtiqal-Ndj1RbG9cEMy6Kpa3mzm38P35aVIGtwSG2h-DwmAaSQZ3IInkcPmHwWvZ8-j94x5fxqU4AHgd8906AhhzisngkOmlAtYtDn0vpJRT1fEzxU5Z4jl0xFZiJyaju_Ybm4EY0hSsfofzQvU3DRsgavXnQuL2Cr6sEhHEY9KSKTvTDbU11cO1hXr8ruuwlLipRSyzWVBuZihSeKwH6kGGSUvaslME02Rta8ye6kcYip7HgES7DTKbL3JmbFhhi1iUO1Vdk0DL259t0K3iICE8kdYIJsYG8QqXKT3tCDoqLGo-is8x7ERGN4nfntvClBMWVCUeQyzaHYy06qXtA5TsoXImI0sUdVXEjNnRMYCHGEOVuycRZRSTJIxApFEpksb4VaODnGci2TdMwMDSALIt0tDxmQQBQnZpMWgXLLDJ2BwBYM2uBQAqiM5TOFHMBQIxFF4g7nzsYgwHOZumX1uQKVtQnPXCe4uPOLeMztDCB_VsEUu_8lE2NMTsvkrqr2VYLDRi6xce8ki30wIhzKEilQD3XNUzgCTaF8hkVG-F6H7IvY5wk-ySsBbLTrXoZOwVVR4QEERllk-t-Ujs2oooRlb6myqINbVQ5l0BivJ011gH3-Al3zy4f1dc6Lh43crQKaIpG5yKD2TGOBt5_1GnJzqRrFWGKlGjh0WKDGYqwhFXQAHTKww7r8SNoYH8DiyIslIeorZIhHU0UankBL0Hhb08nwhd6hNBeUyVCoIVHImkTLdM8HK8vQ-li-t442W5qamy7NYvsWMkp_ZIuymc7uykhoPtokYTAUCarrpbcFgumsqnmby4OKZ8XQ77L-kEpJTRnh1QcLjnYT8PdkubQQ126YmJeaRotBNCu1ORr94ccrIa-s0EgKNUJhxMqylXCGoi5cQ4BZE6xHacxn7buGLI4-2LHv7Cp7H7Ggin_w5ipSuyneWZ5bzxIS2bUsoOFxXv3b31Kc9w2SAafAILCDX8PwMC8qsYWA-DcRZrlpX1pmyB2aYsL-yCIyyV-bn24oSID2lwwX5fU5uWD3mpzY-DqwKdFc-otMz0p0NCfRCaTpABPvp0Dz27LUtctP-oM11ttr-kbhWGbB2frFHIy5K9wp59eO-Y1ffMDhi_dgTfuld_no1ecbYA7Db8Ioqoy7rZz12ObQjGP2MFBVo-iiqbz62iZ0vn8xpplri_55INqHbhExsV_Y6A0UblBgU-wABfSq_zxQ7HERiTH2vUAKNbx6A4UbFDipcICiaNVfOzL-s3d41j-dleqT0Q7RURfsDRzjRQMbB0LMrPC1w-OXo9N9h0zsDRBuQNgBsRsNjZ9Hvm5YrCXRGzrGy6fWDpgU1wOvHSCDs1mJBsXFxxs0XNAo74VcXQle97x2ROx_dvUlb3BY0IoY2ziwUNwzvXY4HPSPD2ZlOiju0N4w4cJEecXoChHFJearDxO_HO4dz0WKXLvzzFeaJsEbRBaFjfIu2w5ol_yAwzE9ffDSOHDYr4OPW3bg6HgbixTfHvVdL8fWWo4x26rdnsDPTGhekF_V3K9imrfPjgWZz6T9j1buvnAVZ9N5OV5Pxkng5jr736-Wsj93WkO5rFHVpKuYQtXneildELA1zSqOUDU4XgaRg2OVGVcxNbnH8ToUPHSJWsXWleKa6OWSeMJ8jpdjj_8DhqqK1yo6AAA="
    },
    {
      "_id": "ec6d76016ef40f284359d17fbf78df20",
      "_meta": {
        "ETag": "d1051446ba77bf29394195f180c7a65de1dda27193b74a24295abf3bb08242e7",
        "github_username": "kevinxin90",
        "slug": "uberon",
        "timestamp": "2020-07-29T22:38:42.659959",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:34.562622",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/uberon/smartapi.yaml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call. Type: string.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned chem object. If \"true\" or \"1\", all fields will be collapsed into a single level deep object (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Type: boolean. Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us with an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "facet_size": {
            "description": "the number of facet buckets to return in the response. Type: integer. Default: 10. Max: 1000.",
            "in": "query",
            "name": "facet_size",
            "schema": {
              "type": "integer"
            }
          },
          "facets": {
            "description": "a comma-separated list of fields to return facets on.  In addition to query hits, the fields notated in \"facets\" will be aggregated by value and bucklet counts will be displayed in the \"facets\" field of the response object. Type: string (list). Default: None. Max: 1000.",
            "in": "query",
            "name": "facets",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated list of fields (in dotfield notation) used to limit the fields returned from the matching chem hit(s). The supported field names can be found from any chem object or from the /metadata/fields endpoint. If \"fields=all\", all available fields will be returned. Type: string (list). Default: all. Max: 1000.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "format": {
            "description": "controls output format of server response, currently supports: \"json\", \"jsonld\", \"html\". Type: string. Default: json.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching chem hits to skip, starting from 0.  This can be useful for paging in combination with the \"size\" parameter. Type: integer. Default: None.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "prefix": {
            "description": "Pass a prefix string to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          "search": {
            "description": "Pass a search term to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          "size": {
            "description": "the maximum number of matching chem hits to return per batch. Type: integer. Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated list of fields to sort on. Prefix each with \"-\" for descending order, otherwise in ascending order. Default: sort by descending score.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "Phenotype": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Phenotype"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Phenotype"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "developes_from": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "developes_from.uberon"
              },
              "predicate": "developes_from",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/developes_from"
              },
              "source": "UBERON Ontology",
              "supportBatch": true
            }
          ],
          "has_part": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "_id"
              },
              "predicate": "has_part",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "part_of.uberon"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/has_part"
              },
              "source": "UBERON Ontology",
              "supportBatch": true
            }
          ],
          "has_subclass": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "children"
              },
              "predicate": "has_subclass",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/has_subclass"
              },
              "source": "UBERON Ontology",
              "supportBatch": true
            }
          ],
          "located_in": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "located_in.uberon"
              },
              "predicate": "located_in",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/located_in"
              },
              "source": "UBERON Ontology",
              "supportBatch": true
            }
          ],
          "location_of": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "_id"
              },
              "predicate": "location_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/location_of"
              },
              "source": "UBERON Ontology",
              "supportBatch": true
            }
          ],
          "part_of": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "part_of.uberon"
              },
              "predicate": "part_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/part_of"
              },
              "source": "UBERON Ontology",
              "supportBatch": true
            }
          ],
          "produced_by": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "produced_by.uberon"
              },
              "predicate": "produced_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/produced_by"
              },
              "source": "UBERON Ontology",
              "supportBatch": true
            }
          ],
          "produces": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "_id"
              },
              "predicate": "produces",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "produced_by.uberon"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/produces"
              },
              "source": "UBERON Ontology",
              "supportBatch": true
            }
          ],
          "subclass_of": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "parents"
              },
              "predicate": "subclass_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/subclass_of"
              },
              "source": "UBERON Ontology",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "developes_from": {
            "UBERON": "developes_from.uberon"
          },
          "has_part": {
            "UBERON": "_id"
          },
          "has_subclass": {
            "UBERON": "children"
          },
          "located_in": {
            "UBERON": "located_in.uberon"
          },
          "location_of": {
            "UBERON": "_id"
          },
          "part_of": {
            "UBERON": "part_of.uberon"
          },
          "produced_by": {
            "UBERON": "produced_by.uberon"
          },
          "produces": {
            "UBERON": "_id"
          },
          "subclass_of": {
            "UBERON": "parents"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothings.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the UBERON query web services.",
        "termsOfService": "https://biothings.io/about",
        "title": "UBERON Ontology API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/anatomy",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple UBERON anatomy IDs separated by comma. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted. Type: string (list). Max: 1000.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Phenotype"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "A list of matching anatomy objects"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "For a list of anatomy IDs, return the matching anatomy object",
              "tags": [
                "anatomy"
              ]
            }
          }
        },
        {
          "path": "/anatomy/{anatomyid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Retrieve anatomy objects based on UBERON anatomy ID  Supports JSONP and CORS as well.",
                  "example": "UBERON:2002108",
                  "in": "path",
                  "name": "anatomyid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Phenotype"
                      }
                    }
                  },
                  "description": "A matching anatomy object"
                },
                "404": {
                  "description": "A response indicating an unknown anatomy ID"
                }
              },
              "summary": "Retrieve anatomy objects based on ID",
              "tags": [
                "anatomy"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "UBERON metadata object"
                }
              },
              "summary": "Get metadata about the data available from UBERON",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/search",
                  "name": "search"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/prefix",
                  "name": "prefix"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "description": "UBERON metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available object",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string.",
                  "example": "parents:\"UBERON:2001995\"",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/facet_size",
                  "name": "facet_size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/facets",
                  "name": "facets"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make queries and return matching anatomy hits. Supports JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms separated by comma (also \"+\" or whitespace).  Does not support wildcard queries",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "a comma-separated list of fields as the search \"scopes\" (fields to search through for query term). The available \"fields\" that can be passed to the \"scopes\" parameter are listed in the **/metadata/fields** endpoint.string Default: \"scopes=_id\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with the \"hits\" propert"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make batch anatomy queries and return matching anatomy hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/has_subclass"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/subclass_of"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/part_of"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/has_part"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/developes_from"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/located_in"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/location_of"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/produced_by"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/produces"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://biothings.ncats.io/uberon"
        },
        {
          "description": "Production server",
          "url": "http://biothings.ncats.io/uberon"
        }
      ],
      "tags": [
        {
          "name": "anatomy"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIAHP6IV8C_91a_2_buBX_VwhtP7RdYju37rAGOGDXtRtywCW5psMGNEFAS7TNiyyqJJXEC_K_33uPlETJkuw4d-35-ksdmnx8Xz_vC_0QqVxkPJfRMYv-OpqMJtEBi2Q2U7DwEMUqszy29FksuUxx20Kk-T-mUtmFzOZmJBUeyfhS4Jc_nPz3_Sn738kpLt4fyoROWJub4_F4Lu2imI5itRzfiFuZ3cvszcRt1Cql81qYXGVGTlPBEnErUuBPR4-wJxEm1jK3UmW48Z2Ki6UA9nCBqRmzC8H-8_b9h7NT9rkQesXuxJQZoW9lLMwIb7FCL83Z7MKthYyF0oz5VBWW9kvrmPJkzzKrUjVfse_PT_D7W6GN5-YIFIdM4n2wCkufHtocv89ivcqtSNi5VkkRE-PuAFIrdNrNUhZzS4wVU6GBFNyzRnsTxWGCVygsn3u2S1PyjFu1XLn7ykVSbXPJap6ZFPbq5np1obsg53ZhyJPGJWX8I1fG-VfONRy0lfb-rMUMyfxpDP4CPgG2NuN60zhRdiZFmoTeV60RI5so0FYTnvcrW5128RAcdgvb3az0ktvGzW6FNKUFaNnYtypZVVEIFOgzz_NUxuT04_vDu7u7Qzx5CKYWWawSkdAuEy-AG6dWjRFkpXC6l4n7v-U_yyK1Mk-rCPIWYifvDDgUco5-O10xkGfJR-xUWQERxy2LC62BuRTjjakM_rf8RlA0yiwvLIMbWZEzq9jRZDJhS34vl8XygHZAtFt2J9OUTeHwUlq4ZcQ-rnJxzIzV4DzsRSqNfTliP_L7Y6LgQhm2IN9uU_T46NUmNWngE8l59fjovyBM8Rr4ZjIZ1OrPhlTSUKK0YulOd1rW7TTj84XIFLH2GPDIteYQMo8dIPY9Q-kQvcD4MQZLpXk1_VnElnwxer0Dy4OMvtda6Q_CgNX7GCuVBlZM6B7ijcmlcyiws3NZ9AsPCgSABfiHRr-N_qU045WAgUcdAHFb6IxcoEfwKICkComu6IoSPsYP_oNMHknkuehGkpZsHwQ4DaSWtqrZlBsQBiB0LQgYuyjyXGnY9MPF2ek5fJWwf559uGDcgN-nKTmluOfLPMwYx-Br3xxN_u5yKq4jCIZhX0kQNR3Y6kKgNmt7dnj8l8DImKfplMc3IYVqbc9R9rmosC0WdAdYn-O7gH_dhdK9UVlkN5m6ywKPXYvGzV4PhwaCDnTKE275YKQ9xZtcQDjo6HSufiO11OLDteSwUmRLA_8Wtt5DRR4BkPvzFryKY9E502rpAaChjkr-lj5K_36OWozgOm7ggl_5QiGaw_fyPjzvV36zMNtgQafTXQzpT9b27EgnbVM6H3xCBvmJ-guHxG3kh6OooOPLIAccvXnzt8towOk__17h_3ngPeOxsNdG_l80KNSrW1ExkHcbsYF_f6HIeFb6QTnNmuRb6q6tte31hQjWuBX__v0nTAqq4ZrU9fVVDryTdkGRfxktpDWXEfPNzmqPq-YfsXvCr6BjozLT18pr5QKKPNqqLq2Az914hTd-xbb7WTH1LDx6Rkx9tYb982C77iKCBlsdfTp7wVOjIDz-ArEB3dgd-Aw4KKAQNNTsnQIPgxqVGedD2IgnMddJ6X5djTZlJWCwc4rA3bWHNSdl91emZUPx6qob4MuRAuZe-A1WlV_ahVbFfIHxEkgJfH8EAnV6v_QOADTcOAKibSpYzg1WtUDO4UN1UWVTBnma2INt0rWir161q7pXr5jIklzJzI78POKdmHHQ_nFF9LtrmVxG3VOJX20AsRk5z88uPg5h009N7Cyr_14M3XcInSJeVmC5LaB2wSXNp6dWHN7MzSGyQLIPwWXX9vGCm2tTTOMUXHMAdDrPlueu1eypR8Hh7Q7HkFs8-tRz5czeXG8oOzpPpypG2LiW2U4n4dMuGqLZOdw6Xe14FCfczpvrA-vJ9aGuPTuwc6UKAi9ELsYhHMvNDdACQFuid3Of73FTc2A62qa33thb1Cm9g1VEA61Sgg0Xi-X7iwstCEwk7jFmxE5mIA62NC4LXUZHl8AB8FKmhXICHKs05bkhRAZJOTPAD4B8ik7FEiFyTxMTW8oyQehdQ5mj0nHsgBW4xkqpMO25hyNMOHKeydmKBPAkQRNFDKKIl163U6VSwbNRDf8zSK1iSNlhodShbE_Rabt8W1tTNagOHQNzlRbzIuUaJAF3QoWrQlfvWwc4fceCotB8LugMSAbueSsTAUcczoN70U0HzCiXLuGUy5iWvEuDc5AeCoNkwFgzMIm6wwE-UQDCQzJXpd0G7wpawA6hyRDFcgocYemAe9m0iG-gd0KpPH77pF2mizIKwHPEXOjAUkeT9utBD_fNdrVDBE87kGG3MqgWwhFhCjyLnWSMJ4ks3dIVPZiU3FuJP0ue62qWS88DhFXl-_M5-ElZBN7ytBCU81B9KagRHCQLQiWRJk_5qi6BApIuUKrAbtQNPW80lcpPAQOfonSzjc_Uc7an6vsFSLcW-i8xkqhETOVS2lDHFYzRMLDxSkHABkZ5YXwp6otn3OzIg1ymLENnoG5PhWerEBUptkrq7bKzLjoddrrV7wDzSuAM5pVNCC1Z32QhyhvbGahquTYZyHVE_QkD_Lyw-CRYJw33WF2510HwnOgVa7DSxjoTRXef0sR9XtglKKSV_moRceugYFVPt0kwrGQ24tSai7hu5kZC9jEWSin8jkwOeASuIysvAT-cFSl1Ojmf4zbwV3DpqcxckgqKdESnsCLohz2KwSHx_ZhoE875UXCH_OeuVHEbSk8DmWcypWzSaNScG_UaaxO39Yh6g7H85Lyf3bK_hG7yt2K2nudvYnYgA_qH8o0e5jMJFKWu5xlMhENMb5n3aPzaw_PmvIenKd2dO68RHGxB_n0ZHWLWgSBAwoCAKKnSidAHTAFxfSepKWS8-W0gIBGHvBcQgB5dD9vKT5eHLPVYfe_yT_221zGwuZZJr70bP1HAjVfB1CB4_wvb5I4rIMNgfdZ5DbXCMZSEpr_c7LixPUNo_uoBssXZbKDh7fwBxLpmyBj0scoV0SxVDoRLppy_E1P1w0yXMttSXHX86KKUrF-X1PX_Wr_xgBUI2yfLaZW66Q44-tLytD8cO2wJ33_7-lrpa8cVHgUhSgPWctbM0YmQuQYDbRm3O0nmcPbagpcON-64t73LPeD1TGfAtuHIxV2IP0m6cPikNJI6cNgAy-WWpH6RJGAAs2dWxjSdolGRhD76PSzhOwMGsKtqdj7eGhJUdW4EYJ8mUA1FPg3TOMz9bjEUrGMAPS0_4PQ4enDifZpcPUbh_JYQCGkvBAcgJV1vnFaH88zrJexHQxwPT03K_Yd-_9osDFC40HHXby2JYVcJvsXs5h9HSXHhVGz_rOsfiteNG4q1h7ZtzSp3M205tdxLsyLno_rHuk3rlpLtoWWDUfJuVq2Gyvtn1lLpazBM8uxuzA53-SpoXM76dwzXcg7-BzFsJc8zDFu_KnxV49ZPFM80Lr2P7CEed9uhy9wk4T7icvMBazcrB09v-2fkmvleGwfy7aGJmw-jz7CwfyL9g-B0KNK-WrV-tN7NrK0X9_2zbFOA3gBuybmH5l7_bcQOFq8HHm36XSOPh9JE7XFCs3cOtzX60qoNa-1Yq1nryj7cWap6zUfDTf32byJWF-FG1go39GWEsJRpyNRXJlSF7dr18O8XqkMX-T87AAA="
    },
    {
      "_id": "cc857d5b7c8b7609b5bbb38ff990bfff",
      "_meta": {
        "ETag": "08fd8fb7778a015e9f61b7371499cf1ef2b1d589913577cc05ead0bab522f5b5",
        "github_username": "kevinxin90",
        "slug": "go_bp",
        "timestamp": "2020-07-29T22:41:56.171541",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:50.440931",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/go_bp/smartapi.yaml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call. Type: string.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned chem object. If \"true\" or \"1\", all fields will be collapsed into a single level deep object (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Type: boolean. Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us with an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "facet_size": {
            "description": "the number of facet buckets to return in the response. Type: integer. Default: 10. Max: 1000.",
            "in": "query",
            "name": "facet_size",
            "schema": {
              "type": "integer"
            }
          },
          "facets": {
            "description": "a comma-separated list of fields to return facets on.  In addition to query hits, the fields notated in \"facets\" will be aggregated by value and bucklet counts will be displayed in the \"facets\" field of the response object. Type: string (list). Default: None. Max: 1000.",
            "in": "query",
            "name": "facets",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated list of fields (in dotfield notation) used to limit the fields returned from the matching chem hit(s). The supported field names can be found from any chem object or from the /metadata/fields endpoint. If \"fields=all\", all available fields will be returned. Type: string (list). Default: all. Max: 1000.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "format": {
            "description": "controls output format of server response, currently supports: \"json\", \"jsonld\", \"html\". Type: string. Default: json.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching chem hits to skip, starting from 0.  This can be useful for paging in combination with the \"size\" parameter. Type: integer. Default: None.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "prefix": {
            "description": "Pass a prefix string to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          "search": {
            "description": "Pass a search term to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          "size": {
            "description": "the maximum number of matching chem hits to return per batch. Type: integer. Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated list of fields to sort on. Prefix each with \"-\" for descending order, otherwise in ascending order. Default: sort by descending score.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "Geneset": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Geneset"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Geneset"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "has_part": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "_id"
              },
              "predicate": "has_part",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "part_of.go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/has_part"
              },
              "source": "Gene Ontology",
              "supportBatch": true
            }
          ],
          "has_subclass": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "children"
              },
              "predicate": "has_subclass",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/has_subclass"
              },
              "source": "Gene Ontology",
              "supportBatch": true
            }
          ],
          "negatively_regulated_by": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "_id"
              },
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "negatively_regulates.go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/negatively_regulated_by"
              },
              "source": "Gene Ontology",
              "supportBatch": true
            }
          ],
          "negatively_regulates": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates.go"
              },
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/negatively_regulates"
              },
              "source": "Gene Ontology",
              "supportBatch": true
            }
          ],
          "part_of": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "part_of.go"
              },
              "predicate": "part_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/part_of"
              },
              "source": "Gene Ontology",
              "supportBatch": true
            }
          ],
          "positively_regulated_by": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "_id"
              },
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "positively_regulates.go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/positively_regulated_by"
              },
              "source": "Gene Ontology",
              "supportBatch": true
            }
          ],
          "positively_regulates": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "positively_regulates.go"
              },
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/positively_regulates"
              },
              "source": "Gene Ontology",
              "supportBatch": true
            }
          ],
          "regulated_by": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "_id"
              },
              "predicate": "regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "regulates.go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/regulated_by"
              },
              "source": "Gene Ontology",
              "supportBatch": true
            }
          ],
          "regulates": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "regulates.go"
              },
              "predicate": "regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/regulates"
              },
              "source": "Gene Ontology",
              "supportBatch": true
            }
          ],
          "subclass_of": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "parents"
              },
              "predicate": "subclass_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/subclass_of"
              },
              "source": "Gene Ontology",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "has_part": {
            "GO": "_id"
          },
          "has_subclass": {
            "GO": "children"
          },
          "negatively_regulated_by": {
            "GO": "_id"
          },
          "negatively_regulates": {
            "GO": "negatively_regulates.go"
          },
          "part_of": {
            "GO": "part_of.go"
          },
          "positively_regulated_by": {
            "GO": "_id"
          },
          "positively_regulates": {
            "GO": "positively_regulates.go"
          },
          "regulated_by": {
            "GO": "_id"
          },
          "regulates": {
            "GO": "regulates.go"
          },
          "subclass_of": {
            "GO": "parents"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothings.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the Gene Ontology Biological Process query web services.",
        "termsOfService": "https://biothings.io/about",
        "title": "Gene Ontology Biological Process API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/geneset",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple GO geneset IDs separated by comma. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted. Type: string (list). Max: 1000.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Geneset"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "A list of matching geneset objects"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "For a list of geneset IDs, return the matching geneset object",
              "tags": [
                "geneset"
              ]
            }
          }
        },
        {
          "path": "/geneset/{genesetid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Retrieve geneset objects based on GO geneset ID.  Supports JSONP and CORS as well.",
                  "example": "GO:0042121",
                  "in": "path",
                  "name": "genesetid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Geneset"
                      }
                    }
                  },
                  "description": "A matching geneset object"
                },
                "404": {
                  "description": "A response indicating an unknown geneset ID"
                }
              },
              "summary": "Retrieve geneset objects based on ID",
              "tags": [
                "geneset"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "DISEASES metadata object"
                }
              },
              "summary": "Get metadata about the data available from DISEASES",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/search",
                  "name": "search"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/prefix",
                  "name": "prefix"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "description": "DISEASES metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available object",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string.",
                  "example": "parents:\"GO:0071704\"",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/facet_size",
                  "name": "facet_size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/facets",
                  "name": "facets"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make queries and return matching geneset hits. Supports JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms separated by comma (also \"+\" or whitespace).  Does not support wildcard queries",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "a comma-separated list of fields as the search \"scopes\" (fields to search through for query term). The available \"fields\" that can be passed to the \"scopes\" parameter are listed in the **/metadata/fields** endpoint.string Default: \"scopes=_id\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make batch geneset queries and return matching geneset hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/has_subclass"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/subclass_of"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/positively_regulates"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/negatively_regulates"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/positively_regulated_by"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/negatively_regulated_by"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/has_part"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/part_of"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/regulates"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/regulated_by"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://biothings.ncats.io/go_bp"
        },
        {
          "description": "Production server",
          "url": "http://biothings.ncats.io/go_bp"
        }
      ],
      "tags": [
        {
          "name": "ontology"
        },
        {
          "name": "biological process"
        },
        {
          "name": "geneset"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIADT7IV8C_91abW_bOBL-K4TuPqS9xHa6xS0uwALXXnNFFtgm2xS4A5rAoCTa5kYWVZJK4gvy32-GpF5NSY6dbevmS2SKHM7rM8OhHgKRsZRmPDghwU-jyWgSHJKApzMBAw9BJFJNI22e2ZLyBKctWJL9M-RCL3g6VyMucElKlwxf_nr2n9MP5L9nH3Dw_ojHZoXWmToZj-dcL_JwFInl-Ibd8vSep_-Y2IlSJGa9ZCoTqeJhwkjMblkC_MngEebETEWSZ5qLFCe-E1G-ZMAeDhAxI3rByHuWMnKeapGI-Yq85fifRzQhF1JETCnyJWdyRe5YSBSTtxzGRri_ZnKpzmeXdqzOcl3OMQ1Frs18ri27gxu-uTjDBbdMKsf4MegY5UEGYBSGPj-0hTtNI7nKNIuRTpxHRka7AKnlMvHzmEZUG07nYhpmuM0a6SGCvfSuUXY6d0wXNhdOfrtfMRpWysisMprv56A6xXRz0NinOaQlTVVCtZBr9C2Xlq2M6oUyjjouKOOPTCj3QCUs1KXG_yrZDMn8ZQzuCC4HrqTG1aRxLPSMsySuO3c5ZhgZomCmqvp6N7LRahtutcV2YLOdhVxS3djZjhhNSQZaVvqtiFdlkAMF80yzLAGToXuM74_u7u6OcOUR-AdLIxGz2MxS0QK4sWqVGKCaM6t7Htv_Ladb5onmGYT0-3PirEPO3inwQOQa_TxcEZBlSUfkg9AMgplqEuVSAmMJBiwRKfzX9IaZQOdplmsCu5E8I1qQ48lkQpb0ni_z5aGZAUCiyR1PEhLC4iXXsMuIfFpl7IQoLcFxyEHClX4xIr_R-xNDwWIBTEGe7aTg8dGpjEsj_Wcj4_Xjo3th4MpJ_2oy6dXoH8qoo6FArtnSrvZa1c5U4_dVtJQcUikpBMujBx3fEJQNYRHMHmGYlHoX4R8s0sYLg9dbMNzL5qmUQn5kCuzdxVihMrBhbPYB3mhK-NK6EljZOit6hYMDA5c5eIdEjw3-LSShpYA1fzoE4jqXqXGADsGDGoSVGHRttiiAY_zgHnj8aESeMz-GtGT7yMBlIGe1VU1CqkAYQNyG-48IucyzTEiY8evl-YcLUENM_nX-8ZJQBS6fJMYf2T1dZi7bnJ9MJq9fHb86tlkaxxD36pFesh40_VbLnKEaK0N6HP1rwCIkhCSk0U2dQjm258C6KxhsBgH-uOrydxvnr32w3BmMeXqTiru05qxrQTjs7LCoJ9ZAozSmmvYG2FN8yYaDRQyva3WbqF1anl2evrk8vSQFj6UqWzp4D2KXc0xxaJDH_rwFr6JYxs6kWJKCZkMlpQ5aOik8fBfVKEZl1EAGN_KVgjSD9_y-vt6N_GmBNmhFq9VtjOlWVjb15JK2Ma0nPiF9_G7OJhaN28gPS1FFJ1c2B_x8_PPk9VXQ4_Zfvlf43w28ZzRieqr4_1iDQjW6ERUFObcRGfj7K8XFTukH5VRrkm-ou7bWNtcXIlhjV_z9_SdME1D9xajtB5RZ8I7rhYn6q2DBtboKiDvfrPa4XP4ND034Cg5ppsR0RfJawYAijzaqSUvQszte447f8KS9U0zthEc7xNQ3O6N_6T2h24gwDTHP8Zwc0EQJCI-_QWzAMewOfAYcFFAIztHknQAPS4UmyvoQnr_jiMq4cD_f-dpkJWDQ2zigdtujipPi2FekZGXi1dY2wJclBcwduAlaFC_1Qop8vsB4qUkJfH8CAlVqv3IOADRsFwKiLWQkowrrWiBn8aHcqLQpgRxt2INp3J5BX75s13QvXxKWxpngqR65NsQ7NqOg_ZOS6C9THl8F_mbEs_UdhpHz4vzyUx82_d7EzqL-_3ExNETALNFyU0T14aVpeYeaHd3M1RGyYGTvw0vf9PGCqqnKwyihqg-vvGuLdVMxe-pSQHqu-S1LVlPJ5nkCcfnk7VM2p7vS8PART8PVM7CyDRk0BmCBfrIUsGYLI2yttaaM1zZkqkXrKfyhqnA9CL0SuYFIxEdCIeiLyQ1oBNhcYghRV1XgpGY3drTJGX7wBFMVDh5WEXKkSAw42YAv7o1s_EL0I3GHZCNyNgNx8OBkc91VcHwFHAAvRfIp2suRSBKaKYP7ICklCviBVJLgBRaJGcscTUyfCQFsQKSpANNS8Sw7JDmOkUIqTK72wgvTGp-nfLYyAjiSoIk8AlHYC6fbUIiE0XRUJZkZJHDWp-x6OeZRtqNotV3cCa6pGlSHjoEZ0fqbBEnAnVDhIpfl7dshtvaxbMklnTOzBiQDWL7lMYMlNpuAe5mdDokSNinDKpuXtfEuCc5h9JArJAPGmoFJxB3eDhgKQLhP5rKAHPCu2kHTI7QxRL4MgSMsUHAuCfPoBk5oKJVLEq40KHJSEQXgOWzOZM1Sx5P21UQH981DsUcER7smw3bFViWEJUIEeBY5SwmNY164pS2tMPPZixi31niurYyuHA8QVqXvz-cSYdiWmrc0yZlJrKi-BNQIDpLWQiXmKkvoqiq0aiRtoJSB3ahOOi6ASpV_AAx8itLVJj5T9fKequ8DkG4t9F9gJJlCNOFLrus6LmHMtBwblyAG2MAoB8oVvK5Ex8mWPMilimJ3Bup2VGi6qqOiia2Ceru4rUpbi5129BfAvAI4a13RJoQWrA9ZyOSNzQxUHuyGDGTPXd0JA_w813jfWCUNe3Veutdh7a7SKVZhPY_FLIpun5LYPi_0EhTSSn-ViDi1V7Dy5DgkGLZpBnFqzUXsmemGQ_ZRGooTfGdMDngErsNLLwE_nOWJOU9ldI7TwF_BpUOe2iRVOwogOtUrgm7YMzHYJ75rRg3hnGs3e-S_sKWKnVB4Gsg844nJJo3joHWjTmMNcVu1wQeM5brz3ewWp1g4s_5ZzFZ3BkPM9mRAdws_6GEuk0Bhag9WvYmwj-kN855p8nbwPJz3cLVJdxfWaxgFWxj_vgqOMOtAECBhQECUVMiYyUMigLi84-bkSWjzbU1AQxzyXo2AioTst5XrYfdZ6rF8b_PP-_qHMc2m0JTHndZufP2AE69rnYnaLWP9JO7ZAvILVmfebcxpOzIfCXUWm54d232K5gcVkCvOZz1nas-3Fet6MYYwj2WeCGaJsABcsGR93bBUXfv4VNmW4drzPUchV7cmTVvheT4egREI2CdLqYW48Yeaealp0h2IHjvC-7-_ngo5tVzhUhChMF4lZcWcWVFnrsFAW8bNVhpjWGttwIvHhT37tmfZy8GO5g9Ytt7RsRvil06XFpmERFKHFhVguJgS249DDByAwVPNIxypPke8KD7Aw8i1xcx2a1uNgbK2DQDgkxgqoMClXtNns19S1kXytLbD4gH70sGDFezz5PoxqHeGDe4g7QWjAJ5Gy4N98HqndLqE-WiCk_5uSTH_yM1fa7IB8uYyWv_607Bra7-3mM_cpatRW73Ztk9WddfO60atC7SHNm01P7cxqbeBuU-29Qkwmot1W3sl3UOjd7Wct7G-twW-V5HtEcBrfa-ke2j9rkuLbay_nybvt_NeG3dni3bdAe2TfQvtD4G3EWx7I_flje8B04u7u2eC9R_DDboE294N-hLI9wDuu7jBj2X7ZzL4t7fys0S4u23fs1MY8uwvz5w8-1iRVR8-bGPJ8nuLvQ_QUpId0LjpIt-kSVJ8_PJkY1YdsTZdX0_sAc3Q7jg1GyzFlHr7ouO8XkztPQ37D3vlLj2Z0Dd_bVJ38VksKd2msz5pzxwiVMJgTVcND6qiq7EW_v4PYsZw1zQ-AAA="
    },
    {
      "_id": "34bad236d77bea0a0ee6c6cba5be54a6",
      "_meta": {
        "ETag": "96cff7bdf84bf8d4be2a27c9bbf8581664da7c017a17d417dedd7e6576c27f18",
        "github_username": "kevinxin90",
        "slug": "go_ma",
        "timestamp": "2020-07-29T22:38:45.965729",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:50.568168",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/go_mf/smartapi.yaml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call. Type: string.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned chem object. If \"true\" or \"1\", all fields will be collapsed into a single level deep object (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Type: boolean. Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us with an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "facet_size": {
            "description": "the number of facet buckets to return in the response. Type: integer. Default: 10. Max: 1000.",
            "in": "query",
            "name": "facet_size",
            "schema": {
              "type": "integer"
            }
          },
          "facets": {
            "description": "a comma-separated list of fields to return facets on.  In addition to query hits, the fields notated in \"facets\" will be aggregated by value and bucklet counts will be displayed in the \"facets\" field of the response object. Type: string (list). Default: None. Max: 1000.",
            "in": "query",
            "name": "facets",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated list of fields (in dotfield notation) used to limit the fields returned from the matching chem hit(s). The supported field names can be found from any chem object or from the /metadata/fields endpoint. If \"fields=all\", all available fields will be returned. Type: string (list). Default: all. Max: 1000.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "format": {
            "description": "controls output format of server response, currently supports: \"json\", \"jsonld\", \"html\". Type: string. Default: json.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching chem hits to skip, starting from 0.  This can be useful for paging in combination with the \"size\" parameter. Type: integer. Default: None.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "prefix": {
            "description": "Pass a prefix string to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          "search": {
            "description": "Pass a search term to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          "size": {
            "description": "the maximum number of matching chem hits to return per batch. Type: integer. Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated list of fields to sort on. Prefix each with \"-\" for descending order, otherwise in ascending order. Default: sort by descending score.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "Geneset": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Geneset"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Geneset"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "has_part": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "parameters": {
                "fields": "_id"
              },
              "predicate": "has_part",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "part_of.go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/has_part"
              },
              "source": "Gene Ontology",
              "supportBatch": true
            }
          ],
          "has_subclass": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "parameters": {
                "fields": "children"
              },
              "predicate": "has_subclass",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/has_subclass"
              },
              "source": "Gene Ontology",
              "supportBatch": true
            }
          ],
          "part_of": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "parameters": {
                "fields": "part_of.go"
              },
              "predicate": "part_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/part_of"
              },
              "source": "Gene Ontology",
              "supportBatch": true
            }
          ],
          "subclass_of": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "parameters": {
                "fields": "parents"
              },
              "predicate": "subclass_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/subclass_of"
              },
              "source": "Gene Ontology",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "has_part": {
            "GO": "_id"
          },
          "has_subclass": {
            "GO": "children"
          },
          "part_of": {
            "GO": "part_of.go"
          },
          "subclass_of": {
            "GO": "parents"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothings.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the Gene Ontology Molecular Activity query web services.",
        "termsOfService": "https://biothings.io/about",
        "title": "Gene Ontology Molecular Activity API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/geneset",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple GO geneset IDs separated by comma. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted. Type: string (list). Max: 1000.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Geneset"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "A list of matching geneset objects"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "For a list of geneset IDs, return the matching geneset object",
              "tags": [
                "geneset"
              ]
            }
          }
        },
        {
          "path": "/geneset/{genesetid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Retrieve geneset objects based on GO geneset ID.  Supports JSONP and CORS as well.",
                  "example": "GO:0018672",
                  "in": "path",
                  "name": "genesetid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Geneset"
                      }
                    }
                  },
                  "description": "A matching geneset object"
                },
                "404": {
                  "description": "A response indicating an unknown geneset ID"
                }
              },
              "summary": "Retrieve geneset objects based on ID",
              "tags": [
                "geneset"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "DISEASES metadata object"
                }
              },
              "summary": "Get metadata about the data available from DISEASES",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/search",
                  "name": "search"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/prefix",
                  "name": "prefix"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "description": "DISEASES metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available object",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string.",
                  "example": "parents:\"GO:0016705\"",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/facet_size",
                  "name": "facet_size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/facets",
                  "name": "facets"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make queries and return matching geneset hits. Supports JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms separated by comma (also \"+\" or whitespace).  Does not support wildcard queries",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "a comma-separated list of fields as the search \"scopes\" (fields to search through for query term). The available \"fields\" that can be passed to the \"scopes\" parameter are listed in the **/metadata/fields** endpoint.string Default: \"scopes=_id\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make batch geneset queries and return matching geneset hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/has_subclass"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/subclass_of"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/part_of"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/has_part"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://biothings.ncats.io/go_mf"
        },
        {
          "description": "Production server",
          "url": "http://biothings.ncats.io/go_mf"
        }
      ],
      "tags": [
        {
          "name": "ontology"
        },
        {
          "name": "molecular activity"
        },
        {
          "name": "geneset"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIAHb6IV8C_91abW_cuBH-K4TaD05q767v0lxr4ID6mtTwAbF9cYAWiA2DK3F3eZZEhaRsbw3_984MSb2tVru275Jz8yVrii_z8swzw5HuI1WInBcyOmDR96PJaBLtskjmMwUD91GscstjS79FxmWK0xYiLf4xlcouZD43I6lwSc4zgQ9_Pv73-xP2n-MTHLzbkwmtsLYwB-PxXNpFOR3FKhtfixuZ38n87xM3UauU1mthCpUbOU0FS8SNSEE-HT3AnESYWMvCSpXjxHcqLjMB4uEAUzNmF4IdiVyw09yqVM2X7APsGZcp1-wwtvJG2iX7Ugq9ZLdiyozQNzIWZoTnW6Ezczo7d2NNkZt6jvlUlZbmS-vE3Xjg4dkxLrgR2njB98HGqA8KAKMw9Pm-q9z7PNbLwoqEnWmVlDHp6BbgbqVO-2XMY25J0rm6ymZ4zMrWmzYc3O8SdedzL3TwufL6u_PCaFYZg3tjtJ_PwXRG2PYg-ac9ZDXPTcqt0u3xSkonVsHtwhBQx2Fn_KNQxv_gGhbayuJ_1mKG2_xpDHAEyAGUzLieNE6UnUmRJk1wV2MkyKYdaKpprvcjW6124dZY7Aa2O1npjNvWyW6ELKUFWNnYn1SyrIIcdqDfvChSGVNMje_2bm9v93DlHuBD5LFKREKzTLwAaZxZNQaolcLZXibu_w7osjK1soCQPjpl3jvs-J0BBKLUiPPpkoEuGR-xE2UFBDO3LC61BsFSDFimcvjf8mtBgS7zorQMTmNlwaxi-5PJhGX8TmZltkszgEgsu5VpyqawOJMWThmxT8tCHDBjNQCH7aTS2Fcj9oHfHdAOjgtgCsrsJkUPD95kUpP2n0nHy4cH_4Doymv_3WQyaNFfDZmjZUBpReZW93rVzTTjozpaKgm51hyC5aGHHQ8Z6oa0CG6PMUwqu6vpryK2hMLozRMEHhTzvdZKfxQG_L1OsGAy8GFC54BsPGcyc1ACLzuwIio8HRBdloAOjYiN_qWAUyoFG3jahc1tqXMCwBrFowaFVRx0SUcE4hjf-x8yeSCV56KfQzq6fRQAGchZXVOzKTegDDBuC_4jxs7LolAaZvx8fnpyBmZI2D9PP54zbgDyaUp4FHc8K3y2OT2YTPb_9vaH71yWxjHkvWakV6JHbdxaXQo0Y-3IHqB_DVqMeZpOeXzd3KEae-HE-lwy2I4C-uNqHd5dnL_po-W1wVjm17m6zRtgXQnCzWCHRQOxBhblCbd8MMAegyUXDo4xeqG13kXd0vL4_P3h-ftzFmSsTNmxwRGoXc2h4pCYx_15A6jiWMbOtMpY2LNlksoGHZsEhD_HNEZwHbeYwY98pSAt4Lm8a673I79boG30orPqU5zpV9Y-7cklXWc6JD4iffxCdxPHxl3mh6VoooMLnwPe_jD560U0APsvf1T6fx55z3gs7JWR_xWtHerRrXYxkHNbkYF_f6W4eFb6QT3NiuZb2q5rte3thQzWOhX__uMnTAqo4WLU9QOqLHgr7YKi_iJaSGsuIubvN8sXXC5_wEsTPoJLGpWYvkheKRhQ5dFWNWlFeu7ESzzxG960nxVTz-KjZ8TUN7ujfxm8obuIoIZYz_Wc7fDUKAiPv0BswDXsFjADAAUWgns0e6cAYbmyzDgM4f07iblOAvz67teUlUDA3sYBd8fu1ZKEa19IyYbi1dU2IJfbCoTb8ROsCg_tQqtyvsB4aWgJcn-CDerUfuEBAHu4LgRE21Swghusa2E7xw_VQZVPGeRoEg-mSXcHff26W9O9fs1EnhRK5nbk2xDvxIyD9Q-qTX-8kslF1N-M-M36DpuZ8-z0_NMQN_3S5s5Q____cugUCbNiy20ZtY8vqeU9tWLvem72UATSfYgv-6aPF9xcmXIap4DNAdbpXRvWXanZY5cC4u0TlqG0uBQYzvmpXrCaN-7rsqqHFpaqpLjEoGQckBYmt-IRYjVDv3GfynBSuwU42ubiuLFsrrNVj6iIc61SigiHsvCywoEGIIeb-_AZseMZqIPVuiPYi2j_AiQAWQLjhZ5mrNKUF4bIBjTlzIA8wF8pvjVhiRCF3xM5O2UASIR3HaVul55lu6zEMRa0QkZ3b1mQS-U8l7MlKeC3BEuUMagiXnnbTpVKBc9HNbPNIGuIIWM3a4AeY_sdnbXDi6gVU4PpEBhIw1rM6dVDaQBOaHBV6uqVzy72kzFXlprPBa0BzYALbmQiYImjMIAXnbTLjHKZAFa5ZGAJXRrAQXYoDW4DzpqBS9QttqRpB9h4SOeqatmArsbtpkdpckSZTUEizIo4l03L-BquBaiVZyafjwIRhigA5Ii50A1P7U-6_fA10rdvYj0q-L0bOjwtw9dKuE2YAmSx45zxJJEBli6fI9267r9fS8h16fjCywBhVWF_PgechPrmhqelIDZH86VgRgBI3giVRJoi5cs6uze2dIFSBXYrJa5561CZ_AQ48DFGN9tgpm4gPdbeO6DdSui_wkii6ieVmbRNG1c0Rn2uVuediA2csmN8leXrQpzstge9TKiwZmBuvwvPl01WpNgKu3crqrqectzpRn8EzgvE2WjFtSk0iL7JQ5Q3tnNQdZvY5CBX7K9PGIDz0uJLrjppuPe1Fbx2Gy_IvGENFpFYQaHq7leauN8Lm4FBOumvVhGnDipWXVc2KYa9gY08tQIRV6hfS8g-xkKRgM_I5cBHAB1ZoQRwOCtTKuILPsdpgFeA9FTmLkk16k9kp2ZFsJ72KAaH1PcdkE0853ucPfqfuVLFTQhIA51nMqVs0rqDOBitddYmaeve6wZn-ZbwenHD1QkuSr-XsHWjepOwAxnQv_rdiDCfSaAoddX8YCIcEnrLvEedxTUyb857uJrS3ZlDjeDgC8L3RbSHWQeCADcGBkRNlU6E3mUKNte3kq47cD9uPW0oSJtD3mtsANdPPewr3zgd8tRD9dzln6Pm1xjtTsSVTNZ6u_XKHSdeNq7DjVdbzetfzxGQX7A66z2GrngxFIRmfbHZc2L3ctx-iw-54nQ2cJHreaG_ahdyBP2s8kQ0S5Uj4CCSwzqJVL9r6DNlV4fLno8Igl7rLUl32d_miwUYgYB9tJZWqev-UKOHlqfrA7HHj_D87Zsrpa-cVLgUVAjOq7WshaMVTeFaAnR13G4lOcN5awtZeiDcc253lnsjtabjAJ5tthHcgfh5zbljJqVxq13HCjAcpiTuiwSiA3B4bmVMnZLw2ddh9dUXRq4rZp62ttMYqGrbCAg-TaACinzqpeaO-3yvqVJPP3UafmAzNLp3in2eXD5EzXYk8Q7uvRAcyJOsvLH52mzPXWUwH11wMNwpCfP3_PyVzg4wb6nj1U8OSVxX-_2E-cy_6SOzNTs8L8mr_l3nqlObCr1An3Y6bk9xaei8vTB3osyjuVr1aNDnBXqz0QR9iierZuhLcmUw9grVkiZPd2IHIt-EbV1n-gnOrFNrd9--5HqPbuimrjZThyktHqwCv_G0ZbMaT2EGeQv-_Q9ebgJO5C8AAA=="
    },
    {
      "_id": "81955d376a10505c1c69cd06dbda3047",
      "_meta": {
        "ETag": "f94053bc78b3c2f0b97f7afd52d7de2fe083b655e56a53090ad73e12be83673b",
        "github_username": "kevinxin90",
        "timestamp": "2020-05-27T16:53:40.804575",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:30.547214",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/semmed/semmed_gene.yaml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call. Type: string.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned disease object. If \"true\" or \"1\", all fields will be collapsed into a single level deep object (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Type: boolean. Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us with an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "facet_size": {
            "description": "the number of facet buckets to return in the response. Type: integer. Default: 10. Max: 1000.",
            "in": "query",
            "name": "facet_size",
            "schema": {
              "type": "integer"
            }
          },
          "facets": {
            "description": "a comma-separated list of fields to return facets on.  In addition to query hits, the fields notated in \"facets\" will be aggregated by value and bucklet counts will be displayed in the \"facets\" field of the response object. Type: string (list). Default: None. Max: 1000.",
            "in": "query",
            "name": "facets",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated list of fields (in dotfield notation) used to limit the fields returned from the matching disease hit(s). The supported field names can be found from any disease object or from the /metadata/fields endpoint. If \"fields=all\", all available fields will be returned. Type: string (list). Default: all. Max: 1000.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "format": {
            "description": "controls output format of server response, currently supports: \"json\", \"jsonld\", \"html\". Type: string. Default: json.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching disease hits to skip, starting from 0.  This can be useful for paging in combination with the \"size\" parameter. Type: integer. Default: None.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "prefix": {
            "description": "Pass a prefix string to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          "search": {
            "description": "Pass a search term to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          "size": {
            "description": "the maximum number of matching disease hits to return per batch. Type: integer. Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated list of fields to sort on. Prefix each with \"-\" for descending order, otherwise in ascending order. Default: sort by descending score.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "Disease": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Disease"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Disease"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "Gene-affected_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-affected_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-affected_by-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-affected_by-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-affected_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-affected_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-affected_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-affected_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-affected_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-affected_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-affects-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-affects-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-affects-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-affects-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-affects-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-affects-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-affects-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-affects-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-affects-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-affects-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-affects-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-affects-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-affects-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-affects-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-affects-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-affects-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-causes-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "causes"
              },
              "path": "/query",
              "predicate": "causes",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-causes-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-causes-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "causes"
              },
              "path": "/query",
              "predicate": "causes",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-causes-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-disrupted_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-disrupted_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-disrupted_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-disrupted_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-disrupted_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-disrupted_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-disrupted_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-disrupted_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-disrupts-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-disrupts-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-disrupts-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-disrupts-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-disrupts-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-disrupts-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-disrupts-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-disrupts-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-disrupts-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-disrupts-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-disrupts-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-disrupts-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-disrupts-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-disrupts-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-disrupts-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "disrupts"
              },
              "path": "/query",
              "predicate": "disrupts",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-disrupts-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-negatively_regulated_by-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-negatively_regulated_by-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-negatively_regulated_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-negatively_regulated_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-negatively_regulated_by-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-negatively_regulated_by-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-negatively_regulated_by-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-negatively_regulated_by-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-negatively_regulated_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-negatively_regulated_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-negatively_regulated_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-negatively_regulated_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-negatively_regulated_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-negatively_regulated_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-negatively_regulated_by-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-negatively_regulated_by-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-negatively_regulates-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-negatively_regulates-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-negatively_regulates-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-negatively_regulates-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-negatively_regulates-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-negatively_regulates-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-negatively_regulates-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-negatively_regulates-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-negatively_regulates-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-negatively_regulates-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-negatively_regulates-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-negatively_regulates-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-physically_interacts_with-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-physically_interacts_with-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-physically_interacts_with-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-physically_interacts_with-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-physically_interacts_with-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-physically_interacts_with-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-physically_interacts_with-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-physically_interacts_with-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-physically_interacts_with-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-physically_interacts_with-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-physically_interacts_with-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-physically_interacts_with-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-physically_interacts_with-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-physically_interacts_with-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-physically_interacts_with-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-physically_interacts_with-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-positively_regulated_by-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-positively_regulated_by-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-positively_regulated_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-positively_regulated_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-positively_regulated_by-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-positively_regulated_by-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-positively_regulated_by-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-positively_regulated_by-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-positively_regulated_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-positively_regulated_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-positively_regulated_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-positively_regulated_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-positively_regulated_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-positively_regulated_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-positively_regulated_by-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-positively_regulated_by-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-positively_regulates-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-positively_regulates-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-positively_regulates-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-positively_regulates-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-positively_regulates-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-positively_regulates-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-positively_regulates-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-positively_regulates-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-positively_regulates-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-positively_regulates-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-positively_regulates-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-positively_regulates-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-positively_regulates-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-positively_regulates-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-positively_regulates-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-positively_regulates-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-prevents-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "prevents"
              },
              "path": "/query",
              "predicate": "prevents",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-prevents-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-related_to-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-related_to-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-related_to-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-related_to-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-related_to-Cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-related_to-Cell"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-related_to-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-related_to-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-related_to-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-related_to-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-related_to-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-related_to-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-related_to-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-related_to-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "Gene-treats-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "treats"
              },
              "path": "/query",
              "predicate": "treats",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/Gene-treats-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "Gene-affected_by-BiologicalProcess": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "Gene-affected_by-CellularComponent": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "Gene-affected_by-ChemicalSubstance": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "Gene-affected_by-Disease": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "Gene-affected_by-Gene": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "Gene-affects-AnatomicalEntity": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "Gene-affects-BiologicalProcess": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "Gene-affects-Cell": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "Gene-affects-CellularComponent": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "Gene-affects-ChemicalSubstance": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "Gene-affects-Disease": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "Gene-affects-Gene": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "Gene-affects-PhenotypicFeature": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "Gene-causes-BiologicalProcess": {
            "pmid": "causes.pmid",
            "umls": "causes.umls"
          },
          "Gene-causes-Disease": {
            "pmid": "causes.pmid",
            "umls": "causes.umls"
          },
          "Gene-disrupted_by-BiologicalProcess": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "Gene-disrupted_by-ChemicalSubstance": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "Gene-disrupted_by-Disease": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "Gene-disrupted_by-Gene": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "Gene-disrupts-AnatomicalEntity": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "Gene-disrupts-BiologicalProcess": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "Gene-disrupts-Cell": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "Gene-disrupts-CellularComponent": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "Gene-disrupts-ChemicalSubstance": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "Gene-disrupts-Disease": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "Gene-disrupts-Gene": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "Gene-disrupts-PhenotypicFeature": {
            "pmid": "disrupts.pmid",
            "umls": "disrupts.umls"
          },
          "Gene-negatively_regulated_by-AnatomicalEntity": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "Gene-negatively_regulated_by-BiologicalProcess": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "Gene-negatively_regulated_by-Cell": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "Gene-negatively_regulated_by-CellularComponent": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "Gene-negatively_regulated_by-ChemicalSubstance": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "Gene-negatively_regulated_by-Disease": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "Gene-negatively_regulated_by-Gene": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "Gene-negatively_regulated_by-PhenotypicFeature": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "Gene-negatively_regulates-BiologicalProcess": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "Gene-negatively_regulates-CellularComponent": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "Gene-negatively_regulates-ChemicalSubstance": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "Gene-negatively_regulates-Disease": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "Gene-negatively_regulates-Gene": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "Gene-negatively_regulates-PhenotypicFeature": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "Gene-physically_interacts_with-AnatomicalEntity": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "Gene-physically_interacts_with-BiologicalProcess": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "Gene-physically_interacts_with-Cell": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "Gene-physically_interacts_with-CellularComponent": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "Gene-physically_interacts_with-ChemicalSubstance": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "Gene-physically_interacts_with-Disease": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "Gene-physically_interacts_with-Gene": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "Gene-physically_interacts_with-PhenotypicFeature": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "Gene-positively_regulated_by-AnatomicalEntity": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "Gene-positively_regulated_by-BiologicalProcess": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "Gene-positively_regulated_by-Cell": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "Gene-positively_regulated_by-CellularComponent": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "Gene-positively_regulated_by-ChemicalSubstance": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "Gene-positively_regulated_by-Disease": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "Gene-positively_regulated_by-Gene": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "Gene-positively_regulated_by-PhenotypicFeature": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "Gene-positively_regulates-AnatomicalEntity": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "Gene-positively_regulates-BiologicalProcess": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "Gene-positively_regulates-Cell": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "Gene-positively_regulates-CellularComponent": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "Gene-positively_regulates-ChemicalSubstance": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "Gene-positively_regulates-Disease": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "Gene-positively_regulates-Gene": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "Gene-positively_regulates-PhenotypicFeature": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "Gene-prevents-Disease": {
            "pmid": "prevents.pmid",
            "umls": "prevents.umls"
          },
          "Gene-related_to-AnatomicalEntity": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "Gene-related_to-BiologicalProcess": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "Gene-related_to-Cell": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "Gene-related_to-ChemicalSubstance": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "Gene-related_to-Disease": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "Gene-related_to-Gene": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "Gene-related_to-PhenotypicFeature": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "Gene-treats-Disease": {
            "pmid": "treats.pmid",
            "umls": "treats.umls"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothings.io",
          "name": "Chunlei Wu",
          "x-id": "https://github.com/newgene",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the SEMMED disease query web services.  Learn more about [mydisease.info](http://pending.biothings.io/semmed)",
        "termsOfService": "http://biothings.ncats.io",
        "title": "SEMMED Gene API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/gene",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple disease IDs separated by comma. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted. Type: string (list). Max: 1000.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Disease"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "A list of matching disease objects"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "For a list of disease IDs, return the matching disease object",
              "tags": [
                "gene"
              ]
            }
          }
        },
        {
          "path": "/gene/{geneid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Retrieve disease objects based on ID",
                  "example": "C0004096",
                  "in": "path",
                  "name": "geneid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Disease"
                      }
                    }
                  },
                  "description": "A matching disease object"
                },
                "404": {
                  "description": "A response indicating an unknown disease ID"
                }
              },
              "summary": "Retrieve disease objects based on ID",
              "tags": [
                "disease"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "mydisease.info metadata object"
                }
              },
              "summary": "Get metadata about the data available from mydisease.info",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/search",
                  "name": "search"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/prefix",
                  "name": "prefix"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "description": "mydisease.info metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from a mydisease.info chem object",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string.  The detailed query syntax can be found from our [docs](http://mydisease.info).  Examples: \"cancer\", \"primary ciliary dyskinesia\", \"DOID:9562\"",
                  "example": "cancer",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/facet_size",
                  "name": "facet_size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/facets",
                  "name": "facets"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make disease queries and return matching disease hits. Supports JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms separated by comma (also \"+\" or whitespace).  Does not support wildcard queries",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "a comma-separated list of fields as the search \"scopes\" (fields to search through for query term). The available \"fields\" that can be passed to the \"scopes\" parameter are listed in the **/metadata/fields** endpoint.string Default: \"scopes=_id\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with the \"hits\" property",
                  "x-bte-response-mapping": {
                    "$ref": "#/components/x-bte-response-mapping/query-post"
                  }
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make batch disease queries and return matching disease hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-affected_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-affected_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-affected_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-affected_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-affected_by-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-affects-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-affects-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-affects-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-affects-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-affects-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-affects-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-affects-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-affects-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-causes-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-causes-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-disrupted_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-disrupted_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-disrupted_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-disrupted_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-disrupts-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-disrupts-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-disrupts-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-disrupts-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-disrupts-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-disrupts-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-disrupts-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-disrupts-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-negatively_regulated_by-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-negatively_regulated_by-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-negatively_regulated_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-negatively_regulated_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-negatively_regulated_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-negatively_regulated_by-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-negatively_regulated_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-negatively_regulated_by-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-negatively_regulates-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-negatively_regulates-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-negatively_regulates-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-negatively_regulates-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-negatively_regulates-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-negatively_regulates-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-physically_interacts_with-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-physically_interacts_with-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-physically_interacts_with-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-physically_interacts_with-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-physically_interacts_with-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-physically_interacts_with-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-physically_interacts_with-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-physically_interacts_with-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-positively_regulated_by-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-positively_regulated_by-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-positively_regulated_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-positively_regulated_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-positively_regulated_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-positively_regulated_by-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-positively_regulated_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-positively_regulated_by-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-positively_regulates-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-positively_regulates-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-positively_regulates-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-positively_regulates-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-positively_regulates-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-positively_regulates-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-positively_regulates-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-positively_regulates-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-prevents-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-related_to-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-related_to-Cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-related_to-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-related_to-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-related_to-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-related_to-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-related_to-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/Gene-treats-Disease"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "https://biothings.ncats.io/semmedgene"
        }
      ],
      "tags": [
        {
          "name": "disease"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        },
        {
          "name": "semmed"
        }
      ],
      "~raw": "H4sIABWbzl4C_-VdbXPbNhL-KxjdfUhytuzc5TrTzHTm2jjN5KZp3Lo39yH2eCgSsllThAqAdnQe__dbAHwVARJ8kWpC_dDYFLnYxfPsArtYWo8zssaxtw5nb9HsH_PT-ensCM3CeEngwuPMJzH3fC5_xisvjMRttzha_2sREn4bxjdsHhLxSOytsPjw3W0SRzhE_03E1a_HYSAf4XzN3p6c3IT8NlnMfbI6ifHDDY6xuouSSD5NMVuTmIWLCKMA3-MItKOzJ7gnwMyn4ZqHJBY3nhE_WWFQTlxAZIn4LUYX7z99en-GgpBhj2H0R4LpBj3gBWKY3oc-ZnOEfsIejdGKUIy8BUk4-rLapA_MhdlXL4SuoCpMSwD2zcuGnjC8WuHgpVCaY7pin5cXSnRmJDxYPBD7Hs_mh4dcmZgq-QFsR9-ffxSf3WPKUrteAwDCXKExXIVLXx63bT-nJEh8abi6TchIaFSe6LoSqe5yzp-uhEbeTSo_wy6dB6FAcdGLY6KmuXpdzm71EqdezCKPE1q9nitTvawUUsqsPX7LJM1OpIbipzVhinlrj8IjPJ-Pv1K8FAL-cgJEAr4AD9hJcdNJQPgyxFFQ5mV-TarQJkHeysrPp1esnlaeUnpYXbAbmdCVxysjqytymiiGaWf8BxJscv8ECfJnb72OQl8idfL1-OHh4Vg8eQzEwLFPAhzIu5h_C9qoaaXCu3iI1cSHgfp3i22rJOLhWvhj6lYfzxjwTqjMcYAWGwSGrLw5-plwDG7oceQnlIJWkXA-RGL4l3t3WLpoGK_B52AolKwRJ-j16ekpWnlfw1WyOpJ3QAjg6CGMIrSAh1chh1Hm6LfNGr9FjFOgEXoRhYy_nKNP3te3UsJcehjcImklb5o9PaXzFVJp-hdp4NXTU_qBDDSp6X8_PW2czt-ZnIvK7IUcr9TTWkjVnezkrPCpXEOPUg9c50kT175HwjYR0ABzXzhNPu9k8Tv2uaTg7E0PhRvVfE8pob9iBmCbFMumDDAM5DigmxejcKV4BCgrpgpWpMFBRrIE2EEFXWc_Eoq83MASn45AOE8gLgsCGAyflULWTMaIKylfxouTR_H_MHiSlt5gfdzYMulXDEyBRWZ7htECfgmAuKCaGBV_9VZrFbzfAdnenH77jVokxRURuMreqvSYVbnHaYLFVBRgaMi6j7jme1G08Py7soT82sQj41CHtnNjvW-YOKt89Y0urhodKonvYvIQl_yj5ki2zM39JVvZU5eBGfUCj3uN3tKFS8oXlNdrqWWGaHu5qezGUKZpPqFbM_EB8-IetaETMUT9eg_c8sRWcknJClUlV6Ynn4-t-cnYPmSaYEjqV0JEemVPDruGz8Ov5efTKztzOktE1dz2ATZ9cgtfbwthJFxXt3hso61o22Hh-EUmFip0Q0rxm9ALZIZRtvIhtoHU5CvywZ1hF7MkSRwoJUlC0ZeA-CzPM6pKw64GvVfrDXuLLgHr2Mf0EvS_BNxCMTvID6NQ_Bts2F0YYxZ66vOzzx_P3n77z2_-fjnbWraUlAZH_eO5LljDlpul52N-zcL_4YqE4qqVFEZoxQPk73vy3kELprCT1Sy3nLvtWbOfL0H0yqji9-e_xEuvbt4CK-fO1-2HkN_KqHQ5uw05u5yhNKXaTHiT_kmkauUSCuSHICLItui1rY4wfY4ukvUa_IKhf198_vlcPvDu868XyGOQBEbRvBKB1chXYuQ_Mckf5FuD4tIA3_rTygN_NBYHlGfImpimOIBeeBEj4CZ_Ax-BJPABOANEhWgk1rszAgyLCUdMcUhk_4Hv0SCjny67l6sTKKitWXhq2ONCkyzpzLYOTPqt2omBXkoUKPcivYGT7EN-S0lycyv8pmQl6C2W_WILcpkSAGSoGoha-tceEztyEKfiRD5QjinyKJbqwW2hyoBfvdregb56hXAcrEkY83laBDnDSw9m_20u9LvrMLic6Usho1U92iPo-eeL35pi1C_VGJplLg2xVFaIFxwfZw8dr0BNYZhRI_39aqd3LEPO08Qj9EKE4c5xWheF8-m9u2HHQgVpe1MU1t1-Igrax95yCWji4HqxOX4HUwIGRhfJgnGxAW2IcHYSfwhJRG6EzHNKfMzYYIln5Yr3ADkfZFV9oJB3sE4mkUffZQ8OkMiOv489TiQA72Me8s0gYUK1YQJGJAMblQhsBBKw4_NbDCvYZh36P2IP_G-YtIF0YiNRyfcSWCsGzU8qYhzAIJLRZD1qeKmIHGJoRdAOzO1NiVTKSAEhl9Y7IhQSxgRwZIqxMbgwVlTIxQ3nwDhxIcY38Os9jjbXFN-AvJSjozDMJLw34YwCR-GfSfo4dDRJH8JOk8xxyGqS3pu7TXzYCZXZ7pjBdkcLNjYn2O4IwUZlw1hRbX27YQIYEA1pNnwGG6lrkZaOE9fM4ntHtgaRozDYLH8cGpvlD-GyWeo4hDbL783qZm6MQG3Cwp0t2Cbh_WltEjgOqQ3SR6K0QfogQhtkjkRng_T-ZG7gw06ozHbGYzYqidnuGMx2R182NnfZ7ojLRmXtaBsLiu_FLYMmkmLlSJyMw_aSvN4cL8sYhdklgePwuSRwpMkfh7slgb0ZyykoUCLVlTpwKJ6tH6s-Ft0HmlOzDUnksZU4s0KebD5RN1eOqzhBK3EA4aUnveKman_u3KYjrLW7pDjM1agqDmwoieSBkTouyd4BUKcfONhqjZujj0uwSPS1qCPIy9lr0TUD6mRnglnPsU-iyFszeRwHxnqIgUoRRpF4HwEFGK9TmeJUM0Ixlkd3xTmWkqJ57AglTB7IpIahrLFenjaGN3G43EgbUpEwGYkvKPYynd4FIRH24nlx9rf0Ioab5rt8Sq6Z71SimvDsBY_abMPUCW6Ig0oVGylYAowScy4amrLXK45Ev7c4TU6od4PlM2DZmpL7MMDwiDrkA4bJkY4QI-qsFJ5Sx6VcEgy2v3dyHhImxABYS4CEPIiWcSkBBDfZnJ_rtxCs1AekMVoCkawWoJE4Nxb3okXi32EuT4fTU7b0xDY71MscQezibzAtIfX6dLtf3aB9tWdJY0Iqu2RDvzPwwgglBBFgFvoYIy8IwoyW6sRbHB2q7vz0WclcdWB9meoAbpVz_-aGijxddQDce1GC5cmkmL4IphEIEpdcBTx1HXmb4vy7JFI5Su7blUNjw1sB-ZT_DGGwy6QzG84UDaFd5_sFWFdz_ZfCk2R_QBSuQl6e4zySycZBbWc84PKCpa0IafOEuF-NAKYxTQeiF2-2YqP0sGyM7c6Dou9ARVB19TuIfFn4LLVhVgNpZkAbTnIBsYMp77ppg0k1xZhXDmB7wsWrKMXqod6lykl2VHqNJZ1b2ZEpegJUv6X4KQrUz7d8BROytQ4WJopbGw3L23raDBO9dK3RSnv2L1eZuxCWIdihUdl3IFE_lS2sYc4VIOQyiWS_y9q7EbcBcYHbizBWq1WpVUOEqfLuwBz_pDM2zUDaNNgW8NLmZc0UnKtti7ohIxvYvAwjuaxU2nUUk4x4tWlbNFW34JX2epvVzbqMMF3tStmiA71N2YalMH1Hy4Zk6aoC21XVpdK4KDbpbbkGyn5cg9rta6B4Wi5954o42AM4JMUvZ8diBQI_EILV66AQKwNMjxAB4fQhlG08yKt-WjJQCoc1sCSA-YQ2w5W2GzeB9ZR_rtaiLAnQ9O1dh4ER8MrrceLGq1LzWOkVlnJbk2YIWGjETk07jGxd8mUCZ9x4akbcbiWrvnEHK8bnZUODkublu_q8SCDkj_lqMVtGRIXhTCVFd6lS8ZqAbiq3bbjSvPCX2WWeSdmjNc7bhXAFfLazlZyQO72ryQ-5F5kdUYMjfP7Nm2tCr5VW4lEwIQOvsLJQTj5RVq6iwLaNdk9KMBRaFrpoKKwZd_su9TKJoZPucWbRHqfUEC_IXqh4RagY4EjFCric9uSpV-r_8-mnCxkmgAgxD3310kz2cjesxrdE3ie7HWWUTKhfegNdXFN7oFaxmuKOeme7UlrIt8azkply9uQ7km_zN200jcqL7AfRZTx7VNZ-Ob16mpX7fGfJKmJZO6Tckf0g1pfifZVs73bdt0HUrolRLP-ydxPXrBXzYtG3-Gyh1pTdDgVqbcWxK9TFQvxMAS7KhQcCa3mJ7AjmB_WXKJ4pkoXYQ4AxK5N3xbB-hPN8l9n6adPBLLO6gzZ7qDUnwM8W5frpnQXIbLoA60_nddgyDa7ybPJZe6z7-GXnw9aYuZ7ZTBtN24xGB63zmcykobXOYHTQOpW5TBrGloxFB169K-XZwqhpoHEdUG3PkC20jiShkwawKfk07VqdTjonv5-1SjbL0G69CzvxVVJZM0UQ6-8kV5HLLNsGzuGd6-TBtNi31mBteRfcmYyzbOcUIW5_Z78KdNVePdyOBGGnoDUGZBtAHQ7OToFsEaht4J58SuMUqPrkphlHhw9cMgsnjKvNkUthZh3byR-6OIGh_tilETfnt8ETR9R6-6uF1_1d0rThtd8daeF1K6uZNpRt2YwWQIcPYZwA1eIYpgleV7KWaYPYmK0Yd7OOHsY4s89tOY7RwGv9NwhdyUsNBk8R-i5_P7JKBOMktPJi8jntAeCvz3gHYO5uPnwIbGjPlvtTw-Fc-gCoYZFp96eGI3n4AdDAmKX3B9_hHP4ACGGR4fenxuTz_wMggL46MCxrcLR2cCD5REtloRc12IFlFswRUrCeOQVro8NhZRPu0KFfHtFKB3czCHeg75I7tAJ-WFmDOyToly-00sHFTMEd0K1zhFacDys7cGgX2CsvKNOhw3cFuXL-aDR5irTo9l1PVWo0TIQFPyZ_DnkgPNCfRQ7E3t2qwaGwor1-MIwiDlcSDoQiFjWFYRRxpLpwIHQw1hmGkcDhisOBEMOi9jCMIpOvQhwIEfT1iOFZhqOViQPKP1pqFFYUsf3mV2fKFHqDJ0mODt_au8UM0yS08mL65Qn38TeUJvpj7nBZ4gDYYFGS6E0Nl8sR7lPDphTRmxqulCHcp4G5BNEbfJfLD-4Twqb00Jsa0y87uE8AQ8lhUNbgarnhMPKJtlJDH2qwg6oyMEcowfrVF1gbF1ysLLiDuXVNoR3ng6omOMSAXnWEVjocVgXBHTr0qx200sHdqoE70HepF7QCfliVAndI0K9G0EoHF6sD7oBuXRew2u0fTkXArTygey2gQgeK78XYziz1qT2ThHgbizqYuXU5gBSr8g4n7tZvChunCGsTQjWEy6bqMJ58XcYZLPU1mFb83K23uINse22lDWaH6yjOwGxRM2mD2ZFNkzOQGjdObUA6XPdwBlyLGkcbzJOvZzgDpr52ocWPU4DbmQRVWTNF9LZwqIGXWXYlPtELkgOXvt3X3NH8qIzKv9xX3jmX18S4KwVD-TN57an63c7mttgx5RfMHFNqGqvGFKkr840jX9s8si2aGcQyg8g01x0sxoJeXWXaUKqrTDONukrS7WaGyjTQsQ-mbRS0lVn7ku9CkPqoJie9rBXTDGkXga1fdlyILd9aE175sGEI3QSMIrh5SkYZokargVJbAlF2l0kyM0mtxaL-kmwI0V2sFVbdxTZwq7uw5rjUW6yJQ_1QNkenrmI7fOlNMYjhodqYpvvsVKjReU_DNnJ_Pzo0O8p-dNB51X5GbnbB_ehQ89f9cd7s3DvXgXVnP7MZndkM3Zn04w1tyfXxBuxM8fGGtmH2eKN1JnSvoTv98cRieONjNR3Md9oqUlvN9jp4o1fvU5NmJ9-nJjqf3-f4zSFgn5rUIsK-_cIcIHagif2fLympoX-oroThPjsV6iFiP8M2B4e96NASFvaigzYg7GXkllCwFx3qQWBvnG9w_13rwDr7PbMZnNmMbOPuI47W1cvHG7qzc483tKVPjzdgZ1ceb2gbDx6XvZ0ct9_Q9dbf0iDph3XB2QdVYc1tqIXc4r6a5NJHRtk1vx4qr9FzBwpv9s2BwnWgDRTZ7F8Dhdc8qI-8WitAIU59VBOVXlZi4L__Aw6VmZxC7QAA"
    },
    {
      "_id": "066a2ef51223a5a95216355facaac9d0",
      "_meta": {
        "ETag": "27b237dc42fa9765075a1572acbf2f5453403056c8c21c9627a10bbb804cc8d0",
        "github_username": "kevinxin90",
        "timestamp": "2020-04-29T00:00:37.777347",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:46.321286",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/cord/cord_ma.yml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned fields when passed \"fields\" parameter contains dot notation, e.g. \"fields=assoicated_with.pmd\". If \"true\" or \"1\", the returned data object contains a single \"associated_with\" field, otherwise (\"false\" or \"0\"), a single \"refseq\" field with a sub-field of \"rna\". Default: true.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated fields to limit the fields returned from the matching protein hits.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching protein hits to skip, starting from 0. Combining with \"size\" parameter, this can be useful for paging. Default: 0.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "size": {
            "description": "the maximum number of matching protein hits to return (with a cap of 1000 at the moment). Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated fields to sort on. Prefix with \"-\" for descending order, otherwise in ascending order. Default: sort by matching scores in decending order.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "ma2anatomy": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma2anatomy"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            },
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "mop"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma2anatomy"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "ma2bp": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma2bp"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            },
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "mop"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma2bp"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "ma2cc": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma2cc"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            },
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "mop"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma2cc"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "ma2cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma2cell"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            },
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "mop"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma2cell"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "ma2chemical": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma2chemical"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            },
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "mop"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma2chemical"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "ma2disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma2disease"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            },
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "mop"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma2disease"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "ma2gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma2gene"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            },
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "mop"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma2gene"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "ma2genomicentity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma2genomicentity"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            },
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "mop"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma2genomicentity"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "ma2ma": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                },
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma2ma"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            },
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                },
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "mop"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma2ma"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "ma2protein": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "go"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma2protein"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            },
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "mop"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/ma2protein"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "ma2anatomy": {
            "UBERON": "associated_with.uberon",
            "pmc": "associated_with.pmc"
          },
          "ma2bp": {
            "GO": "associated_with.go",
            "pmc": "associated_with.pmc"
          },
          "ma2cc": {
            "GO": "associated_with.go",
            "pmc": "associated_with.pmc"
          },
          "ma2cell": {
            "CL": "associated_with.cl",
            "pmc": "associated_with.pmc"
          },
          "ma2chemical": {
            "CHEBI": "associated_with.chebi",
            "pmc": "associated_with.pmc"
          },
          "ma2disease": {
            "DOID": "associated_with.doid",
            "pmc": "associated_with.pmc"
          },
          "ma2gene": {
            "HGNC": "associated_with.hgnc",
            "pmc": "associated_with.pmc"
          },
          "ma2genomicentity": {
            "SO": "associated_with.so",
            "pmc": "associated_with.pmc"
          },
          "ma2ma": {
            "GO": "associated_with.go",
            "MOP": "associated_with.mop",
            "pmc": "associated_with.pmc"
          },
          "ma2protein": {
            "PR": "associated_with.pr",
            "pmc": "associated_with.pmc"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothinigs.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the CORD Query web services. Learn more about [CORD](http://biothings.ncats.io/cord_ma)",
        "termsOfService": "http://myprotein.info/terms/",
        "title": "CORD Molecular Activity API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/geneset",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple GENE ONTOLOGY genesetids seperated by comma, e.g., \"ids=387,388\" Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "For a list of protein ids, return the matching protein objects",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/geneset/{genesetid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "GENE ONTOLOGY  ID, e.g. 387",
                  "example": "387",
                  "in": "path",
                  "name": "genesetid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "description": "A matching protein object"
                }
              },
              "summary": "Retrieve protein annotation object based on pr protein id, support JSONP and CORS as well.",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "CORD API metadata object"
                }
              },
              "summary": "Get metadata about the data available from CORD API."
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Pass a search term to filter the available fields, e.g. \"search=associated_with\".",
                  "in": "query",
                  "name": "search",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Pass a prefix string to filter the available fields, e.g. \"prefix=refseq\".",
                  "in": "query",
                  "name": "prefix",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "MyBP.info metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from MyBP.info."
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string. Examples \"PMC6836328\", \"31045\", \"PR:000001978\".",
                  "example": "PR:000001978",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "description": "a single field or comma-separated fields to return facets, for example, \"facets=pr\"",
                  "in": "query",
                  "name": "facets",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "Make protein query and return matching protein list. Support JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms seperated by comma (also support \"+\" or white space), but no wildcard, e.g., \"q=1017,1018\" or \"q=CDK2+BTK\"",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "Specify one or more fields (separated by comma) as the search \"scopes\", e.g., \"scopes=entrezprotein\", \"scopes=entrezprotein,ensemblprotein\". The available \"fields\" can be passed to \"scopes\" parameter are listed [here](http://myprotein.info/doc/query_service.html#available-fields). Default: \"scopes=entrezprotein,ensemblprotein,retired\" (either Entrez or Ensembl protein ids).",
                          "type": "string"
                        }
                      },
                      "required": [
                        "q"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with \"hits\" property",
                  "x-bte-response-mapping": {
                    "$ref": "#/components/x-bte-response-mapping/query-post"
                  }
                }
              },
              "summary": "Make protein batch query and return matching protein hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/ma2gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ma2protein"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ma2cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ma2cc"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ma2ma"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ma2bp"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ma2genomicentity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ma2chemical"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ma2disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/ma2anatomy"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://biothings.ncats.io/cord_ma/"
        },
        {
          "description": "Production server",
          "url": "http://biothings.ncats.io/cord_ma/"
        }
      ],
      "tags": [
        {
          "name": "geneset"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIAKbDqF4C_-1c6U8jORb_V6ya_UBrctHMdjMtIW1zLMNMQzLAanfVIOSqchJPV5ULlwvIIP73fe_ZdSRUDpheKYroD5C4_Ox3_N5lF_3oqVQkPJXeJ-btdHqdntdinkyGCgYevUAlhgeGPouYywinjUWU_sOXyoxlIkdZRyqkSXgs8OmvJ_8-OmP_OTnDwYe2DInEmDT71O2OpBnnfidQcfebuJPJg0x-7tmJWkVEr0WWqiSTfiRYKO5EBAxq7wnmhCILtEyNVAlOPFRBHgvgDweYGjIzFuygf37Ifs-FnrB74bNM6DsZiKzDvgiuExYrLRj3VW7YV5x6vYWcAWNOHJAmCbhBmbqB0uFNzN8he0boOOsPL-xyhURAF09SrYyQSQd11qV5XaKQxspDHJ2CcEEecc0-B0beSTNhnwcnOO9O6MwJtA3KRzmRaRiFoa-Ps0IfJYGepEaEbKBVmAckuyXA1XId1dU9X6ou7vRs9WVrLlvyGgXnI8d6gYiRSEQmjN2xGORJoqzppsdv0XbTQ0bzJIu4UXp6vGTFbpxyM84Iqd1iR_ySqsx94BoITanZv2kxxGV-AAFigBxAKetWk7pDKaIwq0PbjRATy6hDZWh6nb4cW2kF6281cjtAsmoBesrMvgonpZ8CPX3maRrJgFTbfWjf39-3h0rHbTCjSAIVipBmZcEY1rOK0ehiRgqrPRna3zPYiPPIyBSc8vjo7Ij1zy77X_rH_2VO1UAEkIFlOGLTnzCQKeYtJjqjTotd4aJ7O7sfWzu7u1ceOwOXAXflhgW51sB4hO7KVAK_Df8myJVlkoKb4sJ5yoxi271ej8X8QcZ53KIZECoMu5dRxHwgjqWBvTvkfJOUNJYZDfjwnp6cyqQm6b-SjNdPT-4BBRwn_fter0n6z4yAyYrJTPl_iAB3N2MQbyxNBnI5TU7sjlkOKtBoIO-fSjPOIgn8QqByIQNla8GKJofIhPLE3AQI6HKC3YQwWLhV3XGuaZsC7d3H0hZPJMJINAN_RrRpe7KTQ2s1BubCjcUDj1MbytyIJDJ0tzo6y829aWUbnQtURoW3BuusvzcGPIp8Hnyrr1COfQd_XgmDcwDyDG7nAlQLubOcV4GmAK7PM3BU-J7qGh5bLMvTVGnDfr3onw2ALsSUesF4Bg4aRZ0lUARRecgNX4i_v6bqldVFiReyLCuYmqetY2GqObY4QG-0X-_ARhxrkaFWMSvW7HjT8hbwfIHbDXiWQUzIoC4JxgwLBwxyQxnBR9q_tjUt7tzyyrMke0CvAonx9gaj0JXXqZzTZtGa_iyNt4IjNrOZgs3kA7MzV2XUEu3Bz0zcLubPTvW-Q6D4Tug5newPqKaroGGlew2KHOUMmMotCjRZrbwAQ7bQterpsCMbqTPQ_OD04MPuzoed95BtMf3ubPd--rv9ODj_1MN_2z9_3HU2qYX4-tMF5rpdxyCfyT_FFObx-2qUEPGmKPF7kzeAv4I0BdIZZHWqc9pQ-nBb-jhTg4e4xD7kgTDgE1CEMadoNIMd3kv1lbdAz3bW_98t1qGibXLKeXXtHxnZY6qMbdzdPs-65CnnIoMi1rNl3_ct8E6xai3yqF0Jc6fDwLO8jZVgh128INdaaFzjtm8dzQs7mtuF_Yy1FnXuDS0M2-JRpsqy6Mr7EWAArnwPiBAsS8FB37WYD9E-UdiLhAHXYdX33O5t97Y_tuDHrqXDoYPD397_uH_5m3X9WXcmZwf-G7uwi1QEcjiBwk3ganSe4ULOVhWECubfIZYwC7kq48qtjJmg4NCO7IGutfjT4dNmiqYnLQG-EftRObHDLqdKgCuHKZA24Ak2ZilUEMATRMRqe1aignGQAN0BpnwdCy3KI5mZo5VQBTZB3rhDnc7YxNEP5c5tu--7DjsUQw7G_bSaCC3wUcxiwNSWAGcHlo5oOur3yE6td2zvVuswb5f0l983sg36F5eLotvvTbEtmxfc6DzON6JdELRjYBHlnMtN83xrsDYFrKeFIdPHCLlC4ERWm-JiyfK3UdZW5MQg-qK42DS9G_P32McuCGfzyByDr6AMINa_hix4BREA6uVEfvoKIlCjisFLEyPN5DXiAbrBJ16jmVBCuMteY0SecKNiYPfaorUieZ5vH6vyqSFOT1RO8S-17dNVOXkq9kFMjNELuCsBcNKiLqlexC0uCKvM3MAcxh6tIsoMmEm5KY7PrdtVZez9WCRFAK9F9koCuiCQScZgP1acBpQNoCWgThXjm-tUO2kcYuI4GcIU7ByKzLiNeWeKjVrbXm1VFuFX3rMe2DLeYgoD-T0AgW1hrR1l5Sa9Kw8Sdm2Noj11NT3FRHic-21X5CObOuHIcplakO1FlqoXSw2W8pWKBE-sqYqLlWd2AgUhjjBDajGi64Mckl-GLKlcl7cbLTw8xVIo13wkiAaQBRHpToYCSCCiMtqkxaCUoXNXILDp2RAONYCKNJ9nuAIoaqiiSN3j0SspBNZcJG5Z2S1BZe2Y5FlnNb-TimQsbTftxiqYYh_deHSKiWIRx1UtvIxl2KKJYdw1yWMf1AfmaNwfec--yRTUbjiUo_CYGO512IGKfZngiMvB2KzWPQsdQWZFDQVmH-YR9ZApH1G3X0Kxt1BM5L5ZSAkFyAiv1igvY688R0p35r6KtC5tbzknCniK0-nknlsLxgrv7OpV2vZCAYqmfqkA2LLPEWA-spAKaukOG9jzLWeMNkYD0DWuJZIQJVU6RKNUcQVPVaef1mSidaEKLxUFhSgUR0gUimmiRbK7Y4lFCH0qn1u3mi0H6UbHiNg-hfzRH9qiaKZHuiEO6aNNCYSeSHFTL3ctBKhHqQ6rmrymGCsOy67rg1xrTjWBV2_LGxo3QN6L-TJKfWuGCT00PJoPolmuyTTmw083St9YppEUKoJCiZVmK-aIos7cFAOzKliNktRn9bsCLw0dZcO-s7PsEf6cKhpt8Z4wiDvhzdyFdSelcY2WRTEMu5LbXvsf9wm-AE4oAwMq-ouL8OIe3Hb_EPLGikioV2jRgXBINYN9JyCiHG_oTYMM8py9hL8sb4bZpXgw7NSG1IHNfHR7rXLzKq5arJh-2h-sKMVMfVgmu9kyhSxC92efylPfhiMQv_iA5xfeo1Xv1971k1c_IvBGitYbC44i425Lj0tsJ0YnGvsYoaoT3KKDu3ltx-eaDKu_VXGyuorfgPJ6oMQqXUekkFmpn93M4HIA_T0ydVBo5C1Y1CCAxxgbGizWyvDr5_xkeef8frqhzr8vVaRGeJAFpNCqZ2_OX4MAnixuqPOvleHXz_nJ8s75i1PXTYgA_9o_Ou-fzXL2mSREMBy58_C3IFBCoTx034hIsP4AWL9gUCHARQS6g9uEcPDL8dnBLF_HdMH4FgBK89sb143w_nW09_r5uzN45ey1m-JN8PqLfgMGUMa37N-Ehfp7AhsRBdbY_msZDKYA4KJC8T7NJsSDwfksV4PibaG3SFACoXyDaiNiwFrafP28vzJ6cQ2Ab8NtgtMffGk6D37z-PoJMClkI9x9_ay9hgf-1tzO0Yu3NDfB1w_7J4ezfB0Wb6G-OXyJgPLN3I3w-TW1-vo5fmX2IskXL3dvRKL_5Wj_5Fn0dxJe5H5meBK8xYGpTFC-3L8ZyX_tEbCGxUAFgeunxX9wVLx5-OilcdCgqg4Otyw6Gp6i7C0KHg0PnWsU7x8t22LZIvQew19dpLoPXbaSu2xqmJD7Qtv_Wqd2n7JsOTq9bng8HiVBbamp09pla140CpuVwlbnPMtWgo666aEuDWg7x2XLQKXe8DCIimWqunTZSpT_Gx6HSoYlU1WmW8oYRZEm3sbCl_iq99P_AEiH6iauSwAA"
    },
    {
      "_id": "542ba165e1b4227854cf7c0a8addcc79",
      "_meta": {
        "ETag": "48533e703d4c8517807852ccbeaed37b707048697c80c13566a0b9acdc6b77c8",
        "github_username": "kevinxin90",
        "timestamp": "2020-08-05T21:55:01.450929",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:42.388519",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/opentarget/smartapi.yaml"
      },
      "_score": 0.8,
      "components": {
        "x-bte-kgs-operations": {
          "gene_related_to_chemical": [
            {
              "inputs": [
                {
                  "id": "ENSEMBL",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "CHEMBL.COMPOUND",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "datasource": "chembl",
                "fields": "drug",
                "size": 100,
                "target": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene_related_to_chemical"
              },
              "source": "CHEMBL",
              "supportBatch": false
            }
          ]
        },
        "x-bte-response-mapping": {
          "gene_related_to_chemical": {
            "CHEMBL.COMPOUND": "data.drug.id",
            "moleculeType": "data.drug.molecule_type",
            "name": "data.drug.molecule_name"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@opentarget.org",
          "name": "opentarget help desk",
          "x-role": "responsible developer"
        },
        "description": "The Opentarget API",
        "termsOfService": "http://www.opentarget.org",
        "title": "OpenTarget API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/platform/public/evidence/filter",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "ensembl gene id",
                  "example": "ENSG00000088832",
                  "in": "query",
                  "name": "target",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "size of the output",
                  "example": 100,
                  "in": "query",
                  "name": "size",
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "the output field",
                  "example": "drug",
                  "in": "query",
                  "name": "fields",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "the data source",
                  "example": "chembl",
                  "in": "query",
                  "name": "datasource",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A biosample object"
                }
              },
              "summary": "retrieve evidence",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene_related_to_chemical"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "https://platform-api.opentargets.io/v3"
        }
      ],
      "tags": [
        {
          "name": "translator"
        },
        {
          "name": "opentarget"
        }
      ],
      "~raw": "H4sIALYqK18C_5VVTU_bQBD9Kyu3R2IbuCBOBVrRSoUgQU8IRWt77GxZe5fddYBG-e-d2fVHEgJpuUT2vJn3ZuaNWUZKQ8O1iE5ZdByncRodsEg0pcIXy2gBxgrVUPAwhJxwEuh5inl33FTg2NnNDwoVYHMjtOsS7ubACOQ2QA5MbaflLZiFyH2huXP6NEmen59jNcBjZSqC5wpf5M6LaXjtE0YUm4PUDHkfCfsyMSpoM2C1aqzIJGB0ARJTDEGg5kJ6Ukz8skW3WiHCojBsGjH3y6g1sldoUaKW3JXK1BOc15pWGwuVLI53jODGqKLN6YmFutHqgWbAq46gb8kZ3lisrhBxsLPVkKm5m1s_jEFMottMijyBhSigySEphcQhexDl0a9t65qb1zAaZwSOhPX4yJc1SOiGvgdZgdo7gp6fWsAqb_uExkKdSVZBA0wUhDDw1AoDBYadaYFm_8JrHfbz7fr2MvV_Jycnx0eEt_kcl-PVulftURaVNmEtoyQr_sB-QYRiqmQOPahap1vfxKjgME13c4rGQUV72iAtBcjC7qcd6ZhP2SSNCtNW_9NrwR23qjU5_Bs14dmYsMZMhJncx_1wMJwOBJcdpan_3SI7Y5lQ1ldnKvsNeKD-eF4mmYPJY2UndHCc4J2jPhsoKfNTkqsaCdDWNtkFT8hDMwPobihmTs1Ir8i5xANYeZKxgJf2DieZ_51CXpBocEudOFF0pvx2df7TDwlH1DiR0-tLLBOOL2x2I-fiO6XEF9Orm-mv66_buRcd5W2bWcfp2MIV413ga9d9q3qFPjtsbyj95jqX_VEiZBmauE8fVt4Ro102V04n03u-s3LvRv_Ja7VWxp1zl88xUHJpYc0Js5prTQYh8g_22OMnHf6DTeIqB7dsp-3b3fLN0LtLiamhOHx9avxHkLcS7jqLj_E-MvPuR-j6sW1BfAhNt_oLEwvk3iYHAAA="
    },
    {
      "_id": "edeb26858bd27d0322af93e7a9e08761",
      "_meta": {
        "ETag": "04b0d8f40a94b104e49738b60e4f384d78678f89ef621a9341aea4604e15c9c8",
        "github_username": "kevinxin90",
        "timestamp": "2020-03-11T17:21:47.042681",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:59.570353",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/pfocr/smartapi.yaml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call. Type: string.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned chem object. If \"true\" or \"1\", all fields will be collapsed into a single level deep object (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Type: boolean. Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us with an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "facet_size": {
            "description": "the number of facet buckets to return in the response. Type: integer. Default: 10. Max: 1000.",
            "in": "query",
            "name": "facet_size",
            "schema": {
              "type": "integer"
            }
          },
          "facets": {
            "description": "a comma-separated list of fields to return facets on.  In addition to query hits, the fields notated in \"facets\" will be aggregated by value and bucklet counts will be displayed in the \"facets\" field of the response object. Type: string (list). Default: None. Max: 1000.",
            "in": "query",
            "name": "facets",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated list of fields (in dotfield notation) used to limit the fields returned from the matching chem hit(s). The supported field names can be found from any chem object or from the /metadata/fields endpoint. If \"fields=all\", all available fields will be returned. Type: string (list). Default: all. Max: 1000.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "format": {
            "description": "controls output format of server response, currently supports: \"json\", \"jsonld\", \"html\". Type: string. Default: json.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching chem hits to skip, starting from 0.  This can be useful for paging in combination with the \"size\" parameter. Type: integer. Default: None.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "prefix": {
            "description": "Pass a prefix string to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          "search": {
            "description": "Pass a search term to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          "size": {
            "description": "the maximum number of matching chem hits to return per batch. Type: integer. Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated list of fields to sort on. Prefix each with \"-\" for descending order, otherwise in ascending order. Default: sort by descending score.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/geneset"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Chem"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "geneset": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "associatedWith": {
            "inputSeparator": ",",
            "inputs": [
              {
                "id": "pathwayFigureID",
                "semantic": "Pathway"
              }
            ],
            "outputs": [
              {
                "id": "entrez",
                "semantic": "Gene"
              }
            ],
            "parameters": {
              "dotfield": false,
              "fields": "associatedWith"
            },
            "requestBody": {
              "body": {
                "q": "{input1}",
                "scopes": "_id"
              },
              "header": "application/x-www-form-urlencoded"
            },
            "supportBatch": true
          }
        },
        "x-bte-response-mapping": {
          "query-post": {
            "@context": "http://schema.org",
            "@type": "Pathway",
            "bts:associatedWith": {
              "$input": "bts:pathwayFigureID",
              "$source": "PFOCR",
              "@type": "Gene",
              "bts:entrez": "associatedWith.genes",
              "bts:pmc": "associatedWith.pmc"
            },
            "bts:pathwayFigureID": "_id"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothings.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the pfocr query web services.",
        "termsOfService": "https://biothings.io/about",
        "title": "pfocr API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/geneset",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple geneset IDs separated by comma. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted. Type: string (list). Max: 1000.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Geneset"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "A list of matching geneset objects"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "For a list of geneset IDs, return the matching geneset object",
              "tags": [
                "geneset"
              ]
            }
          }
        },
        {
          "path": "/geneset/{genesetid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Retrieve geneset objects based on geneset ID  Supports JSONP and CORS as well.",
                  "example": "PMC2673547__nihms99366f8.jpg",
                  "in": "path",
                  "name": "genesetid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/geneset"
                      }
                    }
                  },
                  "description": "A matching geneset object"
                },
                "404": {
                  "description": "A response indicating an unknown geneset ID"
                }
              },
              "summary": "Retrieve geneset objects based on ID",
              "tags": [
                "geneset"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "pfocr metadata object"
                }
              },
              "summary": "Get metadata about the data available from pfocr",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/search",
                  "name": "search"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/prefix",
                  "name": "prefix"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "description": "pfocr metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from a pfocr geneset object",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string.",
                  "example": "associatedWith.genes:1378",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/facet_size",
                  "name": "facet_size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/facets",
                  "name": "facets"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make queries and return matching geneset hits. Supports JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms separated by comma (also \"+\" or whitespace).  Does not support wildcard queries",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "a comma-separated list of fields as the search \"scopes\" (fields to search through for query term). The available \"fields\" that can be passed to the \"scopes\" parameter are listed in the **/metadata/fields** endpoint.string Default: \"scopes=_id\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with the \"hits\" property",
                  "x-bte-response-mapping": {
                    "$ref": "#/components/x-bte-response-mapping/query-post"
                  }
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make batch geneset queries and return matching geneset hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": {
                "associatedWith": {
                  "$ref": "#/components/x-bte-kgs-operations/associatedWith"
                }
              }
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://pending.biothings.io/pfocr"
        },
        {
          "description": "Production server",
          "url": "http://pending.biothings.io/pfocr"
        }
      ],
      "tags": [
        {
          "name": "geneset"
        },
        {
          "name": "gene"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIACseaV4C_9Va62_bthb_VwjffWh7EztZe9s1wIBufSED2mRNgQ1YgoCWaJuNJKoklcQL_L_vPKhnZNlp7rr1UxyKPDzP33lINyOTq0zmenQgRo_He-O90Y4Y6WxmYOFmFJnMy8jTb5VKneC2hUryF1Nt_EJnczfWBo9kMlX48JfD316_F78fvsfF610d0wnvc3cwmcy1XxTTcWTSyYW61Nm1zp7v8UZrEjpvlctN5vQ0USJWlyoB_uxoBXti5SKrc69NhhtfmahIFbCHC8LMhF8okc9MZMXnQtmluFJT4ZS91JFyY7zEK5u6o9kJrzX5agozkVNTeNqvPfPEVH86PsTVS2VdYGEftIWc4S2wCkt_3HTZfJ1Fdpl7FYtja-IiIm75AFIrbNJkBGwRAx_jFkN0PV50i_gmkhsonqGQch4YLy04V5lyyvOFzcX2iswyw8pvr5Py20veyswl0hvbXq94YlZy6ReOXG1S8oD_5MaFH9LCQV9p-jurZkjmPxNwKHAacAY3qTdNYuNnWiVx0z2rNWJkEwXa6prnw8pWpzlgGod5YbubjU2lb93MK6Qpq0DLzv9s4mUVpkCBfss8T3REhplc715dXe3iyV3wCpVFJlYx7XLRArhhtVoMMa8V617H_LfjammReJ1DUAbTiMNXDpwOWUbnni4FCJLKsXhvvIJYlF5EhbXAVYKhKEwGf728UBSnOssLL-AqUeTCG7G_t7cnUnmt0yLdoR2AA15c6SQRUzicag-3jMXHZa4OhPMWvEY8SLTzD8finbw-IAoc5bAFGeZNo9Uq6EtbEv0PEvBstQoPCG2C6N_v7Q2q85MjXbS0p71K-XSvSXmnm7ytg6riUForIVJWPeD2k0DZENXA5hHGSKV3M_2kIk8uOHryBQwPsvnaWmM_KAfGXsdYqTKwYUz3AG8yEzplPwIrs6eiVwQsIIwswDssuuvojbFCVgI2_GkHiPvCZuQAawQfNTCrgqozuqJEjclN-KHjFYk8V_0A0pHtgwKXgZTTVbWYSgfCAMjWvApxUuS5sfD0l5Oj98eggli8PPpwIqQDd08S8kV1LdOcc8jxu5ffP332-H9Pnp2fZ3qRuufPHz99Ovth_Cmfc8qlTAMQ2Az6SpBR24u9LRQqtTZrj9t_DYSMZJJMZXTRpFCtfeMYe19oGIy0Ksv2R9k67-eof9KH0GtDs8guMnPV9N5bIbnZ9eHQQOSBRmUsvRwMt7v4EocD40eva603UUctXLyVDFZ67CjgLchc7aEKkECI_70El5JYkM6sSbnGbCmjkr6jjdK376MUp6SNWpgQVr5SeObwXF83z4eVvy3Ehu3HKv0SM4aTHWvK0DMMZJmuedkr75BYfqV-hJG5mxekcybSWEP9Bs3RmNg42H_87IeBKPj8b80G98PymYyUP3f6T9WiUK9uRcVBUm6FC_7_lYLlXtkI5XS3JN9Sd12tba8vjILWrfj_vz9_UkwNV6o8BqiS4hXEF6HB6WihvTsdidD5LL_hWvoddlT4CNo3qkFDBX2rfkCRx1sVrRXu8Y1neOM_2IPfK6buhUf3iKl_rHv_PNi7c0TQHKyndxcPZOIMhMd_ITagR7sCnwEHBRSCJlu8MuBhmfHCsQ9hcx5H0sal-_U135SVgMHekYLka3drTsqesEzVjuKVCx7gi0kBcw_CBm_Kh35hTTFfYLw0pAS-PwKBOuWfBgcAGjyigGibKpFDFobrgRzjQ3VRZVMhrSL2YJvmBvXRo26h9-iRUFmcG535cZhRvFIzCdo_qIj-eK7j01H_pOL_NpTYjJzHRycfh7Dp1zZ2lu3AAIbSFHfq1W55aDcFNlGwtRz17-f6apcgZ_WNI_MUYbjC4G1xug-FK_VezN0uskCys4u0a8hN-m4TmHQOl05YH7uN-zd1WdQT1ktTUFxhUEF5fVptbsUTxFqKGpIhFeGm9nxvvE0fuLHsrbNND6voUdYk5NFsz_JFApsHjIvEg_uPxeEMxMFqmwHydLR_ChwALyVilQPLyCSJzB2BBUgqhQN-AH8SfKMhYqXyQBMxNxFgenSkOsqYSs-xHVHgmiilEuUQnrBQzzM9W5IAgSRooohAFPUw6HZqTKJkNq6RaQaor4aU3czhPcoOFFnb5UuiW6oG1aFjIIxaNS8SaUEScCdUuCls9aZmB4fFmOsKK-eKzoBkEHWXOlZwhCEI3Itu2hHOMJLDKQZzT95lwTlID4VDMmCsGZjEXOG8mSgA4SGZq6pjg3c1upMeockQRToFjjCr4V4xLaILKOtRqoABIZ-UkFNGAXiOmivbsNT-XnfYvYb7difVI0Kg3ZDhyzJ0LQQTEQY8SxxmQsaxLt2S8zECG4_2w1nyXE6np4EHCKvK9-dz8JOyPrmUSaEIN1F9CagRHCRrhEqsXZ7IZZ2dGyQ5UKrAbqW0Na8UKpW_Bwy8i9LdNj5TT4Xuqu8HIN2t0H-IkUTVS6JT7Zs6rmCMZh2tsToBGxjlgQtVUqjrcDOTB7lcWSHNQN2BisyWTVSk2Cqpdyuiuh5i7OTVHwHzSuBsjGPaEFqyvslClDe2M1DVDWwyEBfr6xMG-Hnh8Q1WnTT4_WvlXjuNt19BsQ6LQKxVUHT-lcT8e-FTUEgn_dUi4tZBwap2Y5Ng2NtvxKlbLsKF9oWG7OO8tFQMkckBj8B1dOUl4IezIqEiPJdz3Ab-Ci491RknqUb9iOjUrAjWwx7F4JD4YYKxCefC4LJH_mMuVXhD6Wkg80wnlE1aPQS70VpjbeK2HqhuMFaY865nt2x9oNH5u5itp8-bmB3IgOG97kYPC5kESlOumwcT4RDTW-Y9mgyu4Xlz3sPTlO6O2WuUBFuQf5-OdjHrQBAgYf7-AlAyVnZHGCBurzQ1FtDftp42BCTikPcaBKB9tMO2CoPPIUutquflW4nGdxbtScK5jtdau_U-HTeeNdrZxpuqZqPVcwXkF6zOeq-hZiqCgtCtLzZ7buw2t-1X9JArjmYDg6tbL-d2evRChqCfVZ4YzRLDAFyyxL5OLNWvC_pU2ZXhrOcLgVKu9ZqkrvEOnyO8hD-j_psgWu8sojfmoj_O6KGXyfoo7DEiPH_65NzYc-YKjwL_peVqEWvm6ESTuRYDXRm3O0mWYFNtwUuP__bc293Fb5Tu0tjTlzMnjEvGIq0dxgRYDjNZ_uYOPyW4kss3eg7dH7-9dWD7zOuIcwg95okkVzOt4-AuVv3ZPfWWPgPjj7VaA4FGl039ZLPM7Yqx6pmBTssfOMAc3ZA4-6tRc35IQINnF0oCWhLhjdNSxhGqv37GnBLeljXU3juuaoyg8N8XNHq69o3v6jiSxsbS1xsvSsOWaoW1KVR8XSMEKcLTHvNWhEjTYV-wxZq3hdVdadSzBVdhw3ekUULQHrZwg4OOm7-KPH5z9PIDD4L-Ah5k3SkfKgAA"
    },
    {
      "_id": "503e8c42d041aa5b8b1ffafaf612c298",
      "_meta": {
        "ETag": "8582b905e79f3b7c563221b85964182be3f9102fa27fa0c6661000e2e6ac8c69",
        "github_username": "kevinxin90",
        "timestamp": "2020-04-29T00:00:10.995593",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:59.761677",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/cord/cord_chemical.yml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned fields when passed \"fields\" parameter contains dot notation, e.g. \"fields=assoicated_with.pmd\". If \"true\" or \"1\", the returned data object contains a single \"associated_with\" field, otherwise (\"false\" or \"0\"), a single \"refseq\" field with a sub-field of \"rna\". Default: true.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated fields to limit the fields returned from the matching chemical hits.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching chemical hits to skip, starting from 0. Combining with \"size\" parameter, this can be useful for paging. Default: 0.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "size": {
            "description": "the maximum number of matching chemical hits to return (with a cap of 1000 at the moment). Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated fields to sort on. Prefix with \"-\" for descending order, otherwise in ascending order. Default: sort by matching scores in decending order.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "chemical2anatomy": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "chebi"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2anatomy"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "chemical2bp": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "chebi"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2bp"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "chemical2cc": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "chebi"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2cc"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "chemical2cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "chebi"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2cell"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "chemical2chemical": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "chebi"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2chemical"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "chemical2disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "chebi"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2disease"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "chemical2gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "chebi"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2gene"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "chemical2genomicentity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "chebi"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2genomicentity"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "chemical2ma": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                },
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "chebi"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2ma"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "chemical2protein": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "chebi"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2protein"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "chemical2anatomy": {
            "UBERON": "associated_with.uberon",
            "pmc": "associated_with.pmc"
          },
          "chemical2bp": {
            "GO": "associated_with.go",
            "pmc": "associated_with.pmc"
          },
          "chemical2cc": {
            "GO": "associated_with.go",
            "pmc": "associated_with.pmc"
          },
          "chemical2cell": {
            "CL": "associated_with.cl",
            "pmc": "associated_with.pmc"
          },
          "chemical2chemical": {
            "CHEBI": "associated_with.chebi",
            "pmc": "associated_with.pmc"
          },
          "chemical2disease": {
            "DOID": "associated_with.doid",
            "pmc": "associated_with.pmc"
          },
          "chemical2gene": {
            "HGNC": "associated_with.hgnc",
            "pmc": "associated_with.pmc"
          },
          "chemical2genomicentity": {
            "SO": "associated_with.so",
            "pmc": "associated_with.pmc"
          },
          "chemical2ma": {
            "GO": "associated_with.go",
            "MOP": "associated_with.mop",
            "pmc": "associated_with.pmc"
          },
          "chemical2protein": {
            "PR": "associated_with.pr",
            "pmc": "associated_with.pmc"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothinigs.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the CORD Query web services. Learn more about [CORD](http://biothings.ncats.io/cord_chemical)",
        "termsOfService": "http://mychemical.info/terms/",
        "title": "CORD Chemical API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/chemical",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple CHEBI chemicalids seperated by comma, e.g., \"ids=387,388\" Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "For a list of chemical ids, return the matching chemical objects",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/chemical/{chemicalid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "CHEBI Chemical ID, e.g. CHEBI:63577",
                  "example": "CHEBI:63577",
                  "in": "path",
                  "name": "chemicalid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "description": "A matching chemical object"
                }
              },
              "summary": "Retrieve chemical annotation object based on pr chemical id, support JSONP and CORS as well.",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "CORD API metadata object"
                }
              },
              "summary": "Get metadata about the data available from CORD API."
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Pass a search term to filter the available fields, e.g. \"search=associated_with\".",
                  "in": "query",
                  "name": "search",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Pass a prefix string to filter the available fields, e.g. \"prefix=refseq\".",
                  "in": "query",
                  "name": "prefix",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "MyChemical.info metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from MyChemical.info."
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string. Examples \"PMC6836328\", \"31045\", \"PR:000001978\".",
                  "example": "chebi:CHEBI:63577",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "description": "a single field or comma-separated fields to return facets, for example, \"facets=pr\"",
                  "in": "query",
                  "name": "facets",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "Make chemical query and return matching chemical list. Support JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms seperated by comma (also support \"+\" or white space), but no wildcard, e.g., \"q=1017,1018\" or \"q=CDK2+BTK\"",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "Specify one or more fields (separated by comma) as the search \"scopes\", e.g., \"scopes=entrezchemical\", \"scopes=entrezchemical,ensemblchemical\". The available \"fields\" can be passed to \"scopes\" parameter are listed [here](http://mychemical.info/doc/query_service.html#available-fields). Default: \"scopes=entrezchemical,ensemblchemical,retired\" (either Entrez or Ensembl chemical ids).",
                          "type": "string"
                        }
                      },
                      "required": [
                        "q"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with \"hits\" property",
                  "x-bte-response-mapping": {
                    "$ref": "#/components/x-bte-response-mapping/query-post"
                  }
                }
              },
              "summary": "Make chemical batch query and return matching chemical hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical2gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical2protein"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical2cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical2cc"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical2ma"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical2bp"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical2genomicentity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical2chemical"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical2disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical2anatomy"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://biothings.ncats.io/cord_chemical"
        },
        {
          "description": "Production server",
          "url": "http://biothings.ncats.io/cord_chemical"
        }
      ],
      "tags": [
        {
          "name": "chemical"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIAIvDqF4C_-1b608kNxL_V6xOPrDKvFiSXYKEdMvjNiQBJrCnRFoQcnd7Zhy6243t5hHE_35V5X5PMzNwnLRC7Ad2xnbZVeVfPQ33nkpFwlPpbTFvYzAajLwe82QyUTBw7wUqsTyw9FnEXEa4bCai9F--VHYmEzk1A6mQJuGxwNlfD_7cP2J_HRzh4G1fhkRibWq2hsOptLPMHwQqHl6Ka5ncyuTnkVuoVUT0WphUJUb6kWChuBYRMKi9B1gTChNomVqpEly4p4IsFsAfDjA1YXYm2O7xyR77IxP6jt0Inxmhr2UgzID9LrhOWKy0YNxXmWVfcen5GnIGjOXigDRJwC3KNAyUDi-CmYhlwKN3yKQVOjbHk1O3aSEXUMd3xboBqm5IC4dEIq0TixjbzVexT-MDnL0W2uTSrIPmUUjkGEZh6Ot9W-L9JNB3qRUhG2sVZgEJ7ghwt0xHdV0vEwmPmzti2cYr7XuOgvNpLkQBjOa5xShPEuWusDl-hXfYHLKaJybiVunmeMmQOznldmYIscPySPyWKuOAnHINlLbU8vdaTHCf70COGLAHmDLDatFwIkUUmjrG8xHiYhl1qCwtr9OXYyvt4AyvRu4GSFgtQFHG7qjwrjRYoKfPPE0jkB51O7zt39zc9CdKx324TZEEKhQhrTKoJO4Uo9HWrBROfTJ0_7cgEmeRlSlY5-4v-zsHrNAxrAbIAD1HgPp3DISJeY-JwXTQY2e42_bG5sfexubmmceOlBVgsNyyINMaOI7QYJlK4H_LLwUZs0xSMFTcOEuZVWx9NBqxmN_KOIt7tAKchWU3MoqYD8SxtHD2gOzuLiVVGasBGd7DQ64rqUnsryTc-cNDPkEuJxf7_WjUJfYnRpBkxWKm_L9FgKfbGYg3k9aAXLkK79yJJgMVaLwZ799KM84iCfyCqyqUhsL1YEubgXNCgWJuA8RytcIdQ_ArbKpuNOd0UIn04X11Hw8kxlR0o74lnrvM0kEd7Lmbc5e89WHjp48fkQVxy-M092jNGUnboPHVoVpx4zVvwOpMoIYq9HVc2bdvmyBa5PPgsiFzMfYC1r0SMB8DzRwITwToFmJqtbBCUoFnnxuwX_ie6jpMe8xkaaq0Zb-eHh-NgTDEYHvKuAHDjaLBEoCCtDzkli_E5P-m7ZU1RrEYQjArmHpMX5-Frda4tAGN1H29hmvimKVMtIpZsefAa8pbIPQJpjjmxoCvMJCxBDOGuQQ6v4mM4COdXzuaNs9N9cxzJNtArwKJfvgCvdOZN6gM1MXVmv4cjbeCLXazmcKdyVvmVq7KqCPahp9GXC3mzy31XsBXvBB6Du9268leBRAn43OwlFO2INU6qECW09AT8OTSYaeqAdt3HtzALYwPdz9sbnzYeA8RGUP0xvrox5_cx_HJ1gj_rf_8cTO_n5rrh4vw5VZnAJi7v6tv0fEb-Y9oGAF-X40SXGCDEr93mQcYMEhTQJ9B-KeEqA85Enc5Un7rYDJ5AjDhgbBgJJCmsVzbeBdueDvVZ94CPbtV_387-RZy3i4rfSzz_dvQfTQS3c7T3bwZkrmcCANprufyw5fNBA8xvS0jq9sKo2kOgvlgjknjgJ0-Ifw6cJzjwW9VzxOrnquFNY-7LqrvO6odtsYjo8pM6cz7AYAAxnwDmBDMpGCi73rMB9efKCxbwoDrsCqRrrbXR-sfe_Bj09Hh0O7eb-9_2PnymzP-tkGTuQP_nZXaaSoCObmDZE7gbtT8yJ3OWuWGCubfIZYwJOWJx1m-MwaEgkM3sg261uKfAqAuYnRO9QTYR-xH1dIB-9JIDM5yWIHAAU-wjEshrwC2wC1WHLASGIyDEGgRsOTrTGhRtnDaTZhQBS5WXuRdoMHMxtF35dF9d_C7AdsTEw4XvLWqFD0wVYxmwNeaAKMHrvaJALW879Y2Srx3q9WkV0sq0pd1cePj0y-L3NwfXU7OPOblqIfnW9EvCPoxsIhyPspN93p3Z33yWw-LfaePrnIVD4rMdjnIkunLqekrsmYQfpGD7FpeFt_vpyJZlEYsJgZVWiGTZ9MHEAaeTxw8mxQA91xSP302KahawSdYKe3d88Vu9CSfsUEowVua5186T7hVMQhw7rBeEc4H7fsqC-tw9ncqIw-aurLsrFzc8J7gVWO0IZ7nEbhoUfVVzwUX55VVeO9gDj2XVhGFFwzH3BYNe2ezVTZ8MxNJEQJqsaGSgJ4kZGIYnMeKLkNZWDoCqoDRO-YV8CCNQww9BxNYggVIEV7XMXY12Ki1A6qjylz-zJurrR3jPaYwDtwAHNgapuyRKQ8ZnXkQ9Wt7FGVvXhqQR4XpzO_ntQKyqROOLJexCdledFP1jKvjpnylIsETd1XFU87cPYGCEEcYY7WYZhHXLIPoaZAllenyPaWHzVrMpzLNp4JoAFngwa5lKIAE3DGjQ3oM8iHq8wKBC_CWcKgBVKT5zOAOoKiJiiJ1g61eUgjsuUjcMj1cgspa-2WuQHu8IItkLF19no9VMMXKvLtTi1FmEctVRr2MZziji2M8NsliH_QH99HNAHJvLmUKirccslqYJ5ZHA7arYl8mOJLHcKx667aFpiBNkYfBxU-yiIrRlE-pd1CCcbRQTmS_W0oJCcwUn_MormPR_YiYeZd_JXHzsL-W21HAU1xPjwXcXWKs8KGwnumtL5SgaA8slQCL_0ckeBxcSAU5-YCNXessv40-OgRQNu4lkhBFVTrEW6lci0wgSW_M1mSifSGbLzUFySxkV0gUiibRItnzBscijD6U886y2vkkvR5ZEbtZCCHHE5dTtWqtC-KQPrqoQPCJFLf1fNlhgGqdqvfVZTfFWNGBO68Pcq05JQpevcDvKAABek_myyp12Q0TmrT5E2QniNpc09XYDz9eKH3hmEZSSAoKJVaarZgjijpzDQbaKliNktTn9LsCLx2Vace57VXudeCRJPzeqyeZ7jx8Ejx1RqU07tRzWIbhPG93v3FAzUnCMaAUksSABvPtTjMfvGMSCNdOAOc3U0RFVUePms4h5Q_uNxIiiveWfs_BQMxzj_9fyvdo9kXcWnbonOvYRUF6OVeZbTP2-bjN1SFE5gBj7afAyusynXXLD4_HK6x3796NXLEMfO2Uha6G3um2ym5yR0_FLz5gQ8S7dxr-Ojp_8Oo9B9cKpi1ngqPUeODSFowr66hLsoPequoLF-XgxXPLx0ZdQoqpFzmvFkS7UP0hJnYLBb2BogsUWOc2QQE16KsFxY5UkZoiX0AKabt5A0UXKLAN0QRFUZa_EmT8Z2f_5PiozdknEhJ528-7KG_gmAdH2aFpIoRafa8EHr98Ptpt8_WZWplvgJgHhGvyzqGh1o18JbA4Pe4ABYr55i4WoqPel27CpGjxvxKAjE_aXI2LN4w3aMxDo3zgaVUl-G7zShCx-3tXXfIGh85ShDTTxELxnPRK4LB3fLDX5muveDF7w8Q8JsrnxJaLqP6O4XW4iScw9gaRltson6xdg3bBb100u6f3XhoHHYob4HDPdRo7ZmOV4uzn467JqSKZmx22ZQetthX1ZV5mq6qaX7ZfXih3LMh8od3fKM3VgMs2pfKqY3o2TYK5DRtlxLKdTzvFNy3xq6xz2X6Q0HVN6tYlu4Rl2WaQC3RMBlFzsyriLduPgknHdKhk2GKw8Wdfi5kkT9TFp3MA8O-_VBlm0SM5AAA="
    },
    {
      "_id": "4692da88e681a6b23e1ea9ed2152bd85",
      "_meta": {
        "ETag": "1dc1050cdb1a1b1a8606213d559675730197af0b4dce888ca3e2c48e448f2219",
        "github_username": "marcosmro",
        "timestamp": "2020-03-16T01:42:25.499864",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:45.516657",
        "url": "https://raw.githubusercontent.com/metadatacenter/metadata-provider/master/metadata-provider-api/assets/openapi.yml"
      },
      "_score": 0.8,
      "components": {
        "x-bte-kgs-operations": {
          "biosampleAssociatedWithDisease": {
            "inputs": [
              {
                "id": "samd",
                "semantic": "Biosample"
              }
            ],
            "outputs": [
              {
                "id": "mondo",
                "semantic": "DiseaseOrPhenotypicFeature"
              }
            ],
            "parameters": {
              "sampleid": "{input1}"
            },
            "response-mapping": {
              "$ref": "#/components/x-bte-response-mapping/biosample"
            },
            "supportBatch": false
          },
          "clAssociatedWithBiosample": {
            "inputs": [
              {
                "id": "clo",
                "semantic": "CellLine"
              }
            ],
            "outputs": [
              {
                "id": "samd",
                "semantic": "Biosample"
              }
            ],
            "parameters": {
              "q": "biolink:CellLine={input1}"
            },
            "response-mapping": {
              "$ref": "#/components/x-bte-response-mapping/cellline-biosample"
            },
            "supportBatch": false
          },
          "diseaseAssociatedWithBiosample": {
            "inputs": [
              {
                "id": "mondo",
                "semantic": "DiseaseOrPhenotypicFeature"
              }
            ],
            "outputs": [
              {
                "id": "samd",
                "semantic": "Biosample"
              }
            ],
            "parameters": {
              "q": "biolink:Disease={input1}"
            },
            "response-mapping": {
              "$ref": "#/components/x-bte-response-mapping/disease-biosample"
            },
            "supportBatch": false
          }
        },
        "x-bte-response-mapping": {
          "biosample": {
            "@context": "http://schema.org",
            "@type": "Biosample",
            "bts:biosampleAssociatedWithDisease": [
              {
                "$input": "bts:samd",
                "$source": "NCBI Biosample Database",
                "@type": "DiseaseOrPhenotypicFeature",
                "bts:age": "data.attributes.age",
                "bts:cellline": "data.attributes.cell_line.name",
                "bts:mondo": "data.attributes.Disease.mondo",
                "bts:organism": "data.attributes.organism",
                "bts:sex": "data.attributes.sex.name"
              }
            ],
            "bts:samd": "samd"
          },
          "cellline-biosample": {
            "@context": "http://schema.org",
            "@type": "CellLine",
            "bts:clAssociatedWithBiosample": [
              {
                "$input": "bts:clo",
                "$source": "NCBI Biosample Database",
                "@type": "Biosample",
                "bts:age": "data.attributes.age",
                "bts:cellline": "data.attributes.cell_line.name",
                "bts:organism": "data.oorganism",
                "bts:samd": "data.biosampleAccession",
                "bts:sex": "data.attributes.sex.name"
              }
            ],
            "bts:clo": "clo"
          },
          "disease-biosample": {
            "@context": "http://schema.org",
            "@type": "DiseaseOrPhenotypicFeature",
            "bts:diseaseAssociatedWithBiosample": [
              {
                "$input": "bts:mondo",
                "$source": "NCBI Biosample Database",
                "@type": "Biosample",
                "bts:age": "data.attributes.age",
                "bts:cellline": "data.attributes.cell_line.name",
                "bts:organism": "data.oorganism",
                "bts:samd": "data.biosampleAccession",
                "bts:sex": "data.attributes.sex.name"
              }
            ],
            "bts:mondo": "mondo"
          }
        }
      },
      "info": {
        "contact": {
          "email": "marcosmr@stanford.edu",
          "name": " "
        },
        "description": "Prototype utilities to query a subset of NCBI BioSample metadata records that were processed using semantic technology.\n\nThe current database contains 4,346 records for three diseases: hepatocellular carcinoma, myelodysplasia, and systemic lupus erythematosus. The original records were downloaded on February 2, 2020 from the NCBI's FTP server (https://ftp.ncbi.nih.gov/biosample).",
        "termsOfService": "http://api.kp.metadatacenter.org/biosample/tos",
        "title": "Metadata Provider API",
        "version": "prototype"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/biosample/search",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "query",
                  "example": "biolink:Disease=MONDO:0007256",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "size of the output",
                  "example": 200,
                  "in": "query",
                  "name": "limit",
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A biosample object",
                  "x-bte-response-mapping": [
                    {
                      "$ref": "#/components/x-bte-response-mapping/disease-biosample"
                    },
                    {
                      "$ref": "#/components/x-bte-response-mapping/cellline-biosample"
                    }
                  ]
                }
              },
              "summary": "retrieve biosample information",
              "x-bte-kgs-operations": {
                "clAssociatedWithBiosample": {
                  "$ref": "#/components/x-bte-kgs-operations/clAssociatedWithBiosample"
                },
                "diseaseAssociatedWithBiosample": {
                  "$ref": "#/components/x-bte-kgs-operations/diseaseAssociatedWithBiosample"
                }
              }
            }
          }
        },
        {
          "path": "/biosample/{sampleid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "the SAMD biosample ID",
                  "example": "SAMD00005006",
                  "in": "path",
                  "name": "sampleid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A biosample object",
                  "x-bte-response-mapping": {
                    "$ref": "#/components/x-bte-response-mapping/biosample"
                  }
                }
              },
              "summary": "retrieve biosample information",
              "x-bte-kgs-operations": {
                "biosampleAssociatedWithDisease": {
                  "$ref": "#/components/x-bte-kgs-operations/biosampleAssociatedWithDisease"
                }
              }
            }
          }
        }
      ],
      "servers": [
        {
          "url": "http://api.kp.metadatacenter.org/"
        }
      ],
      "tags": [
        {
          "name": "metadata"
        },
        {
          "name": "biosample"
        },
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIAILZbl4C_-1XbW_bNhD-K4RWYBsQy1r6BhgYkKRBgABLEyAF9qENBlo6S1wkUuFRaVzD_3131ItlW43jrC32Yfni-Mh74fM8d6QXgSlBy1IFExG8DKMwCg5EgGDvwSLZPi6Cyua8mDlXTsZj2hrelmEBTibSyRi0Axsam46D5Q25Kj0ztH0RJICxVaVTRrP7lTXOuHkJonIqV04BCmfEXQV2LqTAaorghJmJ9-9OzsWJMteyKHMQbSJhITY2IadMOvEZLIjSmhgQIREVKp0KhEJqp2LhIM60yU06Dz_pT_pDBiKurKVSBYeaSiSD0U4qjeLVwctXb7roM2MpgwUQiUKgjTgRGZTSUao8r3JpRSxtrLQp5IEo5pCbZI5lLlHRd6kTgXN0UFAVeVVWKOh4LqPCnMEKQ8G1GKtSpWXeJfWnScxnnRuZ0HGMFmcwtZUkaA4PxGF0GImZNQVVBh6fn1GcfbgSNU3iF6YGiZuZK0MdT1WoVRam5n48VQY9jL-GTCtz2tBRtnSw3SmXA1svWrCJrXuVUOzjq3O_A2yBl7NrSqhieJIcutxjOjrH8IjHzotDy8JHEbxA6CgvsYKQNVjYI3SSZGSTEJIqWC65AJk2cmxd25QBLa-sXdZ1s7NSY04k2FqlRGiGvpJencS3jTNvTaGuE6uCippzCAvOKrgH0TkI1rolahlTH9RSOtc1Tpv8LvB94f9lufPXje7o7BbuKmUhIaOzFTA6D_V56sPlSt9OTmtp_n5x-f70chJF0dvD129838YsNV-555Z8kKrWqQdxVVGuCuV2V4XqC3BLsuxM5crK-6wKOoyi4aSKVJACYe3BtoCl0dRKfg85Dc2H4x6uZvo3xD7Xw2jqYNQGGBWyLPk0Ht4XFmbs-dM4NgWtk_RwPOwwbpp5tCGPfUJw_xP6azFuvDZrh9sURzRLrZdDfdQm6zGiiZV0kPypXHbSuU8er2A94HhHMC4kzr9Nqq_HWS79iXtNs6g_VbL89o3Thl4plft2QKgs0Ovji9NeivPTne3EHtQ80eso2tk930vH-2lw2ifiMeV1G9eJbAbHnnLYEWzZiGIVxsf_N12hNM2aRgwq8dPe6MTUT5P6kmdjU8GlvcpA822m4jOQrrJQT_l6Zq3FoSTJZpievG821big6T0weRe-wt-Wvu2wKktj3Yl0_vaYyRyhJ5dnsz0wtHZ3-TZ0cb4F3DuaZX_QLPteMLXxfwxOQ5OZ8z2hCbbResLJB_B6ljw3EOymHbn-ENyGp8lg2G0psvWIn3Tw4HrvwXqG8gOQ0Thq5-gjUDBRDic1gn0o2bpzVhADXZKVvfH2XNICPxPDlRpi_tXQXD28jYqVWmHRbTWdpdkhU-gWpaM7YVo5wJDNbSp4GNpB5tDfZs22VqpDe3ntL17sPF54FfjG6hBiM5rK1q_w9sdSc-GcNr9u-GXCk2K7MfajrZsTbfm56U2U2vI_Nw0w-zDzXEK-CmM7tti2c-71idmjMzdBaVzDtY7dIqzn8J-krkXuadzR3z9U7Dz6MxEAAA=="
    },
    {
      "_id": "df231f1efca0c3409e28dd5ca7228c1f",
      "_meta": {
        "ETag": "64db6e41d341bf4f1a35e58132ddfb8cd172577a9fdc5e07404f46230b35db72",
        "github_username": "kevinxin90",
        "timestamp": "2020-05-27T16:54:50.943786",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:01.213075",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/hmdb/smartapi.yaml"
      },
      "_score": 0.8,
      "components": {
        "x-bte-kgs-operations": {
          "chemical2disease": [
            {
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "chebi": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2disease-doid"
              },
              "source": "hmdb",
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "chebi": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2disease-mondo"
              },
              "source": "hmdb",
              "supportBatch": false
            }
          ],
          "chemical2gene": [
            {
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "chebi": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2gene"
              },
              "source": "hmdb",
              "supportBatch": false
            }
          ],
          "disease2chemical": [
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "CHEMBL.COMPOUND",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "mondo": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2chemical-chembl"
              },
              "source": "hmdb",
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "mondo": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2chemical-chebi"
              },
              "source": "hmdb",
              "supportBatch": false
            }
          ],
          "disease2gene": [
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "mondo": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2gene"
              },
              "source": "hmdb",
              "supportBatch": false
            }
          ],
          "gene2chemical": [
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "CHEMBL.COMPOUND",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "geneid": "NCBIGene:{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2chemical-chembl"
              },
              "source": "hmdb",
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "geneid": "NCBIGene:{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2chemical-chebi"
              },
              "source": "hmdb",
              "supportBatch": false
            }
          ],
          "gene2disease": [
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "geneid": "NCBIGene:{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2disease-doid"
              },
              "source": "hmdb",
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "geneid": "NCBIGene:{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2disease-mondo"
              },
              "source": "hmdb",
              "supportBatch": false
            }
          ]
        },
        "x-bte-response-mapping": {
          "chemical2disease-doid": {
            "DOID": "associated_with.doid"
          },
          "chemical2disease-mondo": {
            "MONDO": "associated_with.mondo"
          },
          "chemical2gene": {
            "NCBIGene": "associated_with.ncbigene"
          },
          "disease2chemical-chebi": {
            "CHEBI": "associated_with.chebi"
          },
          "disease2chemical-chembl": {
            "CHEMBL.COMPOUND": "associated_with.chembl"
          },
          "disease2gene": {
            "NCBIGene": "associated_with.ncbigene"
          },
          "gene2chemical-chebi": {
            "CHEBI": "associated_with.chebi"
          },
          "gene2chemical-chembl": {
            "CHEMBL.COMPOUND": "associated_with.chembl"
          },
          "gene2disease-doid": {
            "DOID": "associated_with.doid"
          },
          "gene2disease-mondo": {
            "MONDO": "associated_with.mondo"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@renci.org",
          "name": "Chris B."
        },
        "description": "Scibite",
        "termsOfService": "https://automat.renci.org",
        "title": "Automat HMDB API",
        "version": "2.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/gene/chemical_substance/{geneid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put NCBIGene ID here, e.g. 1017",
                  "example": "NCBIGene:1017",
                  "in": "path",
                  "name": "geneid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "gene2chemical",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene2chemical"
                }
              ]
            }
          }
        },
        {
          "path": "/chemical_substance/disease/{chebi}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put CHEBI ID here, e.g. \"CHEBI:661\"",
                  "example": "CHEBI:661",
                  "in": "path",
                  "name": "chebi",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "chemical2disease",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical2disease"
                }
              ]
            }
          }
        },
        {
          "path": "/chemical_substance/gene/{chebi}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put CHEBI ID here, e.g. \"CHEBI:661\"",
                  "example": "CHEBI:661",
                  "in": "path",
                  "name": "chebi",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "chemical2gene",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical2gene"
                }
              ]
            }
          }
        },
        {
          "path": "/disease/chemical_substance/{mondo}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put DOID ID here, e.g. \"DOID:123\"",
                  "example": "DOID:123",
                  "in": "path",
                  "name": "mondo",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "disease2chemical",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease2chemical"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "https://automat.renci.org/hmdb"
        }
      ],
      "tags": [
        {
          "name": "drug"
        },
        {
          "name": "gene"
        },
        {
          "name": "disease"
        },
        {
          "name": "automat"
        },
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIAFubzl4C_-1YW0_bMBT-K1G2R5K0RWJSn0bbCSqtFAntCRByE7fxltiZ7TBQ1P8-X2mTJr1QKGMbL7Tnnu87x8dp4ZIMYpAht-u4x37Lb7lHjovwlAhB4YYEcxBy9RmmACXSLIZJ9plCHCKf0Jm0xyCFUtOPKWJOz3fnQhhBFlKUcUSw1F2FaII4lOYc0pSNp1eQ3qNQOcacZ6wbBCDnJAXcL0XniCfK6lRrnfPRoOecXg6l8h5SZjJ0RPEyMRNxhVSIrotqFZeURHkovznaTMbIabK2iCBOo4k7v5W1gJkJbJ85ovlMpl1IZhDDsiRCDAJWEZo0ZSGnALMEcEJ1vgzwmCn4Axk2CGOYohAkdyyfMA5wCINCKlA0V1YzqMlieZoC-mjL6Vg_V8WkIhtvhCjnzkW_NzwTfs5w4MSQwiMH-jPfabfan2QE-ADSTHNiLbtWh1QQWfdyZ-gapYTCnzmiMBJSTnMo-ZLFAVU2f8yUOeMUYQGrwoBClhHMoMah02qp_5WqT7EDGCMhAopcMvkORd_OZT88eBMOvR8z5olep0pvnvwjhVPp_CEISSpyQMxZUGcelEGc36rAdWwYqoNC6CaokRTr2bGtsR0v_fMvvWGFlBtXSbsnJ-0bt8LOk6aZGVXn-yVmBcg13KgJ2pYYNcX_WdmTFX0WGkrsbNQdYinBEWlkxXjueowNxoKUKi9S2G13jldosYpmVlSR75eVFRQlMTL4wlFV1ZCrqKwSlR3hLOemEhQtbwRXreIUYI5CKT_TrSCkJOdVJzESo95Xvz8eXY6_XQyqvn2T88o2jNmOggIh5gpuCsXehNEdVwwxklNzt5DLu9ovhd1Iyyus0A9z3bqd64tEnmWE8h7gYSwMpyBhcInKuxRkmWRYhlvDgrX3jH15mXjywyRRLL8knL3hPwaiOC_1qCmNXQcv2aTygKg6DJ7WzjuH0gDmRURU8aLNOBpfDMZ_PW56N-gOLK-_hhbcZUZrUN1MxT6o6nkS-kNhWbkxlGHcMMx7IvmqY_12QG410HtC97qj_fbYLQ-1vT2tm-nNeBx8kvUjHBDEEk5l6DZdHZ8F3-Gvjm8G6bZ3xufieJA74x-Bnr4sLl6sqk6rrzuePY0Kg5T8Cc-8rImH_4V47JvAR45be8U3vqVurY-iyK1cZT0LXGH4rXE151XVU60A6ahWXY2f3hE1K3e3pPW7Z7fE5ngtFsdijRsOJ8j-zFo9mJ_huT9RDT22TbeIv9-xnmtThhcAAA=="
    },
    {
      "_id": "cc7324e732c4ffc7157a468bfbd0778c",
      "_meta": {
        "ETag": "1c5cfdd50f76fd75f76f93411263c1fcf6719524084922c051da6f8722b75312",
        "github_username": "MarkDWilliams",
        "timestamp": "2020-05-29T20:56:31.280738",
        "uptime_status": "unknown",
        "uptime_ts": "2020-09-17T00:09:20.996222",
        "url": "https://raw.githubusercontent.com/NCATSTranslator/ara-scaffold/master/openapi.yaml"
      },
      "_score": 0.8,
      "info": {
        "contact": {
          "email": "mark.williams5@nih.gov",
          "name": "Mark Williams",
          "x-role": "responsible developer"
        },
        "description": "a work in progress ara example",
        "termsOfService": "https://opensource.org/licenses/MIT",
        "title": "NCATS ARA Scaffold",
        "version": "3.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/query",
          "pathitem": {
            "post": {
              "responses": {
                "200": {
                  "description": "A query response object"
                }
              },
              "summary": "POST a ReasonerStdAPI formatted query to the service"
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "http://transltr.io:7073"
        }
      ],
      "tags": [
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIAP920V4C_22QQU_kMAyF_4qVM9tWoBXSnLbixIEF0ZH2gDiY1p0Jm8ZZOx1Ao_nvm6QdDohcmtTvPX_20XAgj8GaDZirqqkacwHG-pHTj6M5kKhlvxZzKdroKL9_37TbDtrHFroex5HdkMsDaS82xNWE8MbyF6yHILwTUgUUBHrHKaSYnEcy6f3YkRxsX4L3MQbd1HUGU56lp4plV7tU9kpa391us7FnH7GPBdPjVKx3mJr9sc5ZnDSL3n8IL7ipd2Cv9sURDHQgl-IlS2hC67JiSubqbTX__OXtvtrxwZxOSaQJL60iyZ6OZhZ35kyYUdCri1JZ3lw311ffbOFBeJj7_IIlyJye8-i4WxPP_EsWRl4VAeNey4T1v5nko1wD6zK1zlNi_igd7rstIDwSKnuSLg7twy2MLBPGSAMUN0SGuKfCkHd98bkVWppcNk35fsFvV_tZDPzySmnzp3L-AyUXx65CAgAA"
    },
    {
      "_id": "dca415f2d792976af9d642b7e73f7a41",
      "_meta": {
        "ETag": "802aae6c834d399a5113a5a445a9da7d2176da816c3aacd07dc9fa2ab7d39233",
        "github_username": "kevinxin90",
        "timestamp": "2020-05-27T16:58:09.688076",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:47.432532",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/litvar/smartapi.yaml"
      },
      "_score": 0.8,
      "components": {
        "x-bte-kgs-operations": {
          "variant_located_in_gene": [
            {
              "inputs": [
                {
                  "id": "DBSNP",
                  "semantic": "SequenceVariant"
                }
              ],
              "outputs": [
                {
                  "id": "SYMBOL",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "variantid": "{inputs[0]}%23%23"
              },
              "predicate": "located_in",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/variant_located_in_gene"
              },
              "source": "dbsnp",
              "supportBatch": false
            }
          ]
        },
        "x-bte-response-mapping": {
          "variant_located_in_gene": {
            "SYMBOL": "gene.name"
          }
        }
      },
      "info": {
        "contact": {
          "email": "luzh@ncbi.nlm.nih.gov",
          "name": "Zhiyong Lu"
        },
        "description": "LitVar allows the search and retrieval of variant relevant information from the biomedical literature and shows key biological relations between a variant and its close related entities (e.g. genes, diseases, and drugs). The LitVar results are automatically extracted (with regular updates) from over 27 million PubMed articles as well as applicable full-text articles in PubMed Central.",
        "termsOfService": "https://www.ncbi.nlm.nih.gov/home/about/policies/",
        "title": "LitVar API",
        "version": "1.0.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/entity/litvar/{variantid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "rsid",
                  "example": "rs121913527",
                  "in": "path",
                  "name": "variantid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "publications mentioned the submitted variant"
                }
              },
              "summary": "Retrieve PMIDs of publications mentioning submitted variants",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/variant_located_in_gene"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "https://www.ncbi.nlm.nih.gov/research/bionlp/litvar/api/v1"
        }
      ],
      "tags": [
        {
          "name": "variant"
        },
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIACGczl4C_4VU_WvbQAz9Vw5vgxYaO0kZZf1p6wqj0K5hGYWtlHK2Ffvofe0-kmYh__uks5OULN0g4CBLT096T15lxoLmVmTnLDvNh_kwO2GZ0DODgVU2B-eF0fRytHkZRJBAkWsR7rhjnyZXFK7BV07Y0Kf3L7mUZuFZaIF54K5qGdc1cxCcgDmXzMzYnDvBdcCgxBD-oe5OcUJiM2dUqi6FUVCLCmukCOB4iA4SmG-pwxMsKUeaJuUgWALwrISwANCMbxtRkQieVdJ46DKhZqBxMAGeHUHe5KwBDf6E1QJpe_pHVbWLjT_O2Xck1A_owEeJYJzYxGCINxKQSwbPwfGKoI8WIrSY2USJFdHW2NAfd7MZXDEbnzElpKSBJ7G8wRLuEEYiG-7ZAqSkJ7dWInYpgc2ilIOAHXaJYlv7GUdxXOZJLHDK386m4OaiSqq1IVh_XhSLxSLXVSlyLVWuRZs3Zl60uOSClyaGwhpshvsoCKYyOuAsyROaqwT0sxVLoxt2HSkDFBeSwjL-bj_uA2frNeZ4ZIGGwqz7VRad_C8dXG4yTYHKamkLVB5FLNCuxXx0wHQTZ-pYJeN0vbL1Ay2BN33TDffeChmy2gVxadqjGUxfZnlofRq5SOZYbvqv-nJRr9PrBrrN-KgUd0vC-tY5HNjk5urSk81tLEm9zpSKAI0WuD4fSyUC2aRH9Vnq7ZBV2G5rj7iouzOlENFMCjxzZbvLdH40Hn0Ynb4fnx3YEp50KnfwKwoHNcaCi0ACVS3qmGYJS5ugPM6hG9TvIVV4i_Sh28p4OEzPPfhDg-J06ROwP2vni-dBGWDw1PgBfoxcV9mN_dbBjDDfFJVR2BrRfHEovegBH6Wp6JwfhX6kE0Yl16nHrj5xfqXlKnsNJ9ER2sbQUxO0t-zyYvp1kiVvK9KlouAUFwu6grvNkLQ7vKn94umPm4vb6_3qLx1tMoFLX7yQhNgRSgUmuu6e69Jr-5dlVi-cgkmrjvn98GH9bnyKvyzdY7TWuHDBQ9Vi1oxLDy9UflT4xSHxCe4fSmzyB33-61qgGFu596v-s_3VZlvIgUJ5ugjUdv0HDD3SLMMGAAA="
    },
    {
      "_id": "c43e12f0bdc350310288a2ec4db237c9",
      "_meta": {
        "ETag": "6bdfecfb21ec76a502a0e8596a22f73b4d311d70d7b19563567211fb75a911d1",
        "github_username": "ntatonetti",
        "timestamp": "2019-10-22T04:26:02.208338",
        "uptime_status": "unknown",
        "uptime_ts": "2020-09-17T00:09:47.501801",
        "url": "https://raw.githubusercontent.com/tatonetti-lab/deltaQTDb/master/deltaqt_oas3.yaml"
      },
      "_score": 0.8,
      "components": {
        "callbacks": {},
        "examples": {},
        "headers": {},
        "links": {},
        "parameters": {},
        "requestBodies": {},
        "responses": {},
        "schemas": {},
        "securitySchemes": {}
      },
      "externalDocs": {
        "description": "",
        "url": "http://deltaqt.org"
      },
      "info": {
        "contact": {
          "email": "nick.tatonetti@columbia.edu"
        },
        "description": "\u2206QTDb (delta QT Database) is a resource for exploring the effects of one or more drugs on the QT interval. It has been built from a deidentified subset of electrocardiogram and drug exposure data at Columbia University Medical Center.\n\nFor information on how the database was develeoped see the [Frequently Asked Questions](http://deltaqt.org/faq).\n",
        "license": {
          "name": "Creative Commons BY-NC-SA 4.0",
          "url": "http://creativecommons.org/licenses/by-nc-sa/4.0/"
        },
        "termsOfService": "https://github.com/tal-baum/deltaQTDb",
        "title": "\u2206QTDb API",
        "version": "1.0.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "query",
              "parameters": [
                {
                  "description": "One or more drug identifiers. For example use 1309944 for amiodarone.",
                  "in": "query",
                  "name": "drugs",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "default": {
                  "description": "Default response"
                }
              },
              "summary": ""
            }
          }
        }
      ],
      "security": [],
      "servers": [
        {
          "url": "http://www.deltaqt.org/api/v1"
        }
      ],
      "tags": [
        {
          "name": "translator",
          "x-id": "http://ncats.nih.gov/translator/"
        },
        {
          "name": "Adverse Drug Reaction Reporting Systems",
          "x-id": "http://purl.bioontology.org/ontology/MESH/D016907"
        },
        {
          "name": "drug"
        },
        {
          "name": "clinical data"
        }
      ],
      "~raw": "H4sIANqErl0C_21UwVLbMBD9lR2f2pnGDoVpB06lpEw50BZCD53CQZbWtgZZMtIqIcPk37uSEwgpN1vaffv27Vs9FW5AKwZdnEBxWE7LafEBioB-gT7w2d-nInqTLjui4aSqlstlqdCQeKDS-bbi1GpxUKzvOE3bxnHoU6EwSK8H0s6m1Nv48eP009XNrIZ3OReubmAmSNQi4HvQAQR4DC56idA4D_g4GOe1bYE6BGwalBTANeAsAt_3ziMoH1s-tDmGAbUlpi1MCRcEnQhQI1qoozYEjXc9F1GoFVrSjUYFIdYBKaGiYXzvpPBKu9YLDrUq4ycmLsRUjemCIDhzJva1FvDb6qSRphVcotJSGDjDRKG8tbf2nFkmOXwvkgqJZueWmaraNA5L5qhwwdV5BswHMd__Pff4EBnKrOA03PPNVcSQUMLdu80UdifQiIf3XDPNLRMaNT_YzpI0Gdybwumvi3yFvg8_mznLpiVuhxwYv9XUxbqUrq9ImEktYj_WTOkpVTpLQlKeNvZCZ4tYLe9LEsRTItJf5EaqElUs1pxkuIoNmJOs6HPFM4-s0AJZ2L7nFuHrn8mPs8n8FI5G_q_tJzfhcozOAmxgQ1WvJlZOgqg4tSrWqSSJdmPjbUHywgbDJH1Cf5xotQNvpaBQWt2VrVtUL6FV4v-CcaqS0gizZJFrZCHSjK9xcJ6Sa-erQNiHNwoM3E5Za8fyOePaVW5g-1Ndfpt_r2bTg0_H08-vKyYzvj6RRtvsuuSncf8GQV3I6lZsIL_Kny2OUwqx70U-KxKvvRUtcjpbH-l58Xdr5150Dh2h-TfZVHtM7ZGPmN4N2bEZcjlaDTk5UNrjPP69kj_3dhmed9OHEs7zMyD6wSBElvrgcHp8fHSUnwfRa6eEZ5uVY-O8Pz7v2YXaYxgGl6yxeZUaEQ299ULNxivYJrB51tk_-Mh6WGFmToa3Ev936M5q5q7ZqQzJnY35o0T5e73PcL0_hKeRQlZhJ-UhvQdfndIvhwFl9PwWzRP8y3GHQu1AsWXun3_YO6YWcnOwC5LGf7f-B5D9ux8bBgAA"
    },
    {
      "_id": "c0c88b5e6728d537860db6fdc6a1d4f0",
      "_meta": {
        "ETag": "e334d155bcb1a11e4095a695d4080d1b6d96e0439ebf06b288752a7a8eb4d61e",
        "github_username": "kevinxin90",
        "timestamp": "2020-05-27T16:54:23.925602",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:48.262199",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/chembio/smartapi.yaml"
      },
      "_score": 0.8,
      "components": {
        "x-bte-kgs-operations": {
          "chemical2disease": [
            {
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "chebi": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2disease-doid"
              },
              "source": "chembio",
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "chebi": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2disease-mondo"
              },
              "source": "chembio",
              "supportBatch": false
            }
          ],
          "chemical2gene": [
            {
              "inputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "chebi": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical2gene"
              },
              "source": "chembio",
              "supportBatch": false
            }
          ],
          "disease2chemical": [
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "CHEMBL.COMPOUND",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "mondo": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2chemical-chembl"
              },
              "source": "chembio",
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "mondo": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2chemical-chebi"
              },
              "source": "chembio",
              "supportBatch": false
            }
          ],
          "disease2gene": [
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "mondo": "{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2gene"
              },
              "source": "chembio",
              "supportBatch": false
            }
          ],
          "gene2chemical": [
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "CHEMBL.COMPOUND",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "geneid": "NCBIGene:{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2chemical-chembl"
              },
              "source": "chembio",
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "geneid": "NCBIGene:{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2chemical-chebi"
              },
              "source": "chembio",
              "supportBatch": false
            }
          ],
          "gene2disease": [
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "geneid": "NCBIGene:{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2disease-doid"
              },
              "source": "chembio",
              "supportBatch": false
            },
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "geneid": "NCBIGene:{inputs[0]}"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene2disease-mondo"
              },
              "source": "chembio",
              "supportBatch": false
            }
          ]
        },
        "x-bte-response-mapping": {
          "chemical2disease-doid": {
            "DOID": "associated_with.doid"
          },
          "chemical2disease-mondo": {
            "MONDO": "associated_with.mondo"
          },
          "chemical2gene": {
            "NCBIGene": "associated_with.ncbigene"
          },
          "disease2chemical-chebi": {
            "CHEBI": "associated_with.chebi"
          },
          "disease2chemical-chembl": {
            "CHEMBL.COMPOUND": "associated_with.chembl"
          },
          "disease2gene": {
            "NCBIGene": "associated_with.ncbigene"
          },
          "gene2chemical-chebi": {
            "CHEBI": "associated_with.chebi"
          },
          "gene2chemical-chembl": {
            "CHEMBL.COMPOUND": "associated_with.chembl"
          },
          "gene2disease-doid": {
            "DOID": "associated_with.doid"
          },
          "gene2disease-mondo": {
            "MONDO": "associated_with.mondo"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@renci.org",
          "name": "Chris B."
        },
        "description": "Scibite",
        "termsOfService": "https://automat.renci.org",
        "title": "Automat CHEMBIO API",
        "version": "2.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/gene/chemical_substance/{geneid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put NCBIGene ID here, e.g. 1017",
                  "example": "NCBIGene:1017",
                  "in": "path",
                  "name": "geneid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "gene2chemical",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene2chemical"
                }
              ]
            }
          }
        },
        {
          "path": "/chemical_substance/gene/{chebi}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put CHEBI ID here, e.g. \"CHEBI:661\"",
                  "example": "CHEBI:661",
                  "in": "path",
                  "name": "chebi",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "An association object"
                }
              },
              "summary": "chemical2gene",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical2gene"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "https://automat.renci.org/chembio"
        }
      ],
      "tags": [
        {
          "name": "drug"
        },
        {
          "name": "gene"
        },
        {
          "name": "disease"
        },
        {
          "name": "automat"
        },
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIAECbzl4C_-VY30_bMBD-V6JsjzQpncQknkbbiVUaFAntCRBynWvjLbEz22GgqP_77IuzNiGlhQLdRl8o9zvfd3d2WvgiA04y5h96_oegG3T9Pc9nfCqMoPCp4JpQjd8hJSyxZjEk2ScJnLJAyJm15yQFqxnEkimvH_hzI4xAUckyzQS3unPKJkyDNdcgUzWenoO8YRQdY60zdRiGJNciJTqoRddMJ2h1VGq9wZfPJ_3R2Ds6G1n9DUjlkvRM_Ta3MqGN1IguimYhZ1JEObX_eaWZjZHL5ME6QhpDOmHCn1_ZisjMxa6ePJL5zGZeSGbAoS6JmAKiGkKXqS7UknCVEC1kmS8jOlZIQmjDYjGMkuRa5ROlCacQFlbBojlazaCkTOVpSuRdVU6v8vMxpjTZ9EqUcu2dDvqjY-PnjYZeDBL2PAhmgbff3f9oI8AtSbOSmcrysNIxDGLrXu6PskYrkfAzZxIiI9UyB0uZLY5g2fouQ3OlJeMGVsRAgsoEV1Di0Ot28W-j6iPuEaUEZQT5FZPvYLp3blvitjPR0PkxUx3T8RL17snfS5ha53chFanJAVyrsM08rIM4v8LAbWwgS4VRTNhKRiq3HnbKZoyYzu-PGnRc-ig9PDjYv_QbvPzRrOYEi_x3KamjaCmxkRdeWNKKREVjKjA141muXRksWm5uHxdLSrhm1MqPy4xGKnLddMId9TUYjE_Oxt9Oh03fgct5XrWMG3SDvxFrxFqCWQEQXWuB3iKXtGIMV1GzZYpqvpYHsiif56J7NS83Y55lQuo-0TQ2hlOSKFii8jolWWYZtuEeYKGy7zj7-mh0sMQEWX5ORPujt4ejGc5y2lBTnSHP2arD8ehefw6rs-o_QNNh1omEqeJZW_JkfDocvwXoUsEj4fqwvnFXNOJjhrUF2PVsbAlsOVjG5LXgbJxTdSTXTPWWYL70fO8Oy40me0v0XnzGdw_f8nQ72YPDvR6SXYx0-RSviGMNqjp6666UT0JwJ1fKnaG66V3yqVC-1l3yrwCwvEQu3rmaTvdfhjrVWiocWPa3CvceZ57_F9Nx4ALveX7r7d_51nq2PQry27jidirgCkdxi6tbXE1PPA6sI558LX7ledFyAj8uafs59LjEbs8Wi_3Y4sbphFW_JzU39BM8tydqRY9t0i3m8xuZBObCdRQAAA=="
    },
    {
      "_id": "adf20dd6ff23dfe18e8e012bde686e31",
      "_meta": {
        "ETag": "1b11ced56a11abc222c75a20398e28e778ee77b7674e769230aa364656b5762b",
        "github_username": "kevinxin90",
        "timestamp": "2020-09-11T00:02:27.304690",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:51.675161",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/drug_response_kp/smartapi.yaml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call. Type: string.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned chem object. If \"true\" or \"1\", all fields will be collapsed into a single level deep object (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Type: boolean. Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us with an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "facet_size": {
            "description": "the number of facet buckets to return in the response. Type: integer. Default: 10. Max: 1000.",
            "in": "query",
            "name": "facet_size",
            "schema": {
              "type": "integer"
            }
          },
          "facets": {
            "description": "a comma-separated list of fields to return facets on.  In addition to query hits, the fields notated in \"facets\" will be aggregated by value and bucklet counts will be displayed in the \"facets\" field of the response object. Type: string (list). Default: None. Max: 1000.",
            "in": "query",
            "name": "facets",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated list of fields (in dotfield notation) used to limit the fields returned from the matching chem hit(s). The supported field names can be found from any chem object or from the /metadata/fields endpoint. If \"fields=all\", all available fields will be returned. Type: string (list). Default: all. Max: 1000.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "format": {
            "description": "controls output format of server response, currently supports: \"json\", \"jsonld\", \"html\". Type: string. Default: json.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching chem hits to skip, starting from 0.  This can be useful for paging in combination with the \"size\" parameter. Type: integer. Default: None.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "prefix": {
            "description": "Pass a prefix string to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          "search": {
            "description": "Pass a search term to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          "size": {
            "description": "the maximum number of matching chem hits to return per batch. Type: integer. Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated list of fields to sort on. Prefix each with \"-\" for descending order, otherwise in ascending order. Default: sort by descending score.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "Association": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Association"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Association"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "chemical-gene": [
            {
              "inputs": [
                {
                  "id": "PUBCHEM",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "association.context.disease.mondo,subject.NCBIGene,association.effect_size,association.pvalue",
                "q": "object.PUBCHEM:{inputs[0]}%20AND%20association.effect_size:<0%20AND%20association.pvalue:<0.05",
                "size": "1000",
                "sort": "association.pvalue"
              },
              "predicate": "gene_has_variant_that_contributes_to_drug_response_association",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical-gene"
              },
              "source": "Multiomics Provider",
              "supportBatch": false
            }
          ],
          "gene-chemical": [
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "PUBCHEM",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "association.context.disease.mondo,object.PUBCHEM,association.effect_size,association.pvalue",
                "q": "subject.NCBIGene:{inputs[0]}%20AND%20association.effect_size:<0%20AND%20association.pvalue:<0.05",
                "size": "1000",
                "sort": "association.pvalue"
              },
              "predicate": "gene_has_variant_that_contributes_to_drug_response_association",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene-chemical"
              },
              "source": "Multiomics Provider",
              "supportBatch": false
            }
          ]
        },
        "x-bte-response-mapping": {
          "chemical-gene": {
            "NCBIGene": "hits.subject.NCBIGene",
            "disease_context": "hits.association.context.disease.mondo",
            "effect_size": "hits.association.effect_size",
            "pvalue": "hits.association.pvalue"
          },
          "gene-chemical": {
            "PUBCHEM": "hits.object.PUBCHEM",
            "disease_context": "hits.association.context.disease.mondo",
            "effect_size": "hits.association.effect_size",
            "pvalue": "hits.association.pvalue"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothings.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the Drug Response KP query web services.",
        "termsOfService": "https://biothings.io/about",
        "title": "Drug Response KP API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/association",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple association IDs separated by comma. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted. Type: string (list). Max: 1000.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Association"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "A list of matching association objects"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "For a list of association IDs, return the matching disease object",
              "tags": [
                "association"
              ]
            }
          }
        },
        {
          "path": "/association/{associationid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Retrieve association objects based on Association ID  Supports JSONP and CORS as well.",
                  "example": "NRAS-TCGA-LUAD",
                  "in": "path",
                  "name": "associationid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Association"
                      }
                    }
                  },
                  "description": "A matching association object"
                },
                "404": {
                  "description": "A response indicating an unknown association ID"
                }
              },
              "summary": "Retrieve association objects based on ID",
              "tags": [
                "association"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "KP metadata object"
                }
              },
              "summary": "Get metadata about the data available from the API",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/search",
                  "name": "search"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/prefix",
                  "name": "prefix"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "description": "metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string.",
                  "example": "subject.NCBIGene:51742",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/facet_size",
                  "name": "facet_size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/facets",
                  "name": "facets"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make queries and return matching association hits. Supports JSONP and CORS as well.",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical-gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene-chemical"
                }
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms separated by comma (also \"+\" or whitespace).  Does not support wildcard queries",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "a comma-separated list of fields as the search \"scopes\" (fields to search through for query term). The available \"fields\" that can be passed to the \"scopes\" parameter are listed in the **/metadata/fields** endpoint.string Default: \"scopes=_id\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make batch disease queries and return matching disease hits",
              "tags": [
                "query"
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://biothings.ncats.io/drug_response_kp"
        },
        {
          "description": "Production server",
          "url": "http://biothings.ncats.io/drug_response_kp"
        }
      ],
      "tags": [
        {
          "name": "gene"
        },
        {
          "name": "disease"
        },
        {
          "name": "chemical"
        },
        {
          "name": "association"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        },
        {
          "name": "biothings_graph"
        }
      ],
      "~raw": "H4sIAJO-Wl8C_-1a-2_cuBH-Vwi1BZzU-3Caa1GjB9Sx09TXxvbFObRAbCy4EneXZ0lUSMrrreH_vTND6rla7dq-y-WK3g-XNcXHPL75ZjjSfaAykfJMBocs-MNwPBwH-yyQ6UzBwH0QqtTy0NJvkXAZ47SFiLO_TqWyC5nOzVAqXJLyRODD707_9faM_fv0DAfvBjKiFdZm5nA0mku7yKfDUCWjG3Er0zuZ_nnsJmoV03otTKZSI6exYJG4FTHIp4MHmBMJE2qZWalSnHiiwjwRIB4OMDVjdiHYic7n7IPbQrB_XLDPudArthRTZoS-laEwQzzPCp2Y89mlG6uLWNdrxKcqtzRfWife2gFHF6c44VZo4wU7ABuivHggjMLQp_u28G_TUK8yKyJ2oVWUh6SDW4C75TrulikNuSXJIpBj4m0lJjcZnrh2yra9d936Gi3A516VwtNzkQp3bDESSSO4aQ2GC5HIkMfNUW6MCiX5rvUgTZXtGCdHNoes5qmJuVW6OV7qtGF4Mtc8Wzi1Mm4XhuA9qouEA5kyDvgZ17CFLX35Wy1muOFvRgBksBKA0IyqSaNI2ZkUcVQPi3KMRNq2A0019fV-ZKfVLlBri93AbicrnXDbONmNkLW0ADcY-0ZFq5IeYAf6zbMsBj-j-UZ3g-VyOcCVA4CbSEMViYhmGYQDd2bVGNpWCmd_Gbl_WxhO8tjKDMig5h52emIA0Sg2htB0xUCZhA_ZmbICeIBbFuZag2Qxxj5TKfxr-Y0gjpBpllsGx7E8Y1axg_F4zBJ-J5M82acZAH7LljKO2RQWJ9LCKUP2cZWJQ2asBgyxvVga-2LI3vO7Q9rB0QpMQaHdpODhwdtMalL_Eyl5_fDgH7gQc2q_Go97Tfqj8bCsWVBakbjVnW51M83oqBlrpZRcaw4h9dBBrkcM9UNWBd-HGDUN-6vpjyK0BMfg9RME7xX3rdZKA8WC4zcJV5gOfBnROShfymTiMAXedqhFdHjiIEbOASUaoRv8TWnGSyVb2NqHA2yuUwJDaQDPbl75oMaJDTa7pqPqbDK6r_0howcywVx0k0tL1w8CoARpsMv8bAriRIBudtSQn7HLPMuUhhnfXZ6fXYBpInZ8_uESNoFwiGPCqrjjSeaS2tmHo8vBx-N3R4N__nB04goAHEdyrFNBQ42giW2rc4EmrpzcEQxfgjsh1cRTHt7UdyjHfuXs-1zC2J0muuOuhww8F7zu4vCNAZunN6lapq34WwvW3YLg9GRbTIKVecQt7w3Ax-DLhYljmE64bXZby0RQSRbSlQZtWeGdsNUcqkyJn9yft4AxjjXzTKuExn1hWtqjVL5ljALuz7EJEKMOG1ThR75QxGbwXN7V1_uRny3q2lVK4RdnzKe40K8sPdnrPAe5R-SR7-ke5Ki4Tf8mJ2mHZ8dvTt9BUX_4zcGfXr_qwffnr5X7n8fcMx4KOzHyP6KxQzW60y4GEm8jEvDvLxQHz8o9qKdZ03xH27Wttru9kLAap-LfX3-2pIDqr1Jd76FMfUtpFxTuV8FCWnMVMH8DWv2K6-j3eKvCR3CNozrTV86dlQKqPdypOC2Jz516TS2iqRWDm7kZoGi0YV926po-KnoRg6p3sftiXDOouhnXaIlfsEfwrFh_Fk8-I9Z_se7C597egotUagp29BXYHo-NgrD9PcQs3BuXgGMIHGDHF0PGThQgP1WWGYdrbBxEIddRERZdjQHKliBgZ8uDu2MHlSTFPbWoEQzxiKuxQC63FQi35ydYVTy0C63y-QLjuKYlyP0RNqiqxisPANjDtU-ABaaCZRC9cDxs53irPKj0KeNakHgwTboL88uX7dry5Usm0ihTMrVD3z85ETMO1j8sN_12IqOroLuL8pM1TLYz-sX55cc-zvy-yenFJeR_l9unSORl76OP6Ys5aIAuDndyVsqs8-Z9Ve50hMVK5YRLBCXjYOlicgOPgNUE5eY-veCkZu9uuMvNbWs5W7F1h6joZ61iQoSzcvGCwhkNTI6be_gM2ekM1MEq2hHMVXBwBRKALEXEF83IUMUxzwwFG2jKmQF5IH5jfFPCIiEyvydyVsxSQYFZodTt0rFsn-WGnOi1YkUXnrhEzlM5W5ECfkuwRB6CKuKFt-1UqVjwdFhF9gxYU_QZu54DO4ztd3TWLl4-rZkaTIfAQBrSYp7HXIMmACc0uMp1-dpnHxvBmCtyzeeC1oBmEAu3MhKwxIUwwItO2mdGOSaEVY4MLaFLAzjIDrnBbcBZM3CJWmIvmXaAjft0LrP2FnTVbh0dSpMj8mQKEmFWwLlsmoc3UK6jVj4yPR8XRFBEASBHzIWueepg3G5kb5C-eUPqUMHvXdPhaRmuUsJtwhQgi52mjEeRLGDp8hnSjWvb-7WEXJeOrrwMEFYl9udzwEmR3295nAtiMzRfDGYEgKS1UAFSy2K-qrJbbUsXKGVgN1LChtcFpcnPgAMfY3SzC2aqRs5j7b0H2q2F_guMJMr-sUykrdu4pLGy3VSmASI2cMqe8VWGr4twstse9DJFhTEDc_tdeLqqsyLFVrF7u6Ko6gnHnW70W-C8gjhrHbEmhRaib_MQ5Y3dHFRW09sc5IrdzQkDcJ5bfDtVJQ334raE137tzZY3rMEiCisIVN39iiP3e2ETMEgr_VUq4tRexcpyfZtieGffylNrEHGF6o2E7GMs11SikMuBjwA6skQJ4HCWx1TEZnyO0wCvAOmpTF2SqtVfyE71imAz7VEM9qnvOxPbeM73Gjv0v3CliptQIA10nsmYskmjBncw2uisbdJWPdAtzvKt2c3iFlcHuCj8XMJWDeNtwvZkQP_OdivCfCaBotdVs72JsE_oHfMedfw2yLw97-FqSncXDjWCgy8I31fBALMOBAFuDAyImiodCb3PFGyul5LKfbgfNp7WFKTNIe_VNoDrl-73lW9o9nnqoXzu8s9R-1uK5m18IqONHm-8L8eJ17UrYe1dU_0K1HEE5Bis0DqPoWtOCEWh2VxwdpzYviA2X8FDvjif9TR_NryNX7cNOYR-lvkimMXKEXEhlsM8iVW9C-gyZ1uP644vAArdNluT7nQ_3ScHMALB-2hNrVI33WFHDy2PNwdlhz_h-R9fT5SeOKlwKahROLHStBKOVtSFawjQ1nG3leQQ57EdZOmAcse57VnurdGGDup90GyLuhPxIxnfy3Tf8F388Ob472_fExOAj1MrQxw-9msv8ynk8DQUrpfn6pjGBsXrpfYONOY_xmo0A8p6tv4ud0g9lDs79O2GYaLSSO2332Ht15eI2Qye0b2lMZ5R-Y_yfK6gMfSKHt47G3waXz_87tX46OwE_r9h18O_jDunuAPg6XD8TVBlhqBbCJ_rAqw3A19YUOum_NxusuBmcsu1BONN8Ho6ocJRTnMrzMSqSfPbvfor8Fr_bJLwLENcHPb3v4v5Az9_vX0OCuXafT_5HnupCh4b_KQRL9X0taGvUd9g3g18T4B83eymb8Dcdsh04OxxQH0G5pp4eQri1t68_h9zbcy13ro8HXMVA7bP6OTA-wp8-LUsvrlqe4teo1cOKedtcBhO94bvmln5xKNs4lHXObsTkWSedmDdlwFR7NPE7VeoBfz3X1oYS7uYLgAA"
    },
    {
      "_id": "43af91b3d7cae43591083bff9d75c6dd",
      "_meta": {
        "ETag": "70f98e5008c3a7730718a15cff8ee4b10c4248072215730ce0bd5c3276937567",
        "github_username": "newgene",
        "timestamp": "2019-10-22T04:25:09.645099",
        "uptime_status": "unknown",
        "uptime_ts": "2020-09-17T00:08:08.364923",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/ebi_proteins/openapi.yml"
      },
      "_score": 0.8,
      "components": {
        "schemas": {
          "Absorption": {
            "properties": {
              "max": {
                "$ref": "#/components/schemas/EvidencedStringType"
              },
              "text": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "AlternativeName": {
            "properties": {
              "ecNumber": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              },
              "fullName": {
                "$ref": "#/components/schemas/EvidencedStringType"
              },
              "shortName": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "AssociationType": {
            "properties": {
              "description": {
                "type": "string"
              },
              "evidence": {
                "items": {
                  "$ref": "#/components/schemas/EvidenceType"
                },
                "type": "array"
              },
              "isDisease": {
                "default": false,
                "type": "boolean",
                "xml": {
                  "attribute": true
                }
              },
              "name": {
                "type": "string"
              },
              "xrefs": {
                "items": {
                  "$ref": "#/components/schemas/DbReferenceType"
                },
                "type": "array"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "CanonicalGene": {
            "properties": {
              "gene": {
                "$ref": "#/components/schemas/GeneType"
              },
              "relatedGene": {
                "items": {
                  "$ref": "#/components/schemas/GeneType"
                },
                "type": "array"
              }
            },
            "required": [
              "gene"
            ],
            "type": "object",
            "xml": {
              "name": "canonicalGene"
            }
          },
          "CitationType": {
            "properties": {
              "authorList": {
                "$ref": "#/components/schemas/NameListType"
              },
              "city": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "country": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "date": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "db": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "dbReference": {
                "items": {
                  "$ref": "#/components/schemas/DbReferenceType"
                },
                "type": "array"
              },
              "editorList": {
                "$ref": "#/components/schemas/NameListType"
              },
              "first": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "institute": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "last": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "locator": {
                "type": "string"
              },
              "name": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "number": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "publisher": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "title": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "volume": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "CofactorType": {
            "properties": {
              "dbReference": {
                "$ref": "#/components/schemas/DbReferenceType"
              },
              "evidence": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "dbReference",
              "name"
            ],
            "type": "object"
          },
          "CommentType": {
            "properties": {
              "absorption": {
                "$ref": "#/components/schemas/Absorption"
              },
              "cofactor": {
                "items": {
                  "$ref": "#/components/schemas/CofactorType"
                },
                "type": "array"
              },
              "conflict": {
                "$ref": "#/components/schemas/Conflict"
              },
              "disease": {
                "$ref": "#/components/schemas/Disease"
              },
              "error": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "event": {
                "items": {
                  "$ref": "#/components/schemas/EventType"
                },
                "type": "array"
              },
              "evidence": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "experiments": {
                "format": "int32",
                "type": "integer"
              },
              "interactant": {
                "items": {
                  "$ref": "#/components/schemas/InteractantType"
                },
                "type": "array"
              },
              "isoform": {
                "items": {
                  "$ref": "#/components/schemas/IsoformType"
                },
                "type": "array"
              },
              "kinetics": {
                "$ref": "#/components/schemas/Kinetics"
              },
              "link": {
                "items": {
                  "$ref": "#/components/schemas/Link"
                },
                "type": "array"
              },
              "location": {
                "items": {
                  "$ref": "#/components/schemas/LocationType"
                },
                "type": "array"
              },
              "locationType": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "mass": {
                "format": "float",
                "type": "number",
                "xml": {
                  "attribute": true
                }
              },
              "method": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "molecule": {
                "$ref": "#/components/schemas/MoleculeType"
              },
              "name": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "organismsDiffer": {
                "default": false,
                "type": "boolean"
              },
              "phDependence": {
                "$ref": "#/components/schemas/PhDependence"
              },
              "redoxPotential": {
                "$ref": "#/components/schemas/RedoxPotential"
              },
              "subcellularLocation": {
                "items": {
                  "$ref": "#/components/schemas/SubcellularLocationType"
                },
                "type": "array"
              },
              "temperatureDependence": {
                "$ref": "#/components/schemas/TemperatureDependence"
              },
              "text": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              },
              "type": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "Component": {
            "properties": {
              "allergenName": {
                "$ref": "#/components/schemas/EvidencedStringType"
              },
              "alternativeName": {
                "items": {
                  "$ref": "#/components/schemas/AlternativeName"
                },
                "type": "array"
              },
              "biotechName": {
                "$ref": "#/components/schemas/EvidencedStringType"
              },
              "cdAntigenName": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              },
              "innName": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              },
              "recommendedName": {
                "$ref": "#/components/schemas/RecommendedName"
              },
              "submittedName": {
                "items": {
                  "$ref": "#/components/schemas/SubmittedName"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "ComponentType": {
            "properties": {
              "biosampleId": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "genomeAccession": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "name": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "protein": {
                "items": {
                  "$ref": "#/components/schemas/ProteinType"
                },
                "type": "array"
              }
            },
            "required": [
              "genomeAccession"
            ],
            "type": "object"
          },
          "Conflict": {
            "properties": {
              "ref": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "sequence": {
                "$ref": "#/components/schemas/Sequence"
              },
              "type": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "DbReference": {
            "properties": {
              "evidences": {
                "items": {
                  "$ref": "#/components/schemas/Evidence"
                },
                "type": "array"
              },
              "id": {
                "type": "string"
              },
              "isoform": {
                "type": "string"
              },
              "properties": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              "type": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "DbReferenceObject": {
            "properties": {
              "alternativeUrl": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "id": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "name": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "reviewed": {
                "default": false,
                "type": "boolean",
                "xml": {
                  "attribute": true
                }
              },
              "url": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "required": [
              "alternativeUrl",
              "id",
              "name",
              "reviewed",
              "url"
            ],
            "type": "object"
          },
          "DbReferenceType": {
            "properties": {
              "evidence": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "id": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "molecule": {
                "$ref": "#/components/schemas/MoleculeType"
              },
              "property": {
                "items": {
                  "$ref": "#/components/schemas/PropertyType"
                },
                "type": "array"
              },
              "type": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "Disease": {
            "properties": {
              "acronym": {
                "type": "string"
              },
              "dbReference": {
                "$ref": "#/components/schemas/DbReferenceType"
              },
              "description": {
                "type": "string"
              },
              "id": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "acronym",
              "dbReference",
              "description",
              "name"
            ],
            "type": "object"
          },
          "DiseaseComment": {
            "properties": {
              "acronym": {
                "type": "string"
              },
              "dbReference": {
                "$ref": "#/components/schemas/DbReference"
              },
              "description": {
                "$ref": "#/components/schemas/EvidencedString"
              },
              "diseaseId": {
                "type": "string"
              },
              "text": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedString"
                },
                "type": "array"
              },
              "type": {
                "enum": [
                  "FUNCTION",
                  "CATALYTIC_ACTIVITY",
                  "COFACTOR",
                  "ENZYME_REGULATION",
                  "BIOPHYSICOCHEMICAL_PROPERTIES",
                  "PATHWAY",
                  "SUBUNIT",
                  "INTERACTION",
                  "SUBCELLULAR_LOCATION",
                  "ALTERNATIVE_PRODUCTS",
                  "TISSUE_SPECIFICITY",
                  "DEVELOPMENTAL_STAGE",
                  "INDUCTION",
                  "DOMAIN",
                  "PTM",
                  "RNA_EDITING",
                  "MASS_SPECTROMETRY",
                  "POLYMORPHISM",
                  "DISEASE",
                  "DISRUPTION_PHENOTYPE",
                  "ALLERGEN",
                  "TOXIC_DOSE",
                  "BIOTECHNOLOGY",
                  "PHARMACEUTICAL",
                  "MISCELLANEOUS",
                  "SIMILARITY",
                  "CAUTION",
                  "SEQUENCE_CAUTION",
                  "WEBRESOURCE",
                  "PAGE",
                  "UNKNOWN"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "Domain": {
            "properties": {
              "allergenName": {
                "$ref": "#/components/schemas/EvidencedStringType"
              },
              "alternativeName": {
                "items": {
                  "$ref": "#/components/schemas/AlternativeName"
                },
                "type": "array"
              },
              "biotechName": {
                "$ref": "#/components/schemas/EvidencedStringType"
              },
              "cdAntigenName": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              },
              "innName": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              },
              "recommendedName": {
                "$ref": "#/components/schemas/RecommendedName"
              },
              "submittedName": {
                "items": {
                  "$ref": "#/components/schemas/SubmittedName"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "Entry": {
            "properties": {
              "accession": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "comment": {
                "items": {
                  "$ref": "#/components/schemas/CommentType"
                },
                "type": "array"
              },
              "created": {
                "format": "date-time",
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "dataset": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "dbReference": {
                "items": {
                  "$ref": "#/components/schemas/DbReferenceType"
                },
                "type": "array"
              },
              "evidence": {
                "items": {
                  "$ref": "#/components/schemas/EvidenceType"
                },
                "type": "array"
              },
              "feature": {
                "items": {
                  "$ref": "#/components/schemas/FeatureType"
                },
                "type": "array"
              },
              "gene": {
                "items": {
                  "$ref": "#/components/schemas/GeneType"
                },
                "type": "array"
              },
              "geneLocation": {
                "items": {
                  "$ref": "#/components/schemas/GeneLocationType"
                },
                "type": "array"
              },
              "keyword": {
                "items": {
                  "$ref": "#/components/schemas/KeywordType"
                },
                "type": "array"
              },
              "modified": {
                "format": "date-time",
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "name": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "organism": {
                "$ref": "#/components/schemas/OrganismType"
              },
              "organismHost": {
                "items": {
                  "$ref": "#/components/schemas/OrganismType"
                },
                "type": "array"
              },
              "protein": {
                "$ref": "#/components/schemas/ProteinType"
              },
              "proteinExistence": {
                "$ref": "#/components/schemas/ProteinExistenceType"
              },
              "reference": {
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                },
                "type": "array"
              },
              "sequence": {
                "$ref": "#/components/schemas/SequenceType"
              },
              "version": {
                "format": "int32",
                "type": "integer",
                "xml": {
                  "attribute": true
                }
              }
            },
            "required": [
              "accession",
              "name",
              "organism",
              "protein",
              "proteinExistence",
              "reference",
              "sequence"
            ],
            "type": "object",
            "xml": {
              "name": "entry"
            }
          },
          "ErrorMessage": {
            "properties": {
              "errorMessage": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "xml": {
                  "name": "errorMessages",
                  "wrapped": true
                }
              },
              "requestedURL": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "EventType": {
            "properties": {
              "type": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "Evidence": {
            "properties": {
              "code": {
                "pattern": "^ECO:[0-9]{7}$",
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "label": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "source": {
                "$ref": "#/components/schemas/DbReferenceObject"
              }
            },
            "required": [
              "code",
              "source"
            ],
            "type": "object"
          },
          "EvidenceType": {
            "properties": {
              "importedFrom": {
                "$ref": "#/components/schemas/ImportedFromType"
              },
              "key": {
                "type": "integer",
                "xml": {
                  "attribute": true
                }
              },
              "source": {
                "$ref": "#/components/schemas/SourceType"
              },
              "type": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "EvidencedString": {
            "properties": {
              "evidences": {
                "items": {
                  "$ref": "#/components/schemas/Evidence"
                },
                "type": "array"
              },
              "value": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "EvidencedStringType": {
            "properties": {
              "evidence": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "status": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "value": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "ExonMapType": {
            "properties": {
              "genomeLocation": {
                "$ref": "#/components/schemas/LocationType"
              },
              "id": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "proteinLocation": {
                "$ref": "#/components/schemas/LocationType"
              }
            },
            "required": [
              "genomeLocation",
              "proteinLocation"
            ],
            "type": "object"
          },
          "Feature": {
            "properties": {
              "alternativeSequence": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "begin": {
                "pattern": "^(\\?|<?[1-9][0-9]*)$",
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "category": {
                "enum": [
                  "MOLECULE_PROCESSING",
                  "STRUCTURAL",
                  "DOMAINS_AND_SITES",
                  "MUTAGENESIS",
                  "PTM",
                  "SEQUENCE_INFORMATION",
                  "TOPOLOGY",
                  "VARIANTS"
                ],
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "cvId": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "description": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "end": {
                "pattern": "^(\\?|[1-9][0-9]*>?)$",
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "evidences": {
                "items": {
                  "$ref": "#/components/schemas/Evidence"
                },
                "type": "array"
              },
              "ftId": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "type": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "xrefs": {
                "items": {
                  "$ref": "#/components/schemas/DbReferenceObject"
                },
                "type": "array"
              }
            },
            "required": [
              "begin",
              "category",
              "end",
              "evidences",
              "type"
            ],
            "type": "object"
          },
          "FeatureType": {
            "properties": {
              "description": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "evidence": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "id": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "location": {
                "$ref": "#/components/schemas/LocationType"
              },
              "original": {
                "type": "string"
              },
              "ref": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "status": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "type": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "variation": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "location"
            ],
            "type": "object"
          },
          "GeneLocationType": {
            "properties": {
              "evidence": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "name": {
                "items": {
                  "$ref": "#/components/schemas/StatusType"
                },
                "type": "array"
              },
              "type": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "GeneNameType": {
            "properties": {
              "evidence": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "type": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "value": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "GeneType": {
            "properties": {
              "name": {
                "items": {
                  "$ref": "#/components/schemas/GeneNameType"
                },
                "type": "array"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "GenomicLocationType": {
            "properties": {
              "chromosome": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "end": {
                "format": "int64",
                "type": "integer",
                "xml": {
                  "attribute": true
                }
              },
              "exon": {
                "items": {
                  "$ref": "#/components/schemas/ExonMapType"
                },
                "type": "array"
              },
              "reverseStrand": {
                "default": false,
                "type": "boolean",
                "xml": {
                  "attribute": true,
                  "name": "reverse_strand"
                }
              },
              "start": {
                "format": "int64",
                "type": "integer",
                "xml": {
                  "attribute": true
                }
              }
            },
            "required": [
              "exon"
            ],
            "type": "object"
          },
          "GnCoordinateType": {
            "properties": {
              "ensemblGeneId": {
                "type": "string",
                "xml": {
                  "attribute": true,
                  "name": "ensembl_gene_id"
                }
              },
              "ensemblTranscriptId": {
                "type": "string",
                "xml": {
                  "attribute": true,
                  "name": "ensembl_transcript_id"
                }
              },
              "ensemblTranslationId": {
                "type": "string",
                "xml": {
                  "attribute": true,
                  "name": "ensembl_translation_id"
                }
              },
              "feature": {
                "items": {
                  "$ref": "#/components/schemas/GnFeatureType"
                },
                "type": "array"
              },
              "genomicLocation": {
                "$ref": "#/components/schemas/GenomicLocationType"
              }
            },
            "required": [
              "genomicLocation"
            ],
            "type": "object"
          },
          "GnEntry": {
            "properties": {
              "accession": {
                "type": "string"
              },
              "gene": {
                "items": {
                  "$ref": "#/components/schemas/GeneNameType"
                },
                "type": "array"
              },
              "gnCoordinate": {
                "items": {
                  "$ref": "#/components/schemas/GnCoordinateType"
                },
                "type": "array"
              },
              "name": {
                "type": "string"
              },
              "protein": {
                "$ref": "#/components/schemas/ProteinType"
              },
              "sequence": {
                "type": "string"
              },
              "taxid": {
                "format": "int32",
                "type": "integer"
              }
            },
            "required": [
              "accession",
              "name",
              "protein",
              "sequence"
            ],
            "type": "object",
            "xml": {
              "name": "gnEntry"
            }
          },
          "GnFeatureType": {
            "properties": {
              "description": {
                "type": "string"
              },
              "evidence": {
                "items": {
                  "$ref": "#/components/schemas/EvidenceType"
                },
                "type": "array"
              },
              "genomeLocation": {
                "$ref": "#/components/schemas/LocationType"
              },
              "id": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "location": {
                "$ref": "#/components/schemas/LocationType"
              },
              "original": {
                "type": "string"
              },
              "peptide": {
                "$ref": "#/components/schemas/PeptideType"
              },
              "type": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "variant": {
                "$ref": "#/components/schemas/VariantType"
              },
              "variation": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "xrefs": {
                "items": {
                  "$ref": "#/components/schemas/DbReferenceType"
                },
                "type": "array"
              }
            },
            "required": [
              "description",
              "genomeLocation",
              "location"
            ],
            "type": "object"
          },
          "ImportedFromType": {
            "properties": {
              "dbReference": {
                "$ref": "#/components/schemas/DbReferenceType"
              }
            },
            "required": [
              "dbReference"
            ],
            "type": "object"
          },
          "IntAct": {
            "properties": {
              "experiments": {
                "format": "int32",
                "type": "integer"
              },
              "gene": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "interactionType": {
                "type": "string"
              },
              "interactor1": {
                "type": "string"
              },
              "interactor2": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "interactionType"
            ],
            "type": "object"
          },
          "InteractantType": {
            "properties": {
              "id": {
                "type": "string"
              },
              "intactId": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "label": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "IsoformType": {
            "properties": {
              "id": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "name": {
                "items": {
                  "$ref": "#/components/schemas/Name"
                },
                "type": "array"
              },
              "sequence": {
                "$ref": "#/components/schemas/Sequence"
              },
              "text": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              }
            },
            "required": [
              "id",
              "name",
              "sequence"
            ],
            "type": "object"
          },
          "JournalType": {
            "properties": {
              "dbReference": {
                "items": {
                  "$ref": "#/components/schemas/DbReferenceType"
                },
                "type": "array"
              },
              "first": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "last": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "name": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "title": {
                "type": "string"
              },
              "volume": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "KeywordType": {
            "properties": {
              "evidence": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "id": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "value": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "Kinetics": {
            "properties": {
              "km": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array",
                "xml": {
                  "name": "KM"
                }
              },
              "text": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              },
              "vmax": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array",
                "xml": {
                  "name": "Vmax"
                }
              }
            },
            "type": "object"
          },
          "Lineage": {
            "properties": {
              "taxon": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "taxon"
            ],
            "type": "object"
          },
          "Link": {
            "properties": {
              "uri": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "LocationType": {
            "properties": {
              "begin": {
                "$ref": "#/components/schemas/PositionType"
              },
              "end": {
                "$ref": "#/components/schemas/PositionType"
              },
              "position": {
                "$ref": "#/components/schemas/PositionType"
              },
              "sequence": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "MoleculeType": {
            "properties": {
              "id": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "value": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "Name": {
            "properties": {
              "evidence": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "value": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "NameListType": {
            "properties": {
              "consortiumOrPerson": {
                "items": {
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "OrganismNameType": {
            "properties": {
              "type": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "value": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "OrganismType": {
            "properties": {
              "dbReference": {
                "items": {
                  "$ref": "#/components/schemas/DbReferenceType"
                },
                "type": "array"
              },
              "evidence": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "lineage": {
                "$ref": "#/components/schemas/Lineage"
              },
              "name": {
                "items": {
                  "$ref": "#/components/schemas/OrganismNameType"
                },
                "type": "array"
              }
            },
            "required": [
              "dbReference",
              "name"
            ],
            "type": "object"
          },
          "PLocation2GLocation": {
            "properties": {
              "accession": {
                "type": "string"
              },
              "chromosome": {
                "type": "string"
              },
              "ensemblTranslationId": {
                "type": "string"
              },
              "geneEnd": {
                "format": "int64",
                "type": "integer"
              },
              "geneStart": {
                "format": "int64",
                "type": "integer"
              },
              "proteinEnd": {
                "format": "int32",
                "type": "integer"
              },
              "proteinStart": {
                "format": "int32",
                "type": "integer"
              },
              "taxid": {
                "format": "int32",
                "type": "integer"
              }
            },
            "type": "object",
            "xml": {
              "name": "GenomeLocation"
            }
          },
          "PLocation2GLocationCollection": {
            "properties": {
              "locations": {
                "items": {
                  "$ref": "#/components/schemas/PLocation2GLocation"
                },
                "type": "array"
              }
            },
            "type": "object",
            "xml": {
              "name": "genomeLocation"
            }
          },
          "PeptideType": {
            "properties": {
              "peptideSequence": {
                "type": "string"
              },
              "unique": {
                "default": false,
                "type": "boolean",
                "xml": {
                  "attribute": true
                }
              }
            },
            "required": [
              "peptideSequence"
            ],
            "type": "object"
          },
          "PhDependence": {
            "properties": {
              "text": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              }
            },
            "required": [
              "text"
            ],
            "type": "object"
          },
          "PolyphenPredictionType": {
            "properties": {
              "predication": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "score": {
                "format": "double",
                "type": "number",
                "xml": {
                  "attribute": true
                }
              },
              "value": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "PositionType": {
            "properties": {
              "evidence": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "position": {
                "type": "integer",
                "xml": {
                  "attribute": true
                }
              },
              "status": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "PropertyType": {
            "properties": {
              "type": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "value": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "ProteinExistenceType": {
            "properties": {
              "type": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "ProteinFeatureInfo": {
            "properties": {
              "accession": {
                "pattern": "(^([OPQ][0-9][A-Z,0-9]{3}[0-9])(-(\\d+))?$)|(^([A-NR-Z]([0-9][A-Z][A-Z0-9]{2}){1,2}[0-9])(-(\\d+))?$)",
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "entryName": {
                "pattern": "(^\\w+_\\w+$)",
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "features": {
                "items": {
                  "$ref": "#/components/schemas/Feature"
                },
                "type": "array"
              },
              "geteGeneId": {
                "description": "Ensembl Gene ID",
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "geteProteinId": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "sequence": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "sequenceChecksum": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "taxid": {
                "description": "UniProt taxonomy ID",
                "format": "int32",
                "type": "integer",
                "xml": {
                  "attribute": true
                }
              },
              "version": {
                "type": "string"
              }
            },
            "required": [
              "accession",
              "entryName",
              "features",
              "sequence",
              "version"
            ],
            "type": "object"
          },
          "ProteinNameType": {
            "properties": {
              "fullName": {
                "type": "string"
              },
              "shortName": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "fullName"
            ],
            "type": "object"
          },
          "ProteinType": {
            "properties": {
              "allergenName": {
                "$ref": "#/components/schemas/EvidencedStringType"
              },
              "alternativeName": {
                "items": {
                  "$ref": "#/components/schemas/AlternativeName"
                },
                "type": "array"
              },
              "biotechName": {
                "$ref": "#/components/schemas/EvidencedStringType"
              },
              "cdAntigenName": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              },
              "component": {
                "items": {
                  "$ref": "#/components/schemas/Component"
                },
                "type": "array"
              },
              "domain": {
                "items": {
                  "$ref": "#/components/schemas/Domain"
                },
                "type": "array"
              },
              "innName": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              },
              "recommendedName": {
                "$ref": "#/components/schemas/RecommendedName"
              },
              "submittedName": {
                "items": {
                  "$ref": "#/components/schemas/SubmittedName"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "Proteome": {
            "properties": {
              "canonicalGene": {
                "items": {
                  "$ref": "#/components/schemas/CanonicalGene"
                },
                "type": "array"
              },
              "component": {
                "items": {
                  "$ref": "#/components/schemas/ComponentType"
                },
                "type": "array"
              },
              "dbReference": {
                "items": {
                  "$ref": "#/components/schemas/DbReferenceType"
                },
                "type": "array"
              },
              "description": {
                "type": "string"
              },
              "isReferenceProteome": {
                "default": false,
                "type": "boolean"
              },
              "isRepresentativeProteome": {
                "default": false,
                "type": "boolean"
              },
              "isolate": {
                "type": "string"
              },
              "modified": {
                "format": "date-time",
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "name": {
                "type": "string"
              },
              "redundantProteome": {
                "items": {
                  "$ref": "#/components/schemas/RedundantProteomeType"
                },
                "type": "array"
              },
              "redundantTo": {
                "type": "string"
              },
              "reference": {
                "items": {
                  "$ref": "#/components/schemas/ReferenceType"
                },
                "type": "array"
              },
              "source": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "sourceTaxonomy": {
                "format": "int64",
                "type": "integer",
                "xml": {
                  "attribute": true
                }
              },
              "strain": {
                "type": "string"
              },
              "superregnum": {
                "enum": [
                  "EUKARYOTA",
                  "BACTERIA",
                  "VIRUSES",
                  "ARCHAEA"
                ],
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "taxonomy": {
                "format": "int64",
                "type": "integer",
                "xml": {
                  "attribute": true
                }
              },
              "upid": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "required": [
              "component",
              "name"
            ],
            "type": "object",
            "xml": {
              "name": "proteome"
            }
          },
          "RecommendedName": {
            "properties": {
              "ecNumber": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              },
              "fullName": {
                "$ref": "#/components/schemas/EvidencedStringType"
              },
              "shortName": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              }
            },
            "required": [
              "fullName"
            ],
            "type": "object"
          },
          "RedoxPotential": {
            "properties": {
              "text": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              }
            },
            "required": [
              "text"
            ],
            "type": "object"
          },
          "RedundantProteomeType": {
            "properties": {
              "similarity": {
                "format": "float",
                "type": "number",
                "xml": {
                  "attribute": true
                }
              },
              "upid": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "ReferenceType": {
            "properties": {
              "citation": {
                "$ref": "#/components/schemas/CitationType"
              },
              "evidence": {
                "items": {
                  "format": "int32",
                  "type": "integer"
                },
                "type": "array"
              },
              "key": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "scope": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "source": {
                "$ref": "#/components/schemas/SourceDataType"
              }
            },
            "required": [
              "citation",
              "scope"
            ],
            "type": "object"
          },
          "SeqFeatureGroupType": {
            "properties": {
              "id": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "name": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "SeqFeatureType": {
            "properties": {
              "database": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "id": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "ipr": {
                "$ref": "#/components/schemas/SeqFeatureGroupType"
              },
              "lcn": {
                "items": {
                  "$ref": "#/components/schemas/LocationType"
                },
                "type": "array"
              }
            },
            "required": [
              "lcn"
            ],
            "type": "object"
          },
          "Sequence": {
            "properties": {
              "ref": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "type": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "SequenceType": {
            "properties": {
              "checksum": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "fragment": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "length": {
                "format": "int32",
                "type": "integer",
                "xml": {
                  "attribute": true
                }
              },
              "mass": {
                "format": "int32",
                "type": "integer",
                "xml": {
                  "attribute": true
                }
              },
              "modified": {
                "format": "date-time",
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "precursor": {
                "default": false,
                "type": "boolean",
                "xml": {
                  "attribute": true
                }
              },
              "value": {
                "type": "string"
              },
              "version": {
                "format": "int32",
                "type": "integer",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "SiftPredictionType": {
            "properties": {
              "predication": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "score": {
                "format": "double",
                "type": "number",
                "xml": {
                  "attribute": true
                }
              },
              "value": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "SourceDataType": {
            "properties": {
              "strainOrPlasmidOrTransposon": {
                "items": {
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "SourceType": {
            "properties": {
              "dbReference": {
                "$ref": "#/components/schemas/DbReferenceType"
              },
              "ref": {
                "type": "integer",
                "xml": {
                  "attribute": true
                }
              }
            },
            "type": "object"
          },
          "StatusType": {
            "properties": {
              "status": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "value": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "SubcellLocationComment": {
            "properties": {
              "locations": {
                "items": {
                  "$ref": "#/components/schemas/SubcellularLocation"
                },
                "type": "array"
              },
              "molecule": {
                "type": "string"
              },
              "text": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedString"
                },
                "type": "array"
              },
              "type": {
                "enum": [
                  "FUNCTION",
                  "CATALYTIC_ACTIVITY",
                  "COFACTOR",
                  "ENZYME_REGULATION",
                  "BIOPHYSICOCHEMICAL_PROPERTIES",
                  "PATHWAY",
                  "SUBUNIT",
                  "INTERACTION",
                  "SUBCELLULAR_LOCATION",
                  "ALTERNATIVE_PRODUCTS",
                  "TISSUE_SPECIFICITY",
                  "DEVELOPMENTAL_STAGE",
                  "INDUCTION",
                  "DOMAIN",
                  "PTM",
                  "RNA_EDITING",
                  "MASS_SPECTROMETRY",
                  "POLYMORPHISM",
                  "DISEASE",
                  "DISRUPTION_PHENOTYPE",
                  "ALLERGEN",
                  "TOXIC_DOSE",
                  "BIOTECHNOLOGY",
                  "PHARMACEUTICAL",
                  "MISCELLANEOUS",
                  "SIMILARITY",
                  "CAUTION",
                  "SEQUENCE_CAUTION",
                  "WEBRESOURCE",
                  "PAGE",
                  "UNKNOWN"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "SubcellularLocation": {
            "properties": {
              "location": {
                "$ref": "#/components/schemas/EvidencedString"
              },
              "orientation": {
                "$ref": "#/components/schemas/EvidencedString"
              },
              "topology": {
                "$ref": "#/components/schemas/EvidencedString"
              }
            },
            "type": "object"
          },
          "SubcellularLocationType": {
            "properties": {
              "location": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              },
              "orientation": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              },
              "topology": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              }
            },
            "required": [
              "location"
            ],
            "type": "object"
          },
          "SubmissionType": {
            "properties": {
              "citation": {
                "type": "string"
              },
              "db": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              }
            },
            "required": [
              "citation"
            ],
            "type": "object"
          },
          "SubmittedName": {
            "properties": {
              "ecNumber": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              },
              "fullName": {
                "$ref": "#/components/schemas/EvidencedStringType"
              }
            },
            "required": [
              "fullName"
            ],
            "type": "object"
          },
          "TemperatureDependence": {
            "properties": {
              "text": {
                "items": {
                  "$ref": "#/components/schemas/EvidencedStringType"
                },
                "type": "array"
              }
            },
            "required": [
              "text"
            ],
            "type": "object"
          },
          "UPInteraction": {
            "properties": {
              "accession": {
                "type": "string"
              },
              "diseases": {
                "items": {
                  "$ref": "#/components/schemas/DiseaseComment"
                },
                "type": "array"
              },
              "interactions": {
                "items": {
                  "$ref": "#/components/schemas/IntAct"
                },
                "type": "array"
              },
              "name": {
                "type": "string"
              },
              "proteinExistence": {
                "type": "string"
              },
              "subcellularLocations": {
                "items": {
                  "$ref": "#/components/schemas/SubcellLocationComment"
                },
                "type": "array"
              },
              "taxonomy": {
                "format": "int64",
                "type": "integer"
              }
            },
            "required": [
              "accession",
              "interactions",
              "name",
              "proteinExistence",
              "taxonomy"
            ],
            "type": "object"
          },
          "UniparcSequenceParam": {
            "properties": {
              "sequence": {
                "pattern": "[A-Z]+",
                "type": "string"
              }
            },
            "required": [
              "sequence"
            ],
            "type": "object",
            "xml": {
              "name": "body"
            }
          },
          "VariantType": {
            "properties": {
              "association": {
                "items": {
                  "$ref": "#/components/schemas/AssociationType"
                },
                "type": "array"
              },
              "clinicalSignificance": {
                "type": "string"
              },
              "consequenceType": {
                "type": "string"
              },
              "cytogeneticBand": {
                "type": "string"
              },
              "frequency": {
                "format": "double",
                "type": "number"
              },
              "genomicLocation": {
                "type": "string"
              },
              "mutatedType": {
                "type": "string"
              },
              "polyphenPrediction": {
                "$ref": "#/components/schemas/PolyphenPredictionType"
              },
              "siftPrediction": {
                "$ref": "#/components/schemas/SiftPredictionType"
              },
              "somaticStatus": {
                "default": false,
                "type": "boolean"
              },
              "sourceType": {
                "type": "string",
                "xml": {
                  "attribute": true
                }
              },
              "wildType": {
                "type": "string"
              }
            },
            "required": [
              "clinicalSignificance",
              "consequenceType",
              "cytogeneticBand",
              "genomicLocation",
              "mutatedType",
              "polyphenPrediction",
              "siftPrediction",
              "wildType"
            ],
            "type": "object"
          }
        }
      },
      "info": {
        "contact": {
          "name": "UniProt (EBI)",
          "url": "https://groups.google.com/forum/#!forum/ebi-proteins-api"
        },
        "description": "The Proteins REST API provides access to key biological data from UniProt and data from Large Scale Studies (LSS) mapped to UniProt. The services provide sequence feature annotations from UniProtKB, variation data from UniProtKB and mapped from LSS (1000 Genomes, ExAC and COSMIC), proteomics data mapped from MS-proteomics repositories (PeptideAtlas, MaxQB and EPD), antigen sequences mapped from Human Protein Atlas (HPA), proteomes and taxonomy search and retrieval, and reference genome coordinate mappings.",
        "termsOfService": "https://www.ebi.ac.uk/proteins/api/doc/",
        "title": "Proteins REST API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/antigen",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "searchAntigen",
              "parameters": [
                {
                  "description": "Off-set, page starting point, with default value 0",
                  "in": "query",
                  "name": "offset",
                  "required": false,
                  "schema": {
                    "default": 0,
                    "format": "int32",
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                {
                  "description": "Page size with default value 100. When page size is -1, it returns all records and offset will be ignored",
                  "in": "query",
                  "name": "size",
                  "required": false,
                  "schema": {
                    "default": 100,
                    "format": "int32",
                    "type": "integer"
                  }
                },
                {
                  "description": "UniProt accession(s). Comma separated values accepted up to 100.",
                  "in": "query",
                  "name": "accession",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Antigen sequence",
                  "in": "query",
                  "name": "antigen_sequence",
                  "required": false,
                  "schema": {
                    "maxItems": 2147483647,
                    "minItems": 4,
                    "type": "string"
                  }
                },
                {
                  "description": "Human Protein Atlas (HPA) antigen ID. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "antigen_id",
                  "required": false,
                  "schema": {
                    "maxItems": 2147483647,
                    "minItems": 4,
                    "type": "string"
                  }
                },
                {
                  "description": "Ensembl IDs. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "ensembl_ids",
                  "required": false,
                  "schema": {
                    "maxItems": 2147483647,
                    "minItems": 4,
                    "type": "string"
                  }
                },
                {
                  "description": "Minimum alignment score for the antigen sequence and the target protein sequence",
                  "in": "query",
                  "name": "match_score",
                  "required": false,
                  "schema": {
                    "format": "int32",
                    "maximum": 100,
                    "minimum": 0,
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/ProteinFeatureInfo"
                        },
                        "type": "array"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/ProteinFeatureInfo"
                        },
                        "type": "array"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/ProteinFeatureInfo"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid request Parameter."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Search antigens in UniProt",
              "tags": [
                "antigen"
              ]
            }
          }
        },
        {
          "path": "/antigen/{accession}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getAntigenByAccession",
              "parameters": [
                {
                  "description": "UniProt accession",
                  "in": "path",
                  "name": "accession",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ProteinFeatureInfo"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ProteinFeatureInfo"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ProteinFeatureInfo"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid accession parameter. The values's format should be a valid UniProtKB accession."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get antigen by UniProt accession",
              "tags": [
                "antigen"
              ]
            }
          }
        },
        {
          "path": "/coordinates",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "searchCoordinates",
              "parameters": [
                {
                  "description": "Off set, page starting point, with default value 0",
                  "in": "query",
                  "name": "offset",
                  "required": false,
                  "schema": {
                    "default": 0,
                    "format": "int32",
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                {
                  "description": "Page size with default value 100. When page size is -1, it returns all records and offset will be ignored",
                  "in": "query",
                  "name": "size",
                  "required": false,
                  "schema": {
                    "default": 100,
                    "format": "int32",
                    "type": "integer"
                  }
                },
                {
                  "description": "UniProt accession(s). Comma separated values accepted up to 100.",
                  "in": "query",
                  "name": "accession",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Chromosome name, i.e. 1, 2, X, etc. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "chromosome",
                  "required": false,
                  "schema": {
                    "maxItems": 50,
                    "minItems": 1,
                    "type": "string"
                  }
                },
                {
                  "description": "Ensembl gene ID, transcript ID or translation ID. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "ensembl",
                  "required": false,
                  "schema": {
                    "maxItems": 100,
                    "minItems": 6,
                    "type": "string"
                  }
                },
                {
                  "description": "UniProt gene name. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "gene",
                  "required": false,
                  "schema": {
                    "maxItems": 50,
                    "minItems": 3,
                    "type": "string"
                  }
                },
                {
                  "description": "UniProt protein name",
                  "in": "query",
                  "name": "protein",
                  "required": false,
                  "schema": {
                    "maxItems": 50,
                    "minItems": 3,
                    "type": "string"
                  }
                },
                {
                  "description": "Organism taxon ID. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "taxid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Genome location range such as 58205437-58219305 (genome start to genome end)",
                  "in": "query",
                  "name": "location",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/GnEntry"
                        },
                        "type": "array"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/GnEntry"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid request Parameter."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Search genomic coordinates for UniProt entries",
              "tags": [
                "coordinates"
              ]
            }
          }
        },
        {
          "path": "/coordinates/location/{accession}:{pPosition}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getGenomePositionByAccession",
              "parameters": [
                {
                  "description": "UniProt accession",
                  "in": "path",
                  "name": "accession",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "in": "path",
                  "name": "pPosition",
                  "required": true,
                  "schema": {
                    "format": "int32",
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/PLocation2GLocationCollection"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/PLocation2GLocationCollection"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid request Parameter."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get genome coordinate by protein sequence position",
              "tags": [
                "coordinates"
              ]
            }
          }
        },
        {
          "path": "/coordinates/location/{accession}:{pStart}-{pEnd}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getGenomeLocationByAccession",
              "parameters": [
                {
                  "description": "UniProt accession",
                  "in": "path",
                  "name": "accession",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "in": "path",
                  "name": "pStart",
                  "required": true,
                  "schema": {
                    "format": "int32",
                    "type": "integer"
                  }
                },
                {
                  "in": "path",
                  "name": "pEnd",
                  "required": true,
                  "schema": {
                    "format": "int32",
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/PLocation2GLocationCollection"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/PLocation2GLocationCollection"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid request Parameter."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get genome coordinate by protein sequence position range",
              "tags": [
                "coordinates"
              ]
            }
          }
        },
        {
          "path": "/coordinates/{accession}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getCoordinatesByAccession",
              "parameters": [
                {
                  "description": "UniProt accession",
                  "in": "path",
                  "name": "accession",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GnEntry"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/GnEntry"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid accession parameter. The values's format should be a valid UniProtKB accession."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get genomic coordinates for a UniProt accession",
              "tags": [
                "coordinates"
              ]
            }
          }
        },
        {
          "path": "/coordinates/{dbtype}:{dbid}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getByDbXRef",
              "parameters": [
                {
                  "description": "Off set, page starting point, with default value 0",
                  "in": "query",
                  "name": "offset",
                  "required": false,
                  "schema": {
                    "default": 0,
                    "format": "int32",
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                {
                  "description": "Page size with default value 100. When page size is -1, it returns all records and offset will be ignored",
                  "in": "query",
                  "name": "size",
                  "required": false,
                  "schema": {
                    "default": 100,
                    "format": "int32",
                    "type": "integer"
                  }
                },
                {
                  "description": "Cross-reference database type: Ensembl, CCDC, HGNC or RefSeq",
                  "in": "path",
                  "name": "dbtype",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Cross reference ID, such as ENSP00000351276 for Ensembl, NP_083392 for RefSeq, CCDS52493 for CCDS, 26588 for HGNC, (case insensitive).",
                  "in": "path",
                  "name": "dbid",
                  "required": true,
                  "schema": {
                    "maxItems": 50,
                    "minItems": 4,
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/GnEntry"
                        },
                        "type": "array"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/GnEntry"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid request Parameter."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Search UniProt entries by genomic database cross reference IDs: Ensembl, CCDS, HGNC or RefSeq",
              "tags": [
                "coordinates"
              ]
            }
          }
        },
        {
          "path": "/coordinates/{taxonomy}/{chromosome}:{gstart}-{gend}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getByLocation",
              "parameters": [
                {
                  "description": "Off set, page starting point, with default value 0",
                  "in": "query",
                  "name": "offset",
                  "required": false,
                  "schema": {
                    "default": 0,
                    "format": "int32",
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                {
                  "description": "Page size with default value 100. When page size is -1, it returns all records and offset will be ignored",
                  "in": "query",
                  "name": "size",
                  "required": false,
                  "schema": {
                    "default": 100,
                    "format": "int32",
                    "type": "integer"
                  }
                },
                {
                  "description": "Organism taxon ID",
                  "in": "path",
                  "name": "taxonomy",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Chromosome name, i.e. 1, 2, X, etc.",
                  "in": "path",
                  "name": "chromosome",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Genome location start",
                  "in": "path",
                  "name": "gstart",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Genome location end",
                  "in": "path",
                  "name": "gend",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "When it is set to true for location search, only those entries that are in the range will be retrieved",
                  "in": "query",
                  "name": "in_range",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/GnEntry"
                        },
                        "type": "array"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/GnEntry"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid request Parameter."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Search UniProt entries by taxonomy and genomic coordinates",
              "tags": [
                "coordinates"
              ]
            }
          }
        },
        {
          "path": "/features",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "searchFeatures",
              "parameters": [
                {
                  "description": "Off set, page starting point, with default value 0",
                  "in": "query",
                  "name": "offset",
                  "required": false,
                  "schema": {
                    "default": 0,
                    "format": "int32",
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                {
                  "description": "Page size with default value 100. When page size is -1, it returns all records and offset will be ignored",
                  "in": "query",
                  "name": "size",
                  "required": false,
                  "schema": {
                    "default": 100,
                    "format": "int32",
                    "type": "integer"
                  }
                },
                {
                  "description": "UniProt accession(s). Comma separated values accepted up to 100.",
                  "in": "query",
                  "name": "accession",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The reviewed parameter can only be true or false",
                  "in": "query",
                  "name": "reviewed",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "UniProt gene name. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "gene",
                  "required": false,
                  "schema": {
                    "maxItems": 100,
                    "minItems": 3,
                    "type": "string"
                  }
                },
                {
                  "description": "UniProt protein name",
                  "in": "query",
                  "name": "protein",
                  "required": false,
                  "schema": {
                    "maxItems": 50,
                    "minItems": 3,
                    "type": "string"
                  }
                },
                {
                  "description": "Organism name",
                  "in": "query",
                  "name": "organism",
                  "required": false,
                  "schema": {
                    "maxItems": 50,
                    "minItems": 3,
                    "type": "string"
                  }
                },
                {
                  "description": "Organism taxon ID. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "taxid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Category type(s): MOLECULE_PROCESSING, TOPOLOGY, SEQUENCE_INFORMATION, STRUCTURAL, DOMAINS_AND_SITES, PTM, VARIANT, MUTAGENESIS. Comma separated values accepted up to 20",
                  "in": "query",
                  "name": "categories",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Feature type(s): INIT_MET, SIGNAL, PROPEP, TRANSIT, CHAIN, PEPTIDE, TOPO_DOM, TRANSMEM, DOMAIN, REPEAT, CA_BIND, ZN_FING, DNA_BIND, NP_BIND, REGION, COILED, MOTIF, COMPBIAS, ACT_SITE, METAL, BINDING, SITE, NON_STD, MOD_RES, LIPID, CARBOHYD, DISULFID, CROSSLNK, VAR_SEQ, VARIANT, MUTAGEN, UNSURE, CONFLICT, NON_CONS, NON_TER, HELIX, TURN, STRAND, INTRAMEM. Comma separated values accepted up to 20",
                  "in": "query",
                  "name": "types",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/ProteinFeatureInfo"
                        },
                        "type": "array"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/ProteinFeatureInfo"
                        },
                        "type": "array"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/ProteinFeatureInfo"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid request Parameter."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Search protein sequence features in UniProt",
              "tags": [
                "features"
              ]
            }
          }
        },
        {
          "path": "/features/type/{type}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "searchFeatureType",
              "parameters": [
                {
                  "description": "Off set, page starting point, with default value 0",
                  "in": "query",
                  "name": "offset",
                  "required": false,
                  "schema": {
                    "default": 0,
                    "format": "int32",
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                {
                  "description": "Page size with default value 100. When page size is -1, it returns all records and offset will be ignored",
                  "in": "query",
                  "name": "size",
                  "required": false,
                  "schema": {
                    "default": 100,
                    "format": "int32",
                    "type": "integer"
                  }
                },
                {
                  "description": "Feature type: INIT_MET, SIGNAL, PROPEP, TRANSIT, CHAIN, PEPTIDE, TOPO_DOM, TRANSMEM, DOMAIN, REPEAT, CA_BIND, ZN_FING, DNA_BIND, NP_BIND, REGION, COILED, MOTIF, COMPBIAS, ACT_SITE, METAL, BINDING, SITE, NON_STD, MOD_RES, LIPID, CARBOHYD, DISULFID, CROSSLNK, VAR_SEQ, VARIANT, MUTAGEN, UNSURE, CONFLICT, NON_CONS, NON_TER, HELIX, TURN, STRAND, INTRAMEM",
                  "in": "path",
                  "name": "type",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Category type(s): MOLECULE_PROCESSING, TOPOLOGY, SEQUENCE_INFORMATION, STRUCTURAL, DOMAINS_AND_SITES, PTM, VARIANT, MUTAGENESIS. Comma separated values accepted up to 20",
                  "explode": true,
                  "in": "query",
                  "name": "categories",
                  "required": false,
                  "schema": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                {
                  "description": "Feature type(s): INIT_MET, SIGNAL, PROPEP, TRANSIT, CHAIN, PEPTIDE, TOPO_DOM, TRANSMEM, DOMAIN, REPEAT, CA_BIND, ZN_FING, DNA_BIND, NP_BIND, REGION, COILED, MOTIF, COMPBIAS, ACT_SITE, METAL, BINDING, SITE, NON_STD, MOD_RES, LIPID, CARBOHYD, DISULFID, CROSSLNK, VAR_SEQ, VARIANT, MUTAGEN, UNSURE, CONFLICT, NON_CONS, NON_TER, HELIX, TURN, STRAND, INTRAMEM. Comma separated values accepted up to 20",
                  "explode": true,
                  "in": "query",
                  "name": "types",
                  "required": false,
                  "schema": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                {
                  "description": "Search for term(s) that appear in feature description for your specified feature type. For example, you can search by type=DOMAIN and Term=Kinase.  Comma separated values accepted up to 20.",
                  "explode": true,
                  "in": "query",
                  "name": "terms",
                  "required": true,
                  "schema": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/ProteinFeatureInfo"
                        },
                        "type": "array"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/ProteinFeatureInfo"
                        },
                        "type": "array"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/ProteinFeatureInfo"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid request Parameter."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Search protein sequence features of a given type in UniProt",
              "tags": [
                "features"
              ]
            }
          }
        },
        {
          "path": "/features/{accession}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getFeaturesByAccession",
              "parameters": [
                {
                  "description": "UniProt accession",
                  "in": "path",
                  "name": "accession",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Category type(s): MOLECULE_PROCESSING, TOPOLOGY, SEQUENCE_INFORMATION, STRUCTURAL, DOMAINS_AND_SITES, PTM, VARIANT, MUTAGENESIS. Comma separated values accepted up to 20",
                  "explode": true,
                  "in": "query",
                  "name": "categories",
                  "required": false,
                  "schema": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                {
                  "description": "Feature type(s): INIT_MET, SIGNAL, PROPEP, TRANSIT, CHAIN, PEPTIDE, TOPO_DOM, TRANSMEM, DOMAIN, REPEAT, CA_BIND, ZN_FING, DNA_BIND, NP_BIND, REGION, COILED, MOTIF, COMPBIAS, ACT_SITE, METAL, BINDING, SITE, NON_STD, MOD_RES, LIPID, CARBOHYD, DISULFID, CROSSLNK, VAR_SEQ, VARIANT, MUTAGEN, UNSURE, CONFLICT, NON_CONS, NON_TER, HELIX, TURN, STRAND, INTRAMEM. Comma separated values accepted up to 20",
                  "explode": true,
                  "in": "query",
                  "name": "types",
                  "required": false,
                  "schema": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ProteinFeatureInfo"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ProteinFeatureInfo"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ProteinFeatureInfo"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid accession parameter. The values's format should be a valid UniProtKB accession."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get UniProt protein sequence features by accession ",
              "tags": [
                "features"
              ]
            }
          }
        },
        {
          "path": "/genecentric",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getGeneCentricByUpid",
              "parameters": [
                {
                  "description": "Off set, page starting point, with default value 0",
                  "in": "query",
                  "name": "offset",
                  "required": false,
                  "schema": {
                    "default": 0,
                    "format": "int32",
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                {
                  "description": "Page size with default value 100. When page size is -1, it returns all records and offset will be ignored",
                  "in": "query",
                  "name": "size",
                  "required": false,
                  "schema": {
                    "default": 100,
                    "format": "int32",
                    "type": "integer"
                  }
                },
                {
                  "description": "UniProt proteome UPID(s). Comma separated values accepted up to 100.",
                  "in": "query",
                  "name": "upid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "UniProt accession(s). Comma separated values accepted up to 100.",
                  "in": "query",
                  "name": "accession",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "It is a unique gene identifier found in MOD, Ensembl, Ensembl Genomes, OLN ,ORF or UniProt Gene Name database. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "gene",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CanonicalGene"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/CanonicalGene"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid request Parameter."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Search gene centric proteins",
              "tags": [
                "genecentric"
              ]
            }
          }
        },
        {
          "path": "/genecentric/{accession}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getGeneCentricByAccession",
              "parameters": [
                {
                  "description": "UniProt accession",
                  "in": "path",
                  "name": "accession",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CanonicalGene"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/CanonicalGene"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid accession parameter. The values's format should be a valid UniProtKB accession."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get gene centric proteins by Uniprot accession",
              "tags": [
                "genecentric"
              ]
            }
          }
        },
        {
          "path": "/proteins",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "searchProteins",
              "parameters": [
                {
                  "description": "Off set, page starting point, with default value 0",
                  "in": "query",
                  "name": "offset",
                  "required": false,
                  "schema": {
                    "default": 0,
                    "format": "int32",
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                {
                  "description": "Page size with default value 100. When page size is -1, it returns all records and offset will be ignored",
                  "in": "query",
                  "name": "size",
                  "required": false,
                  "schema": {
                    "default": 100,
                    "format": "int32",
                    "type": "integer"
                  }
                },
                {
                  "description": "UniProt accession(s). Comma separated values accepted up to 100.",
                  "in": "query",
                  "name": "accession",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Reviewed(true) or not Reviewed (false)",
                  "in": "query",
                  "name": "reviewed",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "0 for excluding isoform, 1 for isoform only and 2 for both canonical and isoform",
                  "in": "query",
                  "name": "isoform",
                  "required": false,
                  "schema": {
                    "format": "int32",
                    "type": "integer"
                  }
                },
                {
                  "description": "GO ontology terms",
                  "in": "query",
                  "name": "goterms",
                  "required": false,
                  "schema": {
                    "maxItems": 50,
                    "minItems": 3,
                    "type": "string"
                  }
                },
                {
                  "description": "UniProt keywords",
                  "in": "query",
                  "name": "keywords",
                  "required": false,
                  "schema": {
                    "maxItems": 50,
                    "minItems": 3,
                    "type": "string"
                  }
                },
                {
                  "description": "UniProt EC number. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "ec",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "UniProt gene name. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "gene",
                  "required": false,
                  "schema": {
                    "maxItems": 50,
                    "minItems": 3,
                    "type": "string"
                  }
                },
                {
                  "description": "UniProt protein name",
                  "in": "query",
                  "name": "protein",
                  "required": false,
                  "schema": {
                    "maxItems": 50,
                    "minItems": 3,
                    "type": "string"
                  }
                },
                {
                  "description": "Organism name",
                  "in": "query",
                  "name": "organism",
                  "required": false,
                  "schema": {
                    "maxItems": 50,
                    "minItems": 3,
                    "type": "string"
                  }
                },
                {
                  "description": "Organism taxon ID. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "taxid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "UniProt reference PubMed ID. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "pubmed",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Entry"
                        },
                        "type": "array"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Entry"
                        },
                        "type": "array"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Entry"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid request Parameter."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Search UniProt entries",
              "tags": [
                "proteins"
              ]
            }
          }
        },
        {
          "path": "/proteins/interaction/{accession}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getAllInteractionEntries",
              "parameters": [
                {
                  "description": "UniProt accession",
                  "in": "path",
                  "name": "accession",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/UPInteraction"
                        },
                        "type": "array"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/UPInteraction"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid accession parameter. The values's format should be a valid UniProtKB accession."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get UniProt interactions by accession",
              "tags": [
                "proteins"
              ]
            }
          }
        },
        {
          "path": "/proteins/{accession}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getProteinsByAccession",
              "parameters": [
                {
                  "description": "UniProt accession",
                  "in": "path",
                  "name": "accession",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Entry"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Entry"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/Entry"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid accession parameter. The values's format should be a valid UniProtKB accession."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get UniProt entry by accession",
              "tags": [
                "proteins"
              ]
            }
          }
        },
        {
          "path": "/proteins/{accession}/isoforms",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getEntriesForIsoforms",
              "parameters": [
                {
                  "description": "UniProt accession",
                  "in": "path",
                  "name": "accession",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Entry"
                        },
                        "type": "array"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Entry"
                        },
                        "type": "array"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Entry"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid accession parameter. The values's format should be a valid UniProtKB accession."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get UniProt isoform entries from parent entry accession",
              "tags": [
                "proteins"
              ]
            }
          }
        },
        {
          "path": "/proteins/{dbtype}:{dbid}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getByCrossReference",
              "parameters": [
                {
                  "description": "Off set, page starting point, with default value 0",
                  "in": "query",
                  "name": "offset",
                  "required": false,
                  "schema": {
                    "default": 0,
                    "format": "int32",
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                {
                  "description": "Page size with default value 100. When page size is -1, it returns all records and offset will be ignored",
                  "in": "query",
                  "name": "size",
                  "required": false,
                  "schema": {
                    "default": 100,
                    "format": "int32",
                    "type": "integer"
                  }
                },
                {
                  "description": "Cross reference database type, e.g, Ensembl, PDBe, etc. ",
                  "in": "path",
                  "name": "dbtype",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Cross-reference ID, e.g. ENSP00000351276 for Ensembl",
                  "in": "path",
                  "name": "dbid",
                  "required": true,
                  "schema": {
                    "maxItems": 50,
                    "minItems": 4,
                    "type": "string"
                  }
                },
                {
                  "description": "Reviewed(true) or not Reviewed (false)",
                  "in": "query",
                  "name": "reviewed",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "0 for exclude isoform only and 1 for isoform only",
                  "in": "query",
                  "name": "isoform",
                  "required": false,
                  "schema": {
                    "format": "int32",
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Entry"
                        },
                        "type": "array"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Entry"
                        },
                        "type": "array"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Entry"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid request Parameter."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get UniProt entries by UniProt cross reference and its ID",
              "tags": [
                "proteins"
              ]
            }
          }
        },
        {
          "path": "/proteomes",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "searchProteomes",
              "parameters": [
                {
                  "description": "Off set, page starting point, with default value 0",
                  "in": "query",
                  "name": "offset",
                  "required": false,
                  "schema": {
                    "default": 0,
                    "format": "int32",
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                {
                  "description": "Page size with default value 100. When page size is -1, it returns all records and offset will be ignored",
                  "in": "query",
                  "name": "size",
                  "required": false,
                  "schema": {
                    "default": 100,
                    "format": "int32",
                    "type": "integer"
                  }
                },
                {
                  "description": "UniProt proteome UPID(s). Comma separated values accepted up to 100.",
                  "in": "query",
                  "name": "upid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Search proteome name",
                  "in": "query",
                  "name": "name",
                  "required": false,
                  "schema": {
                    "maxItems": 50,
                    "minItems": 3,
                    "type": "string"
                  }
                },
                {
                  "description": "Organism taxon ID. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "taxid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Terms the proteome contains",
                  "in": "query",
                  "name": "keyword",
                  "required": false,
                  "schema": {
                    "maxItems": 50,
                    "minItems": 3,
                    "type": "string"
                  }
                },
                {
                  "description": "Proteome cross references such as Genome assembly ID or Biosample ID. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "xref",
                  "required": false,
                  "schema": {
                    "maxItems": 50,
                    "minItems": 3,
                    "type": "string"
                  }
                },
                {
                  "description": "Genome accession. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "genome_acc",
                  "required": false,
                  "schema": {
                    "maxItems": 50,
                    "minItems": 3,
                    "type": "string"
                  }
                },
                {
                  "description": "Reference Proteome(true) or not reference proteome (false)",
                  "in": "query",
                  "name": "is_ref_proteome",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Redundant Proteome(true) or non redundant proteome (false)",
                  "in": "query",
                  "name": "is_redundant",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Proteome"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Proteome"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid request Parameter."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Search proteomes in UniProt",
              "tags": [
                "proteomes"
              ]
            }
          }
        },
        {
          "path": "/proteomes/genecentric/{upid}",
          "pathitem": {
            "get": {
              "deprecated": true,
              "description": "",
              "operationId": "getGeneCentricByUpidDeprecated",
              "parameters": [
                {
                  "description": "UniProt Proteome UPID",
                  "in": "path",
                  "name": "upid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Proteome"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Proteome"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid upid parameter. The value format should match the regular expression UP[0-9]{9}."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get gene centric proteins by proteome UPID is deprecated, please use new /genecentric?upid= endpoint",
              "tags": [
                "proteomes"
              ]
            }
          }
        },
        {
          "path": "/proteomes/proteins/{upid}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getProteinsByUpid",
              "parameters": [
                {
                  "description": "UniProt Proteome UPID",
                  "in": "path",
                  "name": "upid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Reviewed(true) or not Reviewed (false)",
                  "in": "query",
                  "name": "reviewed",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Proteome"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Proteome"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid upid parameter. The value format should match the regular expression UP[0-9]{9}."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get proteins by proteome UPID",
              "tags": [
                "proteomes"
              ]
            }
          }
        },
        {
          "path": "/proteomes/{upid}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getByUpid",
              "parameters": [
                {
                  "description": "UniProt Proteome UPID",
                  "in": "path",
                  "name": "upid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Proteome"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Proteome"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid upid parameter. The value format should match the regular expression UP[0-9]{9}."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get proteome by proteome UPID",
              "tags": [
                "proteomes"
              ]
            }
          }
        },
        {
          "path": "/proteomics",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "searchProteomics",
              "parameters": [
                {
                  "description": "Off set, page starting point, with default value 0",
                  "in": "query",
                  "name": "offset",
                  "required": false,
                  "schema": {
                    "default": 0,
                    "format": "int32",
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                {
                  "description": "Page size with default value 100. When page size is -1, it returns all records and offset will be ignored",
                  "in": "query",
                  "name": "size",
                  "required": false,
                  "schema": {
                    "default": 100,
                    "format": "int32",
                    "type": "integer"
                  }
                },
                {
                  "description": "UniProt accession(s). Comma separated values accepted up to 100.",
                  "in": "query",
                  "name": "accession",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Organism taxon ID. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "taxid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "UniProt proteome UPID(s). Comma separated values accepted up to 100.",
                  "in": "query",
                  "name": "upid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Proteomics data source(s): MaxQB, PeptideAtlas or EPD. Comma separated values accepted up to 2.",
                  "in": "query",
                  "name": "datasource",
                  "required": false,
                  "schema": {
                    "maxItems": 2147483647,
                    "minItems": 3,
                    "type": "string"
                  }
                },
                {
                  "description": "Peptide sequence. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "peptide",
                  "required": false,
                  "schema": {
                    "maxItems": 2147483647,
                    "minItems": 4,
                    "type": "string"
                  }
                },
                {
                  "description": "Peptide uniqueness (unique peptides map to one gene group only). Values can be true or false.",
                  "in": "query",
                  "name": "unique",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/ProteinFeatureInfo"
                        },
                        "type": "array"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/ProteinFeatureInfo"
                        },
                        "type": "array"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/ProteinFeatureInfo"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid request Parameter."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Search proteomics peptides in UniProt",
              "tags": [
                "proteomics"
              ]
            }
          }
        },
        {
          "path": "/proteomics/{accession}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getProteomicsByAccession",
              "parameters": [
                {
                  "description": "UniProt accession",
                  "in": "path",
                  "name": "accession",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ProteinFeatureInfo"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ProteinFeatureInfo"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ProteinFeatureInfo"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid accession parameter. The values's format should be a valid UniProtKB accession."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get proteomics peptides mapped to UniProt by accession",
              "tags": [
                "proteomics"
              ]
            }
          }
        },
        {
          "path": "/uniparc",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "searchUniParc",
              "parameters": [
                {
                  "description": "Off set, page starting point, with default value 0",
                  "in": "query",
                  "name": "offset",
                  "required": false,
                  "schema": {
                    "default": 0,
                    "format": "int32",
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                {
                  "description": "Page size with default value 100. When page size is -1, it returns all records and offset will be ignored",
                  "in": "query",
                  "name": "size",
                  "required": false,
                  "schema": {
                    "default": 100,
                    "format": "int32",
                    "type": "integer"
                  }
                },
                {
                  "description": "UniParc ID (UPI). Comma separated values accepted up to 100",
                  "in": "query",
                  "name": "upi",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Search by Cross reference database type, e.g EMBL, RefSeq, Ensembl, etc.",
                  "in": "query",
                  "name": "dbtype",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "UniProt accession(s). Comma separated values accepted up to 100.",
                  "in": "query",
                  "name": "accession",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "All UniParc cross reference accessions, eg. AAC02967 (EMBL) or  XP_006524055 (RefSeq). Comma separated values accepted up to 100.",
                  "in": "query",
                  "name": "dbid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "UniProt gene name. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "gene",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "UniProt protein name",
                  "in": "query",
                  "name": "protein",
                  "required": false,
                  "schema": {
                    "maxItems": 50,
                    "minItems": 3,
                    "type": "string"
                  }
                },
                {
                  "description": "Organism taxon ID. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "taxid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Organism name",
                  "in": "query",
                  "name": "organism",
                  "required": false,
                  "schema": {
                    "maxItems": 50,
                    "minItems": 3,
                    "type": "string"
                  }
                },
                {
                  "description": "Sequence CRC64 checksum. eg 4104A3A57D1B08E3",
                  "in": "query",
                  "name": "sequencechecksum",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Search by InterPro identifier(s). Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "ipr",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Search by signature database type, e.g. SMART, SUPFAM, Pfam, PIRSF, PROSITE, etc. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "signaturetype",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Search by signature database id, e.g. SM00044, SSF55073, PF00211, PIRSF039050, PS00452, etc. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "signatureid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "UniProt proteome UPID(s). Comma separated values accepted up to 100.",
                  "in": "query",
                  "name": "upid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by Cross reference database type, e.g EMBL, RefSeq, Ensembl, etc. Comma separated values accepted.",
                  "in": "query",
                  "name": "rfDdtype",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by all UniParc cross reference accessions, eg. AAC02967 (EMBL) or  XP_006524055 (RefSeq). Comma separated values accepted.",
                  "in": "query",
                  "name": "rfDbid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by Active(true) or not Active(false) Cross reference.",
                  "in": "query",
                  "name": "rfActive",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by organism taxon ID. Comma separated values accepted.",
                  "in": "query",
                  "name": "rfTaxId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Entry"
                        },
                        "type": "array"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Entry"
                        },
                        "type": "array"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Entry"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid request Parameter."
                }
              },
              "summary": "Search UniParc entries",
              "tags": [
                "uniparc"
              ]
            }
          }
        },
        {
          "path": "/uniparc/accession/{accession}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getUniParcEntryByUniprotAccession",
              "parameters": [
                {
                  "description": "UniProt accession",
                  "in": "path",
                  "name": "accession",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by Cross reference database type, e.g EMBL, RefSeq, Ensembl, etc. Comma separated values accepted.",
                  "in": "query",
                  "name": "rfDdtype",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by all UniParc cross reference accessions, eg. AAC02967 (EMBL) or  XP_006524055 (RefSeq). Comma separated values accepted.",
                  "in": "query",
                  "name": "rfDbid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by Active(true) or not Active(false) Cross reference.",
                  "in": "query",
                  "name": "rfActive",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by organism taxon ID. Comma separated values accepted.",
                  "in": "query",
                  "name": "rfTaxId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Entry"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Entry"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/Entry"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid accession parameter. The values's format should be a valid UniProtKB accession."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get UniParc entry only by UniProt accession",
              "tags": [
                "uniparc"
              ]
            }
          }
        },
        {
          "path": "/uniparc/bestguess",
          "pathitem": {
            "get": {
              "description": "For a given user input (request parameters), Best Guess returns the UniParcEntry with a cross-reference to the longest active UniProtKB sequence (preferably from Swiss-Prot and if not then TrEMBL). It also returns the sequence and related information. If it finds more than one longest active UniProtKB sequence it returns 400 (Bad Request) error response with the list of cross references found.",
              "operationId": "getUniParcBestGuest",
              "parameters": [
                {
                  "description": "UniParc ID (UPI). Comma separated values accepted up to 100",
                  "in": "query",
                  "name": "upi",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "UniProt accession(s). Comma separated values accepted up to 100.",
                  "in": "query",
                  "name": "accession",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "All UniParc cross reference accessions, eg. AAC02967 (EMBL) or  XP_006524055 (RefSeq). Comma separated values accepted up to 100.",
                  "in": "query",
                  "name": "dbid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "UniProt gene name. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "gene",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Organism taxon ID. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "taxid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Entry"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Entry"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/Entry"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid request Parameter."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Could not find best guess for the requested filter"
                }
              },
              "summary": "Get UniParc longest sequence for entries.",
              "tags": [
                "uniparc"
              ]
            }
          }
        },
        {
          "path": "/uniparc/dbreference/{dbid}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getUniParcByUniparcAccessions",
              "parameters": [
                {
                  "description": "All UniParc cross reference accessions, eg. AAC02967 (EMBL) or  XP_006524055 (RefSeq).",
                  "in": "path",
                  "name": "dbid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Off set, page starting point, with default value 0",
                  "in": "query",
                  "name": "offset",
                  "required": false,
                  "schema": {
                    "default": 0,
                    "format": "int32",
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                {
                  "description": "Page size with default value 100. When page size is -1, it returns all records and offset will be ignored",
                  "in": "query",
                  "name": "size",
                  "required": false,
                  "schema": {
                    "default": 100,
                    "format": "int32",
                    "type": "integer"
                  }
                },
                {
                  "description": "Response filter by Cross reference database type, e.g EMBL, RefSeq, Ensembl, etc. Comma separated values accepted.",
                  "in": "query",
                  "name": "rfDdtype",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by all UniParc cross reference accessions, eg. AAC02967 (EMBL) or  XP_006524055 (RefSeq). Comma separated values accepted.",
                  "in": "query",
                  "name": "rfDbid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by Active(true) or not Active(false) Cross reference.",
                  "in": "query",
                  "name": "rfActive",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by organism taxon ID. Comma separated values accepted.",
                  "in": "query",
                  "name": "rfTaxId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Entry"
                        },
                        "type": "array"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Entry"
                        },
                        "type": "array"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Entry"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid request Parameter."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get UniParc entries by all UniParc cross reference accessions",
              "tags": [
                "uniparc"
              ]
            }
          }
        },
        {
          "path": "/uniparc/proteome/{upid}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getByProteomeId",
              "parameters": [
                {
                  "description": "UniProt Proteome UPID",
                  "in": "path",
                  "name": "upid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Off set, page starting point, with default value 0",
                  "in": "query",
                  "name": "offset",
                  "required": false,
                  "schema": {
                    "default": 0,
                    "format": "int32",
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                {
                  "description": "Page size with default value 100. When page size is -1, it returns all records and offset will be ignored",
                  "in": "query",
                  "name": "size",
                  "required": false,
                  "schema": {
                    "default": 100,
                    "format": "int32",
                    "type": "integer"
                  }
                },
                {
                  "description": "Response filter by Cross reference database type, e.g EMBL, RefSeq, Ensembl, etc. Comma separated values accepted.",
                  "in": "query",
                  "name": "rfDdtype",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by all UniParc cross reference accessions, eg. AAC02967 (EMBL) or  XP_006524055 (RefSeq). Comma separated values accepted.",
                  "in": "query",
                  "name": "rfDbid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by Active(true) or not Active(false) Cross reference.",
                  "in": "query",
                  "name": "rfActive",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by organism taxon ID. Comma separated values accepted.",
                  "in": "query",
                  "name": "rfTaxId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Entry"
                        },
                        "type": "array"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Entry"
                        },
                        "type": "array"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Entry"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid request Parameter."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get UniParc entries by Proteome UPID",
              "tags": [
                "uniparc"
              ]
            }
          }
        },
        {
          "path": "/uniparc/sequence",
          "pathitem": {
            "post": {
              "description": "",
              "operationId": "getBySequence",
              "parameters": [
                {
                  "description": "Response filter by Cross reference database type, e.g EMBL, RefSeq, Ensembl, etc. Comma separated values accepted.",
                  "in": "query",
                  "name": "rfDdtype",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by all UniParc cross reference accessions, eg. AAC02967 (EMBL) or  XP_006524055 (RefSeq). Comma separated values accepted.",
                  "in": "query",
                  "name": "rfDbid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by Active(true) or not Active(false) Cross reference.",
                  "in": "query",
                  "name": "rfActive",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by organism taxon ID. Comma separated values accepted.",
                  "in": "query",
                  "name": "rfTaxId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/UniparcSequenceParam"
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "$ref": "#/components/schemas/UniparcSequenceParam"
                    }
                  },
                  "text/plain": {
                    "schema": {
                      "$ref": "#/components/schemas/UniparcSequenceParam"
                    }
                  }
                },
                "description": "Post uniparc Sequence in text, json or xml content type. Look the expected model in Data Type column",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Entry"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Entry"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/Entry"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid request Parameter."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get UniParc entries by sequence",
              "tags": [
                "uniparc"
              ]
            }
          }
        },
        {
          "path": "/uniparc/upi/{upi}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getUniParcEntryByUpId",
              "parameters": [
                {
                  "description": "UniParc ID (UPI)",
                  "in": "path",
                  "name": "upi",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by Cross reference database type, e.g EMBL, RefSeq, Ensembl, etc. Comma separated values accepted.",
                  "in": "query",
                  "name": "rfDdtype",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by all UniParc cross reference accessions, eg. AAC02967 (EMBL) or  XP_006524055 (RefSeq). Comma separated values accepted.",
                  "in": "query",
                  "name": "rfDbid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by Active(true) or not Active(false) Cross reference.",
                  "in": "query",
                  "name": "rfActive",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Response filter by organism taxon ID. Comma separated values accepted.",
                  "in": "query",
                  "name": "rfTaxId",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Entry"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Entry"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/Entry"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid upid parameter. The value format should match the regular expression UPI[\\w]{10}."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-fasta": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get UniParc entry by UniParc UPI",
              "tags": [
                "uniparc"
              ]
            }
          }
        },
        {
          "path": "/variation",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "searchVariation",
              "parameters": [
                {
                  "description": "Off set, page starting point, with default value 0",
                  "in": "query",
                  "name": "offset",
                  "required": false,
                  "schema": {
                    "default": 0,
                    "format": "int32",
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                {
                  "description": "Page size with default value 100. When page size is -1, it returns all records and offset will be ignored",
                  "in": "query",
                  "name": "size",
                  "required": false,
                  "schema": {
                    "default": 100,
                    "format": "int32",
                    "type": "integer"
                  }
                },
                {
                  "description": "Filter by the sourceType for variants: uniprot, large_scale_study and mixed. Comma separated values accepted up to 2.",
                  "in": "query",
                  "name": "sourcetype",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Filter by consequenceType for variants: missense, stop gained or stop lost. Comma separated values accepted up to 2.",
                  "in": "query",
                  "name": "consequencetype",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Search by specific wildType amino acid. Options: Any single letter amino acid and * for stop codon. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "wildtype",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Filter by the alternativeSequence amino acid. Any single letter amino acid and * for stopcodon and - for deletions. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "alternativesequence",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Filter by the amino acid range position in the sequence(s). Any valid amino acid range position within the length of the protein sequence such as 10-60 (start position to end position)",
                  "in": "query",
                  "name": "location",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "UniProt accession(s). Comma separated values accepted up to 100.",
                  "in": "query",
                  "name": "accession",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Search by disease name/ acronym for associated variants , e.g. alzheimer disease 1 or AD1. Partial names allowed.",
                  "in": "query",
                  "name": "disease",
                  "required": false,
                  "schema": {
                    "maxItems": 60,
                    "minItems": 2,
                    "type": "string"
                  }
                },
                {
                  "description": "Search by MIM ID, e.g. 104300. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "omim",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Search by PubMed ID, e.g. 22472873. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "evidence",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Organism taxon ID. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "taxid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Cross reference database type, e.g, dbSNP, cosmic curate or ClinVar. Comma separated values accepted up to 2.",
                  "in": "query",
                  "name": "dbtype",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Cross-reference database ID, e.g. rs121918508 for dbSNP, COSM29836 for cosmic curated, rcv61200 for ClinVar. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "dbid",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/ProteinFeatureInfo"
                        },
                        "type": "array"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/ProteinFeatureInfo"
                        },
                        "type": "array"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/ProteinFeatureInfo"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid request Parameter."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Search natural variants in UniProt",
              "tags": [
                "variation"
              ]
            }
          }
        },
        {
          "path": "/variation/dbsnp/{dbid}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "searchByDbSNP",
              "parameters": [
                {
                  "description": "Cross-reference NIH-NCBI SNP database identifier, e.g. rs121918508",
                  "in": "path",
                  "name": "dbid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Off set, page starting point, with default value 0",
                  "in": "query",
                  "name": "offset",
                  "required": false,
                  "schema": {
                    "default": 0,
                    "format": "int32",
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                {
                  "description": "Page size with default value 100. When page size is -1, it returns all records and offset will be ignored",
                  "in": "query",
                  "name": "size",
                  "required": false,
                  "schema": {
                    "default": 100,
                    "format": "int32",
                    "type": "integer"
                  }
                },
                {
                  "description": "Filter by the sourceType for variants: uniprot, large_scale_study and mixed. Comma separated values accepted up to 2.",
                  "in": "query",
                  "name": "sourcetype",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Filter by consequenceType for variants: missense, stop gained or stop lost. Comma separated values accepted up to 2.",
                  "in": "query",
                  "name": "consequencetype",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Search by specific wildType amino acid. Options: Any single letter amino acid and * for stop codon. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "wildtype",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Filter by the alternativeSequence amino acid. Any single letter amino acid and * for stopcodon and - for deletions. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "alternativesequence",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Filter by the amino acid range position in the sequence(s). Any valid amino acid range position within the length of the protein sequence such as 10-60 (start position to end position)",
                  "in": "query",
                  "name": "location",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/ProteinFeatureInfo"
                        },
                        "type": "array"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/ProteinFeatureInfo"
                        },
                        "type": "array"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/ProteinFeatureInfo"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid request Parameter."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get natural variants in UniProt by NIH-NCBI SNP database identifier",
              "tags": [
                "variation"
              ]
            }
          }
        },
        {
          "path": "/variation/{accession}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getVariation",
              "parameters": [
                {
                  "description": "UniProt accession",
                  "in": "path",
                  "name": "accession",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Filter by the sourceType for variants: uniprot, large_scale_study and mixed. Comma separated values accepted up to 2.",
                  "in": "query",
                  "name": "sourcetype",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Filter by consequenceType for variants: missense, stop gained or stop lost. Comma separated values accepted up to 2.",
                  "in": "query",
                  "name": "consequencetype",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Search by specific wildType amino acid. Options: Any single letter amino acid and * for stop codon. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "wildtype",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Filter by the alternativeSequence amino acid. Any single letter amino acid and * for stopcodon and - for deletions. Comma separated values accepted up to 20.",
                  "in": "query",
                  "name": "alternativesequence",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Filter by the amino acid range position in the sequence(s). Any valid amino acid range position within the length of the protein sequence such as 10-60 (start position to end position)",
                  "in": "query",
                  "name": "location",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ProteinFeatureInfo"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ProteinFeatureInfo"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ProteinFeatureInfo"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Invalid accession parameter. The values's format should be a valid UniProtKB accession."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "text/x-gff": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Resources not found"
                }
              },
              "summary": "Get natural variants by UniProt accession",
              "tags": [
                "variation"
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "url": "https://www.ebi.ac.uk/proteins/api"
        }
      ],
      "tags": [
        {
          "name": "coordinates"
        },
        {
          "name": "antigen"
        },
        {
          "name": "uniparc"
        },
        {
          "name": "proteomics"
        },
        {
          "name": "features"
        },
        {
          "name": "proteomes"
        },
        {
          "name": "variation"
        },
        {
          "name": "genecentric"
        },
        {
          "name": "proteins"
        },
        {
          "name": "translator"
        }
      ],
      "~raw": ""
    },
    {
      "_id": "e3c31e8ec8445d2d34827c78360f10c1",
      "_meta": {
        "ETag": "2c1f6c690abf9c845fedf22e02981c7526c93dbaff866552b5ed2b90b8ff0012",
        "github_username": "newgene",
        "timestamp": "2019-10-22T04:26:33.396319",
        "uptime_status": "unknown",
        "uptime_ts": "2020-09-17T00:08:59.809491",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/ebi_proteins_taxonomy/openapi.yml"
      },
      "_score": 0.8,
      "components": {
        "schemas": {
          "ErrorMessage": {
            "properties": {
              "errorMessage": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "xml": {
                  "name": "errorMessages",
                  "wrapped": true
                }
              },
              "requestedURL": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "PageInformation": {
            "properties": {
              "currentPage": {
                "format": "int32",
                "type": "integer"
              },
              "resultsPerPage": {
                "format": "int32",
                "type": "integer"
              },
              "totalRecords": {
                "format": "int32",
                "type": "integer"
              }
            },
            "required": [
              "currentPage",
              "resultsPerPage",
              "totalRecords"
            ],
            "type": "object"
          },
          "Taxonomies": {
            "properties": {
              "errors": {
                "items": {
                  "$ref": "#/components/schemas/TaxonomiesError"
                },
                "type": "array",
                "xml": {
                  "name": "error",
                  "wrapped": true
                }
              },
              "pageInfo": {
                "$ref": "#/components/schemas/PageInformation"
              },
              "redirects": {
                "items": {
                  "$ref": "#/components/schemas/TaxonomiesRedirect"
                },
                "type": "array",
                "xml": {
                  "name": "redirect",
                  "wrapped": true
                }
              },
              "taxonomies": {
                "items": {
                  "$ref": "#/components/schemas/TaxonomyNode"
                },
                "type": "array",
                "xml": {
                  "name": "taxonomy",
                  "wrapped": true
                }
              }
            },
            "type": "object"
          },
          "TaxonomiesError": {
            "properties": {
              "errorMessage": {
                "type": "string"
              },
              "requestedId": {
                "format": "int64",
                "type": "integer"
              }
            },
            "required": [
              "errorMessage",
              "requestedId"
            ],
            "type": "object"
          },
          "TaxonomiesRedirect": {
            "properties": {
              "redirectLocation": {
                "type": "string"
              },
              "requestedId": {
                "format": "int64",
                "type": "integer"
              }
            },
            "required": [
              "redirectLocation",
              "requestedId"
            ],
            "type": "object"
          },
          "TaxonomyNode": {
            "properties": {
              "children": {
                "items": {
                  "$ref": "#/components/schemas/TaxonomyNode"
                },
                "type": "array",
                "xml": {
                  "name": "child",
                  "wrapped": true
                }
              },
              "childrenLinks": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "xml": {
                  "name": "childLink",
                  "wrapped": true
                }
              },
              "commonName": {
                "type": "string"
              },
              "mnemonic": {
                "type": "string"
              },
              "parent": {
                "$ref": "#/components/schemas/TaxonomyNode"
              },
              "parentLink": {
                "type": "string"
              },
              "rank": {
                "type": "string"
              },
              "scientificName": {
                "type": "string"
              },
              "siblings": {
                "items": {
                  "$ref": "#/components/schemas/TaxonomyNode"
                },
                "type": "array",
                "xml": {
                  "name": "sibling",
                  "wrapped": true
                }
              },
              "siblingsLinks": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "xml": {
                  "name": "siblingLinks",
                  "wrapped": true
                }
              },
              "superregnum": {
                "type": "string"
              },
              "synonym": {
                "type": "string"
              },
              "taxonomyId": {
                "format": "int64",
                "type": "integer"
              }
            },
            "required": [
              "mnemonic",
              "taxonomyId"
            ],
            "type": "object"
          }
        }
      },
      "info": {
        "contact": {
          "name": "UniProt (EBI)",
          "url": "https://groups.google.com/forum/#!forum/ebi-proteins-api"
        },
        "description": "The Taxonomy REST API provides access to the UniProt taxonomy database. The services can be queried with taxonomy identifier(s) to retrieve hierarchical information (children, parent, sibling taxa), taxonomic lineage, relationships between two taxa, and common ancestors of an organism. The services can also be queried with a taxonomy name to find all related information to that node or hierarchical information about its children, parent and sibling nodes.",
        "termsOfService": "https://www.ebi.ac.uk/proteins/api/doc/",
        "title": "Taxonomy Service",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/ancestor/{ids}",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getTaxonomyAncestor",
              "parameters": [
                {
                  "description": " A comma separated list of Taxonomy element unique identification",
                  "in": "path",
                  "name": "ids",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TaxonomyNode"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/TaxonomyNode"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Request parameter {parameterName} contains unsupported value."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "No ancestors found for the taxonomy IDs"
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Unexpected error. Please try again later."
                }
              },
              "summary": "This service returns the lowest common ancestor (LCA) of two taxonomy nodes.",
              "tags": [
                "taxonomy"
              ]
            }
          }
        },
        {
          "path": "/id/{id}",
          "pathitem": {
            "get": {
              "description": "with taxonomy identification as parameter",
              "operationId": "getTaxonomyDetailsById",
              "parameters": [
                {
                  "description": " Taxonomy element unique identification",
                  "in": "path",
                  "name": "id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TaxonomyNode"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/TaxonomyNode"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Request parameter {parameterName} contains unsupported value."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "No results found for the taxonomy ID"
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Unexpected error. Please try again later."
                }
              },
              "summary": " This service returns details about a taxonomy node, and also links to its parent, sibling and children nodes.",
              "tags": [
                "taxonomy"
              ]
            }
          }
        },
        {
          "path": "/id/{id}/children",
          "pathitem": {
            "get": {
              "description": "with taxonomy identification as parameter",
              "operationId": "getTaxonomyNodesChildrenByIdWithDetail",
              "parameters": [
                {
                  "description": "pageNumber is the current page number",
                  "in": "query",
                  "name": "pageNumber",
                  "required": false,
                  "schema": {
                    "default": "1",
                    "type": "string"
                  }
                },
                {
                  "description": "pageSize is the number of records returned in the request, max value is 200",
                  "in": "query",
                  "name": "pageSize",
                  "required": false,
                  "schema": {
                    "default": "100",
                    "type": "string"
                  }
                },
                {
                  "description": " Taxonomy element unique identification",
                  "in": "path",
                  "name": "id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Taxonomies"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Taxonomies"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Request parameter {parameterName} contains unsupported value."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "No results found for the taxonomy ID"
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Unexpected error. Please try again later."
                }
              },
              "summary": "This service returns a list of children nodes that belongs to a taxonomy node with links to its parent, sibling and children nodes.",
              "tags": [
                "taxonomy"
              ]
            }
          }
        },
        {
          "path": "/id/{id}/children/node",
          "pathitem": {
            "get": {
              "description": "with taxonomy identification as parameter",
              "operationId": "getTaxonomyNodesChildrenById",
              "parameters": [
                {
                  "description": "pageNumber is the current page number",
                  "in": "query",
                  "name": "pageNumber",
                  "required": false,
                  "schema": {
                    "default": "1",
                    "type": "string"
                  }
                },
                {
                  "description": "pageSize is the number of records returned in the request, max value is 200",
                  "in": "query",
                  "name": "pageSize",
                  "required": false,
                  "schema": {
                    "default": "100",
                    "type": "string"
                  }
                },
                {
                  "description": " Taxonomy element unique identification",
                  "in": "path",
                  "name": "id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Taxonomies"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Taxonomies"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Request parameter {parameterName} contains unsupported value."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "No results found for the taxonomy ID"
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Unexpected error. Please try again later."
                }
              },
              "summary": "This service returns a list of children nodes that belongs to a taxonomy node.",
              "tags": [
                "taxonomy"
              ]
            }
          }
        },
        {
          "path": "/id/{id}/node",
          "pathitem": {
            "get": {
              "description": "with taxonomy identification as parameter",
              "operationId": "getTaxonomyBaseNodeById",
              "parameters": [
                {
                  "description": " Taxonomy element unique identification",
                  "in": "path",
                  "name": "id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TaxonomyNode"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/TaxonomyNode"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Request parameter {parameterName} contains unsupported value."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "No results found for the taxonomy ID"
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Unexpected error. Please try again later."
                }
              },
              "summary": "This service returns details about a taxonomy node such as the rank, mnemonic, scientific name and common name.",
              "tags": [
                "taxonomy"
              ]
            }
          }
        },
        {
          "path": "/id/{id}/parent",
          "pathitem": {
            "get": {
              "description": "with taxonomy identification as parameter",
              "operationId": "getTaxonomyNodeParentByIdWithDetail",
              "parameters": [
                {
                  "description": " Taxonomy element unique identification",
                  "in": "path",
                  "name": "id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TaxonomyNode"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/TaxonomyNode"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "description": "The id parameter cannot be null"
                }
              },
              "summary": "This service returns details about the parent node for a given taxonomy node with links to its parent, sibling and children nodes.",
              "tags": [
                "taxonomy"
              ]
            }
          }
        },
        {
          "path": "/id/{id}/parent/node",
          "pathitem": {
            "get": {
              "description": "with taxonomy identification as parameter",
              "operationId": "getTaxonomyNodeParentById",
              "parameters": [
                {
                  "description": " Taxonomy element unique identification",
                  "in": "path",
                  "name": "id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TaxonomyNode"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/TaxonomyNode"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "description": "The id parameter cannot be null"
                }
              },
              "summary": "This service returns details about the parent node for a given taxonomy node.",
              "tags": [
                "taxonomy"
              ]
            }
          }
        },
        {
          "path": "/id/{id}/siblings",
          "pathitem": {
            "get": {
              "description": "with taxonomy identification as parameter",
              "operationId": "getTaxonomyNodesSiblingsByIdWithDetail",
              "parameters": [
                {
                  "description": "pageNumber is the current page number",
                  "in": "query",
                  "name": "pageNumber",
                  "required": false,
                  "schema": {
                    "default": "1",
                    "type": "string"
                  }
                },
                {
                  "description": "pageSize is the number of records returned in the request, max value is 200",
                  "in": "query",
                  "name": "pageSize",
                  "required": false,
                  "schema": {
                    "default": "100",
                    "type": "string"
                  }
                },
                {
                  "description": " Taxonomy element unique identification",
                  "in": "path",
                  "name": "id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Taxonomies"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Taxonomies"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Request parameter {parameterName} contains unsupported value."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "No results found for the taxonomy ID"
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Unexpected error. Please try again later."
                }
              },
              "summary": "This service returns a list of sibling nodes that belongs for a given taxonomy node with links to its parent, sibling and children nodes.",
              "tags": [
                "taxonomy"
              ]
            }
          }
        },
        {
          "path": "/id/{id}/siblings/node",
          "pathitem": {
            "get": {
              "description": "with taxonomy identification as parameter",
              "operationId": "getTaxonomyNodesSiblingsById",
              "parameters": [
                {
                  "description": "pageNumber is the current page number",
                  "in": "query",
                  "name": "pageNumber",
                  "required": false,
                  "schema": {
                    "default": "1",
                    "type": "string"
                  }
                },
                {
                  "description": "pageSize is the number of records returned in the request, max value is 200",
                  "in": "query",
                  "name": "pageSize",
                  "required": false,
                  "schema": {
                    "default": "100",
                    "type": "string"
                  }
                },
                {
                  "description": " Taxonomy element unique identification",
                  "in": "path",
                  "name": "id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Taxonomies"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Taxonomies"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Request parameter {parameterName} contains unsupported value."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "No results found for the taxonomy ID"
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Unexpected error. Please try again later."
                }
              },
              "summary": "This service returns a list of sibling nodes that belongs for a given taxonomy node.",
              "tags": [
                "taxonomy"
              ]
            }
          }
        },
        {
          "path": "/ids/{ids}",
          "pathitem": {
            "get": {
              "description": "with taxonomy identification as parameter",
              "operationId": "getTaxonomyDetailsByIdList",
              "parameters": [
                {
                  "description": " A comma separated list of Taxonomy element unique identification",
                  "in": "path",
                  "name": "ids",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Taxonomies"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Taxonomies"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Request parameter {parameterName} contains unsupported value."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "No results found for the taxonomy ID"
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Unexpected error. Please try again later."
                }
              },
              "summary": " This service returns a list of taxonomy node details with links to its parent, sibling and children nodes.",
              "tags": [
                "taxonomy"
              ]
            }
          }
        },
        {
          "path": "/ids/{ids}/node",
          "pathitem": {
            "get": {
              "description": "with taxonomy identification as parameter",
              "operationId": "getTaxonomyBaseNodeByIds",
              "parameters": [
                {
                  "description": " A comma separated list of Taxonomy element unique identification",
                  "in": "path",
                  "name": "ids",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Taxonomies"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Taxonomies"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Request parameter {parameterName} contains unsupported value."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "No results found for the taxonomy ID"
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Unexpected error. Please try again later."
                }
              },
              "summary": "This service returns a list of taxonomy node details such as the rank, mnemonic, scientific name and common name.",
              "tags": [
                "taxonomy"
              ]
            }
          }
        },
        {
          "path": "/lineage/{id}",
          "pathitem": {
            "get": {
              "description": "with taxonomy identification as parameter",
              "operationId": "getTaxonomyLineageById",
              "parameters": [
                {
                  "description": " Taxonomy element unique identification",
                  "in": "path",
                  "name": "id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TaxonomyNode"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/TaxonomyNode"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Request parameter {parameterName} contains unsupported value."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "No lineage found for the taxonomy ID"
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Unexpected error. Please try again later."
                }
              },
              "summary": "This service returns the taxonomic lineage for a given taxonomy node. It lists the nodes as they appear in the taxonomic tree, with the more specific listed first.",
              "tags": [
                "taxonomy"
              ]
            }
          }
        },
        {
          "path": "/name/{name}",
          "pathitem": {
            "get": {
              "description": "with taxonomy name as parameter",
              "operationId": "getTaxonomiesDetailsByName",
              "parameters": [
                {
                  "description": "pageNumber is the current page number",
                  "in": "query",
                  "name": "pageNumber",
                  "required": false,
                  "schema": {
                    "default": "1",
                    "type": "string"
                  }
                },
                {
                  "description": "pageSize is the number of records returned in the request, max value is 200",
                  "in": "query",
                  "name": "pageSize",
                  "required": false,
                  "schema": {
                    "default": "100",
                    "type": "string"
                  }
                },
                {
                  "description": "Taxonomy name that will be searched in scientificName, commonName and mnemonic",
                  "in": "path",
                  "name": "name",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Type of the search, valid values are EQUALSTO,STARTSWITH,ENDSWITH or CONTAINS",
                  "in": "query",
                  "name": "searchType",
                  "required": false,
                  "schema": {
                    "default": "EQUALSTO",
                    "type": "string"
                  }
                },
                {
                  "description": "fieldName, valid values are SCIENTIFICNAME, COMMONNAME or MNEMONIC",
                  "in": "query",
                  "name": "fieldName",
                  "required": false,
                  "schema": {
                    "default": "SCIENTIFICNAME",
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Taxonomies"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Taxonomies"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Request parameter {parameterName} contains unsupported value."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "No results found for the taxonomy name"
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Unexpected error. Please try again later."
                }
              },
              "summary": "This service returns a list of taxonomic nodes with the specific queried name. For each node, the service provides it\u2019s taxonomic details and also links to its parent, siblings and children nodes.",
              "tags": [
                "taxonomy"
              ]
            }
          }
        },
        {
          "path": "/name/{name}/node",
          "pathitem": {
            "get": {
              "description": "with taxonomy name as parameter",
              "operationId": "getTaxonomiesNodeBaseByName",
              "parameters": [
                {
                  "description": "pageNumber is the current page number",
                  "in": "query",
                  "name": "pageNumber",
                  "required": false,
                  "schema": {
                    "default": "1",
                    "type": "string"
                  }
                },
                {
                  "description": "pageSize is the number of records returned in the request, max value is 200",
                  "in": "query",
                  "name": "pageSize",
                  "required": false,
                  "schema": {
                    "default": "100",
                    "type": "string"
                  }
                },
                {
                  "description": "Taxonomy name that will be searched in scientificName, commonName and mnemonic",
                  "in": "path",
                  "name": "name",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Type of the search, valid values are EQUALSTO,STARTSWITH,ENDSWITH or CONTAINS",
                  "in": "query",
                  "name": "searchType",
                  "required": false,
                  "schema": {
                    "default": "EQUALSTO",
                    "type": "string"
                  }
                },
                {
                  "description": "fieldName, valid values are SCIENTIFICNAME, COMMONNAME or MNEMONIC",
                  "in": "query",
                  "name": "fieldName",
                  "required": false,
                  "schema": {
                    "default": "SCIENTIFICNAME",
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Taxonomies"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Taxonomies"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Request parameter {parameterName} contains unsupported value."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "No results found for the taxonomy name"
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Unexpected error. Please try again later."
                }
              },
              "summary": "This service returns a list of taxonomic nodes with a specific name. For each node, the service provides it\u2019s taxonomic details such as the rank, mnemonic, scientific name and common name.",
              "tags": [
                "taxonomy"
              ]
            }
          }
        },
        {
          "path": "/path",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getTaxonomyPath",
              "parameters": [
                {
                  "description": " Taxonomy element unique identification",
                  "in": "query",
                  "name": "id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Number of depth levels for taxonomy path, valid values between 1 and 5",
                  "in": "query",
                  "name": "depth",
                  "required": false,
                  "schema": {
                    "format": "int32",
                    "minimum": 1,
                    "type": "integer"
                  }
                },
                {
                  "description": "Direction for taxonomy path, valid values are TOP and BOTTOM",
                  "in": "query",
                  "name": "direction",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TaxonomyNode"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/TaxonomyNode"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Request parameter {parameterName} contains unsupported value."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "No taxonomy results found for the searched path"
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Unexpected error. Please try again later."
                }
              },
              "summary": "This service returns all taxonomic nodes that have a relationship with the queried taxonomy ID in a specific direction (TOP or BOTTOM) and depth level.",
              "tags": [
                "taxonomy"
              ]
            }
          }
        },
        {
          "path": "/path/nodes",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "getTaxonomyPathNodes",
              "parameters": [
                {
                  "description": " Taxonomy element unique identification",
                  "in": "query",
                  "name": "id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Number of depth levels for taxonomy path, valid values between 1 and 5",
                  "in": "query",
                  "name": "depth",
                  "required": false,
                  "schema": {
                    "format": "int32",
                    "minimum": 1,
                    "type": "integer"
                  }
                },
                {
                  "description": "Direction for taxonomy path, valid values are TOP and BOTTOM",
                  "in": "query",
                  "name": "direction",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "pageNumber is the current page number",
                  "in": "query",
                  "name": "pageNumber",
                  "required": false,
                  "schema": {
                    "default": "1",
                    "type": "string"
                  }
                },
                {
                  "description": "pageSize is the number of records returned in the request, max value is 200",
                  "in": "query",
                  "name": "pageSize",
                  "required": false,
                  "schema": {
                    "default": "100",
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TaxonomyNode"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/TaxonomyNode"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Request parameter {parameterName} contains unsupported value."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "No taxonomy results found for the searched path"
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Unexpected error. Please try again later."
                }
              },
              "summary": "This service returns paginated taxonomy node list that have a relationship with the queried taxonomy ID in a specific direction (TOP or BOTTOM) and depth level.",
              "tags": [
                "taxonomy"
              ]
            }
          }
        },
        {
          "path": "/relationship",
          "pathitem": {
            "get": {
              "description": "",
              "operationId": "checkRelationshipBetweenTaxonomies",
              "parameters": [
                {
                  "description": "Initial taxonomy element unique identification for relationship",
                  "in": "query",
                  "name": "from",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Final taxonomy element unique identification for relationship",
                  "in": "query",
                  "name": "to",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TaxonomyNode"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/TaxonomyNode"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Request parameter {parameterName} contains unsupported value."
                },
                "404": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "No taxonomy results found for the searched relationship"
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorMessage"
                      }
                    }
                  },
                  "description": "Unexpected error. Please try again later."
                }
              },
              "summary": "This service returns the shortest path between two taxonomy nodes showing their relationship.",
              "tags": [
                "taxonomy"
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "url": "https://www.ebi.ac.uk/proteins/api/taxonomy"
        }
      ],
      "tags": [
        {
          "name": "taxonomy"
        },
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIAPmErl0C_-1dW3PbthL-KzjqeYhnVMlJ086cvtmOMtWMLetYyvShJw8wBUloSIAFQCs-Hv_37gIELzJ1cyRfUuQhtkFgsYtdfN8CBMm7lkyZoClv_UpaP3WOO8etNmlxMZVQcNeaMB0pnhouBVYYzxkZ069SyOSWXPVGY3Iy7JNUyRsONQmNIqY1MZIYqPhJ8KGShhjfYEINvaaadQjK0UzdcKhPIirINSN_ZUxxNiELbuZlG5ArDJ9ypt7oI5SsmIFqN4zMoYyqaM4jGhNUWCUU9SRvoCyeKCbaJKXww7SJ5tcxFzMUS4_aXjqPCJQyOmNtEBvb1nrOUw3qmAVjgpiFtG3ahIoJiWSSgHwqQGsjlSZyCn8QqWZUcJ00mEVjLR_YRkvrBE0YGjXlIJ7GsVMDKlbtscNJDRFywqCz1YbTa5kZwg30vTQCVn0_CChHd9DNN0zp3LNvneMNNzGznvYqjpw99iJTib6c-hKoNTcm1b92u4vFosOueYdGnexLF-LBMC50F8KqO5FRFxtHUhgaGRtVaDY29xHypnfaP8JKmYqrYmdKZqnuzKScxawDw98FY7Ok-8O_3E_o8kff2Y8Yw_f3qCadaZDyR9mPH-8WXK6UKio0DLdUrfvP0C6lZq6tfl3v4u4dn-h7WzZjTncvvRSKbXWWJFTdujnCtY8CjNZMCW3nQywXIHQ5isib87OTIwylPNjyyCictDQFsQimrLIu70-wCFTz7jrJpbasPQosBactjQaY5OY4_oFGN_RCTqyeFAxBMRiSMQflQc0iMljMEoytTHCI72KmRlYzlKnYXxlXDHU0KmM4TNGcJdSN421qtdEwncUMPPfZttApzEHm3PDu-LgJhHRmYWaaxaQYCB9hoIJtQtM0zjXpfk1iW1bp_N-KTVHUD12wEnqEZrrrruuuN3AALnARVZX2p7ZaPFqcFfi-2bIrGDAMkcJz5K74dQA_7omdRRDtMOg6S1Op0DM3NM5YZ59D0FNKqgsYZMDGPQzBkrh8CN43DcFAVvB1KjPALZjrdv4Uc6P_Qb8yY39u9vcnwb6mLEIfMmzVIcOYAUHCdLkldAaOJkgH6lX51lnc5RMEzx2xkzSC54RBzMc65zdaB0lHzZZogd2-2OwDKXCZ-i2B57S4Gl2bk48o51ddzsz1MPzBaXx6C1fWIvFmIA5wG-D2oHALQZDFZg3YBqx9JVjb9fi2h4SVFvleHTTdUuSaxVLMLNYuwbFb4rwcJEYY0Gd5b4jHv4NcB8_rkDmFER5kybUT7xAaF3G3DZqWdQl3mX6UKbvqwitEFGIqAD0FwlqP0LafKYWpaZdnNnrq-o34_9l22mFNr5tTBx2rWCTVROcut4tOW0M5WGyThH51YIdtkR2-0QaQULci8F9JWBy02Bv7OWGB-wL3_eO4r4uM8owE-JRcFhgsMFhgsMBggcG-BwbbE3Gt3S0jgAVzpBwLk1R8AYwULJGCR7BAi3iOSO7GVOWeF_59QGY7BVciu4UNs7BhFiA3QO5TQa7bmto76GI85DfeLehijFAy4zd4pOCl75YNrQLbb5UFTH5WTMYzJ3xSgeSICiFxhQoLpThuNYf8YZKNreP-yUI4BO53E7g5IOq97u3UzkTVt3ZeFWjrUT464RZH2CAKG0RhtRJWK9_fasUz4P5vcTyGBp-S0QKPBR4LPBZ4LPDY6-Yx_ZgHKsgG8qovzvyOxAtbpFVOBJ-D3uH5jIDCAYUDCj8nCu9_GdGMxC__lrMOcBzgOMBxgONngOP8CfRHPCy38kHjB4-3r9nEIX1joSrfcbD7Pw6rYWTTlFHl9xpKqUYxQCeHw3AhkYoRDf6xMI7CwE9TrrQ5IHyfO8vCPb5wYOjFo3Q5CwNKv1KURjzp3uH_94fImDH9tdBbgGqBp_7VITYdJh8heBiFfNo9-mzKF46Ub2Hh5n_Zu-O3_9EV6cU5jW2eldaP2hpx-fu2AA4ZXrElgkgQdvife4df5F5YS5bj-ptr8EbRgscxHtrQDF9K4zQvl3Xo23a-pBv4FZ5f_-3OqVWFXYdjrLJx4LGWnW9zr2gbR5PnXAMRDzlM77-fTs5H48v2aHxyNR793h__1u4NPthf8MU7Z5eD8Ul_MPrGoffdLJkz5SyeDGpOWGVNUbXBiNFZvzcY9z_2zwYnF702KH1xcTnA39GEi0EP_uqffaMJ9U7CajTkOVusRj3AhEznlWQ6B9sgrKc7tEx29pPkHHTDcec0x24yQnCEPCfkOSHPCXlOyHNCnhPynGfPcyzw7yG3AVJYzmosXczpDZBA7b2y5e6O39Sp7AEinVQyoQkgVuReZzu-HCKknV6Ox5cXR5ZYJizF0y3shsW7vyN0mFPeNnvmq5D5YJvmVaawVm7WZVAkF5VhcQdXi_FFby-RiH_H71s7oj9vzxQc4nzmkiv37t288Kd3WJRwwZMsgbK3S9Z4j2626EPh_E1GIBNifKAJLkDCfYpwn-KRvFYEWjPBFYmvz5kDwb10grMr-H08MQcLOi7suZb6GR-7sH8FfGefKAikF0ivacjDvsuh9l1CahFSi5BafHepRZXk93RmTc8x7u08ATZb-v5K5ZMYWHFhP-UyZ1zV0o0tMwOwLfpyVWl36jqrbIKtyROmSiabcbgvuOE0LnVfmzDYaVAb02-iMyM3K_gRsrknVC_wQOCBnXhgOdwCH7xUPkChCOgFUi59w2nNp6HKzzJ9tjb7_io6ud9LaL5ibkVRgxl5_ScW1VHpD_jD1T2X9XUZwwPKwAX2m08KYcbwHJWql7dZ_fzyHj8p9bCnRhDEmhWSabZgSSFM6Pv-Y2xrfTPMa-YfA2u5L2E19kaVopYUfDg9-E4WXFsoPP7t8R2lccMS_RiItfG-pQq27j76B6NtuDoVvIe21MJX35MiRdTeL0eBU3GLYGbVqXewQK71sjKIl0NtC_XzRfKw0N6i_5ApX2KkofGVW6Q2G1RrseXWBGpb7XqHZjWFtm1nh6e3ahBXzvLCW5-uzhuHfZ1r1k-lvIXeFMkPHV0JVDeXt3Bz9cCDB5PmAK1c3SE-C_krBql-HmNVrfKUxko5t0KK22TVZTxUtLJpBmYqNhPZyuaVt07ugKRFw3O-uvfaF2A2RoitvWew9xqglnoHNaxVuwYpjnf1tXAbu8pr79lmr8MONudNXIvd5yb8-xuWaGSFunUAAA=="
    },
    {
      "_id": "3d6bacf6e305bee5efdd25d1560996e1",
      "_meta": {
        "ETag": "ca85ee33b2ed955e276478eff920e11a9cb85877f188d712dfc6e5fc27274b8e",
        "github_username": "kevinxin90",
        "timestamp": "2020-04-29T00:01:10.199417",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:42.478976",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/cord/cord_cell.yml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned fields when passed \"fields\" parameter contains dot notation, e.g. \"fields=assoicated_with.pmd\". If \"true\" or \"1\", the returned data object contains a single \"associated_with\" field, otherwise (\"false\" or \"0\"), a single \"refseq\" field with a sub-field of \"rna\". Default: true.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated fields to limit the fields returned from the matching diseasee hits.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching diseasee hits to skip, starting from 0. Combining with \"size\" parameter, this can be useful for paging. Default: 0.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "size": {
            "description": "the maximum number of matching diseasee hits to return (with a cap of 1000 at the moment). Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated fields to sort on. Prefix with \"-\" for descending order, otherwise in ascending order. Default: sort by matching scores in decending order.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "cell2anatomy": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "cl"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/cell2anatomy"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "cell2bp": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "cl"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/cell2bp"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "cell2cc": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "cl"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/cell2cc"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "cell2cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "cl"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/cell2cell"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "cell2chemical": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "cl"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/cell2chemical"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "cell2disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "cl"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/cell2disease"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "cell2gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "cl"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/cell2gene"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "cell2genomicentity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "cl"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/cell2genomicentity"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "cell2ma": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                },
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "cl"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/cell2ma"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "cell2protein": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "cl"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/cell2protein"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "cell2anatomy": {
            "UBERON": "associated_with.uberon",
            "pmc": "associated_with.pmc"
          },
          "cell2bp": {
            "GO": "associated_with.go",
            "pmc": "associated_with.pmc"
          },
          "cell2cc": {
            "GO": "associated_with.go",
            "pmc": "associated_with.pmc"
          },
          "cell2cell": {
            "CL": "associated_with.cl",
            "pmc": "associated_with.pmc"
          },
          "cell2chemical": {
            "CHEBI": "associated_with.chebi",
            "pmc": "associated_with.pmc"
          },
          "cell2disease": {
            "DOID": "associated_with.doid",
            "pmc": "associated_with.pmc"
          },
          "cell2gene": {
            "HGNC": "associated_with.hgnc",
            "pmc": "associated_with.pmc"
          },
          "cell2genomicentity": {
            "SO": "associated_with.so",
            "pmc": "associated_with.pmc"
          },
          "cell2ma": {
            "GO": "associated_with.go",
            "MOP": "associated_with.mop",
            "pmc": "associated_with.pmc"
          },
          "cell2protein": {
            "PR": "associated_with.pr",
            "pmc": "associated_with.pmc"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothinigs.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the CORD Query web services. Learn more about [CORD](http://biothings.ncats.io/cord_diseasee)",
        "termsOfService": "http://mydiseasee.info/terms/",
        "title": "CORD Cell API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/diseasee",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple CELL ONTOLOGY diseaseeids seperated by comma, e.g., \"ids=387,388\" Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "For a list of diseasee ids, return the matching diseasee objects",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/diseasee/{diseaseeid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "CELL ONTOLOGY Cell ID, e.g. 387",
                  "example": "387",
                  "in": "path",
                  "name": "diseaseeid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "description": "A matching diseasee object"
                }
              },
              "summary": "Retrieve diseasee annotation object based on pr diseasee id, support JSONP and CORS as well.",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "CORD API metadata object"
                }
              },
              "summary": "Get metadata about the data available from CORD API."
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Pass a search term to filter the available fields, e.g. \"search=associated_with\".",
                  "in": "query",
                  "name": "search",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Pass a prefix string to filter the available fields, e.g. \"prefix=refseq\".",
                  "in": "query",
                  "name": "prefix",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "MyCell.info metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from MyCell.info."
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string. Examples \"PMC6836328\", \"31045\", \"PR:000001978\".",
                  "example": "PR:000001978",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "description": "a single field or comma-separated fields to return facets, for example, \"facets=pr\"",
                  "in": "query",
                  "name": "facets",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "Make diseasee query and return matching diseasee list. Support JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms seperated by comma (also support \"+\" or white space), but no wildcard, e.g., \"q=1017,1018\" or \"q=CDK2+BTK\"",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "Specify one or more fields (separated by comma) as the search \"scopes\", e.g., \"scopes=entrezdiseasee\", \"scopes=entrezdiseasee,ensembldiseasee\". The available \"fields\" can be passed to \"scopes\" parameter are listed [here](http://mydiseasee.info/doc/query_service.html#available-fields). Default: \"scopes=entrezdiseasee,ensembldiseasee,retired\" (either Entrez or Ensembl diseasee ids).",
                          "type": "string"
                        }
                      },
                      "required": [
                        "q"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with \"hits\" property",
                  "x-bte-response-mapping": {
                    "$ref": "#/components/x-bte-response-mapping/query-post"
                  }
                }
              },
              "summary": "Make diseasee batch query and return matching diseasee hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/cell2gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/cell2protein"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/cell2cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/cell2cc"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/cell2ma"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/cell2bp"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/cell2genomicentity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/cell2chemical"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/cell2disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/cell2anatomy"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://biothings.ncats.io/cord_cell"
        },
        {
          "description": "Production server",
          "url": "http://biothings.ncats.io/cord_cell"
        }
      ],
      "tags": [
        {
          "name": "diseasee"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIAMbDqF4C_-1b6U8kNxb_V6zKfmCUvhiyM2QkpB2OnZAMdAeIdlcDQq4qd7dDVbmwXUAH8b_nvec6m-oDMisNEfkwAy4_-x2_d3py76lUJDyV3gfmbfUGvYHXYZ5MxgoW7r1AJZYHln4WMZcRbpuKKP2XL5WdykROTE8qpEl4LPDrz4f_OThm_z08xsW7rgyJxNrUfOj3J9JOM78XqLh_JW5kcieTHwduo1YR0WthUpUY6UeCheJGRMCg9h5gTyhMoGVqpUpw474KslgAf7jA1JjZqWB7w5N99msm9IzdCp8ZoW9kIEyPfRZcJyxWWjDuq8yyL7j1YgM5A8ZycUCaJOAWZeoHSoeXoTSCGyHeIJNW6NgMx6fu0EIuoI5nxb4eqq5PG_tEIq0TixjbE1HEPo4O8cuN0CaXZBO0jgIit7AKS1_u56U9SAI9S60I2UirMAtIaEeAp2U6qut5kTgBMIBXPTp-1aErz7xAYfkkZ74AQ6EWd2exypNEObM116_Rbs0lq3liIm6Vbq6XzLibU26nhlDaL6_E31JlHHhTroHSltr9hxZjPOc7kCEGvAGOTL_a1B9LEYWmjut8hbhYRR0qS9vr9OXaWic4Z6uRuwUSVgtQlLG7KpyVTgr09DNP00gGpNv-Xff29rY7VjrugiVFEqhQhLTLBFM4zylGo39ZKZz6ZOj-noNHnEVWpuCRewefP7Ph8dnw8_DT_1iha6AC2MA5HAHqzxgIFfMOE71Jr8PO8dSdre33na3t7XOPHSsrwFm5ZUGmNXAeobMylcDfll8JcmSZpOCkeHCWMqvY5mAwYDG_k3EWd2gHBArLbiV4lA_EsbRwd498bpaSyozVgBDv4SHXmdQk_hcS8uLhIf9A4SYX_-1g0Cb-R0bQZMVmpvzfRYC32ymIN5XWgFy5KmfuRpOBCjRayPu30oyzSAK_EKYKpaFwHTjSZhCYUKCY2wAxXe1w1xAMC9-qO88FXVQivn9f2eOBxJiIdvTPidc0KgWpw31nPQZmw-vFHY9TF8nyFUmk6HgNlJcceE2tW50J1EqFvBYzfft-GfAo8nlwVT-hXPsKnr0WGBcB5RHwTgToFnJotbFCT4FhH9ZDcD6Abx2aHWayNFXasp9Ph8cjIAwxuZ4ybsBZo6i3ApQgLQ-55Utx-Ne0vbbGKPdC2mUFU4v09UnYao8rE9Ax3a83YCaOVclYq5gVZ_a8prwFQp_gfiNuDMQHUL0OpgxrBwx4YxnBj3R_7Wo6PHfNc8-R7AC9CiTG3kuMSOder3JQl1Nr-nM03hq-2M5mCjaTd8ztXJdRR7QDfxpxvZw_t9X7CrHiK6HnaIYRkQq7ChxOvufgKKecg1PtkgJRTjNPwJEre52KeuzARWwD2h8d7b3b3nq39RayL6bjrc3BD_90P45OPgzwv80f32_ndqmF-vrXJSa7_hZjvZF_iAbu8ff1KCHqNSjx9zaPAJ8FaQq0M8jyVPd0oRTirhTKjQ1ekuf5MQ-EBb-AqozlikYzuOWdVJ97S_Tsdv3_XeNbKHHbHHNRofu7IXs06trW29130ydPOREGqlrPlYFft-A7wiq2TKbuKEygOQge52-sDXvs9AkZ14HjAi9-bXKe2ORcL21xnLmohW9patgGj4wqi6Nz73sAAjjzLWBCMJOCi77pMB8ifqKwOwkDrsOqE7re2Rxsvu_AH9uODpf29n95-_3u2S_O-ecdmtwd-G9tzE5TEcjxDOo3gafRfCMPOhtVGCqYf4NYwkyU1xrn-cmYCwoO3coO6FqLPwqAumTR-qkjwD9iP6q29thZoxY4z2EFAgc8wW4thVIC2IKwWHHASmAwrp1HwJYvU6FFOaWZn7OEKnBp8jIf9PSmNo6-K6_uuovf9Ni-GHMw8Id1peiAq2I2A742BDg9cHVABKjlA7e30cm9Wa_1vF7ReH7dEDcanp4tC3O_tgU5syjK0ZjOt6JbEHRjYBHlXMhN-35nsy7FrYflsdPHULlOBEVm2wJkyfTVxHQVeTMIvyxAtm3v45Dr7UQky0qIxYSgQitk8izaamT3VMLgWWQArueQ-emzyEClKgbHTay0s-eJCXgHL3mejnL4PIuWJ9yqGJi-cBiuiB4n4_uqumoJ4jOVUWRMXYd1Xm5uREWIljH6Bs_rA9y0rJGq13jL68UqbbcwhxFJq4jSBqZZbotZu_PFqsq9nYqkCO21mF9JQK8JMjEM7mPFwKDsER0BNbMY9fJmtpfGIaaUwzFswcaiSJubmJMabNQ6--qqskY_9x61yY7xDlMY328BCmwDS_HIlJcMzj3I5rUzig42L_kpUsLnzO_mPQCyqROOLJc5B9leZql6JdViKV-pSPDEmap4hXlkJ1AQ4ghzpxaTLOKaZZAVDbKkMl0-hXRw1op1Uqb5RBANIAsi1I0MBZBAmGV0SYdBnUNjWiBwidsSDjWAijSfGTwBFDVWUaRucVJLCoEzl4lbln0rUFmbpDxqvBY3WpGMpWu387UKpthotw9aMXssY7mqlFfxDHe0cYzXJlnsg_7AHu0MIPfmSqageMuhWoXvxPKgx_ZU7MsEV_LcjN1s3bfQFaQp6isw_DiLqMlM-YTGASUYB0vlRPbbpZRQmEzwJY7yNTbTC8TMh_RriZun843cjwKe4n6a9XNnxFjhG1-9gttcKkHR9q-UAJv6BRIsBhdSQa3dYyM3Bcut0cWAAMrGs0QSoqhKh2iVKrTIBIrvxteaTHQuVOmlpqBIhaoJiULRJFomez64WIbRh_K786z5OpEegayI3VdIIcOxq5XmeqhL4pB-dFmB4BMpbut1sMMA9TDVOKvNb4q1YqB2UV_kWnMqDrx6497S2AH0nsyXVeqqHSb00fJoMYjmuSbT2Hc_XCp96ZhGUigKCiVWmq2YI4o6cw0G5lWwHiWpz-l3DV5aOs6We-d3uUH_guIaCp68mHR34WveqXMopfGUjsMxLOe1uPuHAnufCcAAT6gIA1opn5ch0E0V7aLOoUOz4pBqBfcPByLK7Zb-OYKB_Obe6M_KJ2R2Ju4sO3KBdOQyHj10q8zOM_JpOM_IEWThAPPqx8DKm7JcdduPhqM19run6kZdWCa5-fKEzEDPax_KYXDLXMQvfsChhnfvNPplcPHg1ecGXkD1sTcVHEXG21bOUFxfRmOOXQxL1WC36Ocun9v_lY0GaaToVv42SEFG0PB7hSJeLd-wPHamleWhc_zbWH5XqkhNsB0FUii2zavlG5bHKUFl-aKDfqHm_2334GR4PM_MRxIKIXCQDzVeEVBDQDk1qWBAY7UXioGfPh3vzbPyicaEr1avWd1NThsmr439XqjtT4ctlkexXh2_HQL1SW-FhWI4_kJRMDqZZ2RUTPtf7V-zf_kGUqv50WIv1OzLGHm1-aT-dlUZvHhueaE23x8e7s-zsl-8IL0avmb48l2t5uzFO91LdfifDnYPH_GSC3Wa-cbyJHjFwVwAKB9n3Uhyyb8fqOaF914aBy3a6uFyx83aWr7GKsWv0JS3fJwokrUaNa26ZPUxNLf468dUTfCqs_J-s2VD5gvt_meaRke16kBqXlo-TydJ0DisUauvOvW0VWRTE7mq-FadBcVV20ddM6arIVYdBGGk5WPuMXO5adVZlAZaPodKhjXGqni3kjkKLW38TYUv8dHm4U83uLHPqDcAAA=="
    },
    {
      "_id": "1f47552dabd67351d4c625adb0a10d00",
      "_meta": {
        "ETag": "39475e6c2cdcf5ef80dc901b97cbc2868c85505c8db88d6c3fefd3cc267273b8",
        "github_username": "kevinxin90",
        "timestamp": "2020-04-29T00:01:15.623061",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:22.214066",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/EBIgene2phenotype/smartapi.yaml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call. Type: string.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned chem object. If \"true\" or \"1\", all fields will be collapsed into a single level deep object (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Type: boolean. Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us with an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "facet_size": {
            "description": "the number of facet buckets to return in the response. Type: integer. Default: 10. Max: 1000.",
            "in": "query",
            "name": "facet_size",
            "schema": {
              "type": "integer"
            }
          },
          "facets": {
            "description": "a comma-separated list of fields to return facets on.  In addition to query hits, the fields notated in \"facets\" will be aggregated by value and bucklet counts will be displayed in the \"facets\" field of the response object. Type: string (list). Default: None. Max: 1000.",
            "in": "query",
            "name": "facets",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated list of fields (in dotfield notation) used to limit the fields returned from the matching chem hit(s). The supported field names can be found from any chem object or from the /metadata/fields endpoint. If \"fields=all\", all available fields will be returned. Type: string (list). Default: all. Max: 1000.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "format": {
            "description": "controls output format of server response, currently supports: \"json\", \"jsonld\", \"html\". Type: string. Default: json.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching chem hits to skip, starting from 0.  This can be useful for paging in combination with the \"size\" parameter. Type: integer. Default: None.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "prefix": {
            "description": "Pass a prefix string to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          "search": {
            "description": "Pass a search term to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          "size": {
            "description": "the maximum number of matching chem hits to return per batch. Type: integer. Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated list of fields to sort on. Prefix each with \"-\" for descending order, otherwise in ascending order. Default: sort by descending score.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "Gene": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Gene"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Gene"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "gene_related_to_phenotype": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "HP",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "gene2phenotype"
              },
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene_related_to_phenotype"
              },
              "source": "EBI",
              "supportBatch": true
            }
          ],
          "phenotype_related_to_gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "HP",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "outputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "_id",
                "size": "350"
              },
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "gene2phenotype.phenotypes"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/phenotype_related_to_gene"
              },
              "source": "EBI",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "gene_related_to_phenotype": {
            "HP": "gene2phenotype.phenotypes",
            "probability": "gene2phenotype.DDD_category",
            "pubmed": "gene2phenotype.pmids"
          },
          "phenotype_related_to_gene": {
            "HGNC": "_id"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothings.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the EBIgene2phenotype query web services.",
        "termsOfService": "https://biothings.io/about",
        "title": "EBIgene2phenotype API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/gene",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple HGNC Gene IDs separated by comma. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted. Type: string (list). Max: 1000.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Gene"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "A list of matching gene objects"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "For a list of chemical IDs, return the matching gene object",
              "tags": [
                "gene"
              ]
            }
          }
        },
        {
          "path": "/gene/{geneid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Retrieve gene objects based on HGNC Gene ID  Supports JSONP and CORS as well.",
                  "example": 851,
                  "in": "path",
                  "name": "geneid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Gene"
                      }
                    }
                  },
                  "description": "A matching gene object"
                },
                "404": {
                  "description": "A response indicating an unknown gene ID"
                }
              },
              "summary": "Retrieve gene objects based on ID",
              "tags": [
                "gene"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "EBIgene2phenotype metadata object"
                }
              },
              "summary": "Get metadata about the data available from EBIgene2phenotype",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/search",
                  "name": "search"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/prefix",
                  "name": "prefix"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "description": "EBIgene2phenotype metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from a EBIgene2phenotype gene object",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string.",
                  "example": "gene2phenotype.mutation_consequence:\"loss of function\"",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/facet_size",
                  "name": "facet_size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/facets",
                  "name": "facets"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make queries and return matching gene hits. Supports JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms separated by comma (also \"+\" or whitespace).  Does not support wildcard queries",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "a comma-separated list of fields as the search \"scopes\" (fields to search through for query term). The available \"fields\" that can be passed to the \"scopes\" parameter are listed in the **/metadata/fields** endpoint.string Default: \"scopes=_id\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make batch gene queries and return matching gene hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene_related_to_phenotype"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/phenotype_related_to_gene"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://pending.biothings.io/ebigene2phenotype"
        },
        {
          "description": "Production server",
          "url": "http://pending.biothings.io/ebigene2phenotype"
        }
      ],
      "tags": [
        {
          "name": "gene"
        },
        {
          "name": "phenotype"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIAMvDqF4C_91aW2_bRhb-KwPuPiRZW1badLFroMA2dZq6QG03DrALRIYwJEfS1CSHmRna1hr-73suvIui5LhN0-1DIw9nzpzLd67kfWBylclcB8ci-HoynUyDAxHobGFg4T6ITOZl5Om3SqVOcNtKJfm_Qm38SmdLN9EGj2QyVfjwp9N_vzkT_zk9w8W7Qx3TCe9zd3x0tNR-VYSTyKRH1-pGZ3c6--eUN1qT0HmrXG4yp8NEiVjdqAT4s8ED7ImVi6zOvTYZbjwxUZEqYA8XhFkIv1LizevTpcrUV_lKZcavcyU-Fsquxa0KhVP2RkfKTfBCr2zqzheXvNbmsS3YkQxN4Wm_9szf5g3fXZzijhtlXcnaS9Aicow3wiosfbjvs_8mi-w69yoWF9bERURS8AGkVtikzRTYKAaeJh3mVKi7rOClGxftIv8I6leoCLksBaosjrv45mqlx1C1LDNYJXN118lE3SVvZeYS6Y3trtccMjO59CtH4DwiLvBXbhzjNZcWTvnaAH-1aoE0_nIE-AOMAXbcUbPpKDZ-oVUSt9FcrxEXuyjQVtc-X67sdZr9q3WYF_a72dhU-s7NvEJqsgpU7PxrE69rrwYK9FvmeaIjssrR3eHt7e0hnjwEgKgsMrGKaZeLVsANq9WiR3qtWPE65n97qEuLxOscfPjHt2ffi7dgHHF64gCByDSiPlwLECWVE3FmvALnlV5EhbXAV4L-KkwG_3p5rcixdZYXXsBlosiFN-LldDoVqbzTaZEe0A4IHF7c6iQRIRxOtYdbJuI9oPBYOG8BNOJZop1_PhE_y7tjosChAIEKLPOm4OGh1Ji2JPwHEvHq4aF8QOGpFP6r6XRUob860kZHf9qrlE8PGpV3uqO3pVfV7ElrJXjJw0Ao_E6gYBgDweQR-odAdxAm_FVFnuAXvPoEVkcZfGOtse-UA0Nv46pSFlgvpnuAMZkJnTKGwL6MUsRDGQQobBaAC4tQDX4wVshaOrwZ6CQIpQOg7gubke2HxA5awYpj1BVRp0hxdI__1_EDyblUwxGjJ9A7BQiBlNRRrgilA_YhuraRLsRlkefGwvOfLs_PLkDsWHx__u5SSAfgThJCnrqTaU5p5R_fvKS0S9ETglrbk5nToItKbwuFqmqMNQDjzxHzwBxJKKPrNoV67U8eNZ_q6ns4-LDjDOKZvfjVULTd6mpFdp2Z24zpnJ5s-NcOSMOJbV4EKpSx9HLUgR4DHgY_h4FBLG23Sb-02ijRKmZrVfbU8Fb5Zg_VfBRW-M8bwJPEcnRhTbpZYXY0VGulp6UK5E9RllPSRp3IUK58Jj_N4bm-a58vV343X9vfrqzeTzFvebJnZTnQSWzLLX2bM4QfkVd-oRaF43YvLwRdHiZpwQX0PEJtwU1ZpI5nQWKcwwS5KDKq9GfBiEd9_FJTydMSwUJGys-d_q_qUGhW96LiIGd3XAz__kwO9qRUhnK6Dcn31F1fa_vrC72lcyv-_eUnX3K58eKVBwd1Xr3VfkVRYxastHezQJSN0PpPXF7_jO0VPoJujkrUsqbu1h8o72SvgraOiXzdFV73B_bjT3KoJwWjJzjUH9bJfxzt49kdaGw20MWLZzJxBnzjb-AY0LPdAmYAnRCCoN0WJwbgBRlMOMYQtulxJG1cYW-oDaeUBAwOjhckX3vYcFL1iFU-d-SsXCEBX0wKmHtWbvCmeuhX1hTLFTpLS0rg-z0QaOqCWQkAoMHDCnC1UIlcOiyWgRwHh_qi2qZCWkXswTbN_eqLF_3K8MULobI4Nzrzk3JacaIWErR_XBP9dq7jWTA8s_jNxhO7w-bF-eX7scD0SzdwVk3F_28ADTFacqjcK5YORUqagYdeHV4v3SFeTlKPRcqh7TTbmFuVoEvMvZn3JrH7E6oPtqnxpPeKtdlQ2Izu903lM-C8a1OQ96DrQKU9qzd3vAY8KkXtyjLh4KbuPG-yT9u4s7JtcsoAq4hGaxLCLWOhetPA1gVgIPES5BNxugBxsKDmMDgLXs6AA-ClikvVgDIySSJzRyEBJJXCAT8QZRJ85SFipfKSJkbWRGSKwkfjS0xl4NiBKHBNVFKJauZOEU8vM71YkwAlSdBEEYEo6nmp29CYRMls0sSfBcR2NabsdqYeUHZJkbVdvUXaUDWoDoGBwdKqZZFIC5IAnFDhprD165sDHA5jRiusXCo6A5KBx97oWMERDjQAL7rpQDjD8RpOccj2hC4L4CA9FA7JgLEWYBJzi_NlogCEx2Sua4sd6Go1IANCkyGKNASOMHfhXhEW0TVU7ihVGULKrFGFq8oLADlqqWzLUi-n_eH2Fu67zdKACCXtlgyflocbIZiIMIAscZoJGce6giVnXQyNPMovzxJyOWnOSh7ArWrsL5eAk6oKuZFJoSjsovoSUCMAJGu5Sqxdnsh1k4NbJNlRasfuJK4trxBqlZ9BDHyM0t0-mGmGRY_V9zOQbsP1n6MnUY2S6FT7to7rMEZjj84snQIbGOWZK2uhsnrDzUwe5HJVHbQAdZdUZLZuR0XyrYp6v-5pqh6Onbz6LcS8KnC2JjPdEFqxvstClDf2M1Bd8-8yEJfk2xMG4Lzw-MaqSRr88rWG10HrbVepWIelHtY5KDr_SmL-vfIpKKSX_hoRceuoYHVTsUswbN93xqkNiHA5fa0h-zgvLRVSZHKIRwAdXaMEcLgoEiq1c7nEbYBXgHSoM05SrSoRo1O7Itge9sgHx8QvhxS74lw5zxyQ_4JLFd5QIQ1kXuiEskmnU2AYbTXWLm6bOesOY5Xj3-3sVg0OtDO_F7PNUHoXsyMZsHyPuxNhZSaBKpVr7tFEOMb0nnmPhn9beN6d9_A0pbsLRo2SYAvC9yw4xKwDToCE-eMLiJKxsgfCAHF7q6kpgS6287QlIBGHvNciAE2iHbdVOdscs9RD_Zzzz9v6s4rusGCu462m7rw8x41XrY619TKr3aENXAHJBUuzwWuoC4ugGnTbK82BG_v9a_d9PCSK88VIx9V_Nb-pFDIB_awzRLBIDIfeih9GOfHTvCoY0mNfgKuBzwEqobarkTrO3-DDA1gBP320iN6Y62EPo4deJtv9b8CC8Pzvr-bGzpkrPAr8V2ZrRGyYoxNt5joM9GXc7yRZgk21By8D4B24t7-L3yZtGQrcB9s7fb4dv5e55OhkLNI94MgAy-VUgT_Nw68WKCiA8TOvI35flpVfe3EV0z1w0d9-UV6tox-UxFay_DgLQgBOVcrP-ipO6TQ0b1H1OV1AH3J1pgd1ARxsfuC2MQMNqx84wAzuWcQP06uHoD1CpECEx1dKQigl5e8cmHKcoeLsNSac5m1ZVcbNU6CC9joeH69U-w_L_WOTGtbe1gHMmH2H7DVq4AFAfFb7zvnLlrI6CL7-ZvoUG_felta_3Jdk-ZHRGgeW4XM7vf4eTTeqBDREEaaUmTe2pZpbH0gfoQx1ov16YNvJyckcbb40_MnmKE7vGXyV88F__wNtIxAobywAAA=="
    },
    {
      "_id": "871d5b6761d91a7805572c47f016fe47",
      "_meta": {
        "ETag": "ab71d66162fa5ef74d8c3a152588b4ea7fb1bfb4464999c12d39526b27d52825",
        "github_username": "kevinxin90",
        "timestamp": "2020-04-29T00:01:22.004528",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:22.925700",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/cord/cord_disease.yml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned fields when passed \"fields\" parameter contains dot notation, e.g. \"fields=assoicated_with.pmd\". If \"true\" or \"1\", the returned data object contains a single \"associated_with\" field, otherwise (\"false\" or \"0\"), a single \"refseq\" field with a sub-field of \"rna\". Default: true.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated fields to limit the fields returned from the matching disease hits.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching disease hits to skip, starting from 0. Combining with \"size\" parameter, this can be useful for paging. Default: 0.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "size": {
            "description": "the maximum number of matching disease hits to return (with a cap of 1000 at the moment). Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated fields to sort on. Prefix with \"-\" for descending order, otherwise in ascending order. Default: sort by matching scores in decending order.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "disease2anatomy": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UBERON",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "doid"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2anatomy"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "disease2bp": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "doid"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2bp"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "disease2cc": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "doid"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2cc"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "disease2cell": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CL",
                  "semantic": "Cell"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "doid"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2cell"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "disease2chemical": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "CHEBI",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "doid"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2chemical"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "disease2disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "doid"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2disease"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "disease2gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "doid"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2gene"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "disease2genomicentity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "SO",
                  "semantic": "GenomicEntity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "doid"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2genomicentity"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "disease2ma": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "GO",
                  "semantic": "MolecularActivity"
                },
                {
                  "id": "MOP",
                  "semantic": "MolecularActivity"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "doid"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2ma"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ],
          "disease2protein": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "DOID",
                  "semantic": "Disease"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "PR",
                  "semantic": "Protein"
                }
              ],
              "parameters": {
                "fields": "associated_with"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "doid"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/disease2protein"
              },
              "source": "Translator Text Mining Provider",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "disease2anatomy": {
            "UBERON": "associated_with.uberon",
            "pmc": "associated_with.pmc"
          },
          "disease2bp": {
            "GO": "associated_with.go",
            "pmc": "associated_with.pmc"
          },
          "disease2cc": {
            "GO": "associated_with.go",
            "pmc": "associated_with.pmc"
          },
          "disease2cell": {
            "CL": "associated_with.cl",
            "pmc": "associated_with.pmc"
          },
          "disease2chemical": {
            "CHEBI": "associated_with.chebi",
            "pmc": "associated_with.pmc"
          },
          "disease2disease": {
            "DOID": "associated_with.doid",
            "pmc": "associated_with.pmc"
          },
          "disease2gene": {
            "HGNC": "associated_with.hgnc",
            "pmc": "associated_with.pmc"
          },
          "disease2genomicentity": {
            "SO": "associated_with.so",
            "pmc": "associated_with.pmc"
          },
          "disease2ma": {
            "GO": "associated_with.go",
            "MOP": "associated_with.mop",
            "pmc": "associated_with.pmc"
          },
          "disease2protein": {
            "PR": "associated_with.pr",
            "pmc": "associated_with.pmc"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothinigs.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the CORD Query web services. Learn more about [CORD](http://biothings.ncats.io/cord_disease)",
        "termsOfService": "http://mydisease.info/terms/",
        "title": "CORD Disease API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/disease",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple DISEASE ONTOLOGY diseaseids seperated by comma, e.g., \"ids=387,388\" Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "For a list of disease ids, return the matching disease objects",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/disease/{diseaseid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "DISEASE ONTOLOGY ID, e.g. DOID:3319",
                  "example": "DOID:3319",
                  "in": "path",
                  "name": "diseaseid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "description": "A matching disease object"
                }
              },
              "summary": "Retrieve disease annotation object based on pr disease id, support JSONP and CORS as well.",
              "tags": [
                "annotation"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "CORD API metadata object"
                }
              },
              "summary": "Get metadata about the data available from CORD API."
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Pass a search term to filter the available fields, e.g. \"search=associated_with\".",
                  "in": "query",
                  "name": "search",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Pass a prefix string to filter the available fields, e.g. \"prefix=refseq\".",
                  "in": "query",
                  "name": "prefix",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "MyCell.info metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from MyCell.info."
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string. Examples \"PMC6836328\", \"31045\", \"PR:000001978\".",
                  "example": "associated_with.pmc:PMC6584579",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "description": "a single field or comma-separated fields to return facets, for example, \"facets=pr\"",
                  "in": "query",
                  "name": "facets",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response object with \"hits\" property"
                }
              },
              "summary": "Make disease query and return matching disease list. Support JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms seperated by comma (also support \"+\" or white space), but no wildcard, e.g., \"q=1017,1018\" or \"q=CDK2+BTK\"",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "Specify one or more fields (separated by comma) as the search \"scopes\", e.g., \"scopes=entrezdisease\", \"scopes=entrezdisease,ensembldisease\". The available \"fields\" can be passed to \"scopes\" parameter are listed [here](http://mydisease.info/doc/query_service.html#available-fields). Default: \"scopes=entrezdisease,ensembldisease,retired\" (either Entrez or Ensembl disease ids).",
                          "type": "string"
                        }
                      },
                      "required": [
                        "q"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with \"hits\" property"
                }
              },
              "summary": "Make disease batch query and return matching disease hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease2gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease2protein"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease2cell"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease2cc"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease2ma"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease2bp"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease2genomicentity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease2chemical"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease2disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease2anatomy"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://biothings.ncats.io/cord_disease/"
        },
        {
          "description": "Production server",
          "url": "http://biothings.ncats.io/cord_disease/"
        }
      ],
      "tags": [
        {
          "name": "disease"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIANLDqF4C_-1b608jORL_V6ze-8Bo82KYB4OEdMPjZtkdSJZwujsRhNzdTuKlu93YbiCL-N-vyu53mk7gOGlYMR-YYLvsqvKvng73johZRGPu7BBnqzfoDZwOcXg0FTBw73gi0tTT5jMLKQ9w2ZwF8d9dLvScR3ymelwgTURDhrO_Hv3r8IT8--gEB--63DckWsdqp9-fcT1P3J4nwv4Vu-HRHY--DOxCKQJDL5mKRaS4GzDisxsWAIPSeYA1PlOe5LHmIsKFB8JLQgb84QARU6LnjOwPTw_I7wmTC3LLXKKYvOEeUz3ynVEZkVBIRqgrEk3OcenFBnIGjKXigDSRRzXK1PeE9C99rhhV7B3yqJkM1XA6tntmYgFxuEiX9VBxfbOubyi4tkIZtg7sIvJ1dISTN0yqVJRNUDtKiOzCKAyd39fFPYw8uYg188lICj_xjNSWAHdLZFBW9Ap5-njc0hGrNl5r3wuUm85SITJUpPP22GyQRpGw11cdv8b7qw5pSSMVUC1kdTznxx4cUz1XBq397ET8JRbKYjimEgh1ruO_STbFbX4CKUKAHcBJ9YtF_Slnga_K8E5HDBOrqH2hzfIyfT621g7W5krkdsDIKhnoSek94S9yWwV685nGccA9o9r-Xff29rY7FTLswl2yyBM-880q5c1hP6sYiWamObPa4779vwaQMAk0j8EwD47Gh1_Hh2R4cjb8Pvz2H5JqG-gAOrATRaC6CwJihbRDWG_W65AJ7ru7tf25s7W9PXHIidAMrJZq4iVSAu8BWi0REfyv6RUzFs2jGKwVN05iogXZHAwGJKR3PEzCjlkBHkOTWx4ExAXikGs4u2fMbxEbpSktASLOw0OqNS6NAs6NmBcPD-mE8TupAt4PBk0K-EoMNkm2mAj3D-bh6XoO4s25ViBXqsyFPVEloAKJd-T8Q0hCScCBX_BXqc5Qtg7sqBNwUChPSLWHmM4X2EMMDDPLKtvOhTkmA3z_Pr-LByPCjDVjv-5O61d6dGDvjRwMjw52trY2vyAD7I6GsXVqlXFuNkH7q6A9Y8Wpql7LhKFqCgA23NWPb54eDQKXelflHfKxFzDwtRD5CFyWwHfKQLUQUPN1BYQyGLsw7IP9AYJL6OwQlcSxkJr8Oh6ejIDOxzg7JlSBuQZBbwUwQVTqU01b0fi_qXptdZlADAGYZEw9pq1vTBdrbMaAtml_vYE7opigTKUISbZnz6nKm8HzCUY4okqBhwDNS29OMJFAlzflAXw055eONpunJjpxLMku0AuPo_e9RJ80cXqFcdqwWtKfpXHWMMRmNmO4M35H7Mp1GbVEu_BTset2_uxS5wUcxQuh53ixj3jHLK8Ah5XvOThKKWtwKh2SIcpq5gk4shmwVVGPHFqfrUD7o-P9T9tbn7beQ_zFgLy1Ofjw0X4cne4M8N_ml8_b6b2UnH0NWL049HZws4_bHz5-_tJyidc_outX_E9WsQT8fT1K8IMVSvy9yUbAikGaDP8EIr_JhbqQHlGbHqXXD3aTBv8p9ZgGS4FcjaSqx4uxw7uxnDgterar_v_G8iMkvk2m-lj6-4cy91HJdhtPt_Oqb2znlCnIdR2bGr5sEniMmW0WXe1OGFFTDCxFc8wWe2T8hAhsoXGBx74VPk8sfK5byx57W6a-byhzyAYNlMiTpYnzM8AATPkWEMGIisFA33WICxEgEliv-B6VflEbXe9uDjY_d-DHtqXDof2D397_vHf2mzX9ujkbYwf-G4u1ccw8Pl1AOsdwN9P6SF3ORuGEMubfIZYwMqW5xyTdGWNDxqEd2QVdS_Znik8bO5pmOgxsI3SDfGGPnFUSg0mKKZDWoxEWbzFEGeAJPGJxPMlRQai05gBLzudMsrx7U2vA-MKzIfMy7f_05joMfspP7tpz30Fpw6YULndnPRE6YKMYxYCpDQbGDiwdmuWo30O7tFzVvVuvCr1eUYO-rGcbDcdnbd7t9ybfpp7l3Fz0ZWu4ONy0yYOZvqCrWfdqprrCmBsw2ebBmpZnhfH7GYvagnwrLQisGY-eS-6Bk342rfdcSsDEMynd-LmUoGQRgslFmuvFs0UGvALKn62ySrfx6eQ0olqEwP2FtZCCbjmW3hepUYMPXojE-LbYFkyTfHHFr4G_C9FuaBrecVFbXVRO0NqTvSLqNjCHfkWKwHh9jJJUZ110a6hFino7Z1HmnEteu5DAvBPwSBE4j2T1f17yWQJTm6LvKkoIH4PC0RSWYFWQRb1NjCkVNkqFenFUnmBPnKWq1zLeIQKd9C1cK9nAPDpQ-SGDiQPBuLRHVpCm-brxdzCduN00gUc2ZUSR5TxsINttN1VOhBpuyhUiYDSyV5W9ryzdEygIcYTRT7JZElBJEghsClkSicwfOTrYPMU0J5F0xgwNIAs81w33GZCADybmkA6BNMX0XYHAhl5tcCgBVEbzicIdQFFTEQTiFluvRiGwZ5u4eda2ApWlxshS1fR4lRTwkNvqOR0rYIp1c2PrFENLG8dFnruKZTiiiWE8NUpCF9QH19F4PvKurngMatcUUk2YNgwPemRfhC6PcCSNr1iIli0LDYGrLD-Ca58mgakPYzoztX0OxUGrmMh9s5AckosZvrCZSI518CNSpj33daRNA_1GakQejXG56dxTe4OhwKe7cga22SpAVrCvFADL8UcEeBxZSAV5co-MbEcrvYwuegPQNe7FIh8lFdLHSyn8Co8gca7MlmQy-0KGnSsKkkzIrJDIZ1WiNtnTlkMbQh_yeWtW9VTPPOpoFtpZiB_DqU2javXPpeHQfLQhwaAnEFSXU1kLAVN_FK2pJqvJxrLm2EV5kEpJTYrglEvuhqIMkPdkvrQQV80wMZOaBo-DqM61uRr96cOlkJeWaSSFjCBTYqHZgjlDUWauwkBdBetRGvVZ_a7BS0O12HBufZVt2j-Sd987pdzSHofPc2NrU0LiRh0LZRhOM3X7FQB8LTIoBoxCcuiZsSxPw1Qf_N1cmKWma9Ex_V_fJAz2ewGBCfDafNtAQZCzb_Bn-cswOWN3mhxbfzqyYc88YYtE17n5Nqzzcgyh2MPg-tXT_CZPXu3y4-FojfX2BbqSHOaRrp6jmOswz2U7eYO3obfhZh-wMeHcW7WeDy4enHLtD3kGN40VZ84oCo3nreyE2NLNNCv20EEVzdms-rsMYRdExU57Hp2t76brKxWIUUupmPlrwQZ79YiC_UwnbzBYhgGWsBUYQH3514LBHheBmGHNCqSQi6s3GCzDALsKFRhkhfZrxsI_9w5Phyd1fr4ayRAPh2kn5A0OdTjkbZYKJkyX7jUD4pdvJ_t1br6Z1uMbBOoQsC3Z-v2XGoivGQjjYQMMULY3l9CCh3L3uAKMrAX_miExOq3zMsoeFt7AUAdD_uZSrSDwKeU1Y2D_e1MN8QaAhrLB6KVy-8W3ul8vAFZy84aCMgryx7yqG8ieCF-1K_jlcO9oyRukko0TV2kaeW-gaHIN-QuxbYo2L1_uWN47ceg98n1GlBwbfQ2zoYhxFur-hsmZsH-eVG5xrTpnrZ1Ml-RFdioK7VXbpeVsw4LEZdL-pU69Vlu1p6mIGqbns8ir71fJ_VdtPG6UXVVlL_LGVdtBdtY0KavXa_OPVXtBlG-Y9ILKXpW_UWrdzvithuncPhv84koWjfdp4nLOXI6PSg__BUxiF5MfOAAA"
    },
    {
      "_id": "3c5e198cfb362c654ed695727b7e02f0",
      "_meta": {
        "ETag": "5e9ca61e0737a7e93b03eb31c6fbd5185925514a294f75fea3eb2b539c3629d3",
        "github_username": "newgene",
        "timestamp": "2019-10-22T04:25:22.129900",
        "uptime_status": "unknown",
        "uptime_ts": "2020-09-17T00:09:47.470415",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/ensembl/openapi.yml"
      },
      "_score": 0.8,
      "info": {
        "contact": {
          "email": "help@ensembl.org",
          "name": "Paul Flicek",
          "x-id": "https://github.com/paul",
          "x-role": "responsible developer"
        },
        "description": "Ensembl REST API provides language agnostic bindings to Ensembl data.",
        "termsOfService": "http://dgidb.genome.wustl.edu/contact",
        "title": "Ensembl API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/variation/human/{dbsnp}?phenotypes=1",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put dbsnp ids here, e.g. rs56116432",
                  "in": "path",
                  "name": "dbsnp",
                  "required": true,
                  "schema": {
                    "type": "string"
                  },
                  "x-requestTemplate": [
                    {
                      "template": "/variation/human/{{input}}?phenotypes=1",
                      "valueType": "http://identifiers.org/dbsnp/"
                    }
                  ],
                  "x-valueType": [
                    "http://identifiers.org/dbsnp/"
                  ]
                }
              ],
              "responses": {
                "200": {
                  "description": "list of phenotypes related to the variant",
                  "x-responseValueType": [
                    {
                      "path": "phenotypes",
                      "valueType": "http://biothings.io/concepts/phenotypes/"
                    }
                  ]
                }
              },
              "summary": "Uses a variant identifier (e.g. rsID) to return the variation phenotype"
            }
          }
        },
        {
          "path": "/variation/human/{dbsnp}?genotypes=1",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Put dbsnp ids here, e.g. rs56116432",
                  "in": "path",
                  "name": "dbsnp",
                  "required": true,
                  "schema": {
                    "type": "string"
                  },
                  "x-requestTemplate": [
                    {
                      "template": "/variation/human/{{input}}?genotypes=1",
                      "valueType": "http://identifiers.org/dbsnp/"
                    }
                  ],
                  "x-valueType": [
                    "http://identifiers.org/dbsnp/"
                  ]
                }
              ],
              "responses": {
                "200": {
                  "description": "list of phenotypes related to the variant",
                  "x-responseValueType": [
                    {
                      "path": "genotypes",
                      "valueType": "http://biothings.io/concepts/genotypes/"
                    }
                  ]
                }
              },
              "summary": "Uses a variant identifier (e.g. rsID) to return the variation genotypes"
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "http://rest.ensembl.org"
        }
      ],
      "tags": [
        {
          "name": "phenotype"
        },
        {
          "name": "variant"
        },
        {
          "name": "genotype"
        },
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIALKErl0C_-1UwY7TMBD9FSsnkJak3YU9rIQAiUXaExVbuKA9OMnUsXBs4xkXVlX-nbGTtKUqQkLigMSpjTPz5s17z9kVzoOVXhc3orgqF-WiuBCFthvHB7tiCwG1s-nlcnxFmgyk51uL0NdGvFndpfMWsAna01Q9v_1we79OJcIHt9VcJIy0KkoFQirrkHQjam1bbRUKcmLuayXJMs-D0OP7zT2ErW7y4I7I31RVq3Rblwqs66H8FpFMCW2sGmdJNpRa579pESv73LyS0Yh3hqG-pJLvz4Ib1wmA3lnUtQHRwhYM6xJSCfRSmzwXjH8NI7_SBTX263bmhExKaepiXTaurzxPKoaBi5C5s45c93lXxGCOluCpVJ5gnii5Cq6NTXoSI1AxPCRdpJoQ59V8x1rQo4eChx6OtzJoaennQ3W2lIK0aCS5aYaX1GGWr8ooiUTVxV7aatfWaP3waj8UXy5zpYJRcIx9L8Njgv2IbLsUExHBKbCkNxqCeAKlKkXAu7dPk_kBKAYrqAOxnycOa2VGgbnSXs2ZeWYzJjdLwcTPSRlJ5ErmgKKDABdiYvDierm8fn51mboCfI06QDKWQoRs81aaCOvEgufO7h02wWRelbGr4mEMFqOwu2voPUsKI99jmN-g5Ozve884sNPWRxpOPMjGYdNxbLMPNA1DCnzHOJAPF_uww2ju5WKRf0_UMhpJuM3BAGSDEp02ebU3ydJ0kSbMT8dK7UYrjtOJqfycDrV21KXvQKldusYNeMLq0FfxbsOQb9Qv46j-dhrV8Rb_03gmjeofCKP6syyq0ygOww9b1r_IQAcAAA=="
    },
    {
      "_id": "0c9f1154a1986f1774057af4c1caa5b2",
      "_meta": {
        "ETag": "d9751fd5b730907378cabef9b34e9166e9d964ead6494ee6d5c6d9681d8eeecd",
        "github_username": "kevinxin90",
        "timestamp": "2020-05-27T16:52:53.428773",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:08:57.208962",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/semmed/semmed_anatomy.yaml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call. Type: string.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned disease object. If \"true\" or \"1\", all fields will be collapsed into a single level deep object (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Type: boolean. Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us with an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "facet_size": {
            "description": "the number of facet buckets to return in the response. Type: integer. Default: 10. Max: 1000.",
            "in": "query",
            "name": "facet_size",
            "schema": {
              "type": "integer"
            }
          },
          "facets": {
            "description": "a comma-separated list of fields to return facets on.  In addition to query hits, the fields notated in \"facets\" will be aggregated by value and bucklet counts will be displayed in the \"facets\" field of the response object. Type: string (list). Default: None. Max: 1000.",
            "in": "query",
            "name": "facets",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated list of fields (in dotfield notation) used to limit the fields returned from the matching disease hit(s). The supported field names can be found from any disease object or from the /metadata/fields endpoint. If \"fields=all\", all available fields will be returned. Type: string (list). Default: all. Max: 1000.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "format": {
            "description": "controls output format of server response, currently supports: \"json\", \"jsonld\", \"html\". Type: string. Default: json.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching disease hits to skip, starting from 0.  This can be useful for paging in combination with the \"size\" parameter. Type: integer. Default: None.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "prefix": {
            "description": "Pass a prefix string to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          "search": {
            "description": "Pass a search term to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          "size": {
            "description": "the maximum number of matching disease hits to return per batch. Type: integer. Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated list of fields to sort on. Prefix each with \"-\" for descending order, otherwise in ascending order. Default: sort by descending score.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "Disease": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Disease"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Disease"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "AnatomicalEntity-affected_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-affected_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-affected_by-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-affected_by-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-affected_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-affected_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-affected_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-affected_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-affected_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "affected_by"
              },
              "path": "/query",
              "predicate": "affected_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-affected_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-affects-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-affects-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-affects-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "affects"
              },
              "path": "/query",
              "predicate": "affects",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-affects-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-causes-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "causes"
              },
              "path": "/query",
              "predicate": "causes",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-causes-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-causes-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "causes"
              },
              "path": "/query",
              "predicate": "causes",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-causes-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-disrupted_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-disrupted_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-disrupted_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-disrupted_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-disrupted_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-disrupted_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-disrupted_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "disrupted_by"
              },
              "path": "/query",
              "predicate": "disrupted_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-disrupted_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-manifestation_of-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "manifestation_of"
              },
              "path": "/query",
              "predicate": "manifestation_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-manifestation_of-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-manifested_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "manifested_by"
              },
              "path": "/query",
              "predicate": "manifested_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-manifested_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-negatively_regulated_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "negatively_regulated_by"
              },
              "path": "/query",
              "predicate": "negatively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-negatively_regulated_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-negatively_regulates-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-negatively_regulates-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-negatively_regulates-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "negatively_regulates"
              },
              "path": "/query",
              "predicate": "negatively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-negatively_regulates-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-physically_interacts_with-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-physically_interacts_with-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-physically_interacts_with-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "physically_interacts_with"
              },
              "path": "/query",
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-physically_interacts_with-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-positively_regulated_by-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-positively_regulated_by-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-positively_regulated_by-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "positively_regulated_by"
              },
              "path": "/query",
              "predicate": "positively_regulated_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-positively_regulated_by-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-positively_regulates-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-positively_regulates-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-positively_regulates-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "positively_regulates"
              },
              "path": "/query",
              "predicate": "positively_regulates",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-positively_regulates-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-preceded_by-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "preceded_by"
              },
              "path": "/query",
              "predicate": "preceded_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-preceded_by-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-preceded_by-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "preceded_by"
              },
              "path": "/query",
              "predicate": "preceded_by",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-preceded_by-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-precedes-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "precedes"
              },
              "path": "/query",
              "predicate": "precedes",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-precedes-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-precedes-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "precedes"
              },
              "path": "/query",
              "predicate": "precedes",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-precedes-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-predisposes-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "predisposes"
              },
              "path": "/query",
              "predicate": "predisposes",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-predisposes-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-prevents-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "prevents"
              },
              "path": "/query",
              "predicate": "prevents",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-prevents-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-related_to-AnatomicalEntity": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-related_to-AnatomicalEntity"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-related_to-BiologicalProcess": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "BiologicalProcess"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-related_to-BiologicalProcess"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-related_to-CellularComponent": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "CellularComponent"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-related_to-CellularComponent"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-related_to-ChemicalSubstance": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-related_to-ChemicalSubstance"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-related_to-Disease": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-related_to-Disease"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-related_to-Gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-related_to-Gene"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ],
          "AnatomicalEntity-related_to-PhenotypicFeature": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "UMLS",
                  "semantic": "AnatomicalEntity"
                }
              ],
              "method": "post",
              "outputs": [
                {
                  "id": "UMLS",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "related_to"
              },
              "path": "/query",
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "umls"
                }
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/AnatomicalEntity-related_to-PhenotypicFeature"
              },
              "source": "SEMMED",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "AnatomicalEntity-affected_by-BiologicalProcess": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "AnatomicalEntity-affected_by-CellularComponent": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "AnatomicalEntity-affected_by-ChemicalSubstance": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "AnatomicalEntity-affected_by-Disease": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "AnatomicalEntity-affected_by-Gene": {
            "pmid": "affected_by.pmid",
            "umls": "affected_by.umls"
          },
          "AnatomicalEntity-affects-BiologicalProcess": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "AnatomicalEntity-affects-Disease": {
            "pmid": "affects.pmid",
            "umls": "affects.umls"
          },
          "AnatomicalEntity-causes-BiologicalProcess": {
            "pmid": "causes.pmid",
            "umls": "causes.umls"
          },
          "AnatomicalEntity-causes-Disease": {
            "pmid": "causes.pmid",
            "umls": "causes.umls"
          },
          "AnatomicalEntity-disrupted_by-BiologicalProcess": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "AnatomicalEntity-disrupted_by-ChemicalSubstance": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "AnatomicalEntity-disrupted_by-Disease": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "AnatomicalEntity-disrupted_by-Gene": {
            "pmid": "disrupted_by.pmid",
            "umls": "disrupted_by.umls"
          },
          "AnatomicalEntity-manifestation_of-BiologicalProcess": {
            "pmid": "manifestation_of.pmid",
            "umls": "manifestation_of.umls"
          },
          "AnatomicalEntity-manifested_by-Disease": {
            "pmid": "manifested_by.pmid",
            "umls": "manifested_by.umls"
          },
          "AnatomicalEntity-negatively_regulated_by-ChemicalSubstance": {
            "pmid": "negatively_regulated_by.pmid",
            "umls": "negatively_regulated_by.umls"
          },
          "AnatomicalEntity-negatively_regulates-ChemicalSubstance": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "AnatomicalEntity-negatively_regulates-Gene": {
            "pmid": "negatively_regulates.pmid",
            "umls": "negatively_regulates.umls"
          },
          "AnatomicalEntity-physically_interacts_with-ChemicalSubstance": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "AnatomicalEntity-physically_interacts_with-Gene": {
            "pmid": "physically_interacts_with.pmid",
            "umls": "physically_interacts_with.umls"
          },
          "AnatomicalEntity-positively_regulated_by-ChemicalSubstance": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "AnatomicalEntity-positively_regulated_by-Gene": {
            "pmid": "positively_regulated_by.pmid",
            "umls": "positively_regulated_by.umls"
          },
          "AnatomicalEntity-positively_regulates-ChemicalSubstance": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "AnatomicalEntity-positively_regulates-Gene": {
            "pmid": "positively_regulates.pmid",
            "umls": "positively_regulates.umls"
          },
          "AnatomicalEntity-preceded_by-BiologicalProcess": {
            "pmid": "preceded_by.pmid",
            "umls": "preceded_by.umls"
          },
          "AnatomicalEntity-preceded_by-Disease": {
            "pmid": "preceded_by.pmid",
            "umls": "preceded_by.umls"
          },
          "AnatomicalEntity-precedes-BiologicalProcess": {
            "pmid": "precedes.pmid",
            "umls": "precedes.umls"
          },
          "AnatomicalEntity-precedes-Disease": {
            "pmid": "precedes.pmid",
            "umls": "precedes.umls"
          },
          "AnatomicalEntity-predisposes-Disease": {
            "pmid": "predisposes.pmid",
            "umls": "predisposes.umls"
          },
          "AnatomicalEntity-prevents-Disease": {
            "pmid": "prevents.pmid",
            "umls": "prevents.umls"
          },
          "AnatomicalEntity-related_to-AnatomicalEntity": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "AnatomicalEntity-related_to-BiologicalProcess": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "AnatomicalEntity-related_to-CellularComponent": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "AnatomicalEntity-related_to-ChemicalSubstance": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "AnatomicalEntity-related_to-Disease": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "AnatomicalEntity-related_to-Gene": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          },
          "AnatomicalEntity-related_to-PhenotypicFeature": {
            "pmid": "related_to.pmid",
            "umls": "related_to.umls"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothings.io",
          "name": "Chunlei Wu",
          "x-id": "https://github.com/newgene",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the SEMMED disease query web services.  Learn more about [mydisease.info](http://pending.biothings.io/semmed)",
        "termsOfService": "http://biothings.ncats.io",
        "title": "SEMMED Anatomy API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/anatomy",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple disease IDs separated by comma. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted. Type: string (list). Max: 1000.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Disease"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "A list of matching disease objects"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "For a list of disease IDs, return the matching disease object",
              "tags": [
                "gene"
              ]
            }
          }
        },
        {
          "path": "/anatomy/{anatomyid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Retrieve disease objects based on ID",
                  "example": "C0004096",
                  "in": "path",
                  "name": "anatomyid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Disease"
                      }
                    }
                  },
                  "description": "A matching disease object"
                },
                "404": {
                  "description": "A response indicating an unknown disease ID"
                }
              },
              "summary": "Retrieve disease objects based on ID",
              "tags": [
                "disease"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "mydisease.info metadata object"
                }
              },
              "summary": "Get metadata about the data available from mydisease.info",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/search",
                  "name": "search"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/prefix",
                  "name": "prefix"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "description": "mydisease.info metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from a mydisease.info chem object",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string.  The detailed query syntax can be found from our [docs](http://mydisease.info).  Examples: \"cancer\", \"primary ciliary dyskinesia\", \"DOID:9562\"",
                  "example": "cancer",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/facet_size",
                  "name": "facet_size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/facets",
                  "name": "facets"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make disease queries and return matching disease hits. Supports JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms separated by comma (also \"+\" or whitespace).  Does not support wildcard queries",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "a comma-separated list of fields as the search \"scopes\" (fields to search through for query term). The available \"fields\" that can be passed to the \"scopes\" parameter are listed in the **/metadata/fields** endpoint.string Default: \"scopes=_id\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make batch disease queries and return matching disease hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-affected_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-affected_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-affected_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-affected_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-affected_by-CellularComponent"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-affects-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-affects-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-causes-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-causes-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-disrupted_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-disrupted_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-disrupted_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-disrupted_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-manifestation_of-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-manifested_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-negatively_regulated_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-negatively_regulates-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-negatively_regulates-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-physically_interacts_with-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-physically_interacts_with-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-positively_regulated_by-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-positively_regulated_by-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-positively_regulates-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-positively_regulates-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-preceded_by-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-preceded_by-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-precedes-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-precedes-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-predisposes-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-prevents-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-related_to-AnatomicalEntity"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-related_to-ChemicalSubstance"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-related_to-BiologicalProcess"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-related_to-Disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-related_to-PhenotypicFeature"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-related_to-Gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/AnatomicalEntity-related_to-CellularComponent"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "https://biothings.ncats.io/semmed_anatomy"
        }
      ],
      "tags": [
        {
          "name": "anatomicalentity"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        },
        {
          "name": "semmed"
        }
      ],
      "~raw": "H4sIAOaazl4C_-VcW2_cNhb-K4R2H5KsPXa62QA1UGCTOC1SNIkbZ7EPsWFwJM4Ma0lUSMr2rOH_voek7qJuY43b0eQlY5E81-8ckoeU7h0WkRBH1DlBzj9nx7Nj5wA5NFwweHDvuCyU2JX6Nwkw9VW3FfGjf88pkysaLsWMMjUkxAFRje9WcegTiv4bq6d3h9TTQ6SMxMnR0ZLKVTyfuSw4CsntkoTE9OLM16M5ERELBZ37BHnkhvggHXceoI9HhMtpJCkLVcdT5sYBAeHUA8QWSK4IOn__8eP7U-RRQbAg6HtM-BrdkjkShN9Ql4gZQr8RzEMUME4QnrNYom_BOhkwU2pfPlOygqhgFg_0mxUVPRIkCIj3XAktCQ_E58W5IZ0qCQPzAaGLZWofSaVRMRHyTYglC9bozdkH1XxDuEhUewk-UBoroeEpPPp2X1X_jDMvdrXuppuiEXO_aOu6HIn4V9jwdh4ulWB4mfBIXWiaqYt9MDCVayVNsTVkxuzl59ra5UeS41D4QIyXn2eSlR8b6YxUEZYroWF3lEqr_oiYMGCMMIdRMrPP3zlZKBp_OwJsAYRAcnGUdzrymFxQ4ntFqGbPtBRdFHRXURyfPOk12gRPYbB50I8z4wGWJc7mibYUJ2B5Id8yb52FLFDQv3EU-eBH5ayju8Pb29tDNfIQgEJCl3nE072EuwJpjFm5CjhJibE99cz_FfQFsS9ppEI0ibQPpwJwqESWxEPzNQJFAjxDn5gkEJlYIjfmHKTyVTwiFsL_El8THbU0jCAMgRWKIyQZenl8fIwCfEeDODjQPSArSHRLfR_NYXBAJXCZoa_riJwgITkgCT3zqZDPZ-gjvjvRFGY66KCLRpbu5Dw8JPaiXKv-TSt4-fCQNOjck6j-w_Fxqzn_ENoWJetRSQIz2upS01McnRqr6SBPJcScY4ieB0uqe4OUbirHgc9dFTeZ3dn8D-JKDUHn1QYCt4r5nnPGvxABzm4SLDUZ-NDTfEA2HCIaGByBlw1SFSqS_KAzWwzo4Aquzs-MI5wpWMDTARCXMaRqBYAGxZ1C-nL0ZHKp6acp4-g--UG9B63vktizR0WxLwTwArNP1c5oDn94AF8QUPEmdziITFZ_B5B7dfzjazN7qicqgxVjNhPFKYNQ8pgom-ResaD2KRIc5Ht_jt3rIoXs2Y6nyMdGdr94tgdJE3hN0L6yJdjGyIrD65DdhoVAqUVUX_BmgZP0S2MHLIo9LHFrwAzBkgkHE_5WaDW7qDrvlFZqKJU0M2jFEr8Qmfcxiz2VTMyfN4AtrJaZC84CVKZcMk9mj4p9UrQ_xkzAkrulLJE8eaKAjaCd3hXHJ0-2FnQ9PWpsu4ljk5EV_-KKh5EKXdssUvW2ge2AueN3vekwqRu2G1-VXECT-ukUiMQati13yIVwhuXMgsWhZ4RkMUffPOaKbA9SFhqWN-i9mXLECboAX4cu4Rcg_wX4jSrrIJf6VP3vrcU1DYmg2LSffv5wevLjv17_cOFUZi5DpSVQv_9VJ6zHTTcL7BJ5Jej_SIlC_rQXFcF4KQL0308UvY-aMJWeoqZ5T9tVrdbfXgroJa7q77_-FK-jun0tbII7m7dvqVzprHThrKgUFw5K9lbrHV6tf1R7tmJ5BTaKQMJL1-q1pY5SfYbO4yiCuBDo1_PPn870gHefv5wjLGA36PuzUgY2nC8V5z9xt_-o2HpUXnpEbP1pdYLvrVUCExm6XmapEqBn2BcMwuQfECOwG7wFzABQIRup-e6UAcJCJpEwGFJlAM_F3EvhZ9vm69kJBLQWL7Bhe5hLku4-06WD0HFrVmIglyEFwj1LOkiWNsoVZ_FypeKmoCXIrab9fAlykQAAaJhiiJn6IyzUihzImTyRMcp8ijAnWjzoRs1W-MWL6gr0xQtEQi9iNJSzpBpyShYYrH-SEf3pinoXjr0mMlr5ozuDnn0-_9qWo34v59B05zLdXDpXCXNwRrXlS11Gn0tyeL0Uh0oErXtbvrR1P3qT1X7f69rvIV4swAfEu5qvD9-BeVTTeTwXUi0bW_LScOpvKfPZUjWeceYSIUalXii6jUbzF1VyGpPgO5gNYx_zdymRkaiLkdUXW3CWi2NIPqMJmpAbX04IRB5HW4uIEvktSz-WrUtERwmKAId0AasV3X7FFluwRMpiXFOEZAlNN8RfX3GyhFjeGlAsnMRTsRnFx9FqLdSfQBmWLtAP8sqVmuq3oEUzr3FUYYI-jdebOG1LDfE0OowFKU5c4o0b0UWa42ehhLoYW1yxHVkh04P3xhX3RnUfjSAnJiYkO6y2jUl7_KgoEB_fdQXiWzD02YrAFn0dUfdngmHbMirxURJD0XP1Nfal2eTlVOtFp_u8NmupKaxZrDf1akePsC7Nm86lzTxs9AO16cNJHUx1Kl9jmPU5L-usveelLouoapPMma-302aLmt6eMjtO2K-WDw5n6MMCNFJVf1OguXBeqjMFECetmKRXM1zm-zgSulgBymIkQCSfIF_d5EIeIVFCU9V8fBTq1Vdhl2-oWIYdoFjoTXCiGEqvIOlaDF3CSm6tdUhIgjFiVwHxeWLeOWM-weEsr4wssC9Im72LNUSLvROKxuDp1biatcF0ChuqjGOmOg6aAKKUzdVxT3ox7UBdi1G1tpjjJdFjQLOIsxvqERhiSiCAMM3pAAlmKkkwyhSTpAYYrGuutR1iociAsxbgEnarbtZoCkC4Tees6tkBsMIpiUVp7Yg4mINEqqqm-qJ57F4TqWtnSWUjqWelhZQ0ENTybEl4wVMvj6vXehqkL5_oWFRIaBd02KxCmCthiCAGyEIfQoQ9j6awNPVAVa4xl5iSsRq5ppx3kcgAYZVhf7nkasFt6qM32I-JrgYp8_lgRgBIWAgVNR37eJ1XBwskTaBksV0qqTVcnspM_gnS4BCjiz6YyY_Lh9r7GWhXC_3nKpJ09dSnAZVFG2eZTB-rWi8QgV-eiaRQm5SWVX_DAVQTlvNZHK4ruVFHWMqjWpfNq7Img5qnP0HmS9Nn4ZC6nEhTBbr8pCeQfm7KziS63GSODJpnDkB7LNWNvXz2MFdQM5AdFG77JbbV59WqDmtOo9Uv3zO_VzIAg1TmwVxF1bVVsezQo0sxddLYma2s9VY9y1xTmIZgrcd1rVd7_Vgf8NMMKwDIRezr04AIL1U3AC5ge05DM1sVCtkqTRVXB835TwdjmwWSI9WuhJdc7bCY4MwsW0yHFGyg84L6elopHWYYJDX6q0va_MpJh7-SmzDN4qZnMIQH2xI2v5_TJWzLVJhcZe0DsmRWgYWsORlonRTb5O45B-rbCg1id8-BarSe-s4McAgGd2iIXziHagaCOFCEzUV6yJUe4QeIAXF-S_XRCcLl1oKCmjjMgQUCwmW83V3JZYw2Zz1k7WYuSrdDllPNK-o1Orx0i1h1vCwcrRUu-BWPkiwsYKJRKzUrG31c5OrtX-PC08KxetBWvpgMM8bnRcuhkOWOct0u2hH6ZzZbOAufmTScimTgrkXKL1HZTFnV4dJyLzrVq9mS-lxsnEvY8ARidrCWkrFre6jpRon95kC0-BHaX7-6YvzKSKWGggqp83Itc-H0iKJwJQGqOvYbqZ1hvNVDFguELXyrvcxVu4bTy3tn4JGkEUm9U3BuchfjitmByRvwODkTNS8m_efjb-c6ZQAogLqrT3drdSMV3DBLr5geo6-l6OwZc7fwTo96ZtZGnSws5SPz1kup5JAtmZ2Cytqq-nL5SXY_0XK9Y57-UHcznHuj-bfjyweneDvCiQNfpEfTeqX2Vs07-S2_dE13FeAoUt46aS_EpP0Pk_4bHCg7us7owqRT01zZaOAZ8k7AwVLw20c4WOuej4FDPrnvAAiyGWkfXV-cjh_hcF0s3glvm7L2Pro6Leg_xs_1Iv5uTPuWs4d9nPZt15w2g4OYbo4X03C56MrtosPBe7Wmm4zTe6_lmtxfuQ84ofA2mu26o-v3NcveTbVsc-6ehPakHN4jsFtd33F_dpLlm6LOuw6D7vvPZTCUde-GxJ7khMlCokd-GAqJCa4BJuv-xvXAUKdPqpQzWXfbizk9fN3jDY9J5v2q3ruOhn5v6pThUbdBK0QmOwmUFJwKEDqmgYrOVsf3f4lqkruFBvV3HSCDXo0rg6bRIn3hI_YYO2KCwBEbokYMgcykVqB7Awz7inQAFoa8lzrJHNJogF3Hy8A3jssIarHKQBhNKq_sIVjsGWYwPnq_Mz7NJGNXf-dRM-RLABUANVlkEHymlVz2CyQNieWxuBB7nFPEBLEiNswmYghkpp5HpgmM3hmkEQuWL6hMqOJaUG_n_W__1k3F80V9Ox2-J0cwEwVBj4OX3nAQEw5-MRGni86wF11O3q-An47j-4d6CwRq3_KaVqin6k3A6bavrtW8nevb5PDyh9am5W2t2wRcXfsYXs3PiaZWJ7d9_G4n_G1n0ej4XN9dd33HZwvLKCiq3YWDPSn9TBIJPco8Q6CwJ6u9SUKhx4pvCBQmuAiYpNsbFwJDnF3_POtOuN3yVdn9A4D107qbQ2FSVf1JOtxewR-04tuPbyNMc8XX_WWEEhTyD2dV2Wz26ax7o375Awwz_UzJERj3Fdv0s4dNvsu0LV7FL_pth0OSRbdF3hbA4_MSLYYSDZRFD6p9XL0J_dr3AHKipqlGM3ncSbJd4k2Jd77nnLModq0xKjX2ZNeu0ejsbD4ZnUkt6Mbg0OsttJxltXuNba1DN-tmE5Z6NLLqUnHIyzQ574ZRNSma-g2SRwwXRvSRRAwVo4axbXAedr88l6VxXE2g5p6bSFUzypYFGXAvtiCTfVRdooZ-w-Wpm-UpRRDD7SH6SCKGitHHDI_nbL2VVOCZt9dZFdr6cWifA0bjJdpUEU20RR_CvTTYlIXl3LhEO223kc_aWjlUDypL5HWjjbZpaCbcfjiW88j71bgUmnrxaY_RERm1O3xERjanjEjeVqrcCqNa2hrT6637tyGM4N__AYcvazyhjwAA"
    },
    {
      "_id": "a5b0ec6bfde5008984d4b6cde402d61f",
      "_meta": {
        "ETag": "06f3dcd761bc8a044e65dd865d77bea21d4fd397b26f84a1a44aa527b8a3a36b",
        "github_username": "kevinxin90",
        "slug": "hpontology",
        "timestamp": "2020-07-27T23:38:04.582552",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:20.949679",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/hpo/smartapi.yaml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call. Type: string.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned chem object. If \"true\" or \"1\", all fields will be collapsed into a single level deep object (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Type: boolean. Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us with an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "facet_size": {
            "description": "the number of facet buckets to return in the response. Type: integer. Default: 10. Max: 1000.",
            "in": "query",
            "name": "facet_size",
            "schema": {
              "type": "integer"
            }
          },
          "facets": {
            "description": "a comma-separated list of fields to return facets on.  In addition to query hits, the fields notated in \"facets\" will be aggregated by value and bucklet counts will be displayed in the \"facets\" field of the response object. Type: string (list). Default: None. Max: 1000.",
            "in": "query",
            "name": "facets",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated list of fields (in dotfield notation) used to limit the fields returned from the matching chem hit(s). The supported field names can be found from any chem object or from the /metadata/fields endpoint. If \"fields=all\", all available fields will be returned. Type: string (list). Default: all. Max: 1000.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "format": {
            "description": "controls output format of server response, currently supports: \"json\", \"jsonld\", \"html\". Type: string. Default: json.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching chem hits to skip, starting from 0.  This can be useful for paging in combination with the \"size\" parameter. Type: integer. Default: None.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "prefix": {
            "description": "Pass a prefix string to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          "search": {
            "description": "Pass a search term to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          "size": {
            "description": "the maximum number of matching chem hits to return per batch. Type: integer. Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated list of fields to sort on. Prefix each with \"-\" for descending order, otherwise in ascending order. Default: sort by descending score.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "Phenotype": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Phenotype"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Phenotype"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "has_subclass": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "HP",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "outputs": [
                {
                  "id": "HP",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "children"
              },
              "predicate": "has_subclass",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/has_subclass"
              },
              "source": "Human Phenotype Ontology",
              "supportBatch": true
            }
          ],
          "subclass_of": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "HP",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "outputs": [
                {
                  "id": "HP",
                  "semantic": "PhenotypicFeature"
                }
              ],
              "parameters": {
                "fields": "parents"
              },
              "predicate": "subclass_of",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "_id"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/subclass_of"
              },
              "source": "Human Phenotype Ontology",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "has_subclass": {
            "HP": "children"
          },
          "subclass_of": {
            "HP": "parents"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothings.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the HPO query web services.",
        "termsOfService": "https://biothings.io/about",
        "title": "Human Phenotype Ontology API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/phenotype",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple HPO phenotype IDs separated by comma. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted. Type: string (list). Max: 1000.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Phenotype"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "A list of matching phenotype objects"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "For a list of phenotype IDs, return the matching phenotype object",
              "tags": [
                "phenotype"
              ]
            }
          }
        },
        {
          "path": "/phenotype/{phenotypeid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Retrieve phenotype objects based on HPO phenotype ID  Supports JSONP and CORS as well.",
                  "example": "HP:0000791",
                  "in": "path",
                  "name": "phenotypeid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Phenotype"
                      }
                    }
                  },
                  "description": "A matching phenotype object"
                },
                "404": {
                  "description": "A response indicating an unknown phenotype ID"
                }
              },
              "summary": "Retrieve phenotype objects based on ID",
              "tags": [
                "phenotype"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "DISEASES metadata object"
                }
              },
              "summary": "Get metadata about the data available from DISEASES",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/search",
                  "name": "search"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/prefix",
                  "name": "prefix"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "description": "DISEASES metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available object",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string.",
                  "example": "parents:\"HP:0000787\"",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/facet_size",
                  "name": "facet_size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/facets",
                  "name": "facets"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make queries and return matching phenotype hits. Supports JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms separated by comma (also \"+\" or whitespace).  Does not support wildcard queries",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "a comma-separated list of fields as the search \"scopes\" (fields to search through for query term). The available \"fields\" that can be passed to the \"scopes\" parameter are listed in the **/metadata/fields** endpoint.string Default: \"scopes=_id\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with the \"hits\" propert"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make batch phenotype queries and return matching phenotype hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/has_subclass"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/subclass_of"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://biothings.ncats.io/hpo"
        },
        {
          "description": "Production server",
          "url": "http://biothings.ncats.io/hpo"
        }
      ],
      "tags": [
        {
          "name": "phenotype"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIAFxlH18C_9VabW8bNxL-K8RePyQ5W1LuguvVQIFLL-nVBRqrcYA7IDYMapeSWO8uNyTXts7wf--8cF-1Wilxmzb5Epkih_PyzDNDUveRKVQuCx2diOjvk9lkFh2JSOdLAwP3UWxyL2NPn1UmdYrT1iot_rXQxq91vnITbXBJLjOFX_54-t_Xb8T_Tt_g4N2xTmiF94U7mU5X2q_LxSQ22fRa3ej8TuffzHiiNSmtt8oVJnd6kSqRqBuVgn42eoA5iXKx1YXXJseJr0xcZgrUwwFhlsKvlfhhfiY-lMpuxK1aCKfsjY6Vm-AWXtnMnS3PeaytVduUqVyY0tN87VmjH8pM5mK-Vrnxm0KJs9yb1Kw24uX8FCfeKOuCTs_BfagqbgyjMPT-vq_36zy2m8KrRMytScqY1OcFKK206bBueSw9abguDG6yJXifuBFpl2ivXAWFq1AWlcm8XTVM_u0OeStzl0pvbHe83o-3KKRfO8LStJGNfxbGMcYKaWGpr333lVVLFPSXKWAGcAHxdtNm0jQxfqlVmrQRWI-RKvsk0FTXXh9GDlrNOdFazAOH7WxsJn1nZx4hX1kFfnb-O5Ns6kwECfRZFkWqYwL-9O749vb2GFceQ6xVHptEJTTLxWvQht1qMYu8Vux9nfD_PQBlZep1kXIW1QESp68cAAoVR9AuNgLMyeREvDFeQdJJL-LSWtAtxawTJof_vbxWlJA6L0ovYENRFsIb8Xw2m4lM3umszI5oBiS8F7c6TcUCFmfawy4T8Q52PhHOW0CPeJJq559OxE_y7oQkcEIzeiKeFD08BK9pSw54T2ZePjyEL4hWggP-NpuNOvUXRx7p-FB7lfHqwcDyTDedt5Om1lFaKyFnHgZ47KVA65DAIPYxZkvL92bxi4o9gTF68QlKj6r62lpj3yoHYd-lWuU2iGNC-4B2QIY6Y0RBpBmziIzAC8R_JSDEInCj740Vsjaxg6ojEO9LmxMMdhoftbipRUmXtFHDI9P7-qNOHsj4lRomlZ6VbxUACCrNttvFQjowDAi1nxFCnJdFYSzM-fH87M0cnJKIf5-9PRfSQRKkKSFU3cmsCEVkfgK4nX39zXOur8SvQIft9G8ZEHWx7G2p0K1NYAfA_znYMpZpupDxdVtCPfaF8-1jCeJQWhjOtN3459x_McTYOxO0zK9zc5t3MLuVmocAH5aN5h_4VibSy9GE-xhUcWowlwyCbHew-g3i6fnrl-evz0WlY-3Qnh_-o3wzh_o_YiT-8wbwJbEZXVqTiUpmxym1D3o-qbD-GNc4JW3cYYkw8pnStYDv9V2HpXjkd0u5vVFkr35KMMPKJqYDFaYfTEbiR5STn-n4wbzcrwKwFF10clHXg39-fRGNwP7Dn7UQPI7GlzJW_srp_6uOhGb0ICkO6m8nM_Dvz5QXjypEaKfbsvxA3_W9dri_kME6u-Lff_7SSQk13qbykb-uhbfarynrL6K19u4iEuEAtPmCG-mf8EiFX8EpjtrN0DwPNA5o9OSgDrWmPd7zEvf8Aw_jj8qqRzHSI7LqDzvGfxg9xHNO0K3XwPFdPJGpM5Agf4XsgCPaLWAGIAo8BOds8coAxgBMwjGG8HyexNImFQCHzt9Ul0DBwbsFydseN5pUR8KqKDvKWO5uQC8WBco9CRO8qb70a2vK1RozpmUl6P0OBDTF_SIAAGTwLQXk2wKaXemwtwVxzBD1RnVMBVRpUg-maT6dPnvW7-qePRMqTwqjcz8J1xSv1FKC909qod9e6eQiGr6s-M3uJfZz5_zs_N0YO_3cZc_qDLCTRb90El0gY7bo8nBSHaJMur1eeHV8vXLHqAbZP0aZQ9Ona-muXLmIU4DnCPEMrq3WXZklsA47r1mzzeX3TbMzkKobU1KuYKIICdGvJndyBPInQ2fKUF5wUvfabnLIcW5vM9tUkAFVEXzWpIRSDn31EMBxBByg8ADpiThdgjnYQzPpXUTPL0AD0KVioeoeMjZpKgtHBACWSuFAH-CUFF8kRKJUEWQij6YiV0QWTeawlIFlR6LEMVFZhSzLLxjIb3qV6-WGDAgiwRNlDKaop8G3C2NSJfNJwzZLYHI15ux2XR5wdpDI3q4eebZcDa5DYCA1WrUqU2nBEoATOtyUtn5rOcI7YKxfpZUrRWvAMkjQG50oWMK0AvCinY6EM8zOsIoJ2hO6LICD_FA6FAPBWkJIzC1eI5MEEDxmc91J7EFX68wxYDQFoswWoBFWKpwrFmV8Dc06WhXIItSIip2qLADkqJWyrUg9n_XvsHdo3z0fDZgQZLds-LSq2xjBQoQBZInTXMgk0RUsucYi__GNfVhLyOUSeRF0gLSqsb9aAU6qnuNGpqUigkX3peBGAEjeSpVEuyKVm6bitkRyotSJ3SlTO14Kape_AQ78GKe7QzDTXOt8rL-fgHVbqf8UM4k6klRn2rd9XNMY3T517smJ2CAoT1zofEKvhpNZPNjlqq5nCe4OUmS-abMi5VYlvd_lND0OcyePfgucVxFn64KsS6GV6vsiRHXjsADVHf6-AHEDvrtgAM5Ljw9TTdHgJ9MaXketR63gWIeNHbY1aDp_ShP-vPYZOKRX_hoTceqoYfURYp9heGLfy1NbEOHm-VpD9XFeWuqbKOTARwAdXaMEcLgsU2qsC7nCaYBXgPRC51ykWj0hslO7I9hNe5SDY-aHe4l9PBduHgfsn3OrwhMqpIHNS51SNemcCxhGO4O1T9vmRnRPsMJF7W51q-MMHF5-L2Wb6-N9yo5UwPBcuxdhoZJAX8ot9mghHFP6wLpH9307dN5f93A1lbs5o0ZJiAXh-yI6xqoDSYCCgQHRUmMTZY-EAeH2VtMZBM6snW9bBpJwqHstAXAktOOxCteZY5F6qL_n-jPv_oyiez9wpZOd8e48lOPEy9YhtfXw1D6VDWwBFQb7s8Ft6OQVQ0vodrebAzv2j6zdt3eoFmfLkbPV4DP8tmcoGPSxrhXRMjVMwpVSjHdSqnkFGHJm34rLgaf_yrLdvqQD5m_1SwMYgbT9aDu9MdfDCUdfepnuTseBWML3_3hxZewVa4VLwYgqgI2djXK0oq1cR4G-jYetpHBwvA7QZQDGA_v2Z_Fr0Y6LAIht-3TPG-IPY86Zn4xFUUfMDTBcTUn4lwNEChDy3OuYykcIvI6_VxLPhnzVyC3Np63tXQ_UHW4ENJ8m0AdFoQDTvQv_eq5t0sBN56L6gNeU0T0b9n52-RC1LwqJe1D2WkmgUPLy3mvR9sXZVQbzMQQn41cm1fzjMH_rwgX4t7Tx6C_-SHNuBr_DAhce5MiD7TuYLynA4UlyO75tg77A8HbuxB4X3Saz-7sM5fY9BqWfOV10VFNq38O_XwFiP2Y0iSsAAA=="
    },
    {
      "_id": "a85f096bd4120ba065b2f25ffb68dcb0",
      "_meta": {
        "ETag": "b7c2f9fde0f68d1f0f488571913eb3e9075d031c",
        "github_username": "patrickkwang",
        "slug": "robokop",
        "timestamp": "2019-10-05T04:28:54.585739",
        "uptime_status": "unknown",
        "uptime_ts": "2020-09-17T00:09:49.503587",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/robokop/openapi.yml"
      },
      "_score": 0.8,
      "components": {
        "schemas": {
          "BiolinkEntity": {
            "description": "A subclass of named_thing (snake_case)",
            "example": "disease",
            "externalDocs": {
              "description": "Biolink model entities",
              "url": "https://biolink.github.io/biolink-model/docs/NamedThing.html"
            },
            "type": "string"
          },
          "BiolinkRelation": {
            "description": "A relation, i.e. child of related_to (snake_case)",
            "example": "affects",
            "externalDocs": {
              "description": "Biolink model relations",
              "url": "https://biolink.github.io/biolink-model/docs/related_to.html"
            },
            "type": "string"
          },
          "Credentials": {
            "description": "Credentials needed for programmatic access to the remote knowledge graph",
            "properties": {
              "password": {
                "description": "Password needed for programmatic access to the remote knowledge graph",
                "type": "string"
              },
              "username": {
                "description": "Username needed for programmatic access to the remote knowledge graph",
                "type": "string"
              }
            },
            "required": [
              "username",
              "password"
            ],
            "type": "object"
          },
          "EdgeBinding": {
            "properties": {
              "kg_id": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "qg_id": {
                "type": "string"
              }
            },
            "required": [
              "qg_id",
              "kg_id"
            ],
            "type": "object"
          },
          "KEdge": {
            "description": "An edge in the thought subgraph linking two nodes",
            "properties": {
              "id": {
                "description": "Local identifier for this node which is unique within this KnowledgeGraph, and perhaps within the source reasoner's knowledge graph",
                "example": "553903",
                "type": "string"
              },
              "source_id": {
                "description": "Corresponds to the @id of source node of this edge",
                "example": "https://omim.org/entry/603903",
                "type": "string"
              },
              "target_id": {
                "description": "Corresponds to the @id of target node of this edge",
                "example": "https://www.uniprot.org/uniprot/P00738",
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/BiolinkRelation"
              }
            },
            "required": [
              "id",
              "source_id",
              "target_id"
            ],
            "type": "object"
          },
          "KNode": {
            "description": "A node in the thought subgraph",
            "properties": {
              "id": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "type": "string"
              },
              "name": {
                "description": "Formal name of the entity",
                "example": "Haptoglobin",
                "type": "string"
              },
              "type": {
                "description": "Entity type of this node (e.g., protein, disease, etc.)",
                "example": [
                  "protein"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "KnowledgeGraph": {
            "description": "A thought graph associated with this result. This will commonly be a linear path subgraph from one concept to another, but related items aside of the path may be included.",
            "properties": {
              "edges": {
                "description": "List of edges in the KnowledgeGraph",
                "items": {
                  "$ref": "#/components/schemas/KEdge"
                },
                "type": "array"
              },
              "nodes": {
                "description": "List of nodes in the KnowledgeGraph",
                "items": {
                  "$ref": "#/components/schemas/KNode"
                },
                "type": "array"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "Message": {
            "properties": {
              "knowledge_graph": {
                "description": "KnowledgeGraph object that contains all the nodes and edges referenced in any of the possible answers to the query OR connection information for a remote knowledge graph",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/KnowledgeGraph"
                  },
                  {
                    "$ref": "#/components/schemas/RemoteKnowledgeGraph"
                  }
                ],
                "type": "object"
              },
              "query_graph": {
                "$ref": "#/components/schemas/QueryGraph",
                "description": "QueryGraph object that contains a serialization of a query in the form of a graph",
                "type": "object"
              },
              "results": {
                "description": "List of all returned potential answers for the query posed",
                "items": {
                  "$ref": "#/components/schemas/Result"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "NodeBinding": {
            "properties": {
              "kg_id": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "qg_id": {
                "type": "string"
              }
            },
            "required": [
              "qg_id",
              "kg_id"
            ],
            "type": "object"
          },
          "QEdge": {
            "description": "An edge in the QueryGraph",
            "properties": {
              "id": {
                "description": "QueryGraph internal identifier for this QEdge. Recommended form: e00, e01, e02, etc.",
                "example": "e00",
                "type": "string"
              },
              "source_id": {
                "description": "Corresponds to the @id of source node of this edge",
                "type": "string"
              },
              "target_id": {
                "description": "Corresponds to the @id of target node of this edge",
                "type": "string"
              },
              "type": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkRelation"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkRelation"
                    },
                    "type": "array"
                  }
                ]
              }
            },
            "required": [
              "id",
              "source_id",
              "target_id"
            ],
            "type": "object"
          },
          "QNode": {
            "description": "A node in the QueryGraph",
            "properties": {
              "curie": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "id": {
                "description": "QueryGraph internal identifier for this QNode. Recommended form: n00, n01, n02, etc.",
                "example": "n00",
                "type": "string"
              },
              "type": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkEntity"
                  },
                  {
                    "description": "Entity types of this node (e.g., protein, disease, etc.)",
                    "example": [
                      "disease",
                      "genetic_condition"
                    ],
                    "items": {
                      "$ref": "#/components/schemas/BiolinkEntity"
                    },
                    "type": "array"
                  }
                ]
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "Query": {
            "properties": {
              "message": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "required": [
              "message"
            ],
            "type": "object",
            "x-body-name": "request_body"
          },
          "QueryGraph": {
            "description": "A graph intended to be the thought path to be followed by a reasoner to answer the question. This graph is a representation of a question.",
            "properties": {
              "edges": {
                "description": "List of edges in the QueryGraph",
                "items": {
                  "$ref": "#/components/schemas/QEdge"
                },
                "type": "array"
              },
              "nodes": {
                "description": "List of nodes in the QueryGraph",
                "items": {
                  "$ref": "#/components/schemas/QNode"
                },
                "type": "array"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "RemoteKnowledgeGraph": {
            "description": "A thought graph associated with this result that is not repeated here, but stored elsewhere in a way that can be remotely accessed by the reader of this Message",
            "properties": {
              "credentials": {
                "$ref": "#/components/schemas/Credentials",
                "description": "Credentials needed for programmatic access to the remote knowledge graph",
                "type": "object"
              },
              "url": {
                "description": "URL that provides programmatic access to the remote knowledge graph",
                "example": "http://robokop.renci.org/api/kg",
                "type": "string"
              }
            },
            "required": [
              "url",
              "credentials"
            ],
            "type": "object"
          },
          "Result": {
            "description": "One of potentially several results or answers for a query",
            "properties": {
              "edge_bindings": {
                "description": "List of QEdge-KEdge bindings.",
                "items": {
                  "$ref": "#/components/schemas/EdgeBinding"
                },
                "type": "array"
              },
              "node_bindings": {
                "description": "List of QNode-KNode bindings.",
                "items": {
                  "$ref": "#/components/schemas/NodeBinding"
                },
                "type": "array"
              },
              "score": {
                "description": "Any type of score associated with this result",
                "example": 163.233,
                "format": "float",
                "type": "number"
              }
            },
            "required": [
              "node_bindings",
              "edge_bindings"
            ],
            "type": "object"
          }
        }
      },
      "info": {
        "contact": {
          "email": "patrick@covar.com",
          "name": "Patrick Wang",
          "url": "robokop.renci.org"
        },
        "description": "An API for answering biomedical questions",
        "termsOfService": "https://robokop.renci.org/termsofservice/",
        "title": "ROBOKOP Ranker",
        "version": "0.0.1",
        "x-reasoner_standard_version": "0.9.1"
      },
      "openapi": "3.0.1",
      "paths": [
        {
          "path": "/query/",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "description": "Maximum number of results to return. Provide -1 to indicate no maximum.",
                  "in": "query",
                  "name": "max_results",
                  "schema": {
                    "default": -1,
                    "type": "integer"
                  }
                },
                {
                  "description": "Requested output format. DENSE, MESSAGE, CSV or ANSWERS",
                  "in": "query",
                  "name": "output_format",
                  "schema": {
                    "default": "MESSAGE",
                    "type": "string"
                  }
                },
                {
                  "description": "Max connectivity of nodes considered in the answers, Use -1 for no restriction",
                  "in": "query",
                  "name": "max_connectivity",
                  "schema": {
                    "default": -1,
                    "type": "integer"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": {
                      "message": {
                        "query_graph": {
                          "edges": [
                            {
                              "id": "e00",
                              "source_id": "n00",
                              "target_id": "n01"
                            },
                            {
                              "id": "e01",
                              "source_id": "n01",
                              "target_id": "n02"
                            }
                          ],
                          "nodes": [
                            {
                              "curie": "MONDO:0005737",
                              "id": "n00",
                              "type": "disease"
                            },
                            {
                              "id": "n01",
                              "set": true,
                              "type": "gene"
                            },
                            {
                              "id": "n02",
                              "type": "genetic_condition"
                            }
                          ]
                        }
                      }
                    },
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "A message with question graph.",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Message"
                      }
                    }
                  },
                  "description": "A message with knowledge graph and answers."
                }
              },
              "summary": "Get answers to a question",
              "tags": [
                "0.9.2"
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "url": "https://robokop.renci.org/ranker/api/"
        }
      ],
      "tags": [
        {
          "name": "0.9.2"
        },
        {
          "name": "translator"
        },
        {
          "name": "reasoner"
        }
      ],
      "~raw": "H4sIAAYcmF0C_9VZW0_jSBb-K6XsSjsjBSeAenqHp6G72d4WDaHD9M5DC0UVu5LUYFd5qiqkWcR_33OxHdtxIFxmV8sDMnU7t-9851Rx17O5MjLXvSPRO4yG0X6vL3razCwM3PVia4KMA32rTOoUl-UyOB1f_xLbG-mi2Ga4xchM4eQFT4rfpJnj-NLRHmen9trmkVMm1pF18949TCbKx07nQVuDi46NOL74JGbWCWn8Sjlt5mKqbaYSHctU_LFUHtd6PDgol_nR7FK5Gx2T6EUIuT8aDDZkDWitnXleO6DtOqS0azx6NzodXYixNNfK4dSNcr7QaFh65PueU9Jbo9zEB2kS6ZJJY93PsA5NCnLuYeTbXeURnDvAufVQcGBfKoN1zfFSRu_-qk9-Xnhy_QAsd7cD-s6t53jk0sE2MK2Q13Lmmfyus2UmzDKbKifsTDjll2nwIlj4DEtnInHh7I1OlNjbx1Ft0M9BCWNFxtsjhgMeSDrUQw1LJsWZOOzjBUCEVAu3Oa3QJqg5OzVRMwkrYXRv_56Mbuk7VhRelQi7DPkyIAwyGSLx4eT88qQvzk4uL48_wsf7y38JQMjx-eVvJ-PLB_TjcyZ8zhYNfUCQNRXsFaJ6nXqCXwWkhVFx0Dc63KJnjYVFOOrBmQ5M0EaEhSpQ7PviqycfI7INeh_FxnTiw-6tC3qqjxFCjp36zia3VT4rw_iReZ5iuEGLwe-ejLurC_irUzMU8JcBpHgOsDTBD3jeD76Qtgh49V1mOaXSXS9T3ss5f5M9k7mT-YL-Jh8xUnWC55rhkBKxsCPRHtCvcCheOk1jZ6PzD6Oj4XD45u3hW06Vcu9-fe9cGdroFZoW3FI11h601wYdo2sTTSEgT6lk3lRPsXreLl2sJk2VpZurMFmrUpOmWLPWtv2ObcAJV_f400GEovCkWOmwqHhPkDcpJTGwGpC2NheGPETJK6aMA1D1VSN-VsR2F4WvjV2l6FHWGPIgKXMhoqzq-WWWSYeg7H1UoZxEEpKVub0anRYsesXSkcgr3isqzHb2d8TsAyhyA4712rqaB_ibcY1f3_emkDV7a2omtSY4WIeTnf4OCYojuYNS6oIuAlDPhR0d24zrt-qIK5w5q533qPCSlo82-euz9gE5S6ZpUQaAr3KLINFQY8tIIFUhhVEaw7wHnWpmS-ck-UEHlfnHjRyTQmxjmxk2rWmpTEH5SEjiNaCZDIKaE208QAYAAcrrfxO2ybpC8YKIsQbwMIsFGY_TG0kkjqvw_BStT8tND2kOQUD9uIBgmhAPQWBmCgHMpUQaqjK4EALh9TRV9YxZh2k0rkoTuAG7OCx9-E09FRybQaDb6Ym6g_2jGefTg45pGsXE90jgUWR7W5HHBSp2cufIKHRChdT0FqIOLCDTqrGp-kZf2FvV1FZ6oLsnU2x3zNw3xFe43pI1X85h694p_hblAdET8gA3vuN9nAyEquepcgJb907x97NUwY0NVXxsXZNfuHfEM4smCsZmqZVd8TkGkOI-VI1OEtJ7G2uJLR1VhbDQvohVr9E47P90GB0cHm4SYDNOG94iXqx7dCdu_GPOJXijCaRMryZrGbG57u4hImwvR7S3LWMlKoFkST0g_9-WtNJ9p_w-BnzY5XwRyp5hO3oi8Sv-sdLAngDszBoggykATqTaKOkE3pyEX075pJmzQP5AH8CNscoDdRnGAm26vpjCTcOplOSQ4SAYb0Ql3-JJmaTjtYnTZaKSaAujPC19mfKL-tRy2O5JTEy0ZpKnqcC15sUqIG6LtnAje6usLbK1sxy8Nj64yMKfEGQYyhWtgnArjreHizcMqNSrFY5SjRUriDJXZ2kw3FwsAVkyjqH3gg3TW_IU3NITvlGTzLIx2wQFd6Zdl80191Hf2tm2Yr96Pe_wxNfxZ1Y059u7xw9wSoa1Pi7ULRuDLSUfYxGDE7iW-t1C8H69QRgF3wnV2adLf6z9qgnqaIvRrS31CVvvW_b8idpvuqqpIfSjdHGgVxzvV9YBM3YApFzXoe7XYu7VdK3VhkqnbU8hDU0uitUv04QJotZY75j1nO34ymFQOAiB3EQ5JR0QRfPwzKapXXGmYrfLr2nM99gXlq0yXS-LKlKc72lDDgQCGGleI3j165N-zRe7s-2XVyP854l_CtmzrjvGGQ_oVq3ldb0jbGu3RkQPJFMqNDHATAMU-IILcSctIzFW2EowyLDbPRJmOOzDr338ddAXKsRRi7vxPei-9mD1ur1WBwF_HX866TQCvddSbnT26ezop-Hhz8NDfplmAXc73_XeaQv91PUJCAu3j-r_tKPalvEMXSB8VVkJEj-oaB71kXCC0qYvindCjsePTZu_1V8RNx_6rrr617JnZWTvBlZDmfS_QSuq2YVWhWhViFa1Ba2qQOtzgTDGNpkeTF8BCuvD7sn99QfTHdz13jp-70yquvOLTujuSQcxdkogKSKt1hPsi6TwQV1SugDWsK-hBl-XnsuTZQksrzovwN-LqKXqYR4V8w98R0gFNTbFFUsxKTQl_FPmwc5TC3f9JmYfK3U1Inkqj2zn4hbJFGf0HmCT02ezSTumeKe9xn-EhpUVVZV9ZpQ_23gLr5CPVgsdUy-0NBoaH7pYkVow1Lyz9emxElRYyNyv16ky_cre62--qyWtBfrNm80C9VQy-i-Qx-adDf_XYDOd0V0NNHS3g3qx_dOJpluj1WoVQfAQoaRY8T24GA7fHv79WezUrN0dN5VjxGqcwi2BWlxI7WSCeJiLH7yR12oSQ5792HEVIRO41n2wceelrRAuMrA_ZarQnAGtf_tMeWE0Bygup5G25cgebR0kIGBwjrr9iqpFi5ClrcSumoea1RXMOu12xWxf6AiKcrzQacL_aacHpQmE8rVdUIp8tg_WunX6QM5mQFN47b6__w82EK21HSIAAA=="
    },
    {
      "_id": "da745f0b6c95ce27e9769a4a0d8d0a15",
      "_meta": {
        "ETag": "92aea1fd3a20bc62a627ecbf156e40524004c50d",
        "github_username": "newgene",
        "timestamp": "2019-09-10T04:29:36.910095",
        "uptime_status": "unknown",
        "uptime_ts": "2020-09-17T00:09:49.545430",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/disease%20ontology%20api/openapi.yml"
      },
      "_score": 0.8,
      "info": {
        "contact": {
          "email": "lschriml@som.umaryland.edu",
          "name": "Lynn Schriml",
          "x-role": "responsible developer"
        },
        "description": "A RESTful API service is also offered to users of the Disease Ontology browser website to allow for programmatic access to the metadata found in the database.",
        "termsOfService": "http://disease-ontology.org/faq/",
        "title": "Disease Ontology API",
        "version": "0.1.1"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/metadata/{doid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "DOID, e.g. DOID:678.",
                  "in": "path",
                  "name": "doid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  },
                  "x-requestTemplate": [
                    {
                      "template": "/metadata/{{input}}",
                      "valueType": "http://identifiers.org/doid/"
                    }
                  ],
                  "x-valueType": [
                    "http://identifiers.org/doid/"
                  ]
                }
              ],
              "responses": {
                "200": {
                  "description": "A distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload",
                  "x-JSONLDContext": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/disease ontology api/jsonld_context/do_context.json",
                  "x-responseValueType": [
                    {
                      "path": "xref",
                      "valueType": "http://identifiers.org/mesh/"
                    },
                    {
                      "path": "xref",
                      "valueType": "http://identifiers.org/ncit/"
                    },
                    {
                      "path": "xref",
                      "valueType": "http://identifiers.org/snomedct/"
                    },
                    {
                      "path": "xref",
                      "valueType": "http://identifiers.org/umls/"
                    },
                    {
                      "path": "xref",
                      "valueType": "http://identifiers.org/omim/"
                    }
                  ]
                }
              },
              "summary": "Returns xref related to a doid"
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "http://www.disease-ontology.org/api"
        }
      ],
      "tags": [
        {
          "name": "disease"
        },
        {
          "name": "ontology"
        },
        {
          "name": "annotation"
        },
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIALEmd10C_6VUTW_bMAz9K4JPG9DY6QZsQ08rmh06FE3RBLsUxaDItK1CH65E5wNB_vtI2W5TtBiGNZckFPlIvfeofeZbcLLV2ZnIPufTfJqdiEy7ylNgn60hRO0dH07z0_yUD1GjAY7MdAQZQcwdeuPrnTi_ueSEEqIKusWh8Fzc_lgsq87wuYgQ1lqB0FFIE73wVQUBSoFedHQWKSCwAfEKfBX8hhLEBlZRI3CBNMZvROWDaIOvg7RWolZCKgUxcgIDWUBZSpSU17lSaJeiHFkRfp5uBMHGebXoR-OZG8T2rCjKfoiJH4bIfaiLSj4WXKUoKhUmnpy0qe5q55xYqCZoazhnOwm-JytAbL2LemWoOazBEO-BU8BKbTjDxL7ue_Q276wMOyNdmUPZZYcDJTJzRBCl3u2zLpijOTebTf7mrCzsa0Vugi87xf9ED5od7pkGWQ_o43UGzIzaPwfHBi-j0jmPMnV4EccgXTQS_dCkldjExFkxKlPsS6_LQwrW0BMaO8sMMMItYBdcFNsAlQhAWL1dpOCyLGGS9oBP5DyNP5zrdGvu_AYZs_nl7ERAXueCf559-fotmSLAY6fJmZSDoQMWQDUkVhoPd23qEDFoV_ONSeq1NB0s-5O7URpdgkNdaRouKcIzFdl97w1qARGXYFu-VT_8McrfQZJzn0qP-dxr13Z4OBDlifTBfNAT_2k6Td-v9pTkRu0UkiuQ91DG6JVOouZ-9QAKo_hAV9eKNm8nRiOItD8fc7FseKvbFiTtscS0aOhbYdjv42LTLJ0hoFbujJflsCXDgL-OKdz3ktFoLD0n_gs3FmJT9B78n3KnNL6jPDpvoVTvgeisie8o91bbot-17eTnYn59NbsgpWCLY1GkqiA3ea2x6Vb86vJTRii58ra4vjhfLiZL6Wogb0PxvMATek1IqZpcEnaFlZF0H5_IZzNQUvEQvTPlb9X3JbuOP3M-oeeMP38Ax3UO3HsGAAA="
    },
    {
      "_id": "0212611d1c670f9107baf00b77f0889a",
      "_meta": {
        "ETag": "24713383feb222c39c252dd51d34987d8c122884c57cf0c487ae15edff041ade",
        "github_username": "kevinxin90",
        "timestamp": "2020-04-29T00:02:27.899738",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:51.980979",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/CTD/smartapi.yaml"
      },
      "_score": 0.8,
      "components": {
        "x-bte-kgs-operations": {
          "chemical2gene": [
            {
              "inputs": [
                {
                  "id": "MESH",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "format": "json",
                "inputTerms": "{inputs[0]}",
                "inputType": "chem",
                "report": "genes_curated"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/drug-gene"
              },
              "source": "CTD",
              "supportBatch": false
            }
          ],
          "gene2disease": [
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "MESH",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "format": "json",
                "inputTerms": "{inputs[0]}",
                "inputType": "gene",
                "report": "diseases_curated"
              },
              "predicate": "related_to",
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene-disease"
              },
              "source": "CTD",
              "supportBatch": false
            }
          ]
        },
        "x-bte-response-mapping": {
          "drug-gene": {
            "NCBIGene": "data.GeneId",
            "inTaxon": "data.OrganismId",
            "pubmed": "data.PubMedIds"
          },
          "gene-disease": {
            "MESH": "data.DiseaseID",
            "name": "data.DiseaseName",
            "pubmed": "data.PubMedIDs"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@ctd.org",
          "name": "CTD help desk",
          "x-role": "responsible developer"
        },
        "description": "The CTD API",
        "termsOfService": "http://ctdbase.org/help/linking.jsp#batchqueries",
        "title": "CTD API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/batchQuery.go",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "The Input type of query",
                  "example": "chem",
                  "in": "query",
                  "name": "inputType",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The Input value of query, usually a mesh ID",
                  "example": "D003634",
                  "in": "query",
                  "name": "inputTerms",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The Output of query",
                  "example": "genes_curated",
                  "in": "query",
                  "name": "report",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The output format",
                  "example": "json",
                  "in": "query",
                  "name": "format",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "response object"
                }
              },
              "summary": "retrieve relationship data",
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene2disease"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical2gene"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "http://ctdbase.org/tools"
        }
      ],
      "tags": [
        {
          "name": "translator"
        },
        {
          "name": "ctd"
        }
      ],
      "~raw": "H4sIABTEqF4C_81VS0_bQBD-K5bpMY5dqHrg1EIqmgOPitwQQmt7Yi_Yu2YfUaIo_70zu7bzgEDSU0_gndc3830zWYayAcEaHp4H4dkwGSbhIAi5mEp8WIYzUJpLQcav3mS4qYC-Lyej4OfdmN5y0JnijWk9JyUEG1YDqta303tQM5650NKY5jyOM5OnTMNQqiIuoWriiosXLorhs25OUmay8tWC4qApSyaFYZlxqASrewgUGCCAF3KaR0p6dAp0I4XmaQVonUGFbSpygZrxyoHAwB8IgcqHqxWaNCLEftH4sAytqvZANVJW-p2275TMbUZfgc8Urh6pfVa0KTvYRjGhK2Ykegw22sEiPqRhptSu09iN4Q-OYTEsPCUF-CFoW9dMLXyzBsc0g0ABpkUAuuQ4FGZY6LIpLGD6zrpyXDTWTBYNeMbpiea92MPomNwDg_6BnAa9p4JXyxXk6GaUBZrwnNWNZyEroSYnTf8wB5sSkEkjZOEHvwuJ9HIMphmr7BrUILDasqpaBCyoQZfBePQpzlGSnH0_-3YMVAWNVOYwmLfWEM6Dx1aAAP2UWcUMehwBaipVzQ4EJT2odciHkJ41Rn6C5HHQ7x14-Z4mifu7U75zCmT6DLjTbvvmUWogeil0RKvqZewF-0XBlMJO4kzWGAjC6Pg995gGd5pzDbirfrcOj6XGeMaqU0qCe7hyqNZRrpE9IJfhVmWH2mm57YDTUMOby4vxFSV3t6ZmwvCM3q98QVpVHD9iMK3CKuL_yUgK8HRt5bv-df97N9eoa57SaWlV1l3KN6dguXEBWtF5GThh40vbzpYSW7lsKGJjZ_F16dt-SB5XobuptqF0F3TG0D5llYYNmTzVrGlIPecfc9X5R62_YzrqmXbdbhO4h4P3ZnbZBt7bVBsmsn8i43Nyj2Kju5xrNt4chf-FilzZIvJLg1vTb_KuX78m0XpNlp4P0hr-WA1b8fqD3d20TcsNvdHkbFq7Q-Wtdza9hnw80q7PNR4q0PPSOdPHON-fJW9_eyZs7q-VM96qggmua4zEw7D6CwET87M3CQAA"
    },
    {
      "_id": "553a49d112bb19306253942ebd6377a9",
      "_meta": {
        "ETag": "3b1ae4ee9e9f291324cac6f99f507247be342a92e33d90148ed3e69cb8a4460c",
        "github_username": "kevinxin90",
        "timestamp": "2020-03-12T16:43:32.649215",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:52.855046",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/stanford_kp/smartapi.yaml"
      },
      "_score": 0.8,
      "components": {
        "x-bte-kgs-operations": {
          "biosampleAssociatedWithDisease": {
            "inputs": [
              {
                "id": "samd",
                "semantic": "Biosample"
              }
            ],
            "outputs": [
              {
                "id": "mondo",
                "semantic": "DiseaseOrPhenotypicFeature"
              }
            ],
            "parameters": {
              "sampleid": "{input1}"
            },
            "response-mapping": {
              "$ref": "#/components/x-bte-response-mapping/biosample"
            },
            "supportBatch": false
          },
          "clAssociatedWithBiosample": {
            "inputs": [
              {
                "id": "clo",
                "semantic": "CellLine"
              }
            ],
            "outputs": [
              {
                "id": "samd",
                "semantic": "Biosample"
              }
            ],
            "parameters": {
              "q": "biolink:CellLine={input1}"
            },
            "response-mapping": {
              "$ref": "#/components/x-bte-response-mapping/cellline-biosample"
            },
            "supportBatch": false
          },
          "diseaseAssociatedWithBiosample": {
            "inputs": [
              {
                "id": "mondo",
                "semantic": "DiseaseOrPhenotypicFeature"
              }
            ],
            "outputs": [
              {
                "id": "samd",
                "semantic": "Biosample"
              }
            ],
            "parameters": {
              "q": "biolink:Disease={input1}"
            },
            "response-mapping": {
              "$ref": "#/components/x-bte-response-mapping/disease-biosample"
            },
            "supportBatch": false
          }
        },
        "x-bte-response-mapping": {
          "biosample": {
            "@context": "http://schema.org",
            "@type": "Biosample",
            "bts:biosampleAssociatedWithDisease": [
              {
                "$input": "bts:samd",
                "$source": "NCBI Biosample Database",
                "@type": "DiseaseOrPhenotypicFeature",
                "bts:age": "data.attributes.age",
                "bts:cellline": "data.attributes.cell_line.name",
                "bts:mondo": "data.attributes.Disease.mondo",
                "bts:organism": "data.attributes.organism",
                "bts:sex": "data.attributes.sex.name"
              }
            ],
            "bts:samd": "samd"
          },
          "cellline-biosample": {
            "@context": "http://schema.org",
            "@type": "CellLine",
            "bts:clAssociatedWithBiosample": [
              {
                "$input": "bts:clo",
                "$source": "NCBI Biosample Database",
                "@type": "Biosample",
                "bts:age": "data.attributes.age",
                "bts:cellline": "data.attributes.cell_line.name",
                "bts:organism": "data.oorganism",
                "bts:samd": "data.biosampleAccession",
                "bts:sex": "data.attributes.sex.name"
              }
            ],
            "bts:clo": "clo"
          },
          "disease-biosample": {
            "@context": "http://schema.org",
            "@type": "DiseaseOrPhenotypicFeature",
            "bts:diseaseAssociatedWithBiosample": [
              {
                "$input": "bts:mondo",
                "$source": "NCBI Biosample Database",
                "@type": "Biosample",
                "bts:age": "data.attributes.age",
                "bts:cellline": "data.attributes.cell_line.name",
                "bts:organism": "data.oorganism",
                "bts:samd": "data.biosampleAccession",
                "bts:sex": "data.attributes.sex.name"
              }
            ],
            "bts:mondo": "mondo"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@stanford.edu",
          "name": "stanford help desk",
          "x-role": "responsible developer"
        },
        "description": "The Stanford biosample API",
        "termsOfService": "http://www.stanford.edu",
        "title": "Stanford BioSample API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/biosample/search",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "query",
                  "example": "biolink:Disease=MONDO:0007256",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "size of the output",
                  "example": 200,
                  "in": "query",
                  "name": "limit",
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A biosample object",
                  "x-bte-response-mapping": [
                    {
                      "$ref": "#/components/x-bte-response-mapping/disease-biosample"
                    },
                    {
                      "$ref": "#/components/x-bte-response-mapping/cellline-biosample"
                    }
                  ]
                }
              },
              "summary": "retrieve biosample information",
              "x-bte-kgs-operations": {
                "clAssociatedWithBiosample": {
                  "$ref": "#/components/x-bte-kgs-operations/clAssociatedWithBiosample"
                },
                "diseaseAssociatedWithBiosample": {
                  "$ref": "#/components/x-bte-kgs-operations/diseaseAssociatedWithBiosample"
                }
              }
            }
          }
        },
        {
          "path": "/biosample/{sampleid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "the SAMD biosample ID",
                  "example": "SAMD00005006",
                  "in": "path",
                  "name": "sampleid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "A biosample object",
                  "x-bte-response-mapping": {
                    "$ref": "#/components/x-bte-response-mapping/biosample"
                  }
                }
              },
              "summary": "retrieve biosample information",
              "x-bte-kgs-operations": {
                "biosampleAssociatedWithDisease": {
                  "$ref": "#/components/x-bte-kgs-operations/biosampleAssociatedWithDisease"
                }
              }
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Production server",
          "url": "http://api.kp.metadatacenter.org"
        }
      ],
      "tags": [
        {
          "name": "translator"
        },
        {
          "name": "stanford"
        }
      ],
      "~raw": "H4sIALVmal4C_-1W32_aMBD-V6KsjyWknbpJSJMKRZMqraUSk_Ywock4B3gkcWo7LRvif9-dnYQAaSldW-1hvISc7-d331289GUGKcuE3_H890EYhP6x54t0IlGw9O9AaSFTOjxxR0aYGOh9aBhqqcjrCTlkSRaD1725JJUINFciM4Xh1xl4lfJYSL2hbEAlejAZgroT3DqeGZN12u37-_tAF2YBRDkpc5kaxo1NLWWJVS91vBnEmYex56S5aCnp8lSgM5lqMcaYEdxBjAUrUoGEidgGRMPzjVCrFZ5rTAnLR43vSz9XcS03xCuYZ0EChkUMM4IUywikmjaUf6NklHN685xHfzWiutm0cF0WYhRLdcyMRI3jhgKdXcbMTFsA2hWWbQ1M8ZmVTsHBo_MkYeqXQ8AogZXXwKcGq4TZHK1ThcFMVW0Z-taRwf7NAb3tllfJFdzmQkGEQqNyIIAXNhhpYeRYpPNOX2CqGj5dDa77g04Yhh9Pzz6QteYz7IfN3PzKirqVSKe2F-uMYpEIsz8rLX6DJyeeQe7J3GS5tVkndBqGzUEFdnJKPbJgF9wBBzga2edWrG4NVzn-Cdw4Ao4NtEoHrYRlGVVj4T1SMCHLd20uEzxH-uh2s0E7coi1qhiOHIe44BDHiP6Gj5GluDOYT3WLhsLSwZVaRO1qLblgBqJvwsx6lXnn8Qw2Hbb3OKNEePwyoR72s1rZimtDs3RPEa1efnBK12um0tw2EJUIOuxe9WshLvt7x4kscHjCszDcOz2vxePDODiuN-Ix5lWKm40sFseBdNjjbFWQYu3G-v-bqRAp7pqCDIKa5ycyjaRtErYoNYKTsMhgoG5mkErsmeCfgZlcgdvybmdt-MEg0babGr1H22xc4vZu2LxLm-HJyo6dzrNMKtNjxn49JizWUKPLs7vdsLT2T_kudDzeAe4Cd9kX3GWvBVPp_21watrMFO8JQ7CL1hMqb8DrWfTcQrDadmj6Jrg1b5NGt7tUJOk53SRhYWp3OrdDy0vceblHH4GCGmV0xyFYh5Kke3cFdqAKspYX1raXeEC3y2DNBs5B6-LTQ2qYLEuFTipVWUkKDTaF6pAZ_CaMcwM6IHEZChZNGigO7NesUCup2qRLZz_osLI4siywg1UhRGItc-Vu-dcXvUuvqtvro8ux3ckjuyl2B-OwtlV7okw_lrWN4iT_e1MAc0hnntuQB2Es1xbJ9u69emMOmMxtUArTYGNidxpWM_gnW1ci97Te4e8PyvuDju0PAAA="
    },
    {
      "_id": "e3edd325c76f2992a111b43a907a4870",
      "_meta": {
        "ETag": "832ad7b7c0e20144712db5430227e191ea53c35820ba2b5a3732add8b337d97a",
        "github_username": "newgene",
        "timestamp": "2020-09-09T00:02:20.664785",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:52.974994",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/dgidb/openapi.yml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call. Type: string.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned chem object. If \"true\" or \"1\", all fields will be collapsed into a single level deep object (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Type: boolean. Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us with an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "facet_size": {
            "description": "the number of facet buckets to return in the response. Type: integer. Default: 10. Max: 1000.",
            "in": "query",
            "name": "facet_size",
            "schema": {
              "type": "integer"
            }
          },
          "facets": {
            "description": "a comma-separated list of fields to return facets on.  In addition to query hits, the fields notated in \"facets\" will be aggregated by value and bucklet counts will be displayed in the \"facets\" field of the response object. Type: string (list). Default: None. Max: 1000.",
            "in": "query",
            "name": "facets",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated list of fields (in dotfield notation) used to limit the fields returned from the matching chem hit(s). The supported field names can be found from any chem object or from the /metadata/fields endpoint. If \"fields=all\", all available fields will be returned. Type: string (list). Default: all. Max: 1000.",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "format": {
            "description": "controls output format of server response, currently supports: \"json\", \"jsonld\", \"html\". Type: string. Default: json.",
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching chem hits to skip, starting from 0.  This can be useful for paging in combination with the \"size\" parameter. Type: integer. Default: None.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "prefix": {
            "description": "Pass a prefix string to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "prefix",
            "schema": {
              "type": "string"
            }
          },
          "search": {
            "description": "Pass a search term to filter the available fields. Type: string. Default: None.",
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            }
          },
          "size": {
            "description": "the maximum number of matching chem hits to return per batch. Type: integer. Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated list of fields to sort on. Prefix each with \"-\" for descending order, otherwise in ascending order. Default: sort by descending score.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "Association": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Association"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Association"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "chemical-gene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "CHEMBL.COMPOUND",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "subject.NCBIGene,association.provided_by,association.pubmed",
                "size": 1000
              },
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "object.CHEMBL_COMPOUND"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/chemical-gene"
              },
              "source": "DGIdb",
              "supportBatch": true
            }
          ],
          "gene-chemical": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "CHEMBL.COMPOUND",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "parameters": {
                "fields": "object.CHEMBL_COMPOUND,association.provided_by,association.pubmed",
                "size": 1000
              },
              "predicate": "physically_interacts_with",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "subject.NCBIGene"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/gene-chemical"
              },
              "source": "DGIdb",
              "supportBatch": "ture"
            }
          ]
        },
        "x-bte-response-mapping": {
          "chemical-gene": {
            "NCBIGene": "subject.NCBIGene",
            "pubmed": "association.pubmed",
            "source": "association.provided_by"
          },
          "gene-chemical": {
            "CHEMBL.COMPOUND": "object.CHEMBL_COMPOUND",
            "pubmed": "association.pubmed",
            "source": "association.provided_by"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@biothings.io",
          "name": "JIWEN XIN",
          "x-id": "https://github.com/kevinxin90",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the BioThings DGIdb query web services.",
        "termsOfService": "https://biothings.io/about",
        "title": "BioThings DGIdb API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/association",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple association IDs separated by comma. Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted. Type: string (list). Max: 1000.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Association"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "A list of matching association objects"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "For a list of association IDs, return the matching disease object",
              "tags": [
                "association"
              ]
            }
          }
        },
        {
          "path": "/association/{associationid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Retrieve association objects based on Association ID  Supports JSONP and CORS as well.",
                  "example": "275bfadd2b4c60c3",
                  "in": "path",
                  "name": "associationid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Association"
                      }
                    }
                  },
                  "description": "A matching association object"
                },
                "404": {
                  "description": "A response indicating an unknown association ID"
                }
              },
              "summary": "Retrieve association objects based on ID",
              "tags": [
                "association"
              ]
            }
          }
        },
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "KP metadata object"
                }
              },
              "summary": "Get metadata about the data available from the API",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/search",
                  "name": "search"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/prefix",
                  "name": "prefix"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "description": "metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string.",
                  "example": "object.id:CHEMBL.COMPOUND\\:CHEMBL26",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/facet_size",
                  "name": "facet_size"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "name": "sort"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/facets",
                  "name": "facets"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make queries and return matching association hits. Supports JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/dotfield",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "name": "email"
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/format",
                  "name": "format"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms separated by comma (also \"+\" or whitespace).  Does not support wildcard queries",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "a comma-separated list of fields as the search \"scopes\" (fields to search through for query term). The available \"fields\" that can be passed to the \"scopes\" parameter are listed in the **/metadata/fields** endpoint.string Default: \"scopes=_id\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with the \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make batch disease queries and return matching disease hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/chemical-gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene-chemical"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://biothings.ncats.io/dgidb"
        },
        {
          "description": "Production server",
          "url": "http://biothings.ncats.io/dgidb"
        }
      ],
      "tags": [
        {
          "name": "gene"
        },
        {
          "name": "chemical"
        },
        {
          "name": "association"
        },
        {
          "name": "annotation"
        },
        {
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        },
        {
          "name": "biothings_graph"
        }
      ],
      "~raw": "H4sIAIwbWF8C_91abW_cuBH-K4TaD07qfUkuTVEDBzSJ05yvje2LU7RAbCwoibvLsyQqJGV7a_i_d2ZIvVrSbuJckmu-ZE3xZV6eeWY40m2gcpHxXAYHLPhhOp_Og30WyGypYOA2iFRmeWTpt0i5THDaWiT530Kp7FpmKzOVCpdkPBX48Oejf78-Zv85OsbBm4mMaYW1uTmYzVbSrotwGql0dimuZHYjs7_O3UStElqvhclVZmSYCBaLK5GAfDq4gzmxMJGWuZUqw4mHKipSAeLhAFNLZteCvZTqPUnFDt8cxSH7WAi9YdciZEboKxkJM8XjrNCpOVmeubGmhE21ZjxUhaX50jrpuvu_OD3C51dCGy_WE7AgSovnwSgMfbjtiv46i_QmtyJmp1rFRUQauAW4W6GTfpGyiFsSLF7JOMRj7m29bcPR_S5QVb7yQpceXYlMuLPKkWgtUhnxpD3KjVGRJHd0HmSZsj3j5Jz2kNU8Mwm3SrfHK5kHhhcrzfO10yDndm0IsbOmSDiQK-OwnHMNW9jKQX_UYokb_mEG2AT8Aa7MrJ40i5VdSpHETaRXYyTSth1oqmmu9yM7rXax11jsBnY7WemU29bJboSspQW4wdiXKt5UEQ870G-e5wn4Gc03u5lcX19PcOUE4CSySMUiplkG4cCdWTVGq5XC2V_G7v8ORtMisTKH-G64hx0dGkAsio1xEW4YKJPyKTtWVkBoc8uiQmuQLMF4ZiqD_y2_FBT2MssLy-A4VuTMKvZkPp-zlN_ItEj3aQbQimXXMklYCItTaeGUKXu_ycUBM1YDhtheIo19NGVv-c0B7eCoAqag0G5ScHfnbSY1qf-BlLy4u_MPiLy8-k_n81GT_mo8LBsWlFakbnWvW91MM3vRjrVKSq41h5C66-HLFwz1Q6IE30cYNS37q_BXEVmCY_DsMwQfFfe11kq_EwYcPyRcaTrwZUznoHwZk6nDFHjboRbR4YmDaLYAlGiEbvB3pRmvlOxgax8OsIXOCAyVAWJpBIcznfJBg_5abHZBRzXZZHbb-EPGd2SClegnl46u7wRACTJbn_lZCOLEgG72oiU_Y2dFnisNM34-Ozk-BdPE7NXJuzPYBMIhSQir4oanuUtUT__y53DJ4_hp-Cx6Po9-cFkdnyA9NsmgpUjQRrfVhUAj127uCYevwZ6QbJKQR5fNHaqx3zn_PpQydieK_sgboQPPBs_6WHwwZIvsMlPXWScC74XrbmEAC7dEJViZx9zy0RD8FHy5MHEc0wu3Ybd1TPSPU1ZKVxm0Y4U3wtZzqN4khnJ_XgHGOBbCS61SGvf1ZmWPSvmOMUq4P8QmQI06alGFH_lKEZvDc3nTXO9HfrOo69YppV-cMT_HhX5l5clR5znIfUIm-YVuN46KuwnACTuV8cGrn16_ffnP6auTt6cn_zo-PD_3I0-fj6D94_eaCR7G40seCbsw8r-itUM9utMuBhJxKy7w768UFQ_KRKinuaf5jrbrWm13eyF9tU7Fv7__3EnhNV61uv5ClQivpV1T8J8Ha2nNecD8jWjzO66r3-ItCx_BtY7qTl9J99YNqPZ0p2K1okF36gWe-g3v5w-Kqwdx0gPi6pvd7D-O3utdVFCTredOz_Z4YhSEyJ8gPuDOdg2YAZACE8Hlmx0qQFmmLDMOQ3hpjyOu4xKCfZdyykwgYG-7gbtjJ7Uk5R2xzM6GYtZVNyCX2wqE2_MTrCof2rVWxWqNMdPQEuR-DxvU9dq5BwDs4VoXEHGhYDlEChwP2zmOqA6qfMq4FiQeTJPusvr4cbeqe_yYiSzOlczs1PcuDsWSg_UPqk1_XMj4POjvYHyxZsV29jw9OXs_xk-_tPmzLP__f3k0RNKs-g5jrFrOQQP08SV1zUMrJpcrM0ERSPcxvuybPit7uZO6zbv7YlwzqbvBF8529ar7XH5blzs9obpRBcUKBgrj4P1ycitGIH5StCX36QUntXt5013ucVvL2TqD9IiK2NMqIZQ6z5fvIJwjAQa4uYf0lB0tQR2soh3pnQdPzkECkKVkobI5Gakk4bkhAgBNOTMgD3BKgi9DWCxE7vdEHk1YJogs6shxu_Qs22eFIWB5rVjZlSd-k6tMLjekgN8SLFFEoIp45G0bKpUInk1rtlkCk4sxYzfzco-x_Y7O2uX7pXumBtMhMJAatVgVCdegCcAJDa4KXb3a2cfGMOavQvOVoDWgGcTnlYwFLHG0AvCik_aZUY6dYZUjaEvo0gAOskNhcBtw1hJcoq6xt0w7wMZjOleVxBZ0NW4dPUqTI4o0BIkwU-FcFhbRJZTrqJVnC58jSnIqowCQI1ZCNzz1ZN5tbA9I374h9ajg927o8HlZt1bCbcIUIIsdZYzHsSxh6XIsUqBr4_u1hFyXIs-9DBBWFfZXK8BJWXNc8aQQxLBovgTMCADJGqECRJsnfFNn3MaWLlCqwG6lqYHXB5XJj4EDP8XoZhfM1G2dT7X3Hmh3L_QfYSRRRZLIVNqmjSsaq5pPVWoiYgOn7Blf-fhaDSe77UEvU1Y9SzC334VnmyYrUmyVu3ernLrGcdzpRn8EziuJs9Efa1NoKfo2D1He2M1BVYW_zUGuAB9OGIDzwuLbqjppuBe1Fbz2G2-6vGENFnZY1aDq7lcSu99rm4JBOumvVhGnjipWXSG2KYZ39q08dQ8irni-lJB9jOWayiZyOfARQEdWKAEcLouECuucr3Aa4BUgHcrMJalGTYjs1KwIhmmPYnBMfd-Z2MZzvvPYo_-pK1XchBJpoPNSJpRNWvcCB6NBZ22Ttu6IbnGWb9QOi1teZ-Dy8lsJW7ePtwk7kgH9O9ytCPOZBCpTV2GPJsIxoXfMe9TxG5B5e97D1ZTuTh1qBAdfEL7PgwlmHQgC3BgYEDVVOhZ6nynYXF9LuoLAnbX1tKEgbQ55r7EBXAn1uK98Q3PMU3fVc5d_XnS_rWh3CBYyHvR46_05TrxoXFMbb56a17KeIyDHYIXWewxdvSIoCs1wwdlzYvfS2n4lD_niZDlywRp4O3_fNuQQ-lnli2CZKEfEpVgO8yRW_Wagz5xdPS56vggodRu2Jt0zv9wnCDACwfvJmlqlLvvDjh5angwHZY8_4fnzZwulF04qXApqlE6sNa2FoxVN4VoCdHXcbSU5xHlsB1l6oNxzbneWe4c00BG4DdrXfHcifjTj-wXuM73OmyJiBPB1ZmVEj_0eZ0UIuTyLhOszunqmtdHxq5dHb_Cgzg405j_SajUFqroWotYV1-UW-43u8tTf5eJFuGmPF2Eq3CXTJROs53zepm6NS5_rjUH5k80CXQP3PGsWSLtBT7c0LH9gqzO4dcb6ML-4C5rNxvI1m7PcorIcnr0WHJiZ3La129rsxy1SmI8-PRjvxZTzJ37-_VYO8Hqh3feN9Lkiie4qypeYJev3eqTemUtZimTed35qd3gGcLPd3T0Y-TywDeKm3xHfOXq6YP82uOl08XbCTYCNoWAQOTUXdU_rZaPbGkJ9VkFXOB-1v1dqeq6SeMDjpFcXzbf3UDgc0l9GCPj3P08GEhFzLQAA"
    },
    {
      "_id": "912372f46127b79fb387cd2397203709",
      "_meta": {
        "ETag": "cef79688dde04ff5d6044909addf7df9fb7bc93c8a94f01968e3f789d25157ec",
        "github_username": "kevinxin90",
        "slug": "molecular_kp",
        "timestamp": "2020-09-10T23:26:58.202934",
        "uptime_status": "unknown",
        "uptime_ts": "2020-09-17T00:09:52.990122",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/molecular_data_provider/smartapi.yaml"
      },
      "_score": 0.8,
      "components": {
        "schemas": {
          "BiolinkEntity": {
            "description": "A subclass of named_thing (snake_case)",
            "example": "disease",
            "externalDocs": {
              "description": "Biolink model entities",
              "url": "https://biolink.github.io/biolink-model/docs/NamedThing.html"
            },
            "type": "string"
          },
          "BiolinkRelation": {
            "description": "A relation, i.e. child of related_to (snake_case)",
            "example": "affects",
            "externalDocs": {
              "description": "Biolink model relations",
              "url": "https://biolink.github.io/biolink-model/docs/related_to.html"
            },
            "type": "string"
          },
          "Credentials": {
            "description": "Credentials needed for programmatic access to the remote knowledge graph",
            "properties": {
              "password": {
                "description": "Password needed for programmatic access to the remote knowledge graph",
                "type": "string"
              },
              "username": {
                "description": "Username needed for programmatic access to the remote knowledge graph",
                "type": "string"
              }
            },
            "required": [
              "username",
              "password"
            ],
            "type": "object"
          },
          "EdgeBinding": {
            "properties": {
              "kg_id": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "qg_id": {
                "type": "string"
              }
            },
            "required": [
              "qg_id",
              "kg_id"
            ],
            "type": "object"
          },
          "KEdge": {
            "description": "An edge in the thought subgraph linking two nodes",
            "properties": {
              "id": {
                "description": "Local identifier for this node which is unique within this KnowledgeGraph, and perhaps within the source reasoner's knowledge graph",
                "example": "553903",
                "type": "string"
              },
              "source_id": {
                "description": "Corresponds to the @id of source node of this edge",
                "example": "https://omim.org/entry/603903",
                "type": "string"
              },
              "target_id": {
                "description": "Corresponds to the @id of target node of this edge",
                "example": "https://www.uniprot.org/uniprot/P00738",
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/BiolinkRelation"
              }
            },
            "required": [
              "id",
              "source_id",
              "target_id"
            ],
            "type": "object"
          },
          "KNode": {
            "description": "A node in the thought subgraph",
            "properties": {
              "id": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "type": "string"
              },
              "name": {
                "description": "Formal name of the entity",
                "example": "Haptoglobin",
                "type": "string"
              },
              "type": {
                "description": "Entity type of this node (e.g., protein, disease, etc.)",
                "example": [
                  "protein"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "KnowledgeGraph": {
            "description": "A thought graph associated with this result. This will commonly be a linear path subgraph from one concept to another, but related items aside of the path may be included.",
            "properties": {
              "edges": {
                "description": "List of edges in the KnowledgeGraph",
                "items": {
                  "$ref": "#/components/schemas/KEdge"
                },
                "type": "array"
              },
              "nodes": {
                "description": "List of nodes in the KnowledgeGraph",
                "items": {
                  "$ref": "#/components/schemas/KNode"
                },
                "type": "array"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "Message": {
            "properties": {
              "knowledge_graph": {
                "description": "KnowledgeGraph object that contains all the nodes and edges referenced in any of the possible answers to the query OR connection information for a remote knowledge graph",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/KnowledgeGraph"
                  },
                  {
                    "$ref": "#/components/schemas/RemoteKnowledgeGraph"
                  }
                ],
                "type": "object"
              },
              "query_graph": {
                "$ref": "#/components/schemas/QueryGraph",
                "description": "QueryGraph object that contains a serialization of a query in the form of a graph",
                "type": "object"
              },
              "results": {
                "description": "List of all returned potential answers for the query posed",
                "items": {
                  "$ref": "#/components/schemas/Result"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "NodeBinding": {
            "properties": {
              "kg_id": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "qg_id": {
                "type": "string"
              }
            },
            "required": [
              "qg_id",
              "kg_id"
            ],
            "type": "object"
          },
          "QEdge": {
            "description": "An edge in the QueryGraph",
            "properties": {
              "id": {
                "description": "QueryGraph internal identifier for this QEdge. Recommended form: e00, e01, e02, etc.",
                "example": "e00",
                "type": "string"
              },
              "source_id": {
                "description": "Corresponds to the @id of source node of this edge",
                "type": "string"
              },
              "target_id": {
                "description": "Corresponds to the @id of target node of this edge",
                "type": "string"
              },
              "type": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkRelation"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkRelation"
                    },
                    "type": "array"
                  }
                ]
              }
            },
            "required": [
              "id",
              "source_id",
              "target_id"
            ],
            "type": "object"
          },
          "QNode": {
            "description": "A node in the QueryGraph",
            "properties": {
              "curie": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "id": {
                "description": "QueryGraph internal identifier for this QNode. Recommended form: n00, n01, n02, etc.",
                "example": "n00",
                "type": "string"
              },
              "type": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkEntity"
                  },
                  {
                    "description": "Entity types of this node (e.g., protein, disease, etc.)",
                    "example": [
                      "disease",
                      "genetic_condition"
                    ],
                    "items": {
                      "$ref": "#/components/schemas/BiolinkEntity"
                    },
                    "type": "array"
                  }
                ]
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "Query": {
            "properties": {
              "message": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "required": [
              "message"
            ],
            "type": "object",
            "x-body-name": "request_body"
          },
          "QueryGraph": {
            "description": "A graph intended to be the thought path to be followed by a reasoner to answer the question. This graph is a representation of a question.",
            "properties": {
              "edges": {
                "description": "List of edges in the QueryGraph",
                "items": {
                  "$ref": "#/components/schemas/QEdge"
                },
                "type": "array"
              },
              "nodes": {
                "description": "List of nodes in the QueryGraph",
                "items": {
                  "$ref": "#/components/schemas/QNode"
                },
                "type": "array"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "RemoteKnowledgeGraph": {
            "description": "A thought graph associated with this result that is not repeated here, but stored elsewhere in a way that can be remotely accessed by the reader of this Message",
            "properties": {
              "credentials": {
                "$ref": "#/components/schemas/Credentials",
                "description": "Credentials needed for programmatic access to the remote knowledge graph",
                "type": "object"
              },
              "url": {
                "description": "URL that provides programmatic access to the remote knowledge graph",
                "example": "http://robokop.renci.org/api/kg",
                "type": "string"
              }
            },
            "required": [
              "url",
              "credentials"
            ],
            "type": "object"
          },
          "Result": {
            "description": "One of potentially several results or answers for a query",
            "properties": {
              "edge_bindings": {
                "description": "List of QEdge-KEdge bindings.",
                "items": {
                  "$ref": "#/components/schemas/EdgeBinding"
                },
                "type": "array"
              },
              "node_bindings": {
                "description": "List of QNode-KNode bindings.",
                "items": {
                  "$ref": "#/components/schemas/NodeBinding"
                },
                "type": "array"
              },
              "score": {
                "description": "Any type of score associated with this result",
                "example": 163.233,
                "format": "float",
                "type": "number"
              }
            },
            "required": [
              "node_bindings",
              "edge_bindings"
            ],
            "type": "object"
          }
        },
        "x-bte-kgs-operations": {
          "disease_related_to_gene": [
            {
              "inputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "predicate": "related_to",
              "source": "Molecular Data Provider KP",
              "supportBatch": false
            }
          ],
          "gene_related_to_disease": [
            {
              "inputs": [
                {
                  "id": "HGNC",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "MONDO",
                  "semantic": "Disease"
                }
              ],
              "predicate": "related_to",
              "source": "Molecular Data Provider KP",
              "supportBatch": false
            }
          ]
        }
      },
      "info": {
        "contact": {
          "email": "vdancik@broadinstitute.org",
          "name": "Vlado Dancik"
        },
        "description": "A ReasonerStdAPI for Molecular Data Provider",
        "termsOfService": "https://translator.broadinstitute.org",
        "title": "Molecular Data Provider API",
        "version": "1.0.0",
        "x-reasoner_standard_version": "0.9.1"
      },
      "openapi": "3.0.1",
      "paths": [
        {
          "path": "/predicates",
          "pathitem": {
            "get": {
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "additionalProperties": {
                          "additionalProperties": {
                            "description": "Array of predicates",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "description": "Target map",
                          "type": "object"
                        },
                        "description": "Source map",
                        "example": {
                          "chemical_substance": {
                            "chemical_substance": [
                              "correlated_with"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Predicates by source and target"
                }
              },
              "summary": "Get supported relationships by source and target"
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "post": {
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": {
                      "message": {
                        "query_graph": {
                          "edges": [
                            {
                              "id": "e00",
                              "source_id": "n00",
                              "target_id": "n01",
                              "type": "treated_by"
                            }
                          ],
                          "nodes": [
                            {
                              "curie": "MONDO:0021668",
                              "id": "n00",
                              "type": "disease"
                            },
                            {
                              "id": "n01",
                              "type": "chemical_substance"
                            }
                          ]
                        }
                      }
                    },
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "A message with question graph.",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Message"
                      }
                    }
                  },
                  "description": "A message with knowledge graph and answers."
                }
              },
              "summary": "Get answers to a question",
              "tags": [
                "0.9.2"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease_related_to_gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene_related_to_disease"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "url": "https://translator.broadinstitute.org/molepro_reasoner"
        }
      ],
      "tags": [
        {
          "name": "0.9.2"
        },
        {
          "name": "translator"
        },
        {
          "name": "reasoner"
        }
      ],
      "~raw": "H4sIAEK2Wl8C_91abW_bNhD-K4Q2YBuQyE6CdVs-rW_rii5Nmnb7UgQGJdE2F4lUSSquF_i_7-4oyZIsqc7LNmD70CUUebyX5-4ekrkNdC4Uz2VwyoKTcBoeBQcskGquYeA2iLVyPHb0s8i4THHaTcJVLK9_jozmiVTWSVc4EWqzwLWKZwJn_ZHyRLMXNDXYwIdE2NjI3Emt8PtTdim41UqY9y55evGazbVhZzoVcZFyAwsdZxdG38hEGJQLu6QkeGAOAxk470YYW25xBPZMcezzoSn3mlnHVcJNMmvMm4Y_ebudMJk9n78X5kbGtNnSudyeTibOcGVT7rQJe8xG8ywsApGw6ONtUJh079WTDAzKjZ5VOgabK9SFL0phlUdRzWPcazu0Fdweb4vKuVtaiuEkNyKRMXfC_74QPra2yDJu1rj0lXDMFnmujRMJMwKkg5vsUuaWRWtmdWFiwcCJzHGD6w9wO5vDnFLo8XRK_-8E_KLeelAOwk0orxLP8xSnw-rJn5ZEgJ7xEmDYJ_29l5fxnAK5zskPOvpTxCSaJ4nEuTwFwOTCOFlq25HzgZR5uJynxvA103PW8HhDIMfPlGpOZF5A9ck6IxVgaoOoEp95lhPuIRnBdpCUzmwRIYzjkeGP4EtDwRPJbCXdMrjaVP-B2MmnQlC4b4NcW-9wI2DQumc6Wde5PxqMpm6ZsJYv_M8ke7YwPF_6eclClFCWCVooppSVHgIzP6b8mMdCPXbU9JkDVKM50drDWumkkhsXRvricP72xfnpdHp89OTJj-TflvRSUiItJIjwOdO7V49TN1fedw0Mfm3EHGd_NYl1BhkA7rIT_91O3pGL_Zqd2lf6i2FoGPkdPjHyWegz6lMhATkw25lCbAaT7C4pM6ruWRnBfRS-VnqVYli9xpTFUIhWUP_CwDupXVDKj8xpxmtzg0aVK4vbFRXryInD64U9xPzy1cdHuVf_vumTMsCzKgOcni2EKgO-vxhc05RR46aEwnZ9w9X-52dSp1Jdv1RQ6Ne9BQKqbBSn3FqsEli4YYslZD771ip-LWYx7PRd0KoBNXBpFLoVlKEXOu4tQKUCLIMsSZlAPaSvQZ3mFPmJ4QIiW0Sh1NXIIS2dJLDB5C3q9wHVC5cuS6njdQvWQb3pZdk1-u2uesoBk6EIWbyUaYI-2Dp6zAV8PodSbO_ugrqV3dcHW_1GffAc0hbdzdNepRqfmRLwc0LMBwgA5BIkjZMx43EM6YbZ4pYCFM-0E92kQyvydgvKAUwrbZLe7lt-e_CePRYXFsOQib59fy-_Pfq-m3aV_LjVghhP6Ymr3SaOC1-C6GdSJSiJPNd25PXCd6DbALL7fO6rz67htyPde6fXQ82AsU-15C_a46fCqNdmwJI3aEpvnilGDpSKHOuWulgskdpFvmYjurHauJVmvpPuAkr2Quk3DY2RSULxXALzxphC6bIkh62WMl4y-K1QEko9dQxSAobeVHF9hTocUOOADZccyGU9T1TksGKx39g-QDRqwvffn_w0PRlAZ5Nm7GYjsiTsq0kNwZ8lVaNSBzIJfiX1UYHO1lUF0ZnMiM2DV8x68mQ6olGT5NxBI79sb41Wq1UIIYCQOlKs_HlyMZ3-cPLjkGp-6AtcoVvmd8Hrkbt1fcvqISi_Bcv6WwbZPIDkvXH7_PfL1y8Hcdvx4vnZ67PT0SgOVbxftMkgP6joUZiE777rzg6_8tzpRaojqb4UjM4OnlQw_FwDgTz0rQgX4QHWVyck9NeSLhww4eKw00g_BuU0CsddCllfsIdC2sr3_thW8SyppLU6lthnPdUk4yAhitSF7AP-spJpygCUmVbpmkVwhsRaJjj0FTjnbgvc3OiMAXBhLtD33BH5VBriYQ5YVLiKbzCyHTaWSR0wkpRxEi9VnBbQusIeoFVHm90aKa1DYTShQm7HGy23j-abL_I9oWicggZVoAkPV4GScx801M3EO2cAGWeNA2O3-1Y6Ns6QHdvaZjAvFwzkjtGVlVQQUIAJmuztx07jgwFWCiMAEgk6hat1HXRtrYxS0Tyt4DidZ9n5JYpWsA-e1PCGzGRU_aiM8BHm0uAQ4y5ux2b4rFItuKQtu8sGHN49lX_57FpDpOP87ccBxzNgYsBv5V_eP-BeXjqxRCH6zg_v0LuGxj7rR7GNMTbCFUZBNHPtPLGuA-gLfBVBiK9I7gD5S9p_CPM9CmOK_D9Y5bs9WWUbJ3t14QZ6pPLnt96eTCqE7FJgqReqPDtkp0xMp9DQpkf4z7FvbZ3OKtq3Pf8sF_x3-N0YO9i3vuywtjbW7rp2F4mPwgLf7ccCR5FXXQc-KgV87KR9YHqgm_rSQ2F6KEwPNZAeajA97gup8paL_DDMVe1DyGrj5gtv5ZyMZ9Bw_F18h8HeTeP9YDwE1u01ehuBzfvwPa9du7tWIq563yE-H0Y6WR9uH3zoVnWGg1vNRlj3ooYYYQcqUSRaxyuiwH54rtNUr2BWtCai40_lnk9jo616LN3qliy9lG9pQQ4VD6xu0wE_-8Gkul0I9kTBu0cj1Pfb_pHJdC8RfNhhy3M6ylU8KeX09MLg7CT84ck6DToykVqxwlHi0mwFRyZPBrlC5HhSDMc0f8vnIeTv-Ti-2VYFocqCnlLeuU0d9Wvz6nWXtz7mzWtPEPyV8u4F6OVv3iW5f6i299uwc8FzOpkYHelrnYd4lpF0w8NzOble7HdZCsriA0bDYYPYIhbcY9m5Ip5S024IsxU3wvC0xBAUfNPi4uUxYCDnZ5HnzqPJR5l7SAdiVs0P75B6zZvf4fzfTxXM4kM6GN9LleZxoV8VG0OS9dPw7fUPTRpL5TZ8jp6chMcnJzDmT7Aobp5q7pq4UUUW4V8P9NajrXPKurQd6MPQZvhN7zYYemHzr8UqL1zr5fjXV2-fE6UEBwLmYv--iA97uLMuXHcBvQd3V7yon_EIiOX7vG-jlSZb4jr2NydvLmie_3OJZ9zFWHbnkE2CZA89Q5KCPdqOm7frjv_Qus1m8zcke6-DPCQAAA=="
    },
    {
      "_id": "09c8782d9f4027712e65b95424adba79",
      "_meta": {
        "ETag": "7f3beeffdd33e2a08aa008ee963221156d303f2c76ac8e1a3bb15de1b25e7302",
        "github_username": "newgene",
        "slug": "myvariant",
        "timestamp": "2020-09-12T00:01:38.630672",
        "uptime_status": "good",
        "uptime_ts": "2020-09-17T00:09:53.165851",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/myvariant.info/openapi_full.yml"
      },
      "_score": 0.8,
      "components": {
        "parameters": {
          "callback": {
            "description": "you can pass a \"callback\" parameter to make a JSONP call.",
            "in": "query",
            "name": "callback",
            "schema": {
              "type": "string"
            }
          },
          "dotfield": {
            "description": "control the format of the returned variant object. If \"true\" or \"1\", all fields will be collapsed into a single level deep structure (all nested objects will be a single level deep, using dotfield notation to signify the nested structure) Default: false.",
            "in": "query",
            "name": "dotfield",
            "schema": {
              "type": "boolean"
            }
          },
          "email": {
            "description": "If you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            }
          },
          "fields": {
            "description": "a comma-separated fields to limit the fields returned from the matching variant hits. The supported field names can be found from any variant object (e.g. http://myvariant.info/v1/variant/rs12190874). Note that it supports dot notation as well, e.g., you can pass \"dbsnp.rsid\". If \"fields=all\", all available fields will be returned. Default: \"all\".",
            "in": "query",
            "name": "fields",
            "schema": {
              "type": "string"
            }
          },
          "from": {
            "description": "the number of matching variant hits to skip, starting from 0. Combining with \"size\" parameter, this can be useful for paging. Default: 0.",
            "in": "query",
            "name": "from",
            "schema": {
              "type": "integer"
            }
          },
          "size": {
            "description": "the maximum number of matching variant hits to return (with a cap of 1000 at the moment). Default: 10.",
            "in": "query",
            "name": "size",
            "schema": {
              "type": "integer"
            }
          },
          "sort": {
            "description": "the comma-separated fields to sort on. Prefix with \"-\" for descending order, otherwise in ascending order. Default: sort by matching scores in decending order.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        },
        "schemas": {
          "ErrorResult": {
            "properties": {
              "message": {
                "type": "string"
              },
              "success": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "QueryPOSTResult": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Variant"
                },
                {
                  "properties": {
                    "_score": {
                      "format": "float",
                      "type": "number"
                    },
                    "query": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "type": "array"
          },
          "QueryResult": {
            "properties": {
              "hits": {
                "items": {
                  "$ref": "#/components/schemas/Variant"
                },
                "type": "array"
              },
              "max_score": {
                "format": "float",
                "type": "number"
              },
              "took": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          },
          "Variant": {
            "properties": {
              "_id": {
                "type": "string"
              }
            },
            "required": [
              "_id"
            ],
            "type": "object"
          },
          "int64_or_array": {
            "oneOf": [
              {
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "int64",
                "type": "integer"
              }
            ]
          },
          "string_or_array": {
            "oneOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "x-bte-kgs-operations": {
          "conditionAssociatedWithVariant": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "OMIM",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "DBSNP",
                  "semantic": "SequenceVariant"
                }
              ],
              "parameters": {
                "fields": "dbsnp.rsid",
                "size": "250"
              },
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "clinvar.rcv.conditions.identifiers.omim"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/dbsnp"
              },
              "source": "clinvar",
              "supportBatch": true
            }
          ],
          "variantAffectDrugResponse": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "name",
                  "semantic": "ChemicalSubstance"
                }
              ],
              "outputs": [
                {
                  "id": "DBSNP",
                  "semantic": "SequenceVariant"
                }
              ],
              "parameters": {
                "fields": "civic.evidence_items.drugs.name",
                "size": "1000"
              },
              "predicate": "variant_affect_drug_response",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "dbsnp.rsid"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/variant_affect_drug_response"
              },
              "source": "civic",
              "supportBatch": true
            }
          ],
          "variantAssociatedWithCondition": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "DBSNP",
                  "semantic": "SequenceVariant"
                }
              ],
              "outputs": [
                {
                  "id": "OMIM",
                  "semantic": "Disease"
                }
              ],
              "parameters": {
                "fields": "clinvar.rcv"
              },
              "predicate": "related_to",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "dbsnp.rsid"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/variant-disease-omim"
              },
              "source": "clinvar",
              "supportBatch": true
            }
          ],
          "variantAssociatedWithGene": [
            {
              "inputSeparator": ",",
              "inputs": [
                {
                  "id": "DBSNP",
                  "semantic": "SequenceVariant"
                }
              ],
              "outputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "parameters": {
                "fields": "dbsnp.gene.geneid"
              },
              "predicate": "located_in",
              "requestBody": {
                "body": {
                  "q": "{inputs[0]}",
                  "scopes": "dbsnp.rsid"
                },
                "header": "application/x-www-form-urlencoded"
              },
              "response_mapping": {
                "$ref": "#/components/x-bte-response-mapping/variant-gene"
              },
              "source": "dbsnp",
              "supportBatch": true
            }
          ]
        },
        "x-bte-response-mapping": {
          "dbsnp": {
            "DBSNP": "dbsnp.rsid"
          },
          "variant-disease-omim": {
            "OMIM": "clinvar.rcv.conditions.identifiers.omim",
            "clinicalsignificance": "clinvar.rcv.clinical_significance",
            "name": "clinvar.rcv.conditions.name"
          },
          "variant-gene": {
            "NCBIGene": "dbsnp.gene.geneid"
          },
          "variant_affect_drug_response": {
            "clinical_significance": "civic.evidence_items.clinical_significance",
            "evidence_level": "civic.evidence_items.evidence_level",
            "evidence_type": "civic.evidence_items.evidence_type",
            "name": "civic.evidence_items.drugs.name",
            "pubmed": "civic.evidence_items.source.pubmed"
          }
        }
      },
      "info": {
        "contact": {
          "email": "help@myvariant.info",
          "name": "Chunlei Wu",
          "x-id": "https://github.com/newgene",
          "x-role": "responsible developer"
        },
        "description": "Documentation of the MyVariant.info Variant Query web services. Learn more about [MyVariant.info](http://myvariant.info/)",
        "termsOfService": "http://myvariant.info/terms/",
        "title": "MyVariant.info API",
        "version": "1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/metadata",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "MyVariant.info metadata object"
                }
              },
              "summary": "Get metadata about the data available from MyVariant.info.",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/fields",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Pass a search term to filter the available fields, e.g. \"search=clinvar\".",
                  "in": "query",
                  "name": "search",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Pass a prefix string to filter the available fields, e.g. \"prefix=refseq\".",
                  "in": "query",
                  "name": "prefix",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                }
              ],
              "responses": {
                "200": {
                  "description": "MyVariant.info metadata fields object"
                }
              },
              "summary": "Get metadata about the data fields available from MyVariant.info.",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Query string. Examples \"rs752396467\", \"possibly_damaging\", \"CDK7\". The detailed query syntax can be found from our [docs](http://docs.myvariant.info/en/latest/doc/variant_query_service.html).",
                  "example": "CDK7",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "1": "query",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/size",
                  "in": "query",
                  "name": "size"
                },
                {
                  "$ref": "#/components/parameters/from",
                  "in": "query",
                  "name": "from"
                },
                {
                  "$ref": "#/components/parameters/sort",
                  "in": "query",
                  "name": "sort"
                },
                {
                  "description": "a single field or comma-separated fields to return facets, for example, \"facets=clinvar.gene.id\", \"facets=clinvar.gene.id,dbnsfp.uniprot.acc\".",
                  "in": "query",
                  "name": "facets",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "in": "query",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "in": "query",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryResult"
                      }
                    }
                  },
                  "description": "A query response object with \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make variant query and return matching variant list. Support JSONP and CORS as well.",
              "tags": [
                "query"
              ]
            },
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "in": "query",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "in": "query",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "in": "query",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "q": {
                          "description": "multiple query terms seperated by comma (also support \"+\" or white space), but no wildcard, e.g., \"q=rs58991260,rs2500\" or \"q=rs58991260+rs2500\"",
                          "type": "string"
                        },
                        "scopes": {
                          "description": "Specify one or more fields (separated by comma) as the search \"scopes\", e.g., \"scopes=dbsnp.rsid\". The available \"fields\" that can be passed to \"scopes\" parameter are listed [here](http://docs.myvariant.info/en/latest/doc/data.html#available-fields). Default: \"scopes=_id\" (HGVS id).",
                          "type": "string"
                        }
                      },
                      "required": [
                        "q"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/QueryPOSTResult"
                      }
                    }
                  },
                  "description": "Query response objects with \"hits\" property"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ErrorResult"
                      }
                    }
                  },
                  "description": "A response indicating an improperly formatted query"
                }
              },
              "summary": "Make variant batch query and return matching variant hits",
              "tags": [
                "query"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/variantAssociatedWithGene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/variantAssociatedWithCondition"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/conditionAssociatedWithVariant"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/variantAffectDrugResponse"
                }
              ]
            }
          }
        },
        {
          "path": "/variant",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "$ref": "#/components/parameters/fields",
                  "in": "query",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "in": "query",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "in": "query",
                  "name": "email"
                }
              ],
              "requestBody": {
                "content": {
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "description": "multiple variant ids seperated by comma, e.g., \"ids=chr6:g.152708291G>A,chr1:g.35367G>A\" or \"ids=rs5882,rs12190874\". Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted.",
                          "type": "string"
                        }
                      },
                      "required": [
                        "ids"
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Variant"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "a list of matching variant objects"
                }
              },
              "summary": "For a list of variant ids, return the matching variant objects",
              "tags": [
                "variant"
              ]
            }
          }
        },
        {
          "path": "/variant/{variantid}",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "HGVS or rsid, e.g., chr6:g.152708291G>A, rs12190874",
                  "example": "chr6:g.152708291G>A",
                  "in": "path",
                  "name": "variantid",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "$ref": "#/components/parameters/fields",
                  "in": "query",
                  "name": "fields"
                },
                {
                  "$ref": "#/components/parameters/dotfield",
                  "in": "query",
                  "name": "dotfield"
                },
                {
                  "$ref": "#/components/parameters/callback",
                  "in": "query",
                  "name": "callback"
                },
                {
                  "$ref": "#/components/parameters/email",
                  "in": "query",
                  "name": "email"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Variant"
                      }
                    }
                  },
                  "description": "A matching variant object"
                },
                "404": {
                  "description": "A response indicating an unknown variant id"
                }
              },
              "summary": "Retrieve variant annotation object based on HGVS or rsid, support JSONP and CORS as well.",
              "tags": [
                "variant"
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "description": "Encrypted Production server",
          "url": "https://myvariant.info/v1"
        },
        {
          "description": "Production server",
          "url": "http://myvariant.info/v1"
        }
      ],
      "tags": [
        {
          "name": "variant"
        },
        {
          "name": "query"
        },
        {
          "name": "metadata"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        }
      ],
      "~raw": "H4sIAOIPXF8C_-1aWXMbNxL-KyhmH6QKOSRlSz6qtLW25FW8G1uKlXIeLBULnAFJRDODEYCRxKj037e7gbnI4SGvnGRT-2IPcTT6_Lob0H1HZSLlmey8Zp1nwSAYdLqsI9OJgoH7TqhSy0NL3yLhMsZlMxFn_0jmN1xLntqAFsOmlCcCp49meRoLyX7JcfSuJyPaZG1mXvf7U2ln-TgIVdJPxe1UpMKt0iqm3VqYTKVGjmPBInEjYuBPdx5gTSRMqGVmpUpx4bEK80QAezjA1ITZmWAf5p9rXDH_g_2UCz1nt2LMjNA3MhQmYD8KrlOWKC0YH6vcsi_NzZc7yDJw3JS0v4v8WqETczo5d9QK-ZYX07o-7ZDWCbjA4puz9zh9I7Txgg3BBigvsgqjMPTlflH4d2mo55kVETvTKspD0oHbgNRyHdd1vsDUzRDpL9HcRKmd0CXKxqeezcIH_DJ3TjF4jVZoDiXC8ohb3hy1mqcm5lbp5vhYKjuTKRxGx2bczgy5Zr-kg7-mwjlsxjVstKUO_6bFBMl81wfvAycD5zH9alE_5HE85uGVi4CK45pvl0uIAe-rwjGxNxjQ_wtqXbB3wSlT418FRNYDmTpPEg4nwfITYas1zjHRsd3PG4hAjpEx0SpZcPagU7NEpdhLOqBUUH8iRRyZtXpa9AtuDOPgE1yHM4YezaxiExnDJ_FWY4uId5kIpgG76Lgth2EsU3CIi06wRrNuLY6YcAZQQ5zZeeYmrQazk65WsZeBceUdcyu3ZdBtOoR_jbhez59bug1_fy43cxJ_jbf5nf-F0zm5HuFqDqedNgP27o4nWSwMGEqbF_t7z14dPD94cQFHguWUwRwxH0U84VNY7oaPjv8NCwL2MwoB3MgYIPLaUZ1DrrhjIU_ZGGRReRo5iVSu2ZdIhaZEfPwRLGCdSPuASMJYnO37qRGRHvmkEsxsEu-SSoRjndIhsLTG1NcdsvB1LrXARGl1LrZwsmGD2CaX80FfO9aPbOWwRv4m1kUuTm9FCNW9hhBNb8eR0nYdRzjdhhWAYqDCAgeY0gzoJ7xnBBLHdOqdHvBDC5tDgTDhobCAGBNY7K2KjuaGC2gLsI4JZOScsH2uG41TM8mCPJWZVjbgYbgecRyZ3x1xtiEYKUuKWkOwXLIVQVdbrqbm5tegIRaqQJS-eZbFMqS6sP-rIcvf13XYyoybN32CoE_C5DGiZUvd-cbjScGHh1Z2C4UtGH8mrbnoQDrCutVSudN5_tRMvtNa6fVMluzJNKJzICsC9MnEcRbP0aMTbm0BkEu54QO_EswDnZeZA2b6uICtIdZi5YpYGhuw8zzLIPrYv85PP57R-qPTT-eMG6i-47iZLtyxl3gswPnX1WwVsq2KokcA3R_r1jBr7FsVzdf6yl3v9va2h7brQW0u0lBFlDcazuO9T_oguW4rGBJwHglo5k1LnQoUebCPgHA8d9jIdnhsFDPerhed78G7AQtvwdEFMxmA1G6XjaFwSBXEQByFXEeuwEIsvD7UZv_lq1fDvYNBV5u9_cHA7W9OfV9MkYMsYBwhIAhk2sQ4z0QoJ3MGykey1M95EN-pYL2QZhc9ESscX81eeMoI3AXLbuQwGps0C6Ari4qCoqqELrxbgSh2xm1RVGRQisJhkDwquqx0B8aBNYwSWPJlJrR4RL2BVRWVF9-VTPQcC7sBOxYTDsZ8XfE-QqbZzg8nn8-ZjFxJ0pI56nUHhCOWbX7420Ps2en5z-sQ7Kc2kDV_cZQdI6hugbUofhuU0k3K2Ire1dT0FIUysLoOStuWF9XtG2NUKDF-fgGtn-BVzWrU257QkQJdkQofSS0sNjbpfa7fNTyet8kEHOtY59NP3paAx659KS4xCFH_n6C-YYKSkVmbogq_h3UtKaqCbpg_DGf64PU0GO7vvRi83Hs1PPn7my6MDWHs2f6zgxfwu8hAuBxz0Ms9SE3DveGrwcsXzxHtPyrIbQ7Zc61ByhhvDyHHwP8WAxZTiEyz3LGUZ4j5w8FgAKF6J5M86dIKQAesC-MYk4NKJMLAdliMCnk6NIZMnZjNeFcLpJJDrjWft6Mfp2SGN69L-OTRegns_glqr7bVrNotoA7VtpJcHfGK4GzGav_ef8jo4TEXD5QpgTlM94U7tTkSq_xkoc1vWV3FFd5U1sOqZPLrmv__bcx58m70z9M8lhHUXi2scGxfvTxvg8CVJUaeXqXqNq0F0VK0fRLgNOKmgk-epqp4L3FN65hjwQq_mwFgHtHF1QIRz6-0shx395VhW0Sdq5wK6cxd6F6UixtFNABtggjMPXO4KNjGlTbGVeXGLcyhi2gVEz65kq54cnLABVpsGjVg7ycgA0Z0kW6G2GUAO0V_UmSGUMUxz9AQMgXxykuqGJ-_WCREhleieQjnCGzHYpYK6iKqotgRatnZZTmOsUI2VnoAnGTkNMXeCcXwJMuDdqu2YgIdoAi2if92HY-VigVPnZKLV8QlDYO60AOwSdJimsdcA-vgN6hnvKItXu66mImxrMg1nwraA6JAQXEjIwFbMDjoEHBj5ZI4bHAdmiUP0uAOJHNukALYZgIWULeYx6m_AJrBRjzZ7E-1p5al1Ln63jGWUCg4P3NjpYPRbXVrgsR-wPWoPnILigx5Ni2X3jydLzgs26FHkVUvfWWGrTLgbr1QAp792QadrfIzDxpFVm1E-UWn2WVTyDixD8HPi3hZfL8pHb5QTaMHpo3B5uy3hQHxQrrFfBQveTIGZ2qrftAaFF5XEuLPWK4JtEnvg4AdqWQsUxzxzSxeoNcxDotHWRoNgmCSx3T_nNFLR03YQbDpOr1dSMAZMcVndcoYeH-_Qkpfzm4jrS_gdkgocHCe4XIqirnz50The339wmK4VoDi3WGjAHjdv0KA1XGGuyDzBezMvRx6Y_TAEqhrpCUg44KkSkdoFAX09K2kTAxe3ZityUR0oTUpFWVCBTkcN0WiuWnTE8YGD30o5x3I1O8rWposAALEu1ZaVDiEgK5mNXIXg7WiZfEmp9lsQCCeTtZ0yS19xxLTI9Iefbq0S54dK27rfZRzT2KpenNsi-hFGS5bep1CrtWapOuXp2msYARi7NFSWqWu2gOCJi2PV4dLix0_1286Fgwgo5XabLSsuPCynTwcf_B8pPTICY3kQEOFb1RKrGSnHXXZG_ItqnC7nWRrx_4WvLRESMu5i6tcN-rum4rCvZdAT4GzSNajZo_-8AkHPh69fX_ifvhkSO-F-I-khqrcEgH0QLneU4l0Wen0w_sPVJv6h0Yd3gTlHZkJoByCFhMAT5uA9tSr4vYtNN1109BrxK5AhK80XN7m14wai6iORjGIw-O35x_PKskwzddFGnG6fBtFOp-OCnXRxpJPCTVfILC0A-ojMk-Ay5d5HS0x27a3fTXWpcW6wqSt25ur6tuo5N68zy3DF698nFDktG8wUN6GIvCral61dLNb-lTLdS35tC_L3mI-qu4Y6Pbq3OVFpZGPLrHV7NfKEnaFb2YQ_diUksZihV_RCFIaZWWUoNzaablCHBcf-EDVuSeWzJfB5UOn_uSz6DwzwSF5UiBuvHZ8KCT11z7ubxGdW9Kf2CV4DRPSQxIyBwYowRrBTOV2cXMZsAv73f14_ZJhVA_8NRfTi0DRb4DEA9HccJP-hIauxfiyibWIycRWNU3sN_1ljEzQurD32OHvE9u4gerO1hveOZ48qEnpVSPQ2dsf_J6W3zZ9fY1btJh2e79Y9qlv7xYOK5sxv_xC9ZThvjnDFn6BvdyyY6zN5U1XwaP-OIh4Yl8otVPbegT1PlYX5_kY2n6qh54SLNp1_IBV58N_AON12nXJLwAA"
    },
    {
      "_id": "08f5b7b0c0a70245f8f42af19327611a",
      "_meta": {
        "ETag": "f04621575f72f6977eb26a1675bf5d84d513f2e3d2efc64609dead8d4cdcdad9",
        "github_username": "kevinxin90",
        "slug": "genetics_kp",
        "timestamp": "2020-09-12T00:03:07.255084",
        "uptime_status": "unknown",
        "uptime_ts": "2020-09-17T00:09:53.181426",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/genetics_provider/smartapi.yaml"
      },
      "_score": 0.8,
      "components": {
        "schemas": {
          "BiolinkEntity": {
            "description": "A subclass of named_thing (snake_case)",
            "example": "disease",
            "externalDocs": {
              "description": "Biolink model entities",
              "url": "https://biolink.github.io/biolink-model/docs/NamedThing.html"
            },
            "type": "string"
          },
          "BiolinkRelation": {
            "description": "A relation, i.e. child of related_to (snake_case)",
            "example": "affects",
            "externalDocs": {
              "description": "Biolink model relations",
              "url": "https://biolink.github.io/biolink-model/docs/related_to.html"
            },
            "type": "string"
          },
          "Credentials": {
            "description": "Credentials needed for programmatic access to the remote knowledge graph",
            "properties": {
              "password": {
                "description": "Password needed for programmatic access to the remote knowledge graph",
                "type": "string"
              },
              "username": {
                "description": "Username needed for programmatic access to the remote knowledge graph",
                "type": "string"
              }
            },
            "required": [
              "username",
              "password"
            ],
            "type": "object"
          },
          "EdgeBinding": {
            "properties": {
              "kg_id": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "qg_id": {
                "type": "string"
              }
            },
            "required": [
              "qg_id",
              "kg_id"
            ],
            "type": "object"
          },
          "KEdge": {
            "description": "An edge in the thought subgraph linking two nodes",
            "properties": {
              "id": {
                "description": "Local identifier for this node which is unique within this KnowledgeGraph, and perhaps within the source reasoner's knowledge graph",
                "example": "553903",
                "type": "string"
              },
              "source_id": {
                "description": "Corresponds to the @id of source node of this edge",
                "example": "https://omim.org/entry/603903",
                "type": "string"
              },
              "target_id": {
                "description": "Corresponds to the @id of target node of this edge",
                "example": "https://www.uniprot.org/uniprot/P00738",
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/BiolinkRelation"
              }
            },
            "required": [
              "id",
              "source_id",
              "target_id"
            ],
            "type": "object"
          },
          "KNode": {
            "description": "A node in the thought subgraph",
            "properties": {
              "id": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "type": "string"
              },
              "name": {
                "description": "Formal name of the entity",
                "example": "Haptoglobin",
                "type": "string"
              },
              "type": {
                "description": "Entity type of this node (e.g., protein, disease, etc.)",
                "example": [
                  "protein"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "KnowledgeGraph": {
            "description": "A thought graph associated with this result. This will commonly be a linear path subgraph from one concept to another, but related items aside of the path may be included.",
            "properties": {
              "edges": {
                "description": "List of edges in the KnowledgeGraph",
                "items": {
                  "$ref": "#/components/schemas/KEdge"
                },
                "type": "array"
              },
              "nodes": {
                "description": "List of nodes in the KnowledgeGraph",
                "items": {
                  "$ref": "#/components/schemas/KNode"
                },
                "type": "array"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "Message": {
            "properties": {
              "knowledge_graph": {
                "description": "KnowledgeGraph object that contains all the nodes and edges referenced in any of the possible answers to the query OR connection information for a remote knowledge graph",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/KnowledgeGraph"
                  },
                  {
                    "$ref": "#/components/schemas/RemoteKnowledgeGraph"
                  }
                ],
                "type": "object"
              },
              "query_graph": {
                "$ref": "#/components/schemas/QueryGraph",
                "description": "QueryGraph object that contains a serialization of a query in the form of a graph",
                "type": "object"
              },
              "results": {
                "description": "List of all returned potential answers for the query posed",
                "items": {
                  "$ref": "#/components/schemas/Result"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "NodeBinding": {
            "properties": {
              "kg_id": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "qg_id": {
                "type": "string"
              }
            },
            "required": [
              "qg_id",
              "kg_id"
            ],
            "type": "object"
          },
          "QEdge": {
            "description": "An edge in the QueryGraph",
            "properties": {
              "id": {
                "description": "QueryGraph internal identifier for this QEdge. Recommended form: e00, e01, e02, etc.",
                "example": "e00",
                "type": "string"
              },
              "source_id": {
                "description": "Corresponds to the @id of source node of this edge",
                "type": "string"
              },
              "target_id": {
                "description": "Corresponds to the @id of target node of this edge",
                "type": "string"
              },
              "type": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkRelation"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkRelation"
                    },
                    "type": "array"
                  }
                ]
              }
            },
            "required": [
              "id",
              "source_id",
              "target_id"
            ],
            "type": "object"
          },
          "QNode": {
            "description": "A node in the QueryGraph",
            "properties": {
              "curie": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "id": {
                "description": "QueryGraph internal identifier for this QNode. Recommended form: n00, n01, n02, etc.",
                "example": "n00",
                "type": "string"
              },
              "type": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkEntity"
                  },
                  {
                    "description": "Entity types of this node (e.g., protein, disease, etc.)",
                    "example": [
                      "disease",
                      "genetic_condition"
                    ],
                    "items": {
                      "$ref": "#/components/schemas/BiolinkEntity"
                    },
                    "type": "array"
                  }
                ]
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "Query": {
            "properties": {
              "message": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "required": [
              "message"
            ],
            "type": "object",
            "x-body-name": "request_body"
          },
          "QueryGraph": {
            "description": "A graph intended to be the thought path to be followed by a reasoner to answer the question. This graph is a representation of a question.",
            "properties": {
              "edges": {
                "description": "List of edges in the QueryGraph",
                "items": {
                  "$ref": "#/components/schemas/QEdge"
                },
                "type": "array"
              },
              "nodes": {
                "description": "List of nodes in the QueryGraph",
                "items": {
                  "$ref": "#/components/schemas/QNode"
                },
                "type": "array"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "RemoteKnowledgeGraph": {
            "description": "A thought graph associated with this result that is not repeated here, but stored elsewhere in a way that can be remotely accessed by the reader of this Message",
            "properties": {
              "credentials": {
                "$ref": "#/components/schemas/Credentials",
                "description": "Credentials needed for programmatic access to the remote knowledge graph",
                "type": "object"
              },
              "url": {
                "description": "URL that provides programmatic access to the remote knowledge graph",
                "example": "http://robokop.renci.org/api/kg",
                "type": "string"
              }
            },
            "required": [
              "url",
              "credentials"
            ],
            "type": "object"
          },
          "Result": {
            "description": "One of potentially several results or answers for a query",
            "properties": {
              "edge_bindings": {
                "description": "List of QEdge-KEdge bindings.",
                "items": {
                  "$ref": "#/components/schemas/EdgeBinding"
                },
                "type": "array"
              },
              "node_bindings": {
                "description": "List of QNode-KNode bindings.",
                "items": {
                  "$ref": "#/components/schemas/NodeBinding"
                },
                "type": "array"
              },
              "score": {
                "description": "Any type of score associated with this result",
                "example": 163.233,
                "format": "float",
                "type": "number"
              }
            },
            "required": [
              "node_bindings",
              "edge_bindings"
            ],
            "type": "object"
          }
        },
        "x-bte-kgs-operations": {
          "disease_related_to_gene": [
            {
              "inputs": [
                {
                  "id": "EFO",
                  "semantic": "Disease"
                }
              ],
              "outputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "predicate": "related_to",
              "source": "Genetics Data Provider KP",
              "supportBatch": false
            }
          ],
          "gene_related_to_disease": [
            {
              "inputs": [
                {
                  "id": "NCBIGene",
                  "semantic": "Gene"
                }
              ],
              "outputs": [
                {
                  "id": "EFO",
                  "semantic": "Disease"
                }
              ],
              "predicate": "related_to",
              "source": "Genetics Data Provider KP",
              "supportBatch": false
            }
          ]
        }
      },
      "info": {
        "contact": {
          "email": "mvon@broadinstitute.org",
          "name": "Marcin von Grotthuss"
        },
        "description": "A ReasonerStdAPI for Genetics Provider",
        "termsOfService": "https://translator.broadinstitute.org",
        "title": "Genetics Provider API",
        "version": "1.0.0",
        "x-reasoner_standard_version": "0.9.1"
      },
      "openapi": "3.0.1",
      "paths": [
        {
          "path": "/predicates",
          "pathitem": {
            "get": {
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "additionalProperties": {
                          "additionalProperties": {
                            "description": "Array of predicates",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "description": "Target map",
                          "type": "object"
                        },
                        "description": "Source map",
                        "example": {
                          "disease": {
                            "gene": [
                              "associated"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Predicates by source and target"
                }
              },
              "summary": "Get supported relationships by source and target"
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "post": {
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": {
                      "message": {
                        "query_graph": {
                          "edges": [
                            {
                              "id": "e00",
                              "source_id": "n00",
                              "target_id": "n03",
                              "type": "associated"
                            },
                            {
                              "id": "e00",
                              "source_id": "n01",
                              "target_id": "n03",
                              "type": "associated"
                            },
                            {
                              "id": "e00",
                              "source_id": "n02",
                              "target_id": "n03",
                              "type": "associated"
                            }
                          ],
                          "nodes": [
                            {
                              "curie": "NCBIGene:5468",
                              "id": "n00",
                              "type": "gene"
                            },
                            {
                              "curie": "NCBIGene:5469",
                              "id": "n01",
                              "type": "gene"
                            },
                            {
                              "curie": "NCBIGene:5470",
                              "id": "n02",
                              "type": "gene"
                            },
                            {
                              "id": "n03",
                              "type": "disease"
                            }
                          ]
                        }
                      }
                    },
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "A message with question graph.",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Message"
                      }
                    }
                  },
                  "description": "A message with knowledge graph and answers."
                }
              },
              "summary": "Get answers to a question",
              "tags": [
                "0.9.2"
              ],
              "x-bte-kgs-operations": [
                {
                  "$ref": "#/components/x-bte-kgs-operations/disease_related_to_gene"
                },
                {
                  "$ref": "#/components/x-bte-kgs-operations/gene_related_to_disease"
                }
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "url": "https://translator.broadinstitute.org/genetics_data_provider/"
        }
      ],
      "tags": [
        {
          "name": "0.9.2"
        },
        {
          "name": "translator"
        },
        {
          "name": "reasoner"
        }
      ],
      "~raw": "H4sIADsQXF8C_91abW_bOBL-K4TvgNsDEtlJrt1tPm3TdntFN02adj8VgUFLtM2NRKokFdcX-L_fzJB6teQ4L3cHXD-kNkUO5-WZmYeU70Y6F4rncnTKRifRJDoaHbCRVHMNA3ejWCvHY0efRcZlitOyW61-nRnNE6msk65wItJmgQsVzwROOecmlorBRPbeaOeWhbWjDUxIhI2NzJ3UCue9ZleCW62E-eKS15cf2Fwb9l4o4WRs2aXRtzIRBiXDPimJ3nrKYB3OuBXGBrFHYMiEVgmT2Yv5F2FuZUzLl87l9nQ8doYrm3KnTdRvyo9DE1SbWsdVwk0ybWwxiV6Br9AkC8JhHAa_3Y0Kk-69y3gRTJkm3PFpHuwZjzbXqDpfBJmlU3HLY9yyHqrlt8dL1b2onLulpRiOcyMSGXMn_PeF8LG1RZZxs_b-dcwWea6NEwkzAqSDyXYpc8tma2Z1YWLBwCHMcYPrD3A7m8OcIPR4MqH_O7G-rLYelINwE8qrxPM8xemwevynJRGgZ7wEGPZJ_-LlZTynuK9z8oOe_SliEs2TROJcngJucmGcDNp25HwlZZ4u57UxfM30nDU83hDI8TGlmhOZF1A-ss5ItRhtNggu8YNnOQEfdpAWwipC4BR--Dbi1upYgvhkdL0p_8HC8fdCUEDvRrm23qVGwKB1ZzpZV9m9093N3TNhLV_4zyR7ujA8X_p5yUIEsMoEbRATSj8f5KkfU37MR7saO2l5pTaG4LxL2NFzCjt-iDBMKaWT0uK4MJLmfHpz9gGr0-mLf7z8hWLbsjtIosiRQr0LXzUXHu2_8OdJc-Fx_8Je00pYba49cho59lcj5jjlL-NYZ5DhABY79s_t-DMBzK_ZKusBLWwl3ZIR6uARI8REvmJ8LyRkBsx2phCbwSLykJKwU93zgN99FL5RepUiqL3GVKWg0K6gzEcj76R2wQwPmdOMV-aOGlU8FO9raiwzJw5vFvYQ64evrh5Jvfr3TR-HmE2pPItk6vS0jvL-YnBNU0YXCvX6hqv95zOpU6lu3inoZ-veAghdZBankDhYBbExwRZLqGzsJ6v4jZjGsNPfR60aV2GRRqF5Q5l9q-PeAhsUYBlkYsoE6iF9je304JmfGC0gssUskrocOaSl4wQ2GH9C_b6ietHSZSk19m5BPqg2vQpdsd_usmceMBmJiMVLmSbog9rRu1zA53NoNfbhLqha9WN9UOu30wdvIG3R3TztVarxmCkBnxMidcBuIJcgaYDwMB7HkG6YLW4pQPFMO9FNOrQib7fYHMC00ibpZRfh2ZP37LG4sBiGTPTt-0d49uz7btpV8lutBTG64InrbZKCC9-B6DOpEpREnms78mbhu9zdCLL7Yu6rz7bhdzvYyRaXgZoBY98ryffa46fCqNdmwJKPaEpvnilGDoRjBjrWLXWxWCJ1nfmajejGauNWmvluvQ0o2Qul33XMUyYJxXMJBwyMKZQuS3LYainjJYNvhZJQ6qljkBIw9LGM63vU4YAaB2y45ECeq3miJL8lS_-b7QNEoya8eHHyqt20G2FoUpntbNTG99WkguCvkqpR0IFMgq-kPirQ2bqsIDqTGR1awCtmPX452aFRk0g9QCO_bG-NVqtVBCGAkDpSLHweX04mP5_8MqSaH7qHK3TL_DZ4PXJr17esHoLyJ7Csv2WQzQNI3hu3b_64-vBuELcdL16cfzg_3RnFoYr3mzYZ5AcVPQqT8N133dnhnzx3epHqmVT3BaOzgycVDB9XQCAP_SSiRXSA9dUJCf010IUDJlwcdRrpt1GYRuF4SCHrC_ZQSFv53h_bMp6BSlYHCU81yThIiCJ1EfuKX1YyTRmAMtMqXbMZnJGxlgkOfQXO8XWBmxudMQAuzFWxyB2RT6UhHuaAzQpX8g1GtsPGMqkCRpIyTuKlitMCWlfUA7TyYLddI6V1KIwmlMjteKPl9p355ot8TygaJ61BFWjC01Wg5NwHDVUz8c4ZQMZ547jc7b6ljo0TdMe2thnMywUDuWN0JScVBBRggiZ7-7HT-GCAlcIIgESCTuFqXQVdWytnqWieVnCcTvPs4gpFK9gHT2p4A2gyqn5URvgO5tLgELtd3I7N8FmlXHBFW3aXDTi8eydx_9m1gkjH-fXDAcczYGLAb-W_vH_AvTw4MaAQfeeHt-hdQ2Of9TuxjTE2whVGQTRz7TyxrgLoC3wZQYivSB4A-SvafwjzPQpjivx_sMrPe7LKNk726sIN9Ejlz2-9PZlUiNiVwFIvVDg7ZKdMTCbQ0CZH-OfYt7ZOZxXtG6X_LBf87_C7Xexg3_qyxdraWHvo2m0kPgsL_LwfC9yJvPIC8Fkp4HMn7RPTA93Ulx4K00NheqiB9FCD6fFYSIVbLvLDMFe1TyGrjZuv8FpoCg3Hv2voMNiHabwfjIfAWr9EaCOw-TZgz2vX7q6liOve9yw_Dmc6WR_WL7ToVnWKg7VmO1j3ooIYYQcq0Uy0jldEgf3wXKepXsGs2ZqIjj-Vez6NjbbssXSrG1h6kG9pQQ4VD6xu0wE_-8mkul0I9kTB52cj1I_b_pnJdC8RfNphy3M6ylU8KeWCZsHZSfjDk3UadGQitWKFo8Sl2QqOTJ4McoXI8aQYjmn-ls9DyN_zcXw1XRaEMgt6SnnnNnWnX5tXr9u89TlvXnuC4K-Uty9Ar373Lgnvr-3jNuxc8JyOx0bP9I3OIzzLSLrh4bkc3yz2uywFZfEFRsNhg9giFtxj2YUinlLRbgizFbfC8DRgCAq-aXHxcAwYyPnpzHPnnclHmXtIB2JWzo8ekHrNm9_h_N9PFcziQzoYP0qV5nGhXxUbQ5L10_D6-ocm7UrlNnyOXp5ExycnMOZPsChunmrumrhRRTbDX0f01qPaOaEu1QN9GNoMv9Pz7-n73rD5d-UqL1zrvXn5QpdoJTgRcBeXP3rxJ19duO6id79ddOe_rV7kERTDLxB8Iy11qalr62c1b7nj9W9rPl7SNP97kDPuYqy7c0gnQaKH3kOSdj2q3m_ftk_-V-ZtNpt_A4iWCSEeJQAA"
    }
  ]
}