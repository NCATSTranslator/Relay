{
  "max_score": 7.333023,
  "took": 146,
  "total": 104,
  "hits": [
    {
      "_id": "fd006b0be2774dde2dca18dd9d1005cd",
      "_meta": {
        "ETag": "I",
        "github_username": "edeutsch",
        "timestamp": "2021-01-26T01:56:53.958880",
        "uptime_status": "good",
        "uptime_ts": "2021-02-01T00:28:27.520392",
        "url": "https://arax.ncats.io/api/arax/v1.0/openapi.json"
      },
      "_score": 7.333023,
      "components": {
        "schemas": {
          "Attribute": {
            "additionalProperties": false,
            "description": "Generic attribute for a node or an edge that expands key-value pair concept by including a type of this attribute from a suitable ontology, a source of this attribute, and (optionally) a url with additional information about this attribute.",
            "properties": {
              "name": {
                "description": "Human-readable name or label for the attribute. If appropriate, should be the name of the semantic type term.",
                "example": "PubMed Identifier",
                "nullable": true,
                "type": "string"
              },
              "source": {
                "description": "Source of the attribute, preferably as a CURIE prefix.",
                "example": "UniProtKB",
                "nullable": true,
                "type": "string"
              },
              "type": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CURIE"
                  }
                ],
                "description": "CURIE of the semantic type of the attribute. For properties defined by the Biolink model this should be a biolink CURIE, otherwise, if possible, from the EDAM ontology. If a suitable identifier does not exist, enter a descriptive phrase here and submit the new type for consideration by the appropriate authority.",
                "example": "EDAM:data_1187"
              },
              "url": {
                "description": "Human-consumable URL to link out and provide additional information about the attribute (not the node or the edge).",
                "example": "https://pubmed.ncbi.nlm.nih.gov/32529952",
                "nullable": true,
                "type": "string"
              },
              "value": {
                "description": "Value of the attribute. May be any data type, including a list.",
                "example": 32529952
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          },
          "BiolinkEntity": {
            "description": "Compact URI (CURIE) for a Biolink class, biolink:NamedThing or a child thereof. The CURIE must use the prefix 'biolink:' followed by the PascalCase class name.",
            "example": "biolink:PhenotypicFeature",
            "externalDocs": {
              "description": "Biolink model entities",
              "url": "https://biolink.github.io/biolink-model/docs/NamedThing.html"
            },
            "pattern": "^biolink:[A-Z][a-zA-Z]*$",
            "type": "string"
          },
          "BiolinkPredicate": {
            "description": "CURIE for a Biolink 'predicate' slot, taken from the Biolink slot ('is_a') hierarchy rooted in biolink:related_to (snake_case). This predicate defines the Biolink relationship between the subject and object nodes of a biolink:Association defining a knowledge graph edge.",
            "example": "biolink:interacts_with",
            "externalDocs": {
              "description": "Biolink model predicates",
              "url": "https://biolink.github.io/biolink-model/docs/related_to.html"
            },
            "pattern": "^biolink:[a-z][a-z_]*$",
            "type": "string"
          },
          "CURIE": {
            "description": "A Compact URI, consisting of a prefix and a reference separated by a colon, such as UniProtKB:P00738. Via an external context definition, the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/, to form a full URI.",
            "externalDocs": {
              "url": "https://www.w3.org/TR/2010/NOTE-curie-20101216/"
            },
            "type": "string"
          },
          "Edge": {
            "additionalProperties": false,
            "description": "A specification of the semantic relationship linking two concepts that are expressed as nodes in the knowledge \"thought\" graph resulting from a query upon the underlying knowledge source.",
            "properties": {
              "attributes": {
                "description": "A list of additional attributes for this edge",
                "items": {
                  "$ref": "#/components/schemas/Attribute"
                },
                "nullable": true,
                "type": "array"
              },
              "object": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CURIE"
                  }
                ],
                "description": "Corresponds to the map key CURIE of the object concept node of this relationship edge.",
                "example": "UniProtKB:P00738"
              },
              "predicate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkPredicate"
                  }
                ],
                "nullable": true
              },
              "relation": {
                "description": "The relationship type term of this edge, originally specified by, or curated by inference from, the original source of knowledge. This should generally be specified as predicate ontology CURIE.",
                "example": "RO:0002447",
                "nullable": true,
                "type": "string"
              },
              "subject": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CURIE"
                  }
                ],
                "description": "Corresponds to the map key CURIE of the subject concept node of this relationship edge.",
                "example": "OMIM:603903"
              }
            },
            "required": [
              "object",
              "subject"
            ],
            "type": "object"
          },
          "EdgeBinding": {
            "additionalProperties": true,
            "description": "A instance of EdgeBinding is a single KnowledgeGraph Edge mapping, identified by the corresponding 'id' object key identifier of the Edge within the Knowledge Graph. Instances of EdgeBinding may include extra annotation (such annotation is not yet fully standardized).",
            "properties": {
              "id": {
                "description": "The key identifier of a specific KnowledgeGraph Edge.",
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "KnowledgeGraph": {
            "additionalProperties": true,
            "description": "The knowledge graph associated with a set of results. The instances of Node and Edge defining this graph represent instances of biolink:NamedThing (concept nodes) and biolink:Association (relationship edges) representing (Attribute) annotated knowledge returned from the knowledge sources and inference agents wrapped by the given TRAPI implementation.",
            "properties": {
              "edges": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/Edge"
                },
                "description": "Dictionary of Edge instances used in the KnowledgeGraph, referenced elsewhere in the TRAPI output by the dictionary key.",
                "type": "object"
              },
              "nodes": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/Node"
                },
                "description": "Dictionary of Node instances used in the KnowledgeGraph, referenced elsewhere in the TRAPI output by the dictionary key.",
                "type": "object"
              }
            },
            "required": [
              "edges",
              "nodes"
            ],
            "type": "object"
          },
          "LogEntry": {
            "additionalProperties": true,
            "description": "The LogEntry object contains information useful for tracing and debugging across Translator components.  Although an individual component (for example, an ARA or KP) may have its own logging and debugging infrastructure, this internal information is not, in general, available to other components. In addition to a timestamp and logging level, LogEntry includes a string intended to be read by a human, along with one of a standardized set of codes describing the condition of the component sending the message.",
            "example": {
              "code": "code",
              "level": "ERROR",
              "message": "message",
              "timestamp": "2020-09-03T18:13:49Z"
            },
            "properties": {
              "code": {
                "description": "One of a standardized set of short codes e.g. QueryNotTraversable, KPNotAvailable, KPResponseMalformed",
                "nullable": true,
                "type": "string"
              },
              "level": {
                "description": "Logging level",
                "enum": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "nullable": true,
                "type": "string"
              },
              "message": {
                "description": "A human-readable log message",
                "nullable": true,
                "type": "string"
              },
              "timestamp": {
                "description": "Timestamp in ISO 8601 format",
                "example": "2020-09-03T18:13:49Z",
                "format": "date-time",
                "nullable": true,
                "type": "string"
              }
            },
            "type": "object"
          },
          "MeshNgdResponse": {
            "example": {
              "message": "Term 1 'malria' not found in MeSH",
              "result_code": "TermNotFound",
              "value": 0.714
            },
            "properties": {
              "message": {
                "description": "Extended message denoting the success or mode of failure for request",
                "example": "Term 1 'malria' not found in MeSH",
                "type": "string"
              },
              "result_code": {
                "description": "Set to OK for success, or some other short string to indicate and error (e.g., TermNotFound, etc.)",
                "example": "TermNotFound",
                "type": "string"
              },
              "value": {
                "description": "Calculated Normalized Google Distance for the two supplied terms",
                "example": 0.714,
                "format": "float",
                "type": "number"
              }
            },
            "type": "object"
          },
          "Message": {
            "additionalProperties": false,
            "description": "The message object holds the main content of a Query or a Response in three properties: query_graph, results, and knowledge_graph. The query_graph property contains the query configuration, the results property contains any answers that are returned by the service, and knowledge_graph property contains lists of edges and nodes in the thought graph corresponding to this message. The content of these properties is context-dependent to the encompassing object and the TRAPI operation requested.",
            "example": {
              "query_graph": {
                "edges": {
                  "e00": {
                    "object": "n01",
                    "predicate": "biolink:physically_interacts_with",
                    "subject": "n00"
                  }
                },
                "nodes": {
                  "n00": {
                    "category": "biolink:ChemicalSubstance",
                    "id": "CHEMBL.COMPOUND:CHEMBL112"
                  },
                  "n01": {
                    "category": "biolink:Protein"
                  }
                }
              }
            },
            "properties": {
              "knowledge_graph": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KnowledgeGraph"
                  }
                ],
                "description": "KnowledgeGraph object that contains lists of nodes and edges in the thought graph corresponding to the message",
                "nullable": true
              },
              "query_graph": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/QueryGraph"
                  }
                ],
                "description": "QueryGraph object that contains a serialization of a query in the form of a graph",
                "nullable": true
              },
              "results": {
                "description": "List of all returned Result objects for the query posed",
                "items": {
                  "$ref": "#/components/schemas/Result"
                },
                "nullable": true,
                "type": "array"
              }
            },
            "type": "object"
          },
          "Node": {
            "additionalProperties": false,
            "description": "A node in the KnowledgeGraph which represents some biomedical concept. Nodes are identified by the keys in the KnowledgeGraph Node mapping.",
            "properties": {
              "attributes": {
                "description": "A list of attributes describing the node",
                "items": {
                  "$ref": "#/components/schemas/Attribute"
                },
                "nullable": true,
                "type": "array"
              },
              "category": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkEntity"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkEntity"
                    },
                    "type": "array"
                  }
                ]
              },
              "name": {
                "description": "Formal name of the entity",
                "example": "Haptoglobin",
                "nullable": true,
                "type": "string"
              }
            },
            "type": "object"
          },
          "NodeBinding": {
            "additionalProperties": true,
            "properties": {
              "id": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CURIE"
                  }
                ],
                "description": "An instance of NodeBinding is a single KnowledgeGraph Node mapping, identified by the corresponding 'id' object key identifier of the Node within the Knowledge Graph. Instances of NodeBinding may include extra annotation (such annotation is not yet fully standardized)."
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "Operations": {
            "additionalProperties": true,
            "description": "Container for one or more Message objects or identifiers for one or more Messages along with a processing plan and options for how those messages should be processed and returned",
            "properties": {
              "actions": {
                "description": "List of order-dependent operations to execute",
                "example": [
                  "add_qnode(name=acetaminophen, key=n00)",
                  "add_qnode(category=biolink:Protein, key=n01)",
                  "add_qedge(subject=n01, object=n00, key=e00)",
                  "expand(edge_key=e00)",
                  "resultify()",
                  "filter_results(action=limit_number_of_results, max_results=10)"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "message_uris": {
                "description": "List of URIs for Message or Response objects to fetch and process",
                "example": [
                  "https://arax.ncats.io/api/arax/v1.0/response/38"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "messages": {
                "description": "List of Message objects to process",
                "items": {
                  "$ref": "#/components/schemas/Message"
                },
                "type": "array"
              },
              "options": {
                "additionalProperties": true,
                "description": "Map of order independent options that apply during processing",
                "example": {
                  "halt_on_warning": false
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "QEdge": {
            "additionalProperties": true,
            "description": "An edge in the QueryGraph used as an filter pattern specification in a query. If optional predicate or relation properties are not specified, they are assumed to be wildcard matches to the target knowledge space. If specified, the ontological inheritance hierarchy associated with the terms provided is assumed, such that edge bindings returned may be an exact match to the given QEdge predicate or relation term ('class'), or to a term which is a subclass of the QEdge specified term.",
            "properties": {
              "exclude": {
                "description": "If set to true, then all subgraphs containing this edge are excluded from the final results. (optional)",
                "type": "boolean"
              },
              "object": {
                "description": "Corresponds to the map key identifier of the object concept node anchoring the query filter pattern for the query relationship edge.",
                "example": "https://www.uniprot.org/uniprot/P00738",
                "type": "string"
              },
              "option_group_id": {
                "description": "Optional string acting as a label on a set of nodes and/or edges indicating that they belong to a group that are to be evaluated as a group. ",
                "type": "string"
              },
              "predicate": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkPredicate"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkPredicate"
                    },
                    "type": "array"
                  }
                ]
              },
              "relation": {
                "description": "Query constraint against the relationship type term of this edge, as originally specified by, or curated by inference from, the original external source of knowledge. Note that this should often be specified as predicate ontology term CURIE, although this may not be strictly enforced.",
                "example": "RO:0002447",
                "nullable": true,
                "type": "string"
              },
              "subject": {
                "description": "Corresponds to the map key identifier of the subject concept node anchoring the query filter pattern for the query relationship edge.",
                "example": "https://omim.org/entry/603903",
                "type": "string"
              }
            },
            "required": [
              "object",
              "subject"
            ],
            "type": "object"
          },
          "QNode": {
            "additionalProperties": true,
            "description": "A node in the QueryGraph used to represent an entity in a query. If a CURIE is not specified, any nodes matching the category of the QNode will be returned in the Results.",
            "properties": {
              "category": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkEntity"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkEntity"
                    },
                    "type": "array"
                  }
                ]
              },
              "id": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CURIE"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/CURIE"
                    },
                    "type": "array"
                  }
                ]
              },
              "is_set": {
                "default": false,
                "description": "Boolean that if set to true, indicates that this QNode MAY have multiple KnowledgeGraph Nodes bound to it within each Result. The nodes in a set should be considered as a set of independent nodes, rather than a set of dependent nodes, i.e., the answer would still be valid if the nodes in the set were instead returned individually. Multiple QNodes may have is_set=True. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=False, each n1 must be connected to n2. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=True, each n1 must be connected to at least one n2.",
                "type": "boolean"
              },
              "option_group_id": {
                "description": "Optional string acting as a label on a set of nodes and/or edges indicating that they belong to a group that are to be evaluated as a group. ",
                "type": "string"
              }
            },
            "type": "object"
          },
          "Query": {
            "additionalProperties": true,
            "description": "The Query class is used to package a user request for information. A Query object consists of a required Message object with optional additional properties. Additional properties are intended to convey implementation-specific or query-independent parameters. For example, an additional property specifying a log level could allow a user to override the default log level in order to receive more fine-grained log information when debugging an issue.",
            "example": {
              "asynchronous": "false",
              "bypass_cache": "true",
              "max_results": 100,
              "message": {
                "query_graph": {
                  "edges": {
                    "e00": {
                      "object": "n01",
                      "predicate": "biolink:physically_interacts_with",
                      "subject": "n00"
                    }
                  },
                  "nodes": {
                    "n00": {
                      "category": "biolink:ChemicalSubstance",
                      "id": "CHEMBL.COMPOUND:CHEMBL112"
                    },
                    "n01": {
                      "category": "biolink:Protein"
                    }
                  }
                }
              },
              "page_number": 1,
              "page_size": 50
            },
            "properties": {
              "asynchronous": {
                "description": "Set to true in order to receive an incomplete message_id if the query will take a while. Client can then periodically request that message_id for a status update and eventual complete message",
                "example": "false",
                "type": "string"
              },
              "bypass_cache": {
                "description": "Set to true in order to bypass any possible cached message and try to answer the query over again",
                "example": "true",
                "type": "string"
              },
              "max_results": {
                "description": "Maximum number of individual results to return",
                "example": 100,
                "type": "integer"
              },
              "message": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Message"
                  }
                ],
                "description": "The query Message is a serialization of the user request. Content of the Message object depends on the intended TRAPI operation. For example, the fill operation requires a non-empty query_graph field as part of the Message, whereas other operations, e.g. overlay, require non-empty results and knowledge_graph fields."
              },
              "operations": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Operations"
                  }
                ],
                "description": "Container for one or more Message objects or identifiers for one or more Messages along with a processing plan and options for how those messages should be processed and returned"
              },
              "page_number": {
                "description": "Page number of results when the number of results exceeds the page_size",
                "example": 1,
                "type": "integer"
              },
              "page_size": {
                "description": "Split the results into pages with this number of results each",
                "example": 20,
                "type": "integer"
              },
              "reasoner_ids": {
                "description": "List of reasoners to consult for the query. By default it is assumed to be the current reasoner being queried, but this mechanism could be used to proxy queries to other reasoners.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "message"
            ],
            "type": "object",
            "x-body-name": "request_body"
          },
          "QueryGraph": {
            "additionalProperties": true,
            "description": "A graph representing a biomedical question. It serves as a template for each result (answer), where each bound knowledge graph node/edge is expected to obey the constraints of the associated query graph element.",
            "properties": {
              "edges": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/QEdge"
                },
                "description": "The edge specifications. The keys of this map are unique edge identifiers and the corresponding values include the constraints on bound edges, in addition to specifying the subject and object QNodes.",
                "type": "object"
              },
              "nodes": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/QNode"
                },
                "description": "The node specifications. The keys of this map are unique node identifiers and the corresponding values include the constraints on bound nodes.",
                "type": "object"
              }
            },
            "required": [
              "edges",
              "nodes"
            ],
            "type": "object"
          },
          "Question": {
            "additionalProperties": true,
            "properties": {
              "language": {
                "description": "Human language in which the question is posed",
                "enum": [
                  "English"
                ],
                "example": "English",
                "type": "string"
              },
              "text": {
                "description": "Free text question",
                "example": "what genetic conditions offer protection against malaria",
                "type": "string"
              }
            },
            "type": "object"
          },
          "Response": {
            "additionalProperties": true,
            "description": "The Response object contains the main payload when a TRAPI query endpoint interprets and responds to the submitted query successfully (i.e., HTTP Status Code 200). The message property contains the knowledge of the response (query graph, knowledge graph, and results). The status, description, and logs properties provide additional details about the response.",
            "example": {
              "context": "https://rtx.ncats.io/ns/translator.jsonld",
              "datetime": "2021-01-09T12:34:45Z",
              "description": "Success. 42 results found.",
              "id": "https://arax.ncats.io/api/rtx/v1.0/response/123",
              "logs": [
                {
                  "code": "code",
                  "level": "ERROR",
                  "message": "message",
                  "timestamp": "2020-09-03T18:13:49Z"
                },
                {
                  "code": "code",
                  "level": "ERROR",
                  "message": "message",
                  "timestamp": "2020-09-03T18:13:49Z"
                }
              ],
              "message": "",
              "operations": "",
              "original_question": "what proteins are affected by sickle cell anemia",
              "query_options": {
                "coalesce": true,
                "threshold": 0.9
              },
              "query_type_id": "Q2",
              "reasoner_id": "ARAX",
              "restated_question": "Which proteins are affected by sickle cell anemia?",
              "schema_version": "1.0.0",
              "status": "Success",
              "table_column_names": [
                "chemical_substance.name",
                "chemical_substance.id"
              ],
              "terms": {
                "key": "{}"
              },
              "tool_version": "ARAX 0.7.0",
              "type": "TranslatorAPIResponse"
            },
            "properties": {
              "context": {
                "description": "JSON-LD context URI",
                "example": "https://rtx.ncats.io/ns/translator.jsonld",
                "type": "string"
              },
              "datetime": {
                "description": "Datetime string for the time that this response was generated",
                "example": "2021-01-09T12:34:45Z",
                "type": "string"
              },
              "description": {
                "description": "A brief human-readable description of the outcome",
                "example": "Success. 42 results found.",
                "nullable": true,
                "type": "string"
              },
              "id": {
                "description": "URI for this response",
                "example": "https://arax.ncats.io/api/rtx/v1.0/response/123",
                "type": "string"
              },
              "logs": {
                "description": "Log entries containing errors, warnings, debugging information, etc",
                "items": {
                  "$ref": "#/components/schemas/LogEntry"
                },
                "nullable": true,
                "type": "array"
              },
              "message": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Message"
                  }
                ],
                "description": "Contains the knowledge of the response (query graph, knowledge graph, and results)."
              },
              "operations": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Operations"
                  }
                ],
                "description": "Container for one or more Message objects or identifiers for one or more Messages along with the processing plan and options for how those messages were processed and returned"
              },
              "original_question": {
                "description": "The original question text typed in by the user",
                "example": "what proteins are affected by sickle cell anemia",
                "type": "string"
              },
              "query_options": {
                "description": "Dict of options that can be sent with the query. Options are tool specific and not stipulated here",
                "example": {
                  "coalesce": true,
                  "threshold": 0.9
                },
                "type": "object"
              },
              "query_type_id": {
                "description": "The query type id if one is known for the query/message (as defined in a shared manner)",
                "example": "Q2",
                "type": "string"
              },
              "reasoner_id": {
                "description": "Identifier string of the reasoner that provided this response (one of ARAX, Robokop, etc.)",
                "example": "ARAX",
                "type": "string"
              },
              "restated_question": {
                "description": "A precise restatement of the question, as understood by the Translator, for which the answer applies. The user should verify that the restated question matches the intent of their original question (it might not).",
                "example": "Which proteins are affected by sickle cell anemia?",
                "type": "string"
              },
              "schema_version": {
                "description": "Version label of this TRAPI schema",
                "example": "1.0.0",
                "type": "string"
              },
              "status": {
                "description": "One of a standardized set of short codes, e.g. Success, QueryNotTraversable, KPsNotAvailable",
                "example": "Success",
                "nullable": true,
                "type": "string"
              },
              "table_column_names": {
                "description": "List of column names that corresponds to the row_data for each result",
                "example": [
                  "chemical_substance.name",
                  "chemical_substance.id"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "terms": {
                "additionalProperties": true,
                "description": "Dict of terms needed by the specific query type",
                "properties": {
                  "anatomical_entity": {
                    "example": "liver",
                    "type": "string"
                  },
                  "chemical_substance": {
                    "example": "ibuprofen",
                    "type": "string"
                  },
                  "disease": {
                    "example": "malaria",
                    "type": "string"
                  },
                  "metabolite": {
                    "example": "ibuprofen",
                    "type": "string"
                  },
                  "protein": {
                    "example": "P12345",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "tool_version": {
                "description": "Version label of the tool that generated this response",
                "example": "ARAX 0.7.0",
                "type": "string"
              },
              "type": {
                "description": "Entity type of this response",
                "example": "TranslatorAPIResponse",
                "type": "string"
              }
            },
            "required": [
              "message"
            ],
            "type": "object"
          },
          "Result": {
            "additionalProperties": true,
            "description": "A Result object specifies the nodes and edges in the knowledge graph that satisfy the structure or conditions of a user-submitted query graph. It must contain a NodeBindings object (list of query graph node to knowledge graph node mappings) and an EdgeBindings object (list of query graph edge to knowledge graph edge mappings).",
            "properties": {
              "confidence": {
                "description": "Confidence metric for this result, a value between (inclusive)\n 0.0 (no confidence) and 1.0 (highest confidence)",
                "example": 0.9234,
                "format": "float",
                "type": "number"
              },
              "description": {
                "description": "A free text description of this result answer from the reasoner",
                "example": "The genetic condition sickle cell anemia may provide protection from cerebral malaria via genetic alterations of proteins HBB (P68871) and HMOX1 (P09601).",
                "type": "string"
              },
              "edge_bindings": {
                "additionalProperties": {
                  "items": {
                    "$ref": "#/components/schemas/EdgeBinding"
                  },
                  "type": "array"
                },
                "description": "The dictionary of Input Query Graph to Result Knowledge Graph edge bindings where the dictionary keys are the key identifiers of the Query Graph edges and the associated values of those keys are instances of EdgeBinding schema type (see below). This value is an array of EdgeBindings since a given query edge may resolve to multiple knowledge graph edges in the result.",
                "type": "object"
              },
              "essence": {
                "description": "A single string that is the terse essence of the result (useful for simple answers)",
                "example": "ibuprofen",
                "type": "string"
              },
              "essence_category": {
                "description": "A Translator BioLink bioentity category of the essence",
                "example": "biolink:ChemicalSubstance",
                "type": "string"
              },
              "id": {
                "description": "URI for this result",
                "example": "result:234",
                "type": "string"
              },
              "node_bindings": {
                "additionalProperties": {
                  "items": {
                    "$ref": "#/components/schemas/NodeBinding"
                  },
                  "type": "array"
                },
                "description": "The dictionary of Input Query Graph to Result Knowledge Graph node bindings where the dictionary keys are the key identifiers of the Query Graph nodes and the associated values of those keys are instances of NodeBinding schema type (see below). This value is an array of NodeBindings since a given query node may have multiple knowledge graph Node bindings in the result.",
                "type": "object"
              },
              "reasoner_id": {
                "description": "Identifier string of the reasoner that provided this result (e.g., ARAX, Robokop, etc.)",
                "example": "ARAX",
                "type": "string"
              },
              "result_group": {
                "description": "An integer group number for results for use in cases where several results should be grouped together. Also useful to control sorting ascending.",
                "example": 1,
                "type": "integer"
              },
              "result_group_similarity_score": {
                "description": "A score that denotes the similarity of this result to other members of the result_group",
                "example": 0.95,
                "format": "float",
                "type": "number"
              },
              "row_data": {
                "description": "An arbitrary list of values that captures the essence of the result that can be turned into a tabular result across all answers (each result is a row) for a user that wants simplified tabular output",
                "example": [
                  "ibuprofen",
                  "CHEMBL:CHEMBL521"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "score": {
                "description": "Any type of score associated with this result",
                "example": 163.233,
                "format": "float",
                "type": "number"
              },
              "score_direction": {
                "description": "Sorting indicator for the score: one of higher_is_better or lower_is_better",
                "example": "lower_is_better",
                "type": "string"
              },
              "score_name": {
                "description": "Name for the score",
                "example": "Jaccard distance",
                "type": "string"
              }
            },
            "required": [
              "edge_bindings",
              "node_bindings"
            ],
            "type": "object"
          }
        }
      },
      "externalDocs": {
        "description": "Documentation for the NCATS Biomedical Translator Reasoners web services",
        "url": "https://github.com/NCATSTranslator/ReasonerAPI"
      },
      "info": {
        "contact": {
          "email": "edeutsch@systemsbiology.org"
        },
        "description": "TRAPI 1.0 endpoint for the NCATS Biomedical Translator Reasoner called ARAX",
        "license": {
          "name": "Apache 2.0",
          "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "termsOfService": "https://github.com/RTXteam/RTX/blob/master/LICENSE",
        "title": "ARAX Translator Reasoner",
        "version": "1.0.0",
        "x-translator": {
          "component": "ARA",
          "team": "Expander Agent"
        }
      },
      "openapi": "3.0.1",
      "paths": [
        {
          "path": "/PubmedMeshNgd/{term1}/{term2}",
          "pathitem": {
            "get": {
              "operationId": "pubmed_mesh_ngd",
              "parameters": [
                {
                  "description": "First of two terms. Order not important.",
                  "explode": false,
                  "in": "path",
                  "name": "term1",
                  "required": true,
                  "schema": {
                    "type": "string"
                  },
                  "style": "simple"
                },
                {
                  "description": "Second of two terms. Order not important.",
                  "explode": false,
                  "in": "path",
                  "name": "term2",
                  "required": true,
                  "schema": {
                    "type": "string"
                  },
                  "style": "simple"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/MeshNgdResponse"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "description": "Invalid terms"
                }
              },
              "summary": "Query to get the Normalized Google Distance between two MeSH terms based on co-occurrence in all PubMed article annotations",
              "tags": [
                "PubmedMeshNgd"
              ],
              "x-openapi-router-controller": "openapi_server.controllers.pubmed_mesh_ngd_controller"
            }
          }
        },
        {
          "path": "/entity/{search_string}",
          "pathitem": {
            "get": {
              "operationId": "get_entity_by_string",
              "parameters": [
                {
                  "description": "Some string to search by (name, abbreviation, CURIE, etc.)",
                  "explode": false,
                  "in": "path",
                  "name": "search_string",
                  "required": true,
                  "schema": {
                    "type": "string"
                  },
                  "style": "simple"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "404": {
                  "description": "Entity not found"
                }
              },
              "summary": "Obtain the CURIE and type of some entity by name",
              "tags": [
                "entity"
              ],
              "x-openapi-router-controller": "openapi_server.controllers.entity_controller"
            }
          }
        },
        {
          "path": "/exampleQuestions",
          "pathitem": {
            "get": {
              "operationId": "example_questions",
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "type": "object"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "successful operation"
                }
              },
              "summary": "Request a list of example questions that ARAX can answer",
              "tags": [
                "exampleQuestions"
              ],
              "x-openapi-router-controller": "openapi_server.controllers.example_questions_controller"
            }
          }
        },
        {
          "path": "/predicates",
          "pathitem": {
            "get": {
              "operationId": "predicates",
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "additionalProperties": {
                          "additionalProperties": {
                            "description": "Array of predicates",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "description": "Target map",
                          "type": "object"
                        },
                        "description": "Source map",
                        "example": {
                          "biolink:ChemicalSubstance": {
                            "biolink:Gene": [
                              "biolink:directly_interacts_with",
                              "biolink:decreases_activity_of"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Predicates by source and target"
                }
              },
              "summary": "Get supported relationships by source and target",
              "tags": [
                "predicates"
              ],
              "x-openapi-router-controller": "openapi_server.controllers.predicates_controller"
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "post": {
              "operationId": "query",
              "parameters": [
                {
                  "description": "Set to true in order to bypass any possible cached response and try to answer the query over again\n",
                  "explode": true,
                  "in": "query",
                  "name": "bypass_cache",
                  "required": false,
                  "schema": {
                    "default": false,
                    "type": "boolean"
                  },
                  "style": "form"
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "Query information to be submitted",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Response"
                      }
                    }
                  },
                  "description": "OK. There may or may not be results. Note that some of the provided identifiers may not have been recognized."
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Bad request. The request is invalid according to this OpenAPI schema OR a specific identifier is believed to be invalid somehow (not just unrecognized)."
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Internal server error."
                },
                "501": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Not implemented."
                }
              },
              "summary": "Query reasoner via one of several inputs",
              "tags": [
                "query"
              ],
              "x-openapi-router-controller": "openapi_server.controllers.query_controller"
            }
          }
        },
        {
          "path": "/response/{response_id}",
          "pathitem": {
            "get": {
              "operationId": "get_response",
              "parameters": [
                {
                  "description": "Integer identifier of the response to return",
                  "explode": false,
                  "in": "path",
                  "name": "response_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  },
                  "style": "simple"
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Response"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "404": {
                  "description": "response_id not found"
                }
              },
              "summary": "Request a previously stored response from the server",
              "tags": [
                "response"
              ],
              "x-openapi-router-controller": "openapi_server.controllers.response_controller"
            }
          }
        },
        {
          "path": "/translate",
          "pathitem": {
            "post": {
              "operationId": "translate",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Question"
                    }
                  }
                },
                "description": "Question information to be translated",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "items": {
                          "$ref": "#/components/schemas/Query"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "description": "Invalid status value"
                }
              },
              "summary": "Translate natural language question into a standardized query",
              "tags": [
                "translate"
              ],
              "x-openapi-router-controller": "openapi_server.controllers.translate_controller"
            }
          }
        }
      ],
      "servers": [
        {
          "url": "https://arax.ncats.io/api/arax/v1.0"
        }
      ],
      "tags": [
        {
          "description": "Get supported relationships by source and target",
          "externalDocs": {
            "description": "Documentation for the reasoner predicates function",
            "url": "http://arax.ncats.io/overview.html#predicates"
          },
          "name": "predicates"
        },
        {
          "description": "Query reasoner using a predefined question type",
          "externalDocs": {
            "description": "Documentation for the reasoner query function",
            "url": "http://arax.ncats.io/overview.html#query"
          },
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "reasoner"
        },
        {
          "description": "Request a previously stored response from the server",
          "externalDocs": {
            "description": "Documentation for the reasoner response function",
            "url": "https://arax.ncats.io/overview.html#response"
          },
          "name": "response"
        },
        {
          "description": "Translate natural language question into a standardized query",
          "externalDocs": {
            "description": "Documentation for the reasoner translate function",
            "url": "https://arax.ncats.io/overview.html#translate"
          },
          "name": "translate"
        },
        {
          "description": "Return identifier and type of some entity in the knowledge graph",
          "externalDocs": {
            "description": "Documentation for the reasoner entity function",
            "url": "https://arax.ncats.io/overview.html#entity"
          },
          "name": "entity"
        },
        {
          "description": "Return a list of example questions that the reasoner can answer",
          "externalDocs": {
            "description": "Documentation for the reasoner exampleQuestions function",
            "url": "https://arax.ncats.io/overview.html#exampleQuestions"
          },
          "name": "exampleQuestions"
        },
        {
          "description": "Query to get the Normalized Google Distance between two MeSH terms based on co-occurance in all PubMed article annotations",
          "externalDocs": {
            "description": "Documentation for the reasoner PubmedMeshNgd function",
            "url": "https://arax.ncats.io/overview.html#PubmedMeshNgd"
          },
          "name": "PubmedMeshNgd"
        }
      ],
      "~raw": ""
    },
    {
      "_id": "89590198e93fb9377ab547eb903c5532",
      "_meta": {
        "ETag": "ca976c94846dce1b1b66b0746096403cf00181038a945dbed1275acb59f2226b",
        "github_username": "newgene",
        "timestamp": "2019-10-22T04:28:40.627585",
        "uptime_status": "unknown",
        "uptime_ts": "2021-02-01T00:30:58.615060",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/broad-pgm/openapi.yml"
      },
      "_score": 6.2169366,
      "components": {
        "schemas": {}
      },
      "info": {
        "contact": {
          "email": "translator@broadinstitute.org",
          "name": "Broad PGM translator",
          "url": "https://translator.ncats.io/broad-pgm-translator/",
          "x-id": "https://github.com/broadinstitute/broad-translator",
          "x-role": "responsible organization"
        },
        "termsOfService": "https://translator.ncats.io/broad-pgm-translator",
        "title": "Broad probabilistic graphical models translator",
        "version": "0.1.0"
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/modelList",
          "pathitem": {
            "get": {
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "modelID": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Successful response"
                }
              },
              "summary": "List available models"
            }
          }
        },
        {
          "path": "/{modelID}/modelSignature",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Model identifier",
                  "in": "path",
                  "name": "modelID",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "modelID": {
                            "type": "string"
                          },
                          "variableGroup": {
                            "items": {
                              "properties": {
                                "asInput": {
                                  "type": "boolean"
                                },
                                "asOutput": {
                                  "type": "boolean"
                                },
                                "authorityURL": {
                                  "type": "string"
                                },
                                "groupDistribution": {
                                  "enum": [
                                    "discrete",
                                    "empirical",
                                    "Gaussian",
                                    "Poisson"
                                  ]
                                },
                                "groupType": {
                                  "enum": [
                                    "Bollean",
                                    "Number",
                                    "String"
                                  ],
                                  "type": "string"
                                },
                                "groupValue": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "modelVariable": {
                                  "items": {
                                    "properties": {
                                      "authorityURI": {
                                        "type": "string"
                                      },
                                      "groupDistribution": {
                                        "enum": [
                                          "discrete",
                                          "empirical",
                                          "Gaussian",
                                          "Poisson"
                                        ]
                                      },
                                      "variableID": {
                                        "type": "string"
                                      },
                                      "variableType": {
                                        "enum": [
                                          "Bollean",
                                          "Number",
                                          "String"
                                        ],
                                        "type": "string"
                                      },
                                      "variableValue": {
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "variableGroupID": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Successful response"
                }
              },
              "summary": "Get model signature"
            }
          }
        },
        {
          "path": "/evaluateModel",
          "pathitem": {
            "post": {
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "modelID": {
                          "type": "string"
                        },
                        "modelInput": {
                          "items": {
                            "properties": {
                              "modelVariable": {
                                "items": {
                                  "properties": {
                                    "priorDistribution": {
                                      "properties": {
                                        "GaussianDistribution": {
                                          "properties": {
                                            "distributionMean": {
                                              "type": "number"
                                            },
                                            "distributionStDev": {
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "PoissonDistribution": {
                                          "properties": {
                                            "lambdaParameter": {
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "discreteDistribution": {
                                          "items": {
                                            "properties": {
                                              "priorProbability": {
                                                "type": "number"
                                              },
                                              "variableValue": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "type": "array"
                                        },
                                        "empiricalDistribution": {
                                          "properties": {
                                            "distributionMean": {
                                              "type": "number"
                                            },
                                            "distributionPercentile": {
                                              "items": {
                                                "type": "number"
                                              },
                                              "type": "array"
                                            },
                                            "distributionStDev": {
                                              "type": "number"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "variableID": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "variableGroupID": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "modelOutput": {
                          "items": {
                            "properties": {
                              "rawOutput": {
                                "type": "boolean"
                              },
                              "variableGroupID": {
                                "type": "string"
                              },
                              "variableID": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "posteriorProbabilities": {
                            "items": {
                              "properties": {
                                "modelVariable": {
                                  "items": {
                                    "properties": {
                                      "posteriorDistribution": {
                                        "properties": {
                                          "GaussianDistribution": {
                                            "properties": {
                                              "distributionMean": {
                                                "type": "number"
                                              },
                                              "distributionStDev": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "PoissonDistribution": {
                                            "properties": {
                                              "lambdaParameter": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "discreteDistribution": {
                                            "items": {
                                              "properties": {
                                                "posteriorProbability": {
                                                  "type": "number"
                                                },
                                                "variableValue": {
                                                  "type": "string"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "empiricalDistribution": {
                                            "properties": {
                                              "distributionMean": {
                                                "type": "number"
                                              },
                                              "distributionPercentile": {
                                                "items": {
                                                  "type": "number"
                                                },
                                                "type": "array"
                                              },
                                              "distributionStDev": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "rawDistribution": {
                                            "items": {
                                              "type": "number"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "variableID": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "variableGroupID": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Successful response"
                }
              },
              "summary": "evaluate model"
            }
          }
        }
      ],
      "servers": [
        {
          "url": "https://translator.ncats.io/broad-pgm-translator"
        }
      ],
      "tags": [
        {
          "name": "translator"
        }
      ],
      "~raw": "H4sIAHmFrl0C_-1XTW8aMRD9K6s9J0DbW05VFAlFShpU2lyqHLzLsEy0a7v2mJYi_ns99i4sXymhSdpG5UJ253m-3zOZp0qDFBrTsyR91-l1eulJklowUzDWv_syT50p2Tgh0vas2yUjpC0FKdORuSDbQdXNjBKjU11UpytrurjznlCOlT89TwmpBPZzzthEG5WJDEu0hHlSGKEnmIsyqdQISpu03HgnBKayN-OhzwpzOCoZ7yVXkkROIRspqlYyg_71RsQja-7yWagEhtOr9-8DGKUvlhxBR5mCkd9PjYpNMWC1khazEhJvFBJ_CEIlIwpH7WQKpInLOrmquutu65TaI_DHeZDsyXvodd74-fJLEkU93aYTm4PTgiY29KobZnLlJxUeC4jfdcoQQW97vfA9Apsb1FRHHLo8B2vHrkwafDMKkNGP0Lr0o-cT3Xsbjs1Tm098G-PizHRIUGX34KfHqRm_s4awDh3Su7xYAwtjxIyxSFDZNZMlg7JIF_WHt91VlTAzNnKViZj6AQoeRdzGNKC68zrQIjZkiIUU5AysdaXlqw8UHSR2CT1J_u6-Nc3hvREGuQl9o5w-tLl7g6152x9UOJoogzT7_PFqL8ZeSu1ozZwpTyQha_uNo4cABedwgewyc3XH5ylIVzEl0hH6UQBB5LJGw8LED33hrEURSDlQaLnpd0uHn2KklqNzVYaYHvHBVRkEZRnGQphiO2oLnm5F6eDR6-ytYaK3daefbGQHTetyH-bJm92k9ST9bpwd1_L2J0im8WJKy4uzkdaGaOE65Besrfy0QfrrIBY48gzHMcb0DXx1aIAvADIOWK22Kb5M6C4qFUx9OYIgOAxIreyWPjWoKFJNMLB0rkazAH5JuYnmLWI_o9a8NFu0QWW2mPBLxw1D9p78nWy3934z4UHzQ41mazgZGVavfsPWo8pbnrhm9u4Kwlxp4YZ0AdM92azk4vG5lKLKRmLQ0Hh_hKVS_el6N4ADMDmrx-H73BpjS8kCNXbcos_Ixj38OfDmM-LbQ5f-qrINPV38TT_IWKRhnXON6TXKYVPtPyWJ2yP6L4uvWxajuhyzaju0dSVE_t93ryI-K9vSifC3t_8E7l0mPZYRAAA="
    },
    {
      "_id": "89054eff6ee6d91641d278d9ffdb3993",
      "_meta": {
        "ETag": "I",
        "github_username": "vemonet",
        "timestamp": "2021-01-20T00:00:12.144499",
        "uptime_status": "good",
        "uptime_ts": "2021-02-01T00:28:21.655721",
        "url": "https://api.collaboratory.semanticscience.org/openapi.json"
      },
      "_score": 5.626268,
      "components": {
        "schemas": {
          "Attribute": {
            "additionalProperties": false,
            "description": "Generic attribute for a node or an edge that expands key-value pair concept by including a type of this attribute from a suitable ontology, a source of this attribute, and (optionally) a url with additional information about this attribute.",
            "properties": {
              "name": {
                "description": "Human-readable name or label for the attribute. If appropriate, should be the name of the semantic type term.",
                "example": "PubMed Identifier",
                "nullable": true,
                "type": "string"
              },
              "source": {
                "description": "Source of the attribute, preferably as a CURIE prefix.",
                "example": "UniProtKB",
                "nullable": true,
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/CURIE",
                "description": "CURIE of the semantic type of the attribute. For properties defined by the Biolink model this should be a biolink CURIE, otherwise, if possible, from the EDAM ontology. If a suitable identifier does not exist, enter a descriptive phrase here and submit the new type for consideration by the appropriate authority.",
                "example": "EDAM:data_1187"
              },
              "url": {
                "description": "Human-consumable URL to link out and provide additional information about the attribute (not the node or the edge).",
                "example": "https://pubmed.ncbi.nlm.nih.gov/32529952",
                "nullable": true,
                "type": "string"
              },
              "value": {
                "description": "Value of the attribute. May be any data type, including a list.",
                "example": 32529952
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          },
          "BiolinkEntity": {
            "description": "Compact URI (CURIE) for a Biolink class, biolink:NamedThing or a child thereof. The CURIE must use the prefix 'biolink:' followed by the PascalCase class name.",
            "example": "biolink:PhenotypicFeature",
            "externalDocs": {
              "description": "Biolink model entities",
              "url": "https://biolink.github.io/biolink-model/docs/NamedThing.html"
            },
            "pattern": "^biolink:[A-Z][a-zA-Z]*$",
            "type": "string"
          },
          "BiolinkRelation": {
            "description": "CURIE for a Biolink slot, related_to or a child thereof (snake_case)",
            "example": "biolink:interacts_with",
            "externalDocs": {
              "description": "Biolink model relations",
              "url": "https://biolink.github.io/biolink-model/docs/related_to.html"
            },
            "pattern": "^biolink:[a-z][a-z_]*$",
            "type": "string"
          },
          "CURIE": {
            "description": "A Compact URI",
            "externalDocs": {
              "url": "https://www.w3.org/TR/2010/NOTE-curie-20101216/"
            },
            "type": "string"
          },
          "Edge": {
            "additionalProperties": false,
            "description": "A specification of the semantic relationship linking two concepts that are expressed as nodes in the knowledge \"thought\" graph resulting from a query upon the underlying knowledge source.",
            "properties": {
              "attributes": {
                "description": "A list of additional attributes for this edge",
                "items": {
                  "$ref": "#/components/schemas/Attribute"
                },
                "nullable": true,
                "type": "array"
              },
              "object": {
                "$ref": "#/components/schemas/CURIE",
                "description": "Corresponds to the map key CURIE of the object concept node of this relationship edge.",
                "example": "UniProtKB:P00738"
              },
              "predicate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkRelation"
                  }
                ],
                "nullable": true
              },
              "relation": {
                "description": "The relationship type term of this edge, originally specified by, or curated by inference from, the original source of knowledge. This should generally be specified as predicate ontology CURIE.",
                "example": "RO:0002447",
                "nullable": true,
                "type": "string"
              },
              "subject": {
                "$ref": "#/components/schemas/CURIE",
                "description": "Corresponds to the map key CURIE of the subject concept node of this relationship edge.",
                "example": "OMIM:603903"
              }
            },
            "required": [
              "subject",
              "object"
            ],
            "type": "object"
          },
          "EdgeBinding": {
            "additionalProperties": true,
            "description": "A instance of EdgeBinding is a single KnowledgeGraph Edge mapping, identified by the corresponding 'id' object key identifier of the Edge within the Knowledge Graph. Instances of EdgeBinding may include extra annotation (such annotation is not yet fully standardized).",
            "properties": {
              "id": {
                "description": "The key identifier of a specific KnowledgeGraph Edge.",
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "KnowledgeGraph": {
            "additionalProperties": true,
            "description": "A thought graph associated with this result. This will commonly be a linear path subgraph from one concept to another, but related items aside of the path may be included.",
            "properties": {
              "edges": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/Edge"
                },
                "description": "List of edges in the KnowledgeGraph",
                "type": "object"
              },
              "nodes": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/Node"
                },
                "description": "List of nodes in the KnowledgeGraph",
                "type": "object"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "LogEntry": {
            "additionalProperties": true,
            "properties": {
              "code": {
                "description": "One of a standardized set of short codes e.g. QueryNotTraversable, KPNotAvailable, KPResponseMalformed",
                "nullable": true,
                "type": "string"
              },
              "level": {
                "description": "Logging level",
                "enum": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "nullable": true,
                "type": "string"
              },
              "message": {
                "description": "A human-readable log message",
                "nullable": true,
                "type": "string"
              },
              "timestamp": {
                "description": "Timestamp in ISO 8601 format",
                "example": "2020-09-03T18:13:49+00:00",
                "format": "date-time",
                "nullable": true,
                "type": "string"
              }
            },
            "type": "object"
          },
          "Message": {
            "additionalProperties": true,
            "description": "The message object holds the main content of a Query or a Response in three properties: query_graph, results, and knowledge_graph. The query_graph property contains the query configuration, the results property contains any answers that are returned by the service, and knowledge_graph property contains lists of edges and nodes in the thought graph corresponding to this message. The content of these properties is context-dependent to the encompassing object and the TRAPI operation requested.",
            "example": {
              "n_results": 42,
              "query_graph": {
                "edges": {
                  "e01": {
                    "object": "n1",
                    "predicate": "biolink:treats",
                    "subject": "n0"
                  }
                },
                "nodes": {
                  "n0": {
                    "category": "biolink:Drug"
                  },
                  "n1": {
                    "category": "biolink:Disease"
                  }
                }
              }
            },
            "properties": {
              "knowledge_graph": {
                "$ref": "#/components/schemas/KnowledgeGraph",
                "description": "KnowledgeGraph object that contains lists of nodes and edges in the thought graph corresponding to the message",
                "nullable": true,
                "type": "object"
              },
              "query_graph": {
                "$ref": "#/components/schemas/QueryGraph",
                "description": "QueryGraph object that contains a serialization of a query in the form of a graph",
                "nullable": true,
                "type": "object"
              },
              "results": {
                "description": "List of all returned Result objects for the query posed",
                "items": {
                  "$ref": "#/components/schemas/Result"
                },
                "nullable": true,
                "type": "array"
              }
            },
            "type": "object"
          },
          "Node": {
            "additionalProperties": false,
            "description": "A node in the KnowledgeGraph which represents some biomedical concept. Nodes are identified by the keys in the KnowledgeGraph Node mapping.",
            "properties": {
              "attributes": {
                "description": "A list of attributes describing the node",
                "items": {
                  "$ref": "#/components/schemas/Attribute"
                },
                "nullable": true,
                "type": "array"
              },
              "category": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkEntity"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkEntity"
                    },
                    "type": "array"
                  }
                ]
              },
              "name": {
                "description": "Formal name of the entity",
                "example": "Haptoglobin",
                "nullable": true,
                "type": "string"
              }
            },
            "type": "object"
          },
          "NodeBinding": {
            "additionalProperties": true,
            "properties": {
              "id": {
                "$ref": "#/components/schemas/CURIE",
                "description": "An instance of NodeBinding is a single KnowledgeGraph Node mapping, identified by the corresponding 'id' object key identifier of the Node within the Knowledge Graph. Instances of NodeBinding may include extra annotation (such annotation is not yet fully standardized)."
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "QEdge": {
            "additionalProperties": true,
            "description": "An edge in the QueryGraph used as an filter pattern specification in a query. If optional predicate or relation properties are not specified, they are assumed to be wildcard matches to the target knowledge space. If specified, the ontological inheritance hierarchy associated with the terms provided is assumed, such that edge bindings returned may be an exact match to the given QEdge predicate or relation term ('class'), or to a term which is a subclass of the QEdge specified term.",
            "properties": {
              "object": {
                "description": "Corresponds to the map key identifier of the object concept node anchoring the query filter pattern for the query relationship edge.",
                "example": "https://www.uniprot.org/uniprot/P00738",
                "type": "string"
              },
              "predicate": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkRelation"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkRelation"
                    },
                    "type": "array"
                  }
                ]
              },
              "relation": {
                "description": "Query constraint against the relationship type term of this edge, as originally specified by, or curated by inference from, the original external source of knowledge. Note that this should often be specified as predicate ontology term CURIE, although this may not be strictly enforced.",
                "example": "RO:0002447",
                "nullable": true,
                "type": "string"
              },
              "subject": {
                "description": "Corresponds to the map key identifier of the subject concept node anchoring the query filter pattern for the query relationship edge.",
                "example": "https://omim.org/entry/603903",
                "type": "string"
              }
            },
            "required": [
              "subject",
              "object"
            ],
            "type": "object"
          },
          "QNode": {
            "additionalProperties": true,
            "description": "A node in the QueryGraph used to represent an entity in a query. If a CURIE is not specified, any nodes matching the category of the QNode will be returned in the Results.",
            "properties": {
              "category": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkEntity"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkEntity"
                    },
                    "type": "array"
                  }
                ]
              },
              "id": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CURIE"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/CURIE"
                    },
                    "type": "array"
                  }
                ]
              },
              "is_set": {
                "default": false,
                "description": "Boolean that if set to true, indicates that this QNode MAY have multiple KnowledgeGraph Nodes bound to it within each Result. The nodes in a set should be considered as a set of independent nodes, rather than a set of dependent nodes, i.e., the answer would still be valid if the nodes in the set were instead returned individually. Multiple QNodes may have is_set=True. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=False, each n1 must be connected to n2. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=True, each n1 must be connected to at least one n2.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "Query": {
            "additionalProperties": true,
            "description": "The Query class is used to package a user request for information. A Query object consists of a required Message object with optional additional properties. Additional properties are intended to convey implementation-specific or query-independent parameters. For example, an additional property specifying a log level could allow a user to override the default log level in order to receive more fine-grained log information when debugging an issue.",
            "properties": {
              "message": {
                "$ref": "#/components/schemas/Message",
                "description": "The query Message is a serialization of the user request. Content of the Message object depends on the intended TRAPI operation. For example, the fill operation requires a non-empty query_graph field as part of the Message, whereas other operations, e.g. overlay, require non-empty results and knowledge_graph fields."
              }
            },
            "required": [
              "message"
            ],
            "type": "object",
            "x-body-name": "request_body"
          },
          "QueryGraph": {
            "additionalProperties": true,
            "description": "A graph representing a biomedical question. It serves as a template for each result (answer), where each bound knowledge graph node/edge is expected to obey the constraints of the associated query graph element.",
            "properties": {
              "edges": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/QEdge"
                },
                "description": "The edge specifications. The keys of this map are unique edge identifiers and the corresponding values include the constraints on bound edges, in addition to specifying the subject and object QNodes.",
                "type": "object"
              },
              "nodes": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/QNode"
                },
                "description": "The node specifications. The keys of this map are unique node identifiers and the corresponding values include the constraints on bound nodes.",
                "type": "object"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "Response": {
            "additionalProperties": true,
            "description": "The Response object contains the main payload when a TRAPI query endpoint interprets and responds to the submitted query successfully (i.e., HTTP Status Code 200). The message property contains the knowledge of the response (query graph, knowledge graph, and results). The status, description, and logs properties provide additional details about the response.",
            "properties": {
              "description": {
                "description": "A brief human-readable description of the outcome",
                "example": "Success. 42 results found.",
                "nullable": true,
                "type": "string"
              },
              "logs": {
                "description": "Log entries containing errors, warnings, debugging information, etc",
                "items": {
                  "$ref": "#/components/schemas/LogEntry"
                },
                "nullable": true,
                "type": "array"
              },
              "message": {
                "$ref": "#/components/schemas/Message",
                "description": "Contains the knowledge of the response (query graph, knowledge graph, and results)."
              },
              "status": {
                "description": "One of a standardized set of short codes, e.g. Success, QueryNotTraversable, KPsNotAvailable",
                "example": "Success",
                "nullable": true,
                "type": "string"
              }
            },
            "required": [
              "message"
            ],
            "type": "object"
          },
          "Result": {
            "additionalProperties": true,
            "description": "A Result object specifies the nodes and edges in the knowledge graph that satisfy the structure or conditions of a user-submitted query graph. It must contain a NodeBindings object (list of query graph node to knowledge graph node mappings) and an EdgeBindings object (list of query graph edge to knowledge graph edge mappings).",
            "properties": {
              "edge_bindings": {
                "additionalProperties": {
                  "items": {
                    "$ref": "#/components/schemas/EdgeBinding"
                  },
                  "type": "array"
                },
                "description": "The dictionary of Input Query Graph to Result Knowledge Graph edge bindings where the dictionary keys are the key identifiers of the Query Graph edges and the associated values of those keys are instances of EdgeBinding schema type (see below). This value is an array of EdgeBindings since a given query edge may resolve to multiple knowledge graph edges in the result.",
                "type": "object"
              },
              "node_bindings": {
                "additionalProperties": {
                  "items": {
                    "$ref": "#/components/schemas/NodeBinding"
                  },
                  "type": "array"
                },
                "description": "The dictionary of Input Query Graph to Result Knowledge Graph node bindings where the dictionary keys are the key identifiers of the Query Graph nodes and the associated values of those keys are instances of NodeBinding schema type (see below). This value is an array of NodeBindings since a given query node may have multiple knowledge graph Node bindings in the result.",
                "type": "object"
              }
            },
            "required": [
              "node_bindings",
              "edge_bindings"
            ],
            "type": "object"
          }
        }
      },
      "externalDocs": {
        "description": "Documentation for the NCATS Biomedical Translator Reasoners web services",
        "url": "https://github.com/NCATS-Tangerine/NCATS-ReasonerStdAPI"
      },
      "info": {
        "contact": {
          "email": "vincent.emonet@maastrichtuniversity.nl"
        },
        "description": "Translator Reasoner API for the Knowledge Collaboratory, hosted on the [Nanopublications network](http://nanopub.org/wordpress/), for annotated drug indications or any other BioLink-compliant claims. \n\n This Open API supports [Translator Reasoner API](https://github.com/NCATSTranslator/ReasonerAPI) version `1.0.0-beta` queries and the [`KGX`](https://github.com/biolink/kgx) format \n\nSee the API GitHub repository: [github.com/MaastrichtU-IDS/knowledge-collaboratory-api](https://github.com/MaastrichtU-IDS/knowledge-collaboratory-api) \n\nThis service is supported by the [NCATS Translator project](https://ncats.nih.gov/translator/about)",
        "license": {
          "name": "MIT license",
          "url": "https://opensource.org/licenses/MIT"
        },
        "termsOfService": "https://github.com/MaastrichtU-IDS/knowledge-collaboratory-api/blob/master/LICENSE",
        "title": "Translator Knowledge Collaboratory API",
        "version": "1.0.0-beta",
        "x-translator": {
          "component": "KP",
          "team": [
            "Clinical Data Provider"
          ]
        }
      },
      "openapi": "3.0.1",
      "paths": [
        {
          "path": "/kgx",
          "pathitem": {
            "get": {
              "operationId": "api.get_kgx",
              "parameters": [
                {
                  "description": "Get drug indications from which KG",
                  "in": "query",
                  "name": "from_kg",
                  "schema": {
                    "default": "NeuroDKG",
                    "enum": [
                      "NeuroDKG",
                      "Nanopublications"
                    ],
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/zip": {
                      "schema": {
                        "format": "binary",
                        "type": "string"
                      }
                    }
                  },
                  "description": "Zip file with nodes and edges files in KGX TSV format"
                }
              },
              "summary": "Get the Knowledge Collaboratory drug indications in KGX TSV format (TSV files in a .zip)",
              "tags": [
                "translator"
              ]
            }
          }
        },
        {
          "path": "/predicates",
          "pathitem": {
            "get": {
              "operationId": "api.get_predicates",
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "additionalProperties": {
                          "additionalProperties": {
                            "description": "Array of predicates",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "description": "Target map",
                          "type": "object"
                        },
                        "description": "Source map",
                        "example": {
                          "biolink:ChemicalSubstance": {
                            "biolink:Gene": [
                              "biolink:directly_interacts_with",
                              "biolink:decreases_activity_of"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Predicates by source and target"
                }
              },
              "summary": "Get supported relationships by source and target",
              "tags": [
                "predicates"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "post": {
              "description": "Send a [ReasonerAPI](https://github.com/NCATSTranslator/ReasonerAPI) query to request the predicted targets given: a source node, and the relation to predict. Use classes and relations from the [BioLink model](https://biolink.github.io/biolink-model)",
              "operationId": "api.post_reasoner_query",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "Query information to be submitted",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Response"
                      }
                    }
                  },
                  "description": "OK. There may or may not be results. Note that some of the provided identifiers may not have been recognized."
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Bad request. The request is invalid according to this OpenAPI schema OR a specific identifier is believed to be invalid somehow (not just unrecognized)."
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Internal server error."
                },
                "501": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Not implemented."
                }
              },
              "summary": "Query reasoner via one of several inputs",
              "tags": [
                "query"
              ],
              "x-swagger-router-controller": "swagger_server.controllers.query_controller"
            }
          }
        }
      ],
      "servers": [
        {
          "url": "https://api.collaboratory.semanticscience.org"
        }
      ],
      "tags": [
        {
          "description": "Get supported relationships by source and target",
          "name": "predicates"
        },
        {
          "description": "Query reasoner using a predefined question type",
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "reasoner"
        }
      ],
      "~raw": "H4sIAI1yB2AC_9VceVPcSJb_Khk1E2GYrQvsPkzERgzGRxM2hwHP7g7N0FlSVlW2VZJaKVGudvDd9x2ZUpYqCwqMJ2L-AqQ8Xr58x-8d4msnymZ5lqq0NJ098bVjoqmaSf59vywLPapKRX_JONalzlKZnBZZropSKxw2lolRXdGJlYkKneMIeNp5p1JV6EhIt4YYZ4WQIs1iJfC3VKh4okQ5laVQX3KZxkZ8VovejUwqJXKpCxFlaaTyUowWQqdRUsU6ncAS5SKHJcYwVRt__SKbwVtT6VKOEhiRllmSTRZdfJhVRRSYBO_SWGxlOR8sWWzD4KpIxFyXU9GcGPYH8mcS_xJylFVla6F-B1iQ-3z52knljDnXYs0v1UymvULJmOjEYciRRI5UQlwqp8pbWRyOhcxx7UJLJNlMsyqJxUjRQJ4-pt8NXF1aAteJRaUqZkSX-iJneYK0dE6r0ZGKxWEMF67HWhX4Pq2SBEmBAWVR4WXifBxugIh00rmFR8zC0HnOPeYqn7d5ocaqgJUXQgKvxMGns8M39FR_aRP2KdUgVuX7VxsTZB997fwVFsR3fxk0sjywcjygPTur8sm0BPnWPkhfvIVLaS5XxHCAFLgIcokDX-ks0elnMQPRTlgumiuSYmRf045dkcGUYq5RZ_RY5JkxGk7aZfHF5d683j-qhZdvvxFqXV-ciDMgJc1Qe7QpuwJeKNSw-qA3oEbTQholYEdFkm6q0UyXLDdqzsdFiQNNM7B0wQJuz-UJnZBVOc0KXS7a94bU7sWylNc7Oz__RBcD-rNe7HEn-AXP8unsgygzQcxBjUICYccbIOQ-1fNuR2whD-hE1rTg72hbttu0TssyN3uDQQ5cUHE_jUa6nyazfqqn_Ul2M3i--8Puy5c_7G4sgmSrQmf9BxmxVUE6kgsSinQhkGd0Ad0l45bAXbbodmTd4paF-qPShYrh-SWTVNNx5RGZjX5XUUlEWvF8A3JTLkLEHoDWyKiE-zgUWySl29ZYO8mOEmlM10ny3jGYnPhiigTTsGiqQdhRrlU27osLODOr16wypagMGyrWe_HMrfIMNkmSbN4o0qk0kUwOUGJpR7Jt7Ut000-nCi5-kevorZJlVSgeBzoAQvM6i0zoqMuqiqpE1roW2lpE7C79CfiBatTXmXvSo6mDGDYYNHzoT8tZQtzO4baBBFzrX47Uy_3eP68uZe9P_Pm3v3bCwmRpO1OJtOR-DRut5bsxSQbKX-AsFV-DPq1eidgyqfysriPg7PYadmq0HiAF5hpd38N5WViyH83M5gT3MBP4SMy8Xs9KNvoBmveFJ-zBQ7ZIn8_n_fnzflZMBhdng93hznBwfHLxphdVhVY9_Htnd-fHge-QfELegBl6BHjaFyZXEZj5iM1e203VzJ7qnOwnqmI5zxxiMgyrJFh9gFaFMgaUTBqykAbMDa32Oc3mCWGwXztg3KvJtPy1IyaFzKewgamSEle1qOqPShULUYF3pblVCs4iWeCAZhlGCCEkVFtAE74UNHp4SM_qN1MsJAKvirvg6rpUM3O_62_g6-2dBl0WhVzQGGs1Hw8qsgI4B6MBy4ImIqdmMkdYK5bwBu9T41t2XBabLt0tnngtUto7HQ5_ev4zawq4BJQWK21JcoLUX95zjrbJub1aZRQ7nfU2Ca39Es019qyPhKcA4FPoiSaQ7aSbLD--EKBOqPyM9AEzKmAMiV6X-WWneji-Fjv0Nw3immDYQXuAm222AdmvOVRjK76TNnvPTvaGw-Huixc_bQ6Nq3-T3NiNHik4J0eHR3s_Dp-_HD7vrGIJd4hGDdbgCbRpr3SKeOUu02bZtaLrOjWlTPkSvaUERlPCwG-ADN-7y31H1giHIUNyeNttIHCNG6KafbjQMx0_cxqGHPQgs2UjrYduzlrCejtB-wHmtjSaNpEz6UJRtKxlIQHKAQphK71lqmjqP9CMzxeqFOOK5B5WjWUR6z9VvB0ylDpep2KrJ5G1kwjxqx9yjSuXDvutueXlJR9z0danWI8CcC6LNCk5xdZWZNHNWA2e6ySBq5zNspTVF8FwqiSEXhImgHzySuSRQLFqLQCNkSmFVQBRITywSEKQm4CNdVxDcVppxiDc3mMcugc8uLnr0PcoOvn921WufLCOjtYXbfFjVofvg1z3N1B0DPPvomgJGtxP0YokMX1ocIh1a6TqQzaBOKRYbCBPrRuJkP6AbpykyiqDp1uAlOhQ4BQKtJZ4NNWf9MVHhDHHWXlRyBtVGEmR9_tTeLJ_I3Xi_j4ja2LUkUww9oQjbuoKEnWjgtEvnHyCFoQHIJ_Sakace3N2dnKGT_5n_-z48Pgd_np4_PYEf75-8-rTu87VprvPAOnJiQqDrOly2gk8oHDjN065aJhRgkMJWin3EqXo8PxE_PzjcEdw7N7yRLvD3WFv-LI3fH6x8_PezvO9Fy__azgEv4vj7AwYBiGy6uGemxF4G5a5I48pDzJhaHYth5w_mWYJumjyz3BKsEAlaBkLIMkWR19OflifCqW87NEeY-lrMmZdawINJyJrUMNvOZT2hrtlFrQzUMC0MDiHR2M9qTiHw7jJLh6YhhkImZo5KEETKxQK4mgvsWVUcaMjFaQtsCaieNNYN5y0ZFWWHcKy0ybUA07A8ptP7rEX5hufi-hb6fWXsherXKXoGh12AvSIUZ4xlKHgm0Nq8N3F2f7pocBl2EejEQOxtW6gkdGvnfTasg_-erELL72LaDkJNdyhn3X80El3Oi1UXkfaJahgSaaywY2ddMjy25h5eEJ2D2ZPMrKY9Qqvi4r1Md1ZP0YbBeE-rHp7u2pNW5d5v_tY9QgtZWlBEMt1Eq1VAWGxwCtZcoT3CojazGJ5yt--szsPSRq87oDNy_DhJKqLlon-s47ZXdhsj4eGjR9P3B4bnaERw6_rvDdEPI32ntF4S6WpKwpMS54ZdmcbBtG82GYR9BoDfOxc90OTIBTeBCGJmE91hGkKTG4gvRAZzhQmKGekcYkDh31xzLJWqEDgAKB6DeahaS7m-KaURpPH4DEjkmabrv6u2QzPLHwNTID1H5IksPljWPjrpiSvzGwTeUVHWVMme4s4IFmqbyleaRlM_CLzMpskGTD2m3AC3vjmcW04cHtU9L-fLgXFHh13BcW-gD5FUEzrbRwU-0Q-bVD8kCD143351TWxqa0925N6lr2yiVKZirFOsJ5mU9CthCzMtMadCnSufuwnmYo6IePDFrRDePw6NUVAbUHPAbBUYL7Q1Y3wKpI4ArYAe0sQoDoxVMpiArzz0q65jLhKvLyoy3OROdQphMeaZWwKty6LaLoIBOWcuTOuDheTBDJdXUFXyQV73HjE928azzNz5S2QA0yyE-mO8Im-UamgK1vDJ0oabj2j2s-zbUoMYmzPz9nis0JUI64PWdHlNZtsX134bimpl97dPAG3qimh7C0wFuuj1rSzq21J0LIfvjdb51cgqlTDUUoqQ9jfBzb5Gw7UltPB32z7mwTxw62_Pzdo_-9KLn90kQ2cDVAWwPgJgq3SRjcbZJ1BmZ8i8ezqROEM9HFW2k4Wv_qfjSF62SQPTWTb9gCZMAq24RAoFJoLXARuNyrhDArr4dFKwPKtietv0YhgXvr7qUQ20zPSBYW5pIFNaW-S79w4yf3xPtC6LuvpY9a2YwE-1oiVjCTBmbYzcX0y1lF6Rh2Ddg6dyLA61jqcV5tD68ohJhh5Qb0ligG9CdnH_xDAGE6SW6Y1slmXDR3QXlMKCSrLpmdlTPeQM9Yzwmcz10Y5hRxLDL3WBkivsixRMmXDo8eU9ERVpROgb8b7NJ5dYsE42v8_MZU3oM9Y4s3DyNKIUValJLK6dLBQSfDAZ3XOXjXpHUmbN11Prp_IoimXjwWi6lwNze0KML-ATJDItBm3Mkr3VZ8tMietxJx2MqUV8huIu2PkQelTxTksIB_bn9BtKBn7-hBrwDgVOoa-OHLM-HhsNWzBXOIb-e8L4KpVT2bjVrqzzajJG2HTUimYEdb3ZvTu8ui3fKfE0nSHO2WYcc3kdPcpd7wgubhzQxAUkCgMXFOFu_s2dcTStjZ8ImP3uCSr9fIE6eA4zlYCrv2MuVeJTwqXqSO99nrC-mLfpV5rJ2RcokkKZ_7F0XImlzhT43av8aCxibBy6DHnEjAzGTOdsOENukU0LjMQWiKrVxfngFwy7j1f-nNZQFwLTtBwd6G1TWjjA8Q44LKwPWKZrSPA1qgGEtuoHJuwA-hGFQVWvVABrBnxJoFmZEXMQwsVKWwUnGVwKOxq7E0QaMHBcLzfejefApiJ1ajiOobESM5UwXYPvwxxpy08arJ5AbFgVODuTQdTbNSM4klHXxwsJY3b1843ALLB1qG-xlZauHUplL1DU7OcNwa5MtTSnPbULIdb8lP14IMSBnyyaFPTRW4WCrEpWb96WTB1VKfCG0zkouu28fZwOf1QTp72NKEY2l1JAO7Aky-9URYvejYT07G8vMaHjW4_uhDsWoos8mEZ9lJ1tBkx_bCkmgNy1VDcB-yXtnWcDBcfXmyxF9i2fOR37LCauJi3RWcw4GjfYDNUbeuykXKJEhdd1AGlFxezEPJaivX7exSMP66rGF_YZtblBIRh_0v5SxfvIDxH0wQBIhBtMxw1HDJ1BWQ5MUSto6bO36wwJLV8pQN2ydfbAyITPbPkxwG4lVU4dqf971TV_riurO3QyYPZxvj9ydiWrj39IyvorrT4OE9bFyYbX9mUEamkmctFkgFMInMvrV1kJQBLmWcYhFOvKGiztULtOJGbzBvlMVUUgfnhbN8WQ7lfLi5OxTm4ysqAxQYO7g6H23w7ruQarnU2-m11tXBH2vJUtdu2A11HKdpOu5Gh7bvC4xMPA9dnfIcfaEqPFZCUGK8h3dERsg7LNxGoFowKrcbtCr03qk49VSVoQTuaOWcG98WL3do9jFH8-pv3LcCR17QtYJhaIBvsPaD4A77ICmDdXBb4NzHRIQMPNIA3K6MH1Djq9pBNSxxPgDQOnl66OLdC0vUtLSsWC9jb7a5rXjF-90pYMjavi2wKGqwp4vj0wYhgqUJZZziMF72t1Ibbfp2iWgNSZsa2WQE2i_A7AMHfszBBNgpAiNhr2yXbYwGgg4IhK94w2ituGEfklivo-YCAnAVYvRDocLUZs02HAbzsNRLevSx_GLe6rPL6IM32Ohhy7fLyd_vVDVXS7_a8DepgwM0ArqM9OSd1mOZgIzlG4wwDnM2KQKvK1CosMLorl1ck7y3t8-V8ZFMR8DZrulFa0M76cJqSGdUsrNe1fzJTONe8ZRRQqiDy2rYNjPzloqbqEbGnNd1gJS_CeJZLIdar8qUSsM-SG7r4OjMTkoBaJWz35B3Q6mlFwS-Q_htEgZToaUWhsS2PEgW_6PkIUVgyKyFRsGZj0UrPtYXgeIkx9wtDEGk2omERZ_MgZO5pkfu-CILnVZ0AqZP7xwf7F-f4uZKL98B_pQbiOnh_BjEwSBnc1lyNXL9Z6BMi--kQSOWA1utdyHSiwG8p-7db6byMAbGSNCIQsb2jQJMtc8ClaVr5Bi8Agjk1g2nl32dSUoVlWkIggO4Vv3VMk6BYr9IvECW7AzeCfJChz80KHAvBPIgWCpvNPVweyzTLq1HighMBdMyz4vPVFp4aDp3yACp1wIuYvuQZQNRLX4BxSR3Wi4tq4vK97PIKKhVwbgEY_wE_tUKFTrQE-B4lUs8ALf6a_pqyuJ7kIIN4BFPlOeAPIy7XHJJpC91IM2HgJsD4bUG8hCP_ttMf9oe9EQDn30jetaeKl7-9f_e_vwUXtw1tg8-TL9u2m5QoP1es9kj2O13-Uo0wxZDBvQGvQcq9JY7qu_3UO3x9PqgVCpjiXVBP5jpIwgPmbxNt_EUKSzNaAcvWpjnjkpXCYzI4ctS0Zv8UbtPUn6aWDXcp5KDP-EBylAsFXe7m6PBCuOeragRmP7WfaaFQ2YEAjw8v2KRj8f9kfM6kr1HAB7BjMEqy0QCcByw8-HB48Ob4nDpgSl0yQPU4sEZt8ILpG1eWI5zUSBInrxrmWHW3rov6Ek9pPyW52foAZImM0Gv8_PaUA7uic0X2DbkDROO057AFt3DKcsrGDiWQfpnYAk2dtTuMyQ3mug-vrnEYTXQZXi4jrfx_hHJVcenTBm50eE994JrGknfoNK1SHRwH-1APKfmhVsGoc6yqInvNa9SN5v7Dtu1ZMvp1QHDF3YcUATETIEyvTSpzGHBFnrt1Bn_q3Ps3EvRr088NHkbyQVZ2CpjZf-ock67clLQSFuAbcn5gOMTF-T9co_kt17VnM8n9sMjnO4zy6h2sLCm26He3nxR9OCTpXykJWV12PAFkSRrUVX6zich4ox_M8d-NTSp4LF-L9Na-aIdoDrMsU9YAxfX_j-EOOMidSxDArIGs4f8rYcf7rdmuyfkATozafF6NGKYtvcV_QULX4x7EgICwheJ69WPneoiKMC-vzDW81jcAAq6zsb3UICZq0Xxa8wtNvW0WIS9Hhw-KZ-Md_A6INQv4YuddjhW7P-oiHHjCYF_HucJgVFx6PvrhPp3hKpWPuCZnv-9HaK4cqYax7V7z71dQh7u1z2_avjI3ty8-uW__lcstJr5tJN9pEQ1_eN4Qf89X5qSxAf1DRl0X9nTXtam1J3uFJZCHqt_9TeZh4flou8Wbohu3AtaJi84ykm8-z_1Wg3FfCzinnINEn7ynbGrBkQv4ca9nyWbE_AYp6tN2X-PVTYZe2OamUww0UgpLbVE2STFJxpm1F4844CYO5xV1B9gyIn_WzNKt0fBzi4GMIgDi_hcriJ0JOnNAeHLmf5jptaPAUAgRtbqpOzzdmsiSaTbnf2TyO_3LjLQ5s00n_vCdDn2YusY2LLwVnNl1W-58ly1BGJpiOV1qyyh-tO1gNuy40ZIaEjA7CuwrqJ01r_gbmtoYsuZeESA0czmB6LBXAFKGH3iAAry-Kog0fnnNB-43L02f67fecKafR1oc10LUaEKWYG_f_ZcGE2nsJkSgzR_WO1KDWPChTsBBQc8HUBdS0KTUrKwMV19xlv0nRq76Ktw_k3ErM0NpUffIwzlLz9362MT0_0dYQtlSTAAA"
    },
    {
      "_id": "70117385218edc9bc01633829011dfcf",
      "_meta": {
        "ETag": "7a74c2f16e70e0a436e32f9673653e17d647eb551c76ba5737678c401aa04224",
        "github_username": "CaseyTa",
        "slug": "cohd",
        "timestamp": "2021-01-22T06:12:07.015573",
        "uptime_status": "good",
        "uptime_ts": "2021-02-01T00:08:44.969794",
        "url": "https://raw.githubusercontent.com/WengLab-InformaticsResearch/cohd_api/master/cohd/cohd_oas3.yaml"
      },
      "_score": 4.9364476,
      "components": {
        "callbacks": {},
        "examples": {},
        "headers": {},
        "links": {},
        "parameters": {},
        "requestBodies": {},
        "responses": {},
        "schemas": {
          "Attribute": {
            "additionalProperties": false,
            "description": "Generic attribute for a node",
            "properties": {
              "name": {
                "description": "Human-readable name or label for the attribute. Should be the name of the semantic type term.",
                "example": "PubMed Identifier",
                "type": "string"
              },
              "source": {
                "description": "Source of the attribute, as a CURIE prefix.",
                "example": "UniProtKB",
                "type": "string"
              },
              "type": {
                "description": "CURIE of the semantic type of the attribute, from the EDAM ontology if possible. If a suitable identifier does not exist, enter a descriptive phrase here and submit the new type for consideration by the appropriate authority.",
                "example": "EDAM:data_1187",
                "type": "string"
              },
              "url": {
                "description": "Human-consumable URL to link out and read about the attribute (not the node).",
                "example": "https://pubmed.ncbi.nlm.nih.gov/32529952",
                "type": "string"
              },
              "value": {
                "description": "Value of the attribute. May be any data type, including a list.",
                "example": 32529952
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          },
          "BiolinkEntity": {
            "description": "Compact URI (CURIE) for a Biolink class, biolink:NamedThing or a child thereof. The CURIE must use the prefix 'biolink:' followed by the PascalCase class name.",
            "example": "biolink:PhenotypicFeature",
            "externalDocs": {
              "description": "Biolink model entities",
              "url": "https://biolink.github.io/biolink-model/docs/NamedThing.html"
            },
            "pattern": "^biolink:[A-Z][a-zA-Z]*$",
            "type": "string"
          },
          "BiolinkRelation": {
            "description": "CURIE for a Biolink slot, related_to or a child thereof (snake_case)",
            "example": "biolink:interacts_with",
            "externalDocs": {
              "description": "Biolink model relations",
              "url": "https://biolink.github.io/biolink-model/docs/related_to.html"
            },
            "pattern": "^biolink:[a-z][a-z_]*$",
            "type": "string"
          },
          "CURIE": {
            "description": "A Compact URI",
            "externalDocs": {
              "url": "https://www.w3.org/TR/2010/NOTE-curie-20101216/"
            },
            "type": "string"
          },
          "CurieList": {
            "description": "list of CURIEs",
            "properties": {
              "curies": {
                "items": {
                  "type": "string"
                },
                "title": "list of CURIEs",
                "type": "array"
              }
            },
            "type": "object"
          },
          "Edge": {
            "additionalProperties": false,
            "description": "An edge in the knowledge graph linking two nodes",
            "properties": {
              "attributes": {
                "description": "A list of additional attributes for this edge",
                "items": {
                  "$ref": "#/components/schemas/Attribute"
                },
                "type": "array"
              },
              "object": {
                "$ref": "#/components/schemas/CURIE",
                "description": "Corresponds to the map key CURIE of the object node of this edge",
                "example": "UniProtKB:P00738"
              },
              "predicate": {
                "$ref": "#/components/schemas/BiolinkRelation"
              },
              "relation": {
                "description": "Lower-level relationship type of this edge",
                "example": "upregulates",
                "type": "string"
              },
              "subject": {
                "$ref": "#/components/schemas/CURIE",
                "description": "Corresponds to the map key CURIE of the subject node of this edge",
                "example": "OMIM:603903"
              }
            },
            "required": [
              "subject",
              "object"
            ],
            "type": "object"
          },
          "EdgeBinding": {
            "properties": {
              "id": {
                "description": "A knowledge-graph edge id, i.e. the `id` of a KEdge",
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "KnowledgeGraph": {
            "additionalProperties": true,
            "description": "A thought graph associated with this result. This will commonly be a linear path subgraph from one concept to another, but related items aside of the path may be included.",
            "properties": {
              "edges": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/Edge"
                },
                "description": "List of edges in the KnowledgeGraph",
                "type": "object"
              },
              "nodes": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/Node"
                },
                "description": "List of nodes in the KnowledgeGraph",
                "type": "object"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "LogEntry": {
            "properties": {
              "code": {
                "description": "One of a standardized set of short codes e.g. QueryNotTraversable, KPNotAvailable, KPResponseMalformed",
                "type": "string"
              },
              "level": {
                "description": "Logging level",
                "enum": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "type": "string"
              },
              "message": {
                "description": "A human-readable log message",
                "type": "string"
              },
              "timestamp": {
                "description": "Timestamp in ISO 8601 format",
                "example": "2020-09-03T18:13:49+00:00",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "Message": {
            "additionalProperties": false,
            "properties": {
              "knowledge_graph": {
                "$ref": "#/components/schemas/KnowledgeGraph",
                "description": "KnowledgeGraph object that contains all the nodes and edges referenced in any of the possible answers to the query OR connection information for a remote knowledge graph",
                "type": "object"
              },
              "query_graph": {
                "$ref": "#/components/schemas/QueryGraph",
                "description": "QueryGraph object that contains a serialization of a query in the form of a graph",
                "type": "object"
              },
              "results": {
                "description": "List of all returned potential answers for the query posed",
                "items": {
                  "$ref": "#/components/schemas/Result"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "Node": {
            "additionalProperties": false,
            "description": "A node in the knowledge graph",
            "properties": {
              "attributes": {
                "description": "A list of attributes describing the node",
                "items": {
                  "$ref": "#/components/schemas/Attribute"
                },
                "type": "array"
              },
              "category": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkEntity"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkEntity"
                    },
                    "type": "array"
                  }
                ]
              },
              "name": {
                "description": "Formal name of the entity",
                "example": "Haptoglobin",
                "type": "string"
              }
            },
            "type": "object"
          },
          "NodeBinding": {
            "properties": {
              "id": {
                "$ref": "#/components/schemas/CURIE",
                "description": "A knowledge-graph node id, i.e. the `id` of a KNode"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "OmopList": {
            "description": "list of OMOP IDs",
            "properties": {
              "curies": {
                "items": {
                  "type": "integer"
                },
                "title": "list of OMOP IDs",
                "type": "array"
              }
            },
            "type": "object"
          },
          "QEdge": {
            "additionalProperties": true,
            "description": "An edge in the QueryGraph",
            "properties": {
              "object": {
                "description": "Corresponds to the id of object node of this edge",
                "example": "https://www.uniprot.org/uniprot/P00738",
                "type": "string"
              },
              "predicate": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkRelation"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkRelation"
                    },
                    "type": "array"
                  }
                ]
              },
              "relation": {
                "description": "Lower-level relationship type of this edge",
                "example": "upregulates",
                "type": "string"
              },
              "subject": {
                "description": "Corresponds to the id of subject node of this edge",
                "example": "https://omim.org/entry/603903",
                "type": "string"
              }
            },
            "required": [
              "subject",
              "object"
            ],
            "type": "object"
          },
          "QNode": {
            "additionalProperties": true,
            "description": "A node in the QueryGraph",
            "properties": {
              "category": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkEntity"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkEntity"
                    },
                    "type": "array"
                  }
                ]
              },
              "id": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CURIE"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/CURIE"
                    },
                    "type": "array"
                  }
                ]
              },
              "is_set": {
                "default": false,
                "description": "Boolean that if set to true, indicates that this QNode MAY have multiple KnowledgeGraph Nodes bound to it within each Result. The nodes in a set should be considered as a set of independent nodes, rather than a set of dependent nodes, i.e., the answer would still be valid if the nodes in the set were instead returned individually. Multiple QNodes may have is_set=True. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=False, each n1 must be connected to n2. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=True, each n1 must be connected to at least one n2.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "Query": {
            "additionalProperties": true,
            "description": "The Query class is used to package a user request for information. A Query object consists of a required Message object with optional additional properties. Additional properties are intended to convey implementation-specific or query-independent parameters. For example, an additional property specifying a log level could allow a user to override the default log level in order to receive more fine-grained log information when debugging an issue.",
            "properties": {
              "message": {
                "$ref": "#/components/schemas/Message",
                "description": "The query Message is a serialization of the user request. Content of the Message object depends on the intended TRAPI operation. For example, the fill operation requires a non-empty query_graph field as part of the Message, whereas other operations, e.g. overlay, require non-empty results and knowledge_graph fields."
              }
            },
            "required": [
              "message"
            ],
            "type": "object",
            "x-body-name": "request_body"
          },
          "QueryGraph": {
            "additionalProperties": true,
            "description": "A graph intended to be the thought path to be followed by a reasoner to answer the question. This graph is a representation of a question.",
            "properties": {
              "edges": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/QEdge"
                },
                "description": "List of edges in the QueryGraph",
                "type": "object"
              },
              "nodes": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/QNode"
                },
                "description": "List of nodes in the QueryGraph",
                "type": "object"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "QueryOptions": {
            "description": "Additional query options that apply to COHD",
            "properties": {
              "biolink_only": {
                "description": "Whether to only include nodes in the knowledge graph and results that are Biolink compliant (as defined by ontology_targets). Default: true",
                "example": true,
                "type": "boolean"
              },
              "confidence_interval": {
                "description": "Criteria that the results are significant to the specified criteria level. This only applies when the method is 'obsExpRatio'. Default: not required.",
                "example": 0.99,
                "type": "number"
              },
              "dataset_id": {
                "description": "The COHD dataset to query",
                "example": 3,
                "type": "integer"
              },
              "local_oxo": {
                "description": "Whether to use the local implementation of OxO or the real implementation of OxO. Note, the local OxO implementation may contain outdated definitions and xrefs but runs faster. The real OxO has the most updated definitions and xrefs, but is slower (~1-2 seconds/concept). Default: true",
                "example": false,
                "type": "boolean"
              },
              "max_results": {
                "description": "The maximum number of results to be returned.",
                "example": 10,
                "type": "integer"
              },
              "method": {
                "description": "Type of association method to perform: 'obsExpRatio' (default), 'relativeFrequency', or 'chiSquare'",
                "example": "obsExpRatio",
                "type": "string"
              },
              "min_cooccurrence": {
                "description": "Criteria that the results have a minimum co-occurrence count. Default: not required.",
                "example": 50,
                "type": "integer"
              },
              "ontology_targets": {
                "description": "DEPRECATED: COHD is now attempting to map based on the Biolink Model yaml and SRI Node Normalizer.\nCOHD can attempt to map from OMOP concepts to a target ontology. You can identify target ontologies for each Biolink node type. The keys should be Biolink node types (e.g., 'biolink:Disease'). The values should be lists of target ontology prefixes, e.g., ['ICD9', 'UMLS', 'DOID']. An emtpy list indicates not to perform mapping for the specified type. Use the key '_DEFAULT' to indicate a default list of target ontologies for any unspecified types. If a domain is specified, it will override the '_DEFAULT' list. Target ontology prefixes should match the Biolink yaml but may include prefixes outside of Biolink.\n\nIf ontology_targets is not provided, COHD API will attempt mappings based on the prefixes defined in the Biolink yaml.\n",
                "example": {
                  "_DEFAULT": [],
                  "biolink:Disease": [
                    "ICD9",
                    "SNOMEDCT",
                    "DOID"
                  ],
                  "biolink:Drug": [
                    "RxNorm"
                  ],
                  "biolink:Procedure": [
                    "ICD10PCS",
                    "SNOMEDCT"
                  ]
                },
                "type": "object"
              },
              "threshold": {
                "description": "Criteria threshold to apply to the association metric. chiSquare: p-value < threshold. obsExpRatio: abs(ln_ratio) >= threshold. relativeFrequency: relative_frequency >= threshold.",
                "example": 0.5,
                "type": "number"
              }
            },
            "type": "object"
          },
          "Response": {
            "description": "The Response object contains the main payload when a TRAPI query endpoint interprets and responds to the submitted query successfully (i.e., HTTP Status Code 200). The message property contains the knowledge of the response (query graph, knowledge graph, and results). The status, description, and logs properties provide additional details about the response.",
            "properties": {
              "description": {
                "description": "A brief human-readable description of the outcome",
                "example": "Success. 42 results found.",
                "type": "string"
              },
              "logs": {
                "description": "Log entries containing errors, warnings, debugging information, etc",
                "items": {
                  "$ref": "#/components/schemas/LogEntry"
                },
                "type": "array"
              },
              "message": {
                "$ref": "#/components/schemas/Message",
                "description": "Contains the knowledge of the response (query graph, knowledge graph, and results)."
              },
              "status": {
                "description": "One of a standardized set of short codes, e.g. Success, QueryNotTraversable, KPsNotAvailable",
                "example": "Success",
                "type": "string"
              }
            },
            "required": [
              "message"
            ],
            "type": "object"
          },
          "Result": {
            "description": "A Result object specifies the nodes and edges in the knowledge graph that satisfy the structure or conditions of a user-submitted query graph. It must contain a NodeBindings object (list of query graph node to knowledge graph node mappings) and an EdgeBindings object (list of query graph edge to knowledge graph edge mappings).",
            "properties": {
              "edge_bindings": {
                "additionalProperties": {
                  "items": {
                    "$ref": "#/components/schemas/EdgeBinding"
                  },
                  "type": "array"
                },
                "description": "List of QEdge-KEdge bindings.",
                "type": "object"
              },
              "node_bindings": {
                "additionalProperties": {
                  "items": {
                    "$ref": "#/components/schemas/NodeBinding"
                  },
                  "type": "array"
                },
                "description": "List of QNode-KNode bindings.",
                "type": "object"
              }
            },
            "required": [
              "node_bindings",
              "edge_bindings"
            ],
            "type": "object"
          }
        },
        "securitySchemes": {},
        "x-bte-kgs-response-mappings": {
          "chi_square": {
            "biolink:OMOP": "results.concept_id_2",
            "biolink:chi_squared_statistic": "results.chi_square",
            "biolink:has_count": "results.n_c1_c2",
            "biolink:name": "results.concept_2_name",
            "biolink:p_value": "results.adj_p-value"
          },
          "obs_exp_ratio": {
            "biolink:OMOP": "results.concept_id_2",
            "biolink:has_count": "results.observed_count",
            "biolink:name": "results.concept_2_name"
          },
          "relative_frequency": {
            "biolink:OMOP": "results.concept_id_2",
            "biolink:has_count": "results.concept_pair_count",
            "biolink:has_quotient": "results.relative_frequency",
            "biolink:has_total": "results.concept_2_count",
            "biolink:name": "results.concept_2_name"
          }
        }
      },
      "info": {
        "contact": {
          "email": "ct2865@cumc.columbia.edu",
          "name": "Casey Ta",
          "url": "http://chunhualab.org/",
          "x-role": "responsible developer"
        },
        "description": "The Columbia Open Health Data (COHD) API provides access to counts and frequencies (i.e., EHR prevalence) of conditions, procedures, drug exposures, and patient demographics, and the co-occurrence frequencies between them. Count and frequency data were derived from the [Columbia University Medical Center's](http://www.cumc.columbia.edu/) [OHDSI](https://www.ohdsi.org/) database including inpatient and outpatient data. Counts are the number of patients associated with the concept, e.g., diagnosed with a condition, exposed to a drug, or who had a procedure. Frequencies are the number of unique patients associated with the concept divided by the total number of patients in the dataset, i.e., prevalence in the electronic health records. To protect patient privacy, all concepts and pairs of concepts where the count <= 10 were excluded, and counts were randomized by the Poisson distribution.         \n\nFour datasets are available: \n1) 5-year non-hierarchical dataset: Includes clinical data from 2013-2017  \n2) lifetime non-hierarchical dataset: Includes clinical data from all dates  \n3) 5-year hierarchical dataset: Counts for each concept include patients from descendant concepts. Includes clinical data from 2013-2017.\n4) BETA! Temporal co-occurrence data\n\nIn the 5-year hierarchical data set, the counts for each concept include the patients from all descendant concepts. For example, the count for ibuprofen (ID 1177480) includes patients with Ibuprofen 600 MG Oral Tablet (ID 19019073 patients), Ibuprofen 400 MG Oral Tablet (ID 19019072), Ibuprofen 20 MG/ML Oral Suspension (ID 19019050), etc. \n\nWhile the lifetime dataset captures a larger patient population and range of concepts, the 5-year dataset has better underlying data consistency. \n\nClinical concepts (e.g., conditions, procedures, drugs) are coded by their standard concept ID in the [OMOP Common Data Model](https://github.com/OHDSI/CommonDataModel/wiki). API methods are provided to map to/from other vocabularies supported in OMOP and other ontologies using the EMBL-EBI Ontology Xref Service (OxO). \n\n\nThe following resources are available through this API: \n\n\n1. Metadata: Metadata on the COHD database, including dataset descriptions, number of concepts, etc. \n\n\n2. OMOP: Access to the common vocabulary for name and concept identifier mapping\n\n\n3. Clinical Frequencies: Access to the counts and frequencies of conditions, procedures, and drug exposures, and the associations between them. Frequency was determined as the number of patients with the code(s) / total number of patients. \n\n\n4. Concept Associations: Inferred associations between concepts using chi-square analysis, ratio between observed to expected frequency, and relative frequency. \n\n\nA [Python notebook](https://github.com/WengLab-InformaticsResearch/cohd_api/blob/master/notebooks/COHD_API_Example.ipynb) demonstrates simple examples of how to use the COHD API.\n\n\nCOHD was developed at the [Columbia University Department of Biomedical Informatics](https://www.dbmi.columbia.edu/) as a collaboration between the [Weng Lab](http://people.dbmi.columbia.edu/~chw7007/), [Tatonetti Lab](http://tatonettilab.org/), and the [NCATS Biomedical Data Translator](https://ncats.nih.gov/translator) program (Red Team). This work was supported in part by grants: NCATS OT3TR002027, NLM R01LM009886-08A1, and NIGMS R01GM107145.\n\nThe following external resources may be useful:  \n[OHDSI](https://www.ohdsi.org/)  \n[OMOP Common Data Model](https://github.com/OHDSI/CommonDataModel/wiki)  \n[Athena](http://athena.ohdsi.org) (OMOP vocabularies, search, concept relationships, concept hierarchy)  \n[Atlas](http://www.ohdsi.org/web/atlas/) (OMOP vocabularies, search, concept relationships, concept hierarchy, concept sets)      \n",
        "license": {
          "name": "Apache 2.0",
          "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "termsOfService": "http://cohd.nsides.io/terms/",
        "title": "Columbia Open Health Data (COHD)",
        "version": "3.0.0",
        "x-accessRestriction": "none",
        "x-implementationLanguage": "Python",
        "x-translator": {
          "component": "KP",
          "team": [
            "Clinical Data Provider"
          ]
        }
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/metadata/datasets",
          "pathitem": {
            "get": {
              "description": "Returns a list of datasets, including dataset ID, name, and description.",
              "operationId": "datasets",
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "dataset_description": {
                                  "example": "5-year non-hierarchical dataset: Includes clinical data from 2013-2017",
                                  "type": "string"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "dataset_name": {
                                  "example": "5-year non-hierarchical",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of dataset descriptions."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Enumerates the datasets available in COHD",
              "tags": [
                "Metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/domainCounts",
          "pathitem": {
            "get": {
              "description": "Returns a list of domains and the number of concepts in each domain.",
              "operationId": "domainCounts",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "count": {
                                  "example": 1000,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of domain counts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "The number of concepts in each domain",
              "tags": [
                "Metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/domainPairCounts",
          "pathitem": {
            "get": {
              "description": "Returns a list of pairs of domains and the number of pairs of concepts in each.",
              "operationId": "domainPairCounts",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "count": {
                                  "example": 1000,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "domain_id_1": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "domain_id_2": {
                                  "example": "Drug",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of domain pair counts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "The number of pairs of concepts in each pair of domains",
              "tags": [
                "Metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/patientCount",
          "pathitem": {
            "get": {
              "description": "Returns the number of patients in the dataset.",
              "operationId": "patientCount",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "count": {
                                  "example": 100000,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of patient counts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "The number of patients in the dataset",
              "tags": [
                "Metadata"
              ]
            }
          }
        },
        {
          "path": "/omop/concepts",
          "pathitem": {
            "get": {
              "description": "Returns the OMOP concept names and domains for the given list of concept IDs.",
              "operationId": "concepts",
              "parameters": [
                {
                  "description": "A comma separated list of OMOP concept ids, e.g., \"192855\" or \"192855,2008271\"",
                  "example": "192855,2008271",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_class_id": {
                                  "example": "Clinical Finding",
                                  "type": "string"
                                },
                                "concept_code": {
                                  "example": "92546004",
                                  "type": "string"
                                },
                                "concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Cancer in situ of urinary bladder",
                                  "type": "string"
                                },
                                "domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Concept definitions from concept ID",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/findConceptIDs",
          "pathitem": {
            "get": {
              "description": "Searches the OMOP concept table for concept names similar to the query. Returns a list of concepts, including their names and IDs, sorted in decreasing order by the concept's prevalence. ",
              "operationId": "findConceptIDs",
              "parameters": [
                {
                  "description": "The name of the concept to search for, e.g., \"cancer\" or \"ibuprofen\"",
                  "example": "cancer",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The dataset to reference when sorting concepts by their frequency. Default: 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "The domain (e.g., \"Condition\", \"Drug\", \"Procedure\") to restrict the search to. If not specified, the search will be unrestricted. See /metadata/domainCounts for a list of valid domain IDs.",
                  "example": "Condition",
                  "in": "query",
                  "name": "domain",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The minimum concept count (inclusive) to include a concept in the search results. Setting the min_count to 0 will cause findConceptIDs to return all matching standard OMOP concepts (this can be slow). Setting the min_count to 1 will cause findConceptIDs to only return concepts with count data (much faster). Default: 1.",
                  "example": 1,
                  "in": "query",
                  "name": "min_count",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_class_id": {
                                  "example": "Clinical Finding",
                                  "type": "string"
                                },
                                "concept_code": {
                                  "example": "92546004",
                                  "type": "string"
                                },
                                "concept_count": {
                                  "example": 368,
                                  "type": "integer"
                                },
                                "concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Cancer in situ of urinary bladder",
                                  "type": "string"
                                },
                                "domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Search for OMOP concepts by name and domain",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/conceptAncestors",
          "pathitem": {
            "get": {
              "description": "Retrieves the given concept's hierarchical ancestors and their counts. The hierarchical definitions were derived from the OMOP concept_ancestor table. For more information, see the documentation on OMOP's concept_ancestor table on [ohdsi.org](http://www.ohdsi.org/web/wiki/doku.php?id=documentation:cdm:concept_ancestor) and [GitHub](https://github.com/OHDSI/CommonDataModel/wiki/CONCEPT_ANCESTOR).",
              "operationId": "conceptAncestors",
              "parameters": [
                {
                  "description": "An OMOP concept ID, e.g., 19019073",
                  "example": 19019073,
                  "in": "query",
                  "name": "concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "The vocabulary_id to restrict ancestors to. For conditions, SNOMED and MedDRA are used. For drugs, RxNorm (only and ATC are used. For procedures, SNOMED, MedDRA, and ICD10PCS are used. Default: unrestricted",
                  "example": "RxNorm",
                  "in": "query",
                  "name": "vocabulary_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The concept_class_id to restrict ancestors to. Only certain hierarchical concept_class_ids are used in each vocabuarly: [ATC](https://en.wikipedia.org/wiki/Anatomical_Therapeutic_Chemical_Classification_System) {ATC 1st, ATC 2nd, ATC 3rd, ATC 4th, ATC 5th}; [MedDRA](https://en.wikipedia.org/wiki/MedDRA) {PT, HLT, HLGT, SOC}; [RxNorm](https://www.nlm.nih.gov/research/umls/rxnorm/docs/2015/appendix5.html) {Ingredient, Clinical Drug Form, Clinical Drug Comp, Clinical Drug}. Default: unrestricted",
                  "example": "Ingredient",
                  "in": "query",
                  "name": "concept_class_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The dataset_id to retrieve counts from. Default: 3 (5-year hierarchical data set)",
                  "example": 3,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "ancestor_concept_id": {
                                  "example": 1177480,
                                  "type": "integer"
                                },
                                "concept_class_id": {
                                  "example": "Ingredient",
                                  "type": "string"
                                },
                                "concept_code": {
                                  "example": "5640",
                                  "type": "string"
                                },
                                "concept_count": {
                                  "example": 233514,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Ibuprofen",
                                  "type": "string"
                                },
                                "domain_id": {
                                  "example": "Drug",
                                  "type": "string"
                                },
                                "max_levels_of_separation": {
                                  "example": 2,
                                  "type": "integer"
                                },
                                "min_levels_of_separation": {
                                  "example": 2,
                                  "type": "integer"
                                },
                                "standard_concept": {
                                  "example": "S",
                                  "type": "string"
                                },
                                "vocabulary_id": {
                                  "example": "RxNorm",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Retrieve the concept's hierarchical ancestors",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/conceptDescendants",
          "pathitem": {
            "get": {
              "description": "Retrieves the given concept's hierarchical descendants and their counts. The hierarchical definitions were derived from the OMOP concept_ancestor table. See the documentation on OMOP's concept_ancestor table on [ohdsi.org](http://www.ohdsi.org/web/wiki/doku.php?id=documentation:cdm:concept_ancestor) and [GitHub](https://github.com/OHDSI/CommonDataModel/wiki/CONCEPT_ANCESTOR).",
              "operationId": "conceptDescendants",
              "parameters": [
                {
                  "description": "An OMOP concept ID, e.g., 313217",
                  "example": 313217,
                  "in": "query",
                  "name": "concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "The vocabulary_id to restrict ancestors to. For conditions, SNOMED and MedDRA are used. For drugs, RxNorm and ATC are used. For procedures, SNOMED, MedDRA, and ICD10PCS are used. Default: unrestricted",
                  "example": null,
                  "in": "query",
                  "name": "vocabulary_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The concept_class_id to restrict ancestors to. Only certain hierarchical concept_class_ids are used in each vocabuarly: [ATC](https://en.wikipedia.org/wiki/Anatomical_Therapeutic_Chemical_Classification_System) {ATC 1st, ATC 2nd, ATC 3rd, ATC 4th, ATC 5th}; [MedDRA](https://en.wikipedia.org/wiki/MedDRA) {PT, HLT, HLGT, SOC}; [RxNorm](https://www.nlm.nih.gov/research/umls/rxnorm/docs/2015/appendix5.html) {Ingredient, Clinical Drug Form, Clinical Drug Comp, Clinical Drug}. Default: unrestricted",
                  "example": null,
                  "in": "query",
                  "name": "concept_class_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The dataset_id to retrieve counts from. Default: 3 (5-year hierarchical data set)",
                  "example": 3,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_class_id": {
                                  "example": "Clinical Finding",
                                  "type": "string"
                                },
                                "concept_code": {
                                  "example": "49436004",
                                  "type": "string"
                                },
                                "concept_count": {
                                  "example": 53272,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Atrial fibrillation",
                                  "type": "string"
                                },
                                "descendant_concept_id": {
                                  "example": 313217,
                                  "type": "integer"
                                },
                                "domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "max_levels_of_separation": {
                                  "example": 0,
                                  "type": "integer"
                                },
                                "min_levels_of_separation": {
                                  "example": 0,
                                  "type": "integer"
                                },
                                "standard_concept": {
                                  "example": "S",
                                  "type": "string"
                                },
                                "vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Retrieve the concept's hierarchical descendants",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/mapToStandardConceptID",
          "pathitem": {
            "get": {
              "description": "Uses the OMOP concept_relationship table to map from a non-standard concept code (e.g., ICD9CM 715.3) to a standard OMOP concept ID (e.g., 72990). This method may return multiple results if vocabulary_id is not specified and the concept_code is not unique across vocabularies. If both concept_code and vocabulary_id are specified, then 1 result will be returned at most. ",
              "operationId": "mapToStandardConceptID",
              "parameters": [
                {
                  "description": "The concept code to map from, e.g., 715.3",
                  "example": "715.3",
                  "in": "query",
                  "name": "concept_code",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The vocabulary (e.g., \"ICD9CM\") that the concept code belongs to. If this parameter is not specified, the method will return mappings from any source vocabulary with matching concept code. See /omop/vocabularies for the list of supported vocabularies.",
                  "example": "ICD9CM",
                  "in": "query",
                  "name": "vocabulary_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "source_concept_code": {
                                  "example": "715.3",
                                  "type": "string"
                                },
                                "source_concept_id": {
                                  "example": 44834979,
                                  "type": "integer"
                                },
                                "source_concept_name": {
                                  "example": "Osteoarthrosis, localized, not specified whether primary or secondary",
                                  "type": "string"
                                },
                                "source_vocabulary_id": {
                                  "example": "ICD9CM",
                                  "type": "string"
                                },
                                "standard_concept_id": {
                                  "example": 72990,
                                  "type": "integer"
                                },
                                "standard_concept_name": {
                                  "example": "Localized osteoarthrosis uncertain if primary OR secondary",
                                  "type": "string"
                                },
                                "standard_domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Map from a non-standard concept code to a standard OMOP concept ID",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/mapFromStandardConceptID",
          "pathitem": {
            "get": {
              "description": "Uses the OMOP concept_relationship table to map from a standard concept ID (e.g., 72990) to concept code(s) (e.g., ICD9CM 715.3, 715.31, 715.32, etc.). An OMOP standard concept ID may map to many concepts in the external vocabulary.",
              "operationId": "mapFromStandardConceptID",
              "parameters": [
                {
                  "description": "The standard OMOP concept id to map from, e.g., 72990",
                  "example": 72990,
                  "in": "query",
                  "name": "concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "The vocabulary (e.g., \"ICD9CM\") to map to. If this parameter is not specified, the method will return mappings to any matching vocabularies. See /omop/vocabularies for the list of supported vocabularies.",
                  "example": "ICD9CM",
                  "in": "query",
                  "name": "vocabulary_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_class_id": {
                                  "example": "4-dig nonbill code",
                                  "type": "string"
                                },
                                "concept_code": {
                                  "example": "715.3",
                                  "type": "string"
                                },
                                "concept_id": {
                                  "example": 44834979,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Osteoarthrosis, localized, not specified whether primary or secondary",
                                  "type": "string"
                                },
                                "domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "standard_concept": {
                                  "example": null,
                                  "type": "string"
                                },
                                "vocabulary_id": {
                                  "example": "ICD9CM",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Map from a standard concept ID to concept code(s) in an external vocabulary",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/vocabularies",
          "pathitem": {
            "get": {
              "description": "List of vocabulary_ids. Useful if you need to use /omop/mapToStandardConceptID to map a concept code from a source vocabulary to the OMOP standard vocabulary.",
              "operationId": "vocabularies",
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of vocabularies."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "List of vocabularies",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/xrefToOMOP",
          "pathitem": {
            "get": {
              "description": "Attempts to map a concept from an external ontology to an OMOP standard concept ID using the EMBL-EBI Ontology Xref Service (OxO): https://www.ebi.ac.uk/spot/oxo/index. This method attempts to use OxO to map from the original ontology to an intermediate ontology that is included in OMOP (ICD9CM, ICD10CM, SNOMEDCT, and MeSH), then uses the OMOP mappings to the standard concepts. Multiple mappings may be returned. Results are sorted by total_distance (OxO distance + OMOP distance) in ascending order.",
              "operationId": "xrefToOMOP",
              "parameters": [
                {
                  "description": "Compact URI (CURIE) of the concept to map, e.g., DOID:8398",
                  "example": "DOID:8398",
                  "in": "query",
                  "name": "curie",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Mapping distance for OxO. Note: this is the distance used in the OxO API to map from the original concept to an ICD9CM, ICD10CM, SNOMEDCT, or MeSH concept. One additional step may be taken by the COHD API to map to the OMOP standard concept. Default: 2.",
                  "example": 2,
                  "in": "query",
                  "name": "distance",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "COHD can either call the OxO API or use the local implementation of OxO. The full call to the OxO API will have the most updated mappings and term definitions, but is slower. The local implementation of OxO is faster but may contain outdated mappings and term definitions. If the parameter is false, COHD will call the full OxO API. If the parameter is true, COHD will use the local implementation.  Default: false.",
                  "example": false,
                  "in": "query",
                  "name": "local",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "description": "By default (false), COHD returns all mappings found. If true, COHD will recommend a mapping based on path distances. Default: false.",
                  "example": false,
                  "in": "query",
                  "name": "recommend",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "intermediate_oxo_id": {
                                  "example": "ICD9CM:715.3",
                                  "type": "string"
                                },
                                "intermediate_oxo_label": {
                                  "example": "",
                                  "type": "string"
                                },
                                "omop_concept_name": {
                                  "example": "Localized osteoarthrosis uncertain if primary OR secondary",
                                  "type": "string"
                                },
                                "omop_distance": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "omop_domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "omop_standard_concept_id": {
                                  "example": 72990,
                                  "type": "integer"
                                },
                                "oxo_distance": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "source_oxo_id": {
                                  "example": "DOID:8398",
                                  "type": "string"
                                },
                                "source_oxo_label": {
                                  "example": "osteoarthritis",
                                  "type": "string"
                                },
                                "total_distance": {
                                  "example": 2,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of mappings from external concepts to OMOP concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Cross-reference from an ontology to OMOP standard concepts using the Ontology Xref Service",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/xrefFromOMOP",
          "pathitem": {
            "get": {
              "description": "Attempts to map a concept from an external ontology to an OMOP standard concept ID using the EMBL-EBI Ontology Xref Service (OxO): https://www.ebi.ac.uk/spot/oxo/index. This method maps from the OMOP standard concept to an intermediate vocabulary included is OxO (ICD9CM, ICD10CM, SNOMEDCT, and MeSH), then uses the OxO API to map to other ontologies. Multiple mappings may be returned. Results are sorted by total_distance (OxO distance + OMOP distance) in ascending order.",
              "operationId": "xrefFromOMOP",
              "parameters": [
                {
                  "description": "OMOP standard concept_id to map, e.g., 192855",
                  "example": 192855,
                  "in": "query",
                  "name": "concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "Target ontologies for OxO. Comma separated target prefixes, e.g., \"DOID,UMLS\"",
                  "example": "UMLS",
                  "in": "query",
                  "name": "mapping_targets",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Mapping distance for OxO. Note: this is the distance used in the OxO API to map from an ICD9CM, ICD10CM, SNOMEDCT, or MeSH concept to the desired ontology. One additional step may be taken by the COHD API to map to the OMOP standard concept to ICD9CM, ICD10CM, SNOMEDCT, or MeSH. Default: 2.",
                  "example": 2,
                  "in": "query",
                  "name": "distance",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "COHD can either call the OxO API or use the local implementation of OxO. The full call to the OxO API will have the most updated mappings and term definitions, but is slower. The local implementation of OxO is faster but may contain outdated mappings and term definitions. If the parameter is false, COHD will call the full OxO API. If the parameter is true, COHD will use the local implementation.  Default: false.",
                  "example": false,
                  "in": "query",
                  "name": "local",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "description": "By default (false), COHD returns all mappings found. If true, COHD will recommend a mapping for each target based on path distances. Default: false.",
                  "example": false,
                  "in": "query",
                  "name": "recommend",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "intermediate_omop_concept_code": {
                                  "example": "92546004",
                                  "type": "string"
                                },
                                "intermediate_omop_concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "intermediate_omop_concept_name": {
                                  "example": "Cancer in situ of urinary bladder",
                                  "type": "string"
                                },
                                "intermediate_omop_vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                },
                                "intermediate_oxo_curie": {
                                  "example": "SNOMEDCT:92546004",
                                  "type": "string"
                                },
                                "intermediate_oxo_label": {
                                  "example": "Cancer in situ of urinary bladder",
                                  "type": "string"
                                },
                                "omop_distance": {
                                  "example": 0,
                                  "type": "integer"
                                },
                                "oxo_distance": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "source_omop_concept_code": {
                                  "example": "92546004",
                                  "type": "string"
                                },
                                "source_omop_concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "source_omop_concept_name": {
                                  "example": "Cancer in situ of urinary bladder",
                                  "type": "string"
                                },
                                "source_omop_vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                },
                                "target_curie": {
                                  "example": "UMLS:C0154091",
                                  "type": "string"
                                },
                                "target_label": {
                                  "example": "Cancer in situ of urinary bladder",
                                  "type": "string"
                                },
                                "total_distance": {
                                  "example": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of mappings from OMOP concepts to external concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Cross-reference from an ontology to OMOP standard concepts using the Ontology Xref Service",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/frequencies/singleConceptFreq",
          "pathitem": {
            "get": {
              "description": "Retrieves observed clinical frequencies of individual concepts. Multiple concepts may be requested in a comma separated list.",
              "operationId": "singleConceptFreq",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "A comma separated list of OMOP concept ids, e.g., \"192855\" or \"192855,2008271\"",
                  "example": "192855",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_count": {
                                  "example": 368,
                                  "type": "integer"
                                },
                                "concept_frequency": {
                                  "example": 0.0002055371025188907,
                                  "type": "integer"
                                },
                                "concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of single concept frequencies."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Clinical frequency of individual concepts",
              "tags": [
                "Clinical Frequencies"
              ]
            }
          }
        },
        {
          "path": "/frequencies/pairedConceptFreq",
          "pathitem": {
            "get": {
              "description": "Retrieves observed clinical frequencies of a pair of concepts.",
              "operationId": "pairedConceptFreq",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "A comma pair of OMOP concept ids, e.g., \"192855,2008271\"",
                  "example": "192855,2008271",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_count": {
                                  "example": 10,
                                  "type": "integer"
                                },
                                "concept_frequency": {
                                  "example": 5.585247351056813e-06,
                                  "type": "integer"
                                },
                                "concept_id_1": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "concept_id_2": {
                                  "example": 2008271,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of paired concept frequencies."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Clinical frequency of a pair of concepts",
              "tags": [
                "Clinical Frequencies"
              ]
            }
          }
        },
        {
          "path": "/frequencies/associatedConceptFreq",
          "pathitem": {
            "get": {
              "description": "Retrieves observed clinical frequencies of all pairs of concepts given a concept id. Results are returned in descending order of paired concept count. Note that the largest paired concept counts are often dominated by associated concepts with high prevalence.",
              "operationId": "associatedConceptFreq",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"192855\"",
                  "example": 192855,
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "associated_concept_id": {
                                  "example": 19041324,
                                  "type": "integer"
                                },
                                "associated_concept_name": {
                                  "example": "Acetaminophen 325 MG Oral Tablet [Tylenol]",
                                  "type": "string"
                                },
                                "associated_domain_id": {
                                  "example": "Drug",
                                  "type": "string"
                                },
                                "concept_count": {
                                  "example": 277,
                                  "type": "integer"
                                },
                                "concept_frequency": {
                                  "example": 0.0001547113516242737,
                                  "type": "integer"
                                },
                                "concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of associated concept frequencies."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Clinical frequencies of all pairs of concepts given a concept id",
              "tags": [
                "Clinical Frequencies"
              ]
            }
          }
        },
        {
          "path": "/frequencies/associatedConceptDomainFreq",
          "pathitem": {
            "get": {
              "description": "Retrieves observed clinical frequencies of all pairs of concepts given a concept id restricted by domain of the associated concept_id.  Results are returned in descending order of paired concept count. Note that the largest paired concept counts are often dominated by associated concepts with high prevalence.",
              "operationId": "associatedConceptDomainFreq",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"192855\"",
                  "example": 192855,
                  "in": "query",
                  "name": "concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP domain id, e.g., \"Condition\", \"Drug\", \"Procedure\", etc. See /metadata/domainCounts for a list of valid domain IDs.",
                  "example": "Procedure",
                  "in": "query",
                  "name": "domain",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "associated_concept_id": {
                                  "example": 2211361,
                                  "type": "integer"
                                },
                                "associated_concept_name": {
                                  "example": "Radiologic examination, chest, 2 views, frontal and lateral",
                                  "type": "string"
                                },
                                "associated_domain_id": {
                                  "example": "Procedure",
                                  "type": "string"
                                },
                                "concept_count": {
                                  "example": 257,
                                  "type": "integer"
                                },
                                "concept_frequency": {
                                  "example": 0.00014354085692216007,
                                  "type": "integer"
                                },
                                "concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of associated concept frequencies."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Clinical frequencies of all pairs of concepts given a concept id",
              "tags": [
                "Clinical Frequencies"
              ]
            }
          }
        },
        {
          "path": "/frequencies/mostFrequentConcepts",
          "pathitem": {
            "get": {
              "description": "Retrieves the most frequent concepts.",
              "operationId": "mostFrequentConcepts",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "(Optional) The number of concepts to retreieve, e.g., 100. 0 or unspecified will return all matching concepts.",
                  "example": 100,
                  "in": "query",
                  "name": "q",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "(Optional) The domain_id to restrict to, e.g., \"Condition\", \"Drug\", \"Procedure\". See /metadata/domainCounts for a list of valid domain IDs.",
                  "example": "Condition",
                  "in": "query",
                  "name": "domain",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "(Optional) The vocabulary_id(s) to restrict to, e.g., \"SNOMED\", \"MedDRA\", \"RxNorm\", \"ATC\" etc. Comma separated to include multiple vocabularies, e.g., \"SNOMED,MedDRA\". Default: unrestricted",
                  "example": null,
                  "in": "query",
                  "name": "vocabulary_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "(Optional) The concept_class_id(s) to restrict to. concept_class_ids are specific to each vocabulary, e.g.,: [ATC](https://en.wikipedia.org/wiki/Anatomical_Therapeutic_Chemical_Classification_System) {ATC 1st, ATC 2nd, ATC 3rd, ATC 4th, ATC 5th}; [MedDRA](https://en.wikipedia.org/wiki/MedDRA) {PT, HLT, HLGT, SOC}; [RxNorm](https://www.nlm.nih.gov/research/umls/rxnorm/docs/2015/appendix5.html) {Ingredient, Clinical Drug Form, Clinical Drug Comp, Clinical Drug}. Comma separated to include multiple concept_class_ids, e.g., \"PT,HLT\". Default: unrestricted",
                  "example": null,
                  "in": "query",
                  "name": "concept_class_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_class_id": {
                                  "example": "Clinical Finding",
                                  "type": "string"
                                },
                                "concept_count": {
                                  "example": 233790,
                                  "type": "integer"
                                },
                                "concept_frequency": {
                                  "example": 0.1305774978203572,
                                  "type": "integer"
                                },
                                "concept_id": {
                                  "example": 320128,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Essential hypertension",
                                  "type": "string"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of most frequent concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Most frequent concepts [by domain]",
              "tags": [
                "Clinical Frequencies"
              ]
            }
          }
        },
        {
          "path": "/association/chiSquare",
          "pathitem": {
            "get": {
              "description": "Returns the chi-square statistic and p-value between pairs of concepts. Results are returned in descending order of the chi-square statistic. Note that due to large sample sizes, the chi-square can become very large. \n\nThe expected frequencies for the chi-square analysis are calculated based on the single concept frequencies and assuming independence between concepts. P-value is calculated with 1 DOF. \n\nThis method has overloaded behavior based on the specified parameters:\n\n1) concept_id_1 and concept_id_2: Result for the pair (concept_id_1, concept_id_2)\n2) concept_id_1: Results for all pairs of concepts that include concept_id_1\n3) concept_id_1 and domain: Results for all pairs of concepts including concept_id_1 and where concept_id_2 belongs to the specified domain\n",
              "operationId": "chiSquare",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"192855\"",
                  "example": 192855,
                  "in": "query",
                  "name": "concept_id_1",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"2008271\". If this parameter is specified, then the chi-square between concept_id_1 and concept_id_2 is returned. If this parameter is not specified, then a list of chi-squared results between concept_id_1 and other concepts is returned.",
                  "example": 2008271,
                  "in": "query",
                  "name": "concept_id_2",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP domain id, e.g., \"Condition\", \"Drug\", \"Procedure\", etc., to restrict the associated concept (concept_id_2) to. If this parameter is not specified, then the domain is unrestricted. See /metadata/domainCounts for a list of valid domain IDs.",
                  "example": "Procedure",
                  "in": "query",
                  "name": "domain",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "adj_p-value": {
                                  "description": "Bonferonni adjusted p-value, adjusted with the total number of pairs of concepts in the dataset.",
                                  "example": 0.0314,
                                  "type": "number"
                                },
                                "chi_square": {
                                  "example": 370026.1780081638,
                                  "type": "integer"
                                },
                                "concept_2_domain": {
                                  "example": "Procedure",
                                  "type": "string"
                                },
                                "concept_2_name": {
                                  "example": "Instillation of therapeutic substance into bladder",
                                  "type": "string"
                                },
                                "concept_id_1": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "concept_id_2": {
                                  "example": 4021588,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 3,
                                  "type": "integer"
                                },
                                "p-value": {
                                  "example": 0.0314,
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concept pairs and chi-squared values."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Chi-square analysis on pairs of concepts",
              "tags": [
                "Concept Associations"
              ],
              "x-bte-kgs-operations": [
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "dataset_id": 3,
                    "domain": "Condition"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/chi_square"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "dataset_id": 3,
                    "domain": "Drug"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/chi_square"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "dataset_id": 3,
                    "domain": "Condition"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/chi_square"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "dataset_id": 3,
                    "domain": "Drug"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/chi_square"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                }
              ]
            }
          }
        },
        {
          "path": "/association/obsExpRatio",
          "pathitem": {
            "get": {
              "description": "Returns the natural logarithm of the ratio between the observed count and expected count. Expected count is calculated from the single concept frequencies and assuming independence between the concepts. Results are returned in descending order of ln_ratio.\n\nexpected_count = Count_1_and_2 * num_patients / (Count_1 * Count_2)\n\nln_ratio = ln(expected_count)\n\nThis method has overloaded behavior based on the specified parameters:\n\n1) concept_id_1 and concept_id_2: Results for the pair (concept_id_1, concept_id_2)\n2) concept_id_1: Results for all pairs of concepts that include concept_id_1\n3) concept_id_1 and domain: Results for all pairs of concepts including concept_id_1 and where concept_id_2 belongs to the specified domain\n",
              "operationId": "obsExpRatio",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"192855\"",
                  "example": 192855,
                  "in": "query",
                  "name": "concept_id_1",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"2008271\". If concept_id_2 is unspecified, then this method will return all pairs of concepts with concept_id_1.",
                  "example": 2008271,
                  "in": "query",
                  "name": "concept_id_2",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP domain id, e.g., \"Condition\", \"Drug\", \"Procedure\", etc., to restrict the associated concept (concept_id_2) to. If this parameter is not specified, then the domain is unrestricted. See /metadata/domainCounts for a list of valid domain IDs.",
                  "example": "Procedure",
                  "in": "query",
                  "name": "domain",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The confidence level used for calculating confidence intervals (default 0.99).",
                  "example": 0.99,
                  "in": "query",
                  "name": "confidence",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_2_domain": {
                                  "example": "Procedure",
                                  "type": "string"
                                },
                                "concept_2_name": {
                                  "example": "Closed [transurethral] biopsy of bladder",
                                  "type": "string"
                                },
                                "concept_id_1": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "concept_id_2": {
                                  "example": 2003784,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "expected_count": {
                                  "example": 0.060838982345591645,
                                  "type": "integer"
                                },
                                "ln_ratio": {
                                  "example": 7.561698473261244,
                                  "type": "integer"
                                },
                                "observed_count": {
                                  "example": 117,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of paired concepts and observed-expected frequency ratio."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Observed Count / Expected Count",
              "tags": [
                "Concept Associations"
              ],
              "x-bte-kgs-operations": [
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "confidence": 0.99,
                    "dataset_id": 3,
                    "domain": "Condition"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/obs_exp_ratio"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "confidence": 0.99,
                    "dataset_id": 3,
                    "domain": "Drug"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/obs_exp_ratio"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "confidence": 0.99,
                    "dataset_id": 3,
                    "domain": "Condition"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/obs_exp_ratio"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "confidence": 0.99,
                    "dataset_id": 3,
                    "domain": "Drug"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/obs_exp_ratio"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                }
              ]
            }
          }
        },
        {
          "path": "/association/relativeFrequency",
          "pathitem": {
            "get": {
              "description": "Calculates the relative frequency (i.e., conditional probability) between pairs of concepts. Results are returned in descending order of relative frequency. Note that due to the randomization of the counts, the calculated relative frequencies can exceed the limit of 1.0.\n\nRelative Frequency = Count_1_and_2 / Count_2\n\nThis method has overloaded behavior based on the specified parameters:\n\n1) concept_id_1 and concept_id_2: Result for the pair (concept_id_1, concept_id_2)\n2) concept_id_1: Results for all pairs of concepts that include concept_id_1\n3) concept_id_1 and domain: Results for all pairs of concepts including concept_id_1 and where concept_id_2 belongs to the specified domain\n",
              "operationId": "relativeFrequency",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"192855\"",
                  "example": 192855,
                  "in": "query",
                  "name": "concept_id_1",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"2008271\". If concept_id_2 is unspecified, then this method will return all pairs of concepts with concept_id_1.",
                  "example": 2008271,
                  "in": "query",
                  "name": "concept_id_2",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP domain id, e.g., \"Condition\", \"Drug\", \"Procedure\", etc., to restrict concept_id_2 (the base concept) to. If this parameter is not specified, then the domain is unrestricted. See /metadata/domainCounts for a list of valid domain IDs.",
                  "example": "Procedure",
                  "in": "query",
                  "name": "domain",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The confidence level used for calculating confidence intervals (default 0.99).",
                  "example": 0.99,
                  "in": "query",
                  "name": "confidence",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_2_count": {
                                  "example": 82,
                                  "type": "integer"
                                },
                                "concept_2_domain": {
                                  "example": "Procedure",
                                  "type": "string"
                                },
                                "concept_2_name": {
                                  "example": "Radical cystectomy",
                                  "type": "string"
                                },
                                "concept_id_1": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "concept_id_2": {
                                  "example": 2003805,
                                  "type": "integer"
                                },
                                "concept_pair_count": {
                                  "example": 29,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "relative_frequency": {
                                  "example": 0.35365853658536583,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of paired concepts and relative frequency."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Relative frequency between pairs of concepts",
              "tags": [
                "Concept Associations"
              ],
              "x-bte-kgs-operations": [
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "dataset_id": 3,
                    "domain": "Condition"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/relative_frequency"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "dataset_id": 3,
                    "domain": "Drug"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/relative_frequency"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "dataset_id": 3,
                    "domain": "Condition"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/relative_frequency"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "dataset_id": 3,
                    "domain": "Drug"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/relative_frequency"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                }
              ]
            }
          }
        },
        {
          "path": "/temporal/conceptAgeCounts",
          "pathitem": {
            "get": {
              "description": "Counts of ages when concepts were first observed in a patient. Different concepts will have different bin_widths. All binning schemes start with age 0, and no bin starts with an age > 90. The largest age bin includes all ages greater or equal to the starting age of the bin. For example, with a bin_width of 4, the ages of each bin are [0-3, 4-7, 8-11, ..., 84-87, 88+]. Counts in each bin are independently perturbed with a Poisson distribution. Counts < 10 are suppressed, represented by the value 1. Counts of 0 are reported as 0.\n",
              "operationId": "conceptAgeCounts",
              "parameters": [
                {
                  "description": "The dataset_id of the data set to query. Default data set is the Temporal Beta data set.",
                  "example": 4,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"313217\"",
                  "example": 313217,
                  "in": "query",
                  "name": "concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "bin_width": {
                                  "example": 2,
                                  "type": "integer"
                                },
                                "concept_id": {
                                  "example": 313217,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Atrial fibrillation",
                                  "type": "string"
                                },
                                "counts": {
                                  "description": "Array of counts ordered from 0 to the largest bin.",
                                  "items": {
                                    "example": 9000,
                                    "type": "integer"
                                  },
                                  "type": "array"
                                },
                                "dataset_id": {
                                  "example": 4,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "The concept's age distribution"
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Counts of ages when concepts were first observed in a patient",
              "tags": [
                "Temporal Clinical Data"
              ]
            }
          }
        },
        {
          "path": "/temporal/findSimilarAgeDistributions",
          "pathitem": {
            "get": {
              "description": "Finds concepts with a similar concept-age distribution as with the desired concept_id.\nUses Jaccard similarity to compare concept-age distributions\n",
              "operationId": "findSimilarAgeDistributions",
              "parameters": [
                {
                  "description": "The dataset_id of the data set to query. Default data set is the Temporal Beta data set.",
                  "example": 4,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"313217\"",
                  "example": 313217,
                  "in": "query",
                  "name": "concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "True: excludes concepts that frequently co-occur (0-day delta) with concept_id. False: do not exclude. Default is True.",
                  "example": true,
                  "in": "query",
                  "name": "exclude_related",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "description": "(Optional) True: restricts potentially similar concepts to the same type of concept as concept_id, e.g.,  the same domain_id for Conditions, Drugs, and Procedures. For drugs, if the concept is an ingredient, also restricts concept_class_id to 'Ingredient'.\n",
                  "example": true,
                  "in": "query",
                  "name": "restrict_type",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "description": "Minimum threshold for similarity. Range is 0-1, higher is more similar. Default 0.7.",
                  "example": 0.7,
                  "in": "query",
                  "name": "threshold",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                },
                {
                  "description": "Maximum number of concepts to return at each bin width. Default 20.",
                  "example": 20,
                  "in": "query",
                  "name": "limit",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "bin_width": {
                                  "example": 2,
                                  "type": "integer"
                                },
                                "concept_id": {
                                  "example": 313217,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Atrial fibrillation",
                                  "type": "string"
                                },
                                "counts": {
                                  "description": "Array of counts ordered from 0 to the largest bin.",
                                  "items": {
                                    "example": 9000,
                                    "type": "integer"
                                  },
                                  "type": "array"
                                },
                                "dataset_id": {
                                  "example": 4,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "The concept's age distribution"
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Find concepts with a similar concept-age distribution",
              "tags": [
                "Temporal Clinical Data"
              ]
            }
          }
        },
        {
          "path": "/temporal/conceptPairDeltaCounts",
          "pathitem": {
            "get": {
              "description": "Counts of time differences (deltas) between when a pair of concepts were first observed in a patient. given a pair of concepts (source_concept and target_concept), a positive delta indicates that source_concept was  observed before target_concept. Likewise, a negaitve delta indicates that source_concept was observed after target_concept. Performing this query with the two concepts swapped will produce a mirrored distribution.   \n  \nBin widths grow exponentially, and different concept pairs will have different bin_widths. The binning schemes are as follows (delta bins with negative values mirror the positive delta bins):  \n  bin_width=1: [0 day, 1 day, 2-3 days, 4-7 days, 8-15 days, ..., 2048-4095 days (5.6-11.2y), and 4096+ days\n  (11.2+ years)].  \n  bin_width=2: [0 day, 1-3 days, 4-15 days, 16-63 days, ..., 256-1023 days, 1024+ days (2.8+ years)]  \n  bin_width=4: [0 day, 1-15 days, 16-255 days, 256+ days]  \n  bin_width=8: [0 day, 1-255 days, 256+ days]  \n  bin_width=16: [0 day, 1+ days]  \n  The 0-day bin never gets incorporated into larger bins.\n    \nCounts in each bin are independently perturbed with a Poisson distribution. Counts < 10 are suppressed, represented by the value 1. Counts of 0 are reported as 0.\n",
              "operationId": "conceptPairDeltaCounts",
              "parameters": [
                {
                  "description": "The dataset_id of the data set to query. Default data set is the Temporal Beta data set. ",
                  "example": 4,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"312327\"",
                  "example": 312327,
                  "in": "query",
                  "name": "source_concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"313217\"",
                  "example": 313217,
                  "in": "query",
                  "name": "target_concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "bin_width": {
                                  "example": 2,
                                  "type": "integer"
                                },
                                "counts": {
                                  "description": "Array of counts ordered from the most negative bin to the largest positive bin.",
                                  "items": {
                                    "example": 9000,
                                    "type": "integer"
                                  },
                                  "type": "array"
                                },
                                "dataset_id": {
                                  "example": 4,
                                  "type": "integer"
                                },
                                "n": {
                                  "example": 6,
                                  "type": "integer"
                                },
                                "source_concept_id": {
                                  "example": 312327,
                                  "type": "integer"
                                },
                                "source_concept_name": {
                                  "example": "Acute myocardial infarction",
                                  "type": "string"
                                },
                                "target_concept_id": {
                                  "example": 313217,
                                  "type": "integer"
                                },
                                "target_concept_name": {
                                  "example": "Atrial fibrillation",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "The concept pair's delta distribution"
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Counts of time deltas between",
              "tags": [
                "Temporal Clinical Data"
              ]
            }
          }
        },
        {
          "path": "/temporal/sourceToTarget",
          "pathitem": {
            "get": {
              "description": "Analysis to determine if there's a temporal relationship between the source_concept and the target_concept.  \nCompares the delta distribution between source_concept and target_concept against delta distributions from other concepts to the target_concept. Find comparable concepts by measuring similarity of the age distributions to the age distribution of the source_concept.\n",
              "operationId": "sourceToTarget",
              "parameters": [
                {
                  "description": "The dataset_id of the data set to query. Default data set is the Temporal Beta data set.",
                  "example": 4,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"312327\"",
                  "example": 312327,
                  "in": "query",
                  "name": "source_concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"313217\"",
                  "example": 313217,
                  "in": "query",
                  "name": "target_concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object"
                      }
                    }
                  },
                  "description": "The concept pair's delta distribution"
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Temporal relationship between source_concept and target_concept.",
              "tags": [
                "Temporal Clinical Data"
              ]
            }
          }
        },
        {
          "path": "/predicates",
          "pathitem": {
            "get": {
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "additionalProperties": {
                          "additionalProperties": {
                            "description": "Array of predicates",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "description": "Target map",
                          "type": "object"
                        },
                        "description": "Source map",
                        "example": {
                          "biolink:ChemicalSubstance": {
                            "biolink:Gene": [
                              "biolink:directly_interacts_with",
                              "biolink:decreases_activity_of"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Predicates by source and target"
                }
              },
              "summary": "Get supported relationships by source and target",
              "tags": [
                "translator",
                "reasoner"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "post": {
              "description": "Query the COHD API following the [NCATS Translator Reasoner Standard API](https://github.com/NCATSTranslator/ReasonerAPI). Only single hop queries are supported. See the example query_graph.\n    \nFor the subject node, the id must be specified (category is ignored).\n    \nFor the object node, both the id and category are optional. If id is specified for the object node, then the association between the two identified concepts is returned. If id is not specified and category is specified, the associations between the subject node and all concepts with the specified category are returned. If neither are specified, then the associations between the subject node and all concepts are returned.\nThe COHD data are natively represented using OMOP. COHD will attempt to map between Biolink and OMOP both in the input and response.\nAdditional behavior options can be controlled using the optional parameters in query_options.",
              "operationId": "query",
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": "{\n  \"message\": {\n    \"query_graph\": {\n      \"nodes\": {\n        \"n00\": {\n          \"id\": \"DOID:9053\",\n          \"category\": \"biolink:Disease\"\n        },\n        \"n01\": {\n          \"category\": \"biolink:Procedure\"\n        }\n      },\n      \"edges\": {\n        \"e00\": {\n          \"predicate\": \"biolink:correlated_with\",\n          \"subject\": \"n00\",\n          \"object\": \"n01\"\n        }\n      }\n    }\n  },\n  \"query_options\": {\n    \"method\": \"obsExpRatio\",\n    \"dataset_id\": 3,\n    \"confidence_interval\": 0.99,\n    \"min_cooccurrence\": 50,\n    \"threshold\": 0.5,\n    \"local_oxo\": true,\n    \"max_results\": 50,\n    \"ontology_targets\": {\n      \"biolink:Disease\": [\n        \"ICD9\",\n        \"SNOMEDCT\",\n        \"DOID\"\n      ],\n      \"biolink:Drug\": [\n        \"RxNorm\"\n      ],\n      \"biolink:Procedure\": [\n        \"ICD10PCS\",\n        \"SNOMEDCT\"\n      ],\n      \"_DEFAULT\": []\n    },\n    \"biolink_only\": true\n  }\n}",
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "Query information to be submitted",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Response"
                      }
                    }
                  },
                  "description": "OK. There may or may not be results. Note that some of the provided identifiers may not have been recognized."
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Bad request. The request is invalid according to this OpenAPI schema OR a specific identifier is believed to be invalid somehow (not just unrecognized)."
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Internal server error."
                },
                "501": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Not implemented."
                }
              },
              "summary": "Query COHD following NCATS Translator Reasoner Standard API",
              "tags": [
                "translator",
                "reasoner"
              ],
              "x-bte-kgs-operations": [
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "predicate": "biolink:correlated_with",
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "predicate": "biolink:correlated_with",
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "predicate": "biolink:correlated_with",
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "predicate": "biolink:correlated_with",
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                }
              ],
              "x-swagger-router-controller": "swagger_server.controllers.query_controller"
            }
          }
        },
        {
          "path": "/0.9.3/query",
          "pathitem": {
            "post": {
              "description": "This endpoint is temporarily provided to support TRAPI 0.9.3 queries\nQuery the COHD API following the [NCATS Translator Reasoner Standard API](https://github.com/NCATSTranslator/ReasonerAPI). Only single hop queries are supported. See the example query_graph.\nFor the source node, the curie must be specified (type is ignored).\nFor the target node, both the curie and type are optional. If curie is specified for the target node, then the association between the two identified concepts is returned. If curie is not specified and type is specified, the associations between the source node and all concepts with the specified type are returned. If neither are specified, then the associations between the source node and all concepts are returned.\nCOHD will attempt to map the CURIE to an OMOP concept and the node type to an OMOP domain.",
              "operationId": "query093",
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": "{\n  \"max_results\": 50,\n  \"message\": {\n    \"query_graph\": {\n      \"nodes\": [\n        {\n          \"id\": \"n00\",\n          \"curie\": \"DOID:9053\",\n          \"type\": \"biolink:Disease\"\n        },\n        {\n          \"id\": \"n01\",\n          \"type\": \"biolink:Procedure\"\n        }\n      ],\n      \"edges\": [\n        {\n          \"id\": \"e00\",\n          \"type\": \"biolink:correlated_with\",\n          \"source_id\": \"n00\",\n          \"target_id\": \"n01\"\n        }\n      ]\n    }\n  },\n  \"query_options\": {\n    \"method\": \"obsExpRatio\",\n    \"dataset_id\": 3,\n    \"confidence_interval\": 0.99,\n    \"min_cooccurrence\": 50,\n    \"threshold\": 0.5,\n    \"local_oxo\": true,\n    \"ontology_targets\": {\n      \"biolink:Disease\": [\"ICD9\", \"SNOMEDCT\", \"DOID\"],\n      \"biolink:Drug\": [\"RxNorm\"],\n      \"biolink:Procedure\": [\"ICD10PCS\", \"SNOMEDCT\"],\n      \"_DEFAULT\": []\n    },\n    \"biolink_only\": true\n  }\n}",
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "Query information to be submitted",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Message"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "description": "Invalid status value"
                }
              },
              "summary": "Query COHD following NCATS Translator Reasoner Standard API version 0.9.3",
              "tags": [
                "translator",
                "reasoner"
              ],
              "x-bte-kgs-operations": [
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "predicate": "biolink:correlated_with",
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "predicate": "biolink:correlated_with",
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "predicate": "biolink:correlated_with",
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "predicate": "biolink:correlated_with",
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                }
              ],
              "x-swagger-router-controller": "swagger_server.controllers.query_controller"
            }
          }
        },
        {
          "path": "/translator/biolink_to_omop",
          "pathitem": {
            "post": {
              "description": "Map Biolink CURIEs to OMOP concepts",
              "operationId": "biolink_to_omop",
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": "{\n    \"curies\": [\n        \"HP:0002907\",\n        \"MONDO:0001187\"\n    ]\n}",
                    "schema": {
                      "$ref": "#/components/schemas/CurieList"
                    }
                  }
                },
                "description": "List of CURIEs",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "example": "{\n  \"MONDO:0001187\": {\n    \"distance\": 2,\n    \"omop_concept_id\": 197508,\n    \"omop_concept_name\": \"Malignant tumor of urinary bladder\"\n  }\n}",
                      "schema": {
                        "additionalProperties": {
                          "description": "Mapping from OMOP concept to Biolink",
                          "properties": {
                            "distance": {
                              "description": "mapping distance",
                              "type": "integer"
                            },
                            "omop_concept_id": {
                              "type": "integer"
                            },
                            "omop_concept_name": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "description": "OK. There may or may not be results. Note that some of the provided identifiers may not have been recognized."
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Bad request. The request is invalid according to this OpenAPI schema OR a specific identifier is believed to be invalid somehow (not just unrecognized)."
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Internal server error."
                }
              },
              "summary": "Map from Biolink to OMOP",
              "tags": [
                "translator"
              ]
            }
          }
        },
        {
          "path": "/translator/omop_to_biolink",
          "pathitem": {
            "post": {
              "description": "Map OMOP concepts to normalized Biolink nodes using SRI Node Normalizer.",
              "operationId": "omop_to_biolink",
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": "{\n    \"omop_ids\": [\n        78472,\n        197508\n    ]\n}",
                    "schema": {
                      "$ref": "#/components/schemas/OmopList"
                    }
                  }
                },
                "description": "List of OMOP IDs",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "additionalProperties": {
                          "type": "object"
                        },
                        "example": "{\n  \"197508\": {\n    \"equivalent_identifiers\": [\n        {\n            \"identifier\": \"MONDO:0001187\",\n            \"label\": \"urinary bladder cancer\"\n        },\n        {\n            \"identifier\": \"DOID:11054\"\n        },\n        {\n            \"identifier\": \"OMIM:109800\"\n        },\n        {\n            \"identifier\": \"UMLS:C0005684\"\n        },\n        {\n            \"identifier\": \"NCIT:C9334\"\n        },\n        {\n            \"identifier\": \"SNOMEDCT:399326009\"\n        }\n    ],\n    \"id\": {\n        \"identifier\": \"MONDO:0001187\",\n        \"label\": \"urinary bladder cancer\"\n    },\n    \"type\": [\n        \"biolink:Disease\",\n        \"biolink:DiseaseOrPhenotypicFeature\",\n        \"biolink:BiologicalEntity\",\n        \"biolink:NamedThing\"\n    ]\n  }\n}",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK. There may or may not be results. Note that some of the provided identifiers may not have been recognized. Mapping from OMOP concept to Biolink normalized nodes. See [SRI Node Normalizer](https://nodenormalization-sri.renci.org/docs#/) for response format"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Bad request. The request is invalid according to this OpenAPI schema OR a specific identifier is believed to be invalid somehow (not just unrecognized)."
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Internal server error."
                }
              },
              "summary": "Map from OMOP to Biolink",
              "tags": [
                "translator"
              ]
            }
          }
        }
      ],
      "security": [],
      "servers": [
        {
          "url": "http://tr-kp-clinical.ncats.io/api/"
        },
        {
          "url": "http://cohd.io/api/"
        }
      ],
      "tags": [
        {
          "description": "COHD metadata",
          "name": "Metadata"
        },
        {
          "description": "OMOP Common Data Model concepts",
          "name": "OMOP"
        },
        {
          "description": "Clinical frequency data",
          "name": "Clinical Frequencies"
        },
        {
          "description": "Estimated association between concepts",
          "name": "Concept Associations"
        },
        {
          "description": "Concept-age distributions, concept-pair delta distributions, and temporal analyses",
          "name": "Temporal Clinical Data"
        },
        {
          "description": "NCATS Biomedical Data Translator APIs",
          "name": "translator"
        },
        {
          "description": "Implements the NCATS Translator Reasoner API standards",
          "name": "reasoner"
        }
      ],
      "x-externalResources": [
        {
          "x-description": "Department of Biomedical Informatics, Columbia University",
          "x-type": "website",
          "x-url": "https://www.dbmi.columbia.edu/"
        },
        {
          "x-description": "Observational Health Data Sciences and Informatics",
          "x-type": "website",
          "x-url": "https://www.ohdsi.org/"
        },
        {
          "x-description": "OMOP CDM",
          "x-type": "website",
          "x-url": "https://github.com/OHDSI/CommonDataModel/wiki"
        }
      ],
      "~raw": "H4sIALdsCmAC_-19C3vbOJLgX8Fp9_tibUsyJVl-3czeObbT8XUce2zn5vbinJYSaYkTilSTVGxNf9nffvUAQPAhmZIfSTqeb7cjS0ChUCjUC4XCH7Vw6gb21Kvti1q3ZbWsWkPUYjf64kYxfPfxj9os8vHHcZJM9zc3k6j5edoc-l7gDW2_FQztJG554SaA2Kx9bYh8-2E4dtLfPwFwL7gJocEfNceNh5E3TbwwwA5XY1cchv5sMvBscQZYibeu7SdjcWQnttg4PHt7VBcH5ydiGoVfPOgs7OHQjWORhGIYzoIEvggccRO5v8_cYOhBgw2v5bYa4vjtBXRyv9g-fO_WRXgDHQLHw5HjBsIbus4scuGzE81Gwr2bhjH_jRCnduK5QSIcdxKOIns69obylwRQHobNcDicRRHCzow-cJNbF6YBrSYtmBqgmMFwLhyc2a0buQA78r64-Fs4IbAfNSk-BB4uhpfMxanrINXFIaDjRq_iTxuSyre3t63hbDJsDWWvFkxosy4-AtEuT7hZLNvBgsReK4xG8DsiMLBjV3jB0J85XjCCT2q-iGs4S_T0oa2cBlAacEY0AxjNjZCishn8FMfh0LMTmM2tB8vHRALiTJOGcFsjWBDHs0dBGKsWdrocDSY-_AKratNyNEQYidtxKMa2A1_p1WqJNwaxiwjNAg9-rYQXIIQc5YjBnL5OwgSoXDI3j1aTSBG7MB3mr5S3VAPXd4dJFMIeEWNm4sgdhpETt8RViFNI4HfNWFNYe3s4B57yfYVSLFnPi2LJr_zt7diVMyWeF3_5q2hbzEPuHa6h6zBvyi1Bv0TwRTjx_pnO8Dz0gBwBTDxOIm8wQ9q3hPrfdXAdvAlnkZook9f-Ynu-PfDdfWjQrotec-7akQjCoDn23MiOhmPiTtlpX5wQU8HiKHHBDE883rHa3Sb8ZwdH69SF7924iTdx1wSHlIO_4EcA19W4lQOSPHwDfOXaw7HmAt4EBssQaBRTbuDYQGy1Cq1qU2tdB1t18fr46uC_iSt3Mg0j28_JC-yF1D5hvlmEtiBu06u-BHdsk8WfSFM2hzcI486eTH3XgE2ggSOASW9AeG2cHIl2e2dna9eqq0HidATaSSe69bZlidNfxRlO9ApZJWEAexb8305X96s3jE5bSzt1Mm072HTz9B23vpzFoCdi4F2jR8-CHm4ybBEb_33s-UwVzWGSD8TQniYo5UGo-HY0gq2uN2Q4nfk27gnaSrB9Rq65CxvmYilwY5tEPghmED0gz_05ilNaPegXw0ZDmc9YHSqu0ft6gyXjMr0U12kbDsNUUnmRiBNA0Y4czQlACCmFPp6dnp0Dt08mMBHSoqfQ10_VwQhWbzYApTHZJEWxyW2xKbXcvPU-e_UWad2Jm4xDhyWB1MAkpCf2FP7ZJFYLYdRIfAmH9gDoF6FcjmdT4HsUuoAU4UNqhRqGQRL64QibzWIkFiJ9fPr6XfP49Yk441_n4v9E7o24BJPEgw2zcXZ3VmciXgdoMtyEvh_eYm8gFMisoZuTVgA1CmcjFPhejFPZl73bLVCoiY0rtK8_AVKEBpobWj02DP2oltuwXmB9Ul2R8ojmQRBwLZr7vjjQJgtvOFoaTbA5bb7ABiZlES73tgNM6d2AUEBqTwELhtoFdawYydCFxVFKjaMlVhA2LbOEEJpSo9grZ-K80YbNLewFx4WtMPECWHr4a4GxYGhix90ADt9cqHwVLbfQCGHCHBi4oH64cUGsOuUo6p3GrAbCtRn_PiNOCWx_DvuzARsd-uge4YDsYOJyIARobNcw3pgikYty4ktq-M0Vmgfi4_kctkwAGi1xB2H4uXTf_d0NRu_sQROQD6MJwBrGF27sovQn27mPhvPADwebExskSLSpoMWbyKJ94Of-MQvxljedB4M62akBqHVSh7GHPyk5T6s-Dm9xSrPYTTkdwLQYb_qT1--L64N3APRMFpukR-7UjpIJSk0A_doLJ9JGNSaUtT-dwcTL26l2TEagDxs2jFjwGqwlPiKVBJBJG7xTN8QZF2H913B8u2NZO5ugBD5e2UkYgEj2Mn0T9S2MxnZwyt0f3x8eXF2a8yC5eQUqIIaVDqN0Luz6BN64NQq_gF-kWtRxK4GfMBEbF0C8K9eegMC6QuFzG0afibYZqYgERHkOfYDN9wWjcHbVvbqwrI7V2WmI9-9OxYXVfndqWXu7u9tNa_egzUi_P_n19BJ_-_W0be20t3qtomB074BxgMkNCTmx50Bh5IGbmb-PRtN9rgI1eRR9QqAOgNqBrdfEpj_TAesg6HEwU5c0BO-LhhaMvPuA2cfeNE6_VubTXA3l21lXKZ3XrTuAseH3zccZMf0Kzea6MqfRqaYdw66udrRRQsZnN1K55d1mMBpAy6D3TO02qYeX-NTwPlcZGwMuiT1MyNtGrUL9QHvNwc7C390J6Ej8cph0drd7_7PgQmKju2YU8pDAPlO0ZFCpKukQYZOcyz-eBeOZrXYXRgVqPkwviN0MJgdTMGBd0WFSZGHgKtn0O8GQ3ePNdyeHx-8vj5vQqTVOJj4Bv2tyJAAEJzgzQxVQAE_C5QmQDEQZRWv3Dsy5mT0iHFhEc6t0CxOawMUwW-iE7X475-WyJxgUqWm1SwQ_Z3Moqn36iugk9kiGTtRMlXGBMHJRDxK3E_U7BVBUL2THkh7lm1DrtyyMMvugDAvVLBubyMEq0bolsI5jsLLJzTb0cEENZ0Fr7yhD2DJEuXsTli_ju6Z7sYk-M7CnD5TJtSAhr0Zire_mEDF4oDj4fboBtWgOXuTa4Ga7ZdBOFFOyccTADWAXsitZ38rKjzmGdtdUMv1CiXTmuLumsY8Wa1zJ8PMpIQlCEHS53Cs5LKvo94YosQyYDqX4pOK3Oh5nZIwRL8Hgpri7BJ4OyOqH5TWwWoBAJR21Al60G49OeV3AVh3HJD021Z7eVDEU-nrksjRWMiIVDdg9nk0m4AXQLgID2GUTzog4xYZbA5YDCo8Szrpwwa8NyK-FDYDrprqXOTInRw1yOaTZn4JqIWgU8UT1EwdB68k0tDpwYxnNvbFnflIW2f0QaPMZDHTYWiglO5ZV1vYAXO4oAuskxTrjarWUXmPB_EcNHCLQDoTi5j9iAvJHLQbFMbGZ0nIRw8E_AAXsDeYZTCrxJOIwDcA7zjQmFLAtLPskrgZHYtuXWz_tgTIoGJG-ZSscv1wQPCPSKEiek4HjwaRHLEpSQG2zQ5aW62GwYviu9tX4Hwxg8H0I1kXAsbbVeP8q4ytqxw0YnkJeDLga31PTWJv390Il9gKJB2uY6BMQJcyNdaFzDPwOtGU0593w-8wD7xO-vLF9jBmUcaFaw69F7K_SbQ4jII7GxkeHjYZqgcdFG03_4sUl0ahWnks-lexlc4GeZT_TgDIe8f1v5Orbj-aVb1-66Q5VxIVoRpSoMIhlWfdss3Mweh6-1YrHDWp3kFGVbqhKm09DW7wLFw748-1DYwWfcS_Suv55N2S_veqWTLt27u96FM1Gj7aRZZzzUINaexOXHlYu2bJJlf4_047MLMVz7EZ18PSn24krbIzi1ggn4XRTBwxKtwTFSHLbQcUpYJ3AbuVTADJa0xOyezYDOXWqNfI46y6lx_CQBpuNwNcNtLpLocdL98rvy7dIEs0W7BApgko2yAGdJOEpMQ6K3KeQyszEc2KVgXFda-91dnu96xpmV6i_GsCqu52d9nUtJ-iyP9fK9oxep-fYL_oQ-7vdKRLDajuFqMvbhXtV8yEPbWgdoZyOvWRGOS_QCo8RB77tOEqYrmudpseSlTpfvj87PT6qmdMY-nYcVxtZxym9wFFcrsGETgVq7HV6W9uWtVUrFSMgChwpGGCDVhcml3QAQFve3EsxHtjog9qFHin3dkukSkIxHASblTOxN_GA5OrsVmq2onGdHjOnER1OCEjlFUy0IWJ9zuS4QwxHYsswAu5QuUAS1KvYSGRqiWcWYWTDID2ldtd0CuUZDNIqlV5DYn0lvXS6SkFwcbtsTPbZjBVEPnJvXE71uR2DssDVoONng4142YwDZGnH7N9nuWQmpVlwrQktXxjpLGwo6ms5cV3DP9EM5k_nKongulbn2fOJDC2pXMckbImTGzwVFzHIfsxrcBpmg1vP9-lwMlDdXaclLl1XlAeXaBelOwM42FNbUivjRUIuJeAEZORQGXxPwRQwgDeZpVYIZ1tt0PaNwZIggqk0LttI7DJpI9UTkiNJVMqMRh0hWEy_oY3n-1mpxyuCkoSSwiZ2MhwjDJ1ClJVwG5QwAzsIFyP2w9v6kmHby4cNA3-uxk5zGTH5gyFQZHFjMsN9TnkOdWMbtKvY7DkB_2KFmFbIN1LEma6VHIHu9q7Z6-eznpa4QAd4ypWE0QrWC9gNked-cXN6PhPvtzXYUqeI-seGv3MfGBXmSwNLAsVf9ozBcM3K899NUdRXsNlq4szVSRjhGZg87sPM8djleTrhcKYP-zGfD2EBuuXQsMFHfSK5JE0EzwVB73yetabj6f_wnL9mxtkfOpP9_Ah1osXHX73k7WywYprM5uHZ-8Pj86v-AfxzeXV2UV_qVRo7Zk3bbIn6OgiyxiseGbItoDJ781uSv80o2OyGeBpDJTNGxgBJ2RPtjzdsd-vkR959tFqnrnN0cUAppKDKHG5L6bcNcXH3HthNbJA2w8YHV4e5lmYaJUNtSJB8vnpyeNS2zg8vjW5az5kGT0488MhZi6Ug3J-GpvlhlpD1DOkCQjVB0yuz4fNAYj1_fcTAa2dH_hwYGwib7hc3aOGOmLqOZ_N2xP1xENhJOEHofUAzsqfuLPGG_UOYHn15iEOBdcl6uH85B7NiUhd_4Jq146RBi9cJHP7QjeSHrWTMH3rJ-Ot_Fx958e5DhlsB9POrhnj7jv7zK_z38uwQgfDyZZPrAn-iswcjlfI5m_jxZnQXQGuQNcN4s2O1e5tgT7jArHc9ynmCUU6CEawqhgwbRsoMZuwCD07y34F4mea--1qN7dJxvpELpflN6jF1_QHUhDGDrthYdnOinrMxloSvDkxl-GJA1tT-7q9kkfF9kfUiQVmWW9H07G1vWeuYnZ1ut9feWt2G1BdTVrUV9cnRxL7r-5hLGffDm74M4ObzN8pxpu4w3gO6K89PLW8FO3Ud41ZpryXG7ZG-ofTI5q1jAH6QgWsAegYT9_LFmH12Y7bb7nbaOzllQd_9SQ3Z5zRhg5nvv5ivL-brM5qvBZb705qtR1kl92K4fpvI59beVnfdyGev29nprG6BHsCXeG_DG0Sez3eTNG8yR6xkumt1t37gc32L1nqYRWs9o0W7LFw7sadX4aXEQx9JVLdqT-2pvLlPydmFC97Ii1weo_Tgpjy95UNccgrdN6-zSQtSXum-FwF5GAjGwN7hqdhp91rd-nKsVJedzt6epa5E8rVyuo8oj4cmsP89vLMqRYHwbnLmEHTLnB4atVjS3apayTIg9jAK4zhzu4-OIQdhMs72Q2DZ8VDXZ48qA9GW6OnTSsaeb8tOwjhZfoKekStPcpie5xa1qMrYpRXLcTV_9w2N3fSImfmKjpHH8v5xZkYD1w-DUaxOk-moUhO7wCF8vix5jVZMMRvfp1elMoK54OtUJk50TKkPS00s5Kk07fpM1QOVIabOpNP7vhkGzEcTaM6l2VULZMqLrqcxacn6q-lqzev57lXU5NbWbndrb2evpHs1tX0G1nxoR1iagioP-MAWPhboaeRE2-3YpVoZ08hD_YD5LrGLHh8qC2P4FfWXYrUSjVmJACTDS3tXm_87NV8RZigB4lo5YCD21aTPLvKTVqOuZ6Us0NpvQAY8jt4uK8pCZcpS2YHFLjysL5Nez0_X8PEUeBkmGT1chleJbpcKoy3_7XB5E6wNI8MpZQOhVuf6MPAPyFbzlgeVySrO_NvFhVATlZsunlOqQJF85bviu1KfqkTP4-hJtPCCeaoOswbVM6rD8s36ohDXc363mo43Qmt_QFlcqEFXd39TlbquLv1WSnRtZ3dld1PGpGpr6usyzWXuoera6p1KlzR7FwVMoRniCzv9A1WOQSU9D2cicLlMEib_LXOClTSys8a80lUF01tmQWcVTE5Z5ERDfj5PLg4KIuy7FAmPGN-4i9ybq5B4qvqdHPS-m2kytHS3VAk4WulSM8IsDVdaEa6EZw8SrPKRxEVuU8Nqw8Mc315iyaxWn25fmJFyd-C17GFr9nkTODHZDO_CTS9w3LtsBMQ2kMZtBHAyphyOHUbeyCtBG-VqhIU57MQ1fkPH2YtVTnFagW-DpUmDT3LwAy_34VVDnhxdvq3LOMcsY3aaZkBi2ktpVclTFb7RbWWtKRUgwdsMHNihuArbAZgGj3Xf-liyBU9liJBC__ULj6_-ZtOZIpz6OsNyy3EG2_PxAy14NGEPE_Hh4kRsHMJ_j-slFxiAEspoPDo7Odrf7e7t5vMB9PfZAws536c4rjjl9UlpTHdc7s5a4n2YuPtsKsorlLqNOvIijoAFwto0C7nUIAEw6RKmg4GR51QHPIlzhe2wngVAoOenio0S-zOwpby6omrXpVZuib7QUPXBS6dVzIVIiU5mxNoUH4Sh79pBKbcgtphP73pkjgwxC9-kJNBBVeUjJES2cBVd6MMFovJuM0q3RwhhBgiZ7WNbZkVgKFLMpg7dCtRbkishRRMzS6EhBjOSF5jqD9uJRlmCBjblXH3qiMtD9caAO8JZUmFA6ZC4WX9EkpbLEHp6jmrGcpblfXkLp12XEbMlUn6gMXM8Qd_lajnhLUsQOU_BG6_nQtomYoMg1OVEInX1i25sqGhlOAscpkFuyhpJ0HqyucASpg6mhmB5Ir2X41YVApQ4X4b-fw77Khui1Zpb2wfKcvj-3TJTTffBDFjB8t9PfasCFN8euP79gKgzGnDPG6qjEbUeq3ZrnPus65NR74dFNZGsK-Is47BVlzWj8M3OFVczXQuYONU6q2UNqCoZgIuse4ytvNj3j2vfA6JxLvevgEiJNW84w6kdH5MaXM-MzxpteDUvV4v7uzXhnzL4W7oefR34Ta-74F2zBffPjLukTLd-gmXlOSXnseO-BNmsoK6t98NcKQhGAu9233h3rlEBAkVQ48Ppu8vCrWn88gd3RFZyOJQJDYjhTLTUeBpHBH-8H7cXd-XFXfk53RX9tomUXE_gvmgD5_kdmOwde3paIOfR_CgOjOlKrHEzfDGw1W59L4bzmPfAi6OsXx6n4MFxdLIiiMOr_SV0rO5BVJv3iu7bQ72nB_JUGZjVuKkMwmPykQl_fQ5iyViVb9Cc2z-02r0ta69t9n9UTlnV_Wzn3U_jcZpNdMd8V54bYu36cle0tLx93jUt1raHGWCO9xfPmRlyd-n1MP0YzDAPTr6lUwLQ8KS0wNeeFPSNZWEmu7R825-24KJppPy4xfBK81KKbPscBgaPagRBNGP-ACkqa9WF0Vu5gkZqWfiKTq_X3WlbnV57d3fP2lm_xsxqFTCXSDisvOs6TyjhbF20-XEEXBHei4R6mIRS9LxPLj2kLGeRzZ6nni3FUf7MEqltrSmQeq3ebq-ztdPtta3e9m676zat7axAypWtrlj2qlCzujzqz8zyqLIsfVr3aeSZkkC-X1Ixni_tGwXznAfKuYqjZIPg-voPFdrMhrVLdgQxGQc40wsu9AppnJS25VHCG9g3WNsQzG8ZczeeNc4W1ht7o7FZ0fNFWD9OvQDPKdqNpVuzRBqXb5TnkMhFNvkxpHKK94oOvbXV7naopEsJiIp3a4duYsNWC6d4hNbt9PLPFH-8msPeCv1Ptdw461SCWbVkzc7OQyzidm9rp90GHbTd2ersdL8Hi7iwOY6Iij-DLhFpCQOU6bJ4rRSUxa3bR-3zon6-O_XzrHVrKuuhVctEr-XSSOQk55q4VSkWLR_LfrQazxp0rZIWNgTNiy5-dF3c6YCi2W4_SBVf2I5HmQ5Desoa5Q_VfMXi-klDdMQXz70Fx_kmwjNdnw5wfRgnkk_qraebDTZaQ0H3Hqagt7q9LWu3t70H9Nu2vouYFZ7OS12bHC59l6WKaj7Fs34JPkm1x0etAD_dW7BtUgrixdVZF_2NsylnutTFgkcYZVUjF9dAZ0VZVktYlA4SGJfujOujmXLzmWXKvAH0PC8a5Cap5UH2wYJwNQ329A8UPPVV4hxZMsPhpfBF1OFjSSYI1xHjz1w0jD8fXB1e11jHF9LT0kcPdOWX7Bvs2YEaaozvtupcjpD5EYu0bC2oLyf30pCyRNIac7gmkiovpeaeo9RcFZYtrGDKtzBRmOcqDFt2471M9T5L9tJiFftzFH6rWkB4Z89a295rd63ezs7W3s5ux-r2snXgKpVtA-bv7K5-g_44jmEBsYDceI5EdINYF5B7tldwH-dqsrLwkQHBzrj8fQYidIFxKp2ug7RLMW409poxwQBfwvbneOElDIrBnHteEhymYGJM5IxB8JJzMm2CGTDDOlbJreuWAF7teGHRWGaMx5lRcRgK84iY6Cli75-oYnPd-c2fYTgBVQxKkbu0xHVwHVxR2RYpSMxol6rxMSwhHMP0hzOfw0YqoZOuEC9MXiA6wbLOJjhVvFKBsp2ulyiqpcQ6l_SkF4v0SBSJaoujszcK-_RCxtgGesP0_NDGSxUDd2x_8WASWey0OZv6E_sIqV0X5nkd4WoexO3L5dN0ocPeDbNPI9Ohfh10sjD3NQeQ_VgaSuQ73lIZmZ2vg24JhrxHqwBOX5UrALkdYzlrE3ejGluOajzgdfBzRf_67e81_pc5K34Cai9DUmcxLKhElC-xmJMmuT1fvu0QTnpLqWLBo8B8V1EP6OgClAtH5qtT6Z4xxl506P4M_u2jxGIbhef7SqKWGxkBtkqNKfm0tMQwfqq3_pbHgVMz4RnLRklZS4xr8Bppr-_ZrB57_Ti1qZZbozuW1dlutXd2ge3b292MYdqRAdh1o6-dqk9zBGD_yIrIUuorz1fEs4G8Rgb4h5ks5udJwtmyOu3e7u6qdjY-qFWTlmOmNQfqClHkLr9pYjv_6K_Wq-TCTxjcuFEYBJ4AcDNKXZYwG-k3ZG_hzqZk8Myj8kUDI_u6fMaav2sOErf5eRQ39ZaVRoMXTGeJ-ky7eOCF4MB93lf3eWLYG-DTDM3fjrzYhWGkFJglD4YxxaAC7EvXbDEMI6rH6Dp9JERNp_uzz-MDNTxbnIEVK966tg-kwlcyxG88JNfEe41RUkPyZ4ymP_LsWfuD6fHR-vS1lmemrnbKij6XknZ9eTmJgP9r5N5g03_ZBNMffgYhFG-mS6H6NNWFpk1DKHwl3fYNV4fSKH7MpdEpIN_XqmiKvmyYP93SvOyW0iX5VIwlhYP4-G56gX-sH006U4lCZMWKTXGsTMhD9eT0kiBSYMNnUKd-OLIjWI-J8mJJM2r3hGpv6YwkGgitTG2tyqSf48zfuYCJLlDxoLCMUf9sxTiWH_RpUi2MsSjM5SvTf2Vi9dt9wABcvX9D-6I_hea4yEDUDfk7_MKfMKhyHSiYAMAPNrJA698mKhS_hIVewkIvYaGSsFA-mGNkFOjAQbpb8zkGRYaVb8ynS_ASmfneIjM5RrzxSJmsTX7p1S5-FkUOIOiVIS4kg7grLSiFm2pF1-thNrHYUBUvrNbeXr2V95v39spiTKb58Pw3r1hZK6OgWTi4mbMJ8f2f5j5X1OjQD5EfPiaRHcQAJBmD4fVJgGE8jYm-zx8rgkXv7uxurXUmmzV2KmUeblu73d293U53q9fba29vEcbKhKpQQq_V225v7-1u7XQ72-3OFuGtGLDy3br2zks46Lm820ZG6kpJ9mjuFSx9H7hQss9LlOiBfu8Ps1gvwaMfbXv99DGl512pklATP-b0xX2TSR1bK-B0IUEZlt7CTKOS6NOhigixtxsVoW14LbfVSN-etn18N3pgDzzfS-b1x8prKo5cktHEobAA76X90zzvk1fXZHpTGuQqAMWoFhU6vBvSQyb0VNHEI0em3bIoGKUpqlenEJDaVGGnl1Sjl5jSS0zpJab0g8aUMvTaQNZEQaW-fokmfbtoUtFC-FYxpRLF_AMEkSrGH3Y73yJjCe-44jWEId6_GSbhZP7MUaZdK9MRl73y_Ye9teJTiotWuy3R7XW3e7vpf7ovwaIfLxWiZOlfokPfTVbEY6_OSzjou99ALzlFT7s0MuCDT9eEke1vSmwPRi6bvOXBnivZ3LiUCtMo3FZjoxlri4zcGN3mwHBX0Ie-AScmSdODqOqwTJ0pi_88BB44uN4NPQSUmD6TeubB0T8OvAB4wUnGcUscwM_wd4D2MtmIMGyc2FHC3hagISx-1iYIsSH_KH0xO6AG_y72LPkOhCxlhN9iYxm24GcJaEqjyMXyIFi0AJbI9o0XLSMy2rGr9OABQguvCwtphDTkqOkEsOUWx5kIOvxJF7ZxbAxzfbSawHBbzZ2G2G222w3RaoHPtbvV3MVvdn_51BKS5NAh0zPNr0r8uUCrdhYNVKa1Lc5DLwbTml5FiLzBjJ-KkLD-ItoWXySH7QNcGqNTFrn4EcDJJ3vwqj_dnGvrfoC9JaNz8pluOxYYBfseQyticWxFGMEVvY9eg7upf825XVvfRzWnbrvbae_kQyz8bek9lrwkeSqn0Chn8CqmHWLy3Xfr_63ilmytfPWal2Xlq9cH8CUWjPMGkbqmQqTXMqXKA240qlYeBRrleS69isT7HKPsKunTUhJQyU6UeuWELkVmz7Ksr_lL2VrZ3YAcu_QmHgAHNj0yuOZBeg9v7OficrCveRz1fbOMT3OUQTjxyoBQLOobL-rtKKNE33XwAZ9d-1_2cIjPP0lwXkKv0aEpYafB7QLw-EXcfg_i1sTQvSMroi_t2Kd4V-kKJrcv5EBx7vBFVeHw8emqZjgcziKxYTUdGx9j8hO7no9Mg9WCWOwLJ6TYrISbLhusFo6YWxekcO4pKY7Z9mkGTzBts2QOUUCNGItpmHCJCph1bkOmh0CAp8BhzHuWdmxQQq122jwt-4ThWu2gxQ2q-hKzrakDejEbgA7_5GWf-MYKB2hjppVmgAihMYd8TRLE-1VameaVNK2WrEAyBmjj0HeeIJB9CgJ2MsO0fzkGUSSVVi1xYQcjKq1gNcF2xcqeHO-fhGhccsOUqazWTiGcnd1IdLj6NE8J3tFUFhYuo0OdJDWxSdOmqHeswlFOmcG1TJu92F4vttf3ZXtJ2pzbXnSEauIxww2Jh6IUoeoyCUvDCdxeRgCGLh2DYec0YeSW6zHk3xqpEHVQZZULXTfko1taMwTqVVT1Vb2B_cLYoyMtQokedBrKFBgQGTkYtzDhFJGBe4OiMAu0Jd55n91bD-WYLQJ3ZHvJCtA1cPsGAxV52OduBGNO-NlikMUkRI0L2LdhSoD4FuuiyaNt2KDObOjig4seCh1MnchED4S4DvD_Xyv5iNGS8BYvklHsi3Qx60cnH-iRp-X3RXuuOKqSifZQxSA8-PX98FYxBraSRjYSkJaHSyVI7DnhJbty2Ke-z9PQo_61DfxtgSkKqLf5n06zix9iiszIT7vNdk9-pBhNx9rabW5Ze_yl2Oi1tpvtdqszrzMF4KftX-g3HG0Df_pFYB5HXP_UyqPQMVAwxtYjtreb293M6D0Yzeqo7-Dj1i8SkU5rVw-UH2fLHMeE3umpPwAyQyp03jU7V-nQ3jZ6ZNrgMrN9iro2cL8AH-ODyBiPCyMUNPwCmqpKFdHStbArAngJiX0LH00sc9Kycupb-GqdbqfEV8NvswZzRlz-MDG8vJJ-BmuSRDaYlCw7_5xGZZFtK9iWkqfynau-HTJLXDGZhxj6QWPTC27saKhNzSJ_rmDt5jo_r9Eb3N9u-zGNY13nWxsAqAhyBrO2AB7VcuaVvwqviN4PsZh1Kz4ahP089qba5r3XPm2VEU1VVwRSOKh9wBZ0ZWgictFHFMnSUSkUUjLyuGjIkjKmeGUsg515WVF9LuC72qDlkxIg8onsXFk1udR5nGTsF7HC13jS9qDCJ64d4xu1IzPoqp5TyQda1QCF8K7skJ3RT3cM9qLyn0jl56TLj6zqDeGpkz8WRBjoZi1IozDiGdsAHWidk5e_AsvKpA99YYPFF-1vJp0hXIrUW0CNc43eQjir0CEH_ZLhTewpAiraMbajbsuc5yya3JoRMg-HoxWrsSoGwCW2l0o4__o1w81_6HweVT3-UtXSy_z6qxu4tNzqCwd23RD8tT5lQNvDJNZpQLqJO0R2cOM-_Ox9AZHdD29qnzKqmTcyjgQafy3O-hvFSQ7P3h7JUANqifeHB1eX4koDEBeyt7iEuTl4endwflKihBkaSlaCCI0MqPj1x2qg04L3I6DKbNACxbZJXdOem6ontK-3xFlAJyJUpmccTknyezKOorcO59gnVLSZKz4TBfujyJ6OtaP9RsZR4hlxmAhCx-VsFlAykxkGJM2bNhvISKMQJg5axRsFGEOqF4CFJqxBKONSAJDuLykI9KyYPPyhWwXQwKwFqy81hTnUgkzpC9MCUeEvTLlPGEhpidZ0tMy9hSx-hbq05pBx1pYyqMdFknw_d6acvbGUIUIGrcD1yAYyXoHIXKhYE4fMOFzLm9iW7AD8MSADG_jKDInMkMlI7bW4OUX37AStS7I5QExpJF7zZqaxSVPSystij5SPJ68PsKwGLA60LEsvxjFHxLIQOU4giWBbaWSIIabq3qE2xXAc5m8JgAybnNrN2ALgO7wOnXmZ7OStDW5bGE2YwbBUKJF44iXy_LdoT6yiPUoTC_n3eJPGr2XFb-0PCs3WJm4cg7l6jVDkvqsZG9v4Hn9BZogz39G3lpX7Dr_1HPzyunZ0dnK0v2f1ute1RraF4lpul0vQva6ljb82ssO1S4YrB2bcTzLAqY8p3Oua64xKpuaWTk3rwOxgucTUwnzlluJORLRcgzDze7scZ_5A_zD-asEkp2aWkm-iMUSjgIwe-dpwM64pmVV9n1416qurRtfyPpFuA34iGMmUPkCHMNigZ-mf9TEwd-zpH_wQH4sJ78Jrxe0aon3Xl7GdHDDYDPhs27zP5lWc48wC94AeNxfy5PBoL0Nv9QrQ4VXua-TXlPKfGiVj0PW33ADqkaJlHQ1uLKLXts4PLxeiWAa2f3T85uADPggD0D5JvtAEk4P2Q9Duis7ENNfBV2mNVbJzz36jU5YIjdE5ZrniP6jnBq6qa27epI7xrQfpTk6j8IuH95S1AgXJqrrToc4AJT3Yc-Eo8P4pi50_mty7kNOrSZtvq3yCr23UIiTB-TxJ_kE2ScAXBu0hbG66WUwuPvyC-eVopPFg4uwC07zUM0vpfBHIwPXxkTNHin0FEyk1Dm_FBlIDyx7TnUZFivrat-BSgxsn3Suf9AnuadR5dDQYsfP3aEO2y4YEHhEeqp8JWQOPMRjf0opv7RF42c0onMGkmlrHR9Saf-zzPFvpj3GLxabR_OXOl4on_WT3p36yC0k_0-UedVsGDJdW99t6_fgEEr6KJQiXWllQFrSFGzjT0ON6ujLsHnl4PK2UKWgROVFxdYFgCZzy2q-DHz2SoGMIHAJLQwhgZnpuWRSBEjazEQQFhK3FfOyAIVGwDrsWQgf8e2n0IAPw0aIHesBiAEFNrnLwICVbpdiBpsAjxQ2WDZ8LGyyMARDzfrg4OcYv7FykXB0t0RCEvdGIk3EXeuvWXvdHd9hLPaS1HXnDC1ngv5c5qsSu97n3uDQrufYLEWhXgL3c0_9U5unfP3e3ZO7Foe_1-_ncaxlB5YlTZspl0_hTO__ruPjKsc_689qNX-6-a6e9grNuuuiZwZ7fI49nwyHs9puZL7SMe1TH-ZRlyT1-84nyYxM7mcWc6FZ7ccleXLIXl-zFJavikqUO16YSjUnYDyfh9H4PLeeVnYLRSBk_6tQIDDY15cLNnqluRTZmrBpn6ljmrMc8gvcbke9kxTEe44ktxkM0yHDEUqtRm2xxIfD89nzfsqzOnrWTCz2fnr0_OsPf2u3dHWWMfPozxY6rpj6ccjEO5q-MJwJ8IzmpPLkin2zqGfkNuUFkxQ-h2xgAzSwiZL77cj0L7RaldX7NJ2UoJyO3-IZNqfDDLzup5ZbF6prKh-30rN3yFogPm6WnYEGMApBIIplNQrpsg9l2sKtVfXxmPcNEeoniP0MU_2tBQtMCgvSTgnB9CU07KLtzSiR0Rh5j8wB9cR9pqqU3ObHyHP_y4gQEieOK96pdVBYEyM-iuhgnhE6OnlqQnwGCS-U4zcBz8pJ8Z3drp2MIcN5-P4DUFlXEq7n6tOocQ_xYsupp1BIbqn60Gs048lroq3qtMBptOuEw_pfNOkX2FF0Eh3wefl9hoXLJ5zuWyl-5eqbgRZYDiQMY9Q3aLgtjcCBDNZXyNivYG_n2vg1ijpvm5DBm0AyVOL4ndlM2MsWJ2m2rt7U2iLPTk9P9trW3iwGUNWF8OH13uX8IBOht766PyfvDk6v9w71ud30QKoCw393b63a2LWuvJOLzSetPVqqZ3JTqa7vCuqbRChXnypiLhRhMY8mvZ9H5GHYgAPKGb1x8enBRB9zm4QiTQI9hSsl8QbP3YDc4V2OQFoZBmhoHL9bB81kHfC9HqS-jD39O_ZESvPyCZ3R_4V3yXhgfL_Hd5WAqZSPjDLS2XYKlqfgfhGcZoCWYamueUaUzAS5uUp6gnSY_8gVulflIOhoXmYoF4ZFLpZkY5wyL7gJMCjUyZAe5CfRJT5kzky3ha-EUOV5dOpqsyGIes8ki6zDUlC-w74tXRpT7la6LXW-IV4Vy168aaNi8Go69S3qy9ZWJY-mtN_P9tZISxSX00Rmx5o2ae2nR_Zp5PkQH4MtGOYyAbyLP5kXmBzbSJzFicK1QVJF7lX_kYKi6UrlxFIogxTAyTbziqVqNdGeOKQ2_Zwis7wbtk3WnjOLMapc_DM-voeQPEFabIBmTWHmAS86oMkYEST1Qez9-pSvQI25MC-Usx0uVusFDSLXL8kfCQMHIG7aEZrd99eS9-EsKoiUM8u4LexBvqOfS6uLf_2o2LPDzviiWCs32uX9ZqGZ3_hCmbPZHx-cXx4cHV8dH-8zkdHB9q05xpQqlZG7zXRJlzJ-CYe6LuT3x6Sy3zHWTZ8OYtZ07Gi64CSRtbHUur9Bvif8IZ9Rf6ul5rgVyOFr-VBDA9CjpSJmNhM_uPBZAvZmPhTmKrWKxwVe2XuUsn1d1BiALTKQgUBdw-ZIsunit5sa7c2N1CezjKzzYAin1Ci1W_BcN6FefWuIgEO4kmc75SYO0-gfyeCoMhQooqbyF7IF_S3yIOQcD5iheqXOrVwhBgQSiqpcFlAorJ6EdzM2XMJg0lEVgGw82GFkEXsKn_viSTeQ5jIiBBA4HBFxAIkXOCcaUM4xFLDWYJeRxqgdmdLdwlsQ4GMxDdqDneADNPM-rRAzlzTbSTJpMtoIq05tlcz0gUM-TLxLlsZR3P4tauOyClDqOwAALcgW2U-4DfkbOoHBLJqCPrfl8M_Nb-rKABEeHmhmQ2FwtBh1kkgGiz23LJMLfxy6liwD7zCRjUfs04VM_p3R2dyYkT0buohYcX2gYgLBbrimuMlqyyGCwuA7VACGicwE2ki53sBoxMUU0w2vBdgyCW_kAEi6-qqQvh8-mSwA1CBJysx_ewnw3_qvd7IB9ja9Xxao-Ut3QPBgfMldala7LLLU6AcqcEN9DZlLVisc5Eib57DOIYh-THARlfqhbMmyYkTEYpcyINrzvoYWwYaccO5gX9sTKk6LKc6npushI4lwbqmdHz7rE7ENN7eFnvEZt4zeRdtdQ3Bh5OSANJQB5qQtWIFYi1tYqX8gDbdWKsqD0rZ80VCNSGxggl30ty8YkWDTG4eKbwReQoFnObGonEdAlq69plJoxrhnlikGjtiuMOpeSc061pGE3jOQLMUOSgjZm9ikyIV-YMlXLb90Jtwo9iUZV7IYuVjqg4nu48E1gGFp_bG-mP5Ep6LiD2WhEWKBAj2W1x7vmIHTmzbTCI61UH7-s5mjIZIPKWQnll9nZ6VELjYUU0e31dPBPRShNdsKiPOQIqx9zfMJLFivBrted0y51aDm3itj0htSbaqAYEZEKgD1QeczNrEdo7_pUCWiKhcqz2DT48TIs5EWbP82CYGOBH4TDmklyGGMM7Q6ADNBywRwzbnHKxoJ4pQxvGwHvj3rBPmE_fceiPAxaslCqh7FlUYJLCYyyfGrP8X07VcCNqc3rmybHolcEmlY_IoRAnbSOp8rUk_3SlBlfvzj49urqHBNeMXnlEE26jmVJu01OMd2CGSRTASsXSkePN3g0om8jL4gbpiSWA3HuTEMYdOJmsANjU-5IU8SUD44LKPkw_wEovwwerXu2WaGo3qNPDhGolmKEp0REhNKTiIDdfqQT5SXTCQC60_AtmIERso-jrGZxyavcYJ0AFsRVZGPONVb1aIjfzmP46uALEA2_uNfhl9BKijcUgy9iEHnujRjPJnbQhL3qUCERo5WiJiwVUKPy4C2x1dGb-Aa8WvDj2BgblRLsHQhuoDMlXUueRYFNkT-gy60d4d_EcEqYG3KennC7Jzy1dFVh-GMYfa5PmxaJjVODG1cq9rTgdM7WL-3hq5eq0C_wZHyLJ1DKCWIOnuLL7A-ZJr9EyYLTkOLVZCDx5q8kgaUEJKNMS5gSvWVLxKWBR_4dfc3D3rfX0hGJd3J6oBrWv6lOyzCHRVCJ2SyWKdUWFkYW6eQ6m4EuoAMLEXu4UdQ6SenNsz27QNCBS6WuMuYIP-kXuRM8g8wJonupkZ3JUu2n7XLN15X4FUuTgsCaTBeU0pJnjFzjx21i8zJdqaAg0U4uz8TuttU2zicNYdGxOlbT2mta3av27n67u7-194tl7VsWywo0_BagUhQfJBO4Cw4SzCa0e48vLs4u8Ju_H1y8P3n_K348ef_mjPzP49cffuV9jdK42lBVRTtL9gUC3ZTn-LeyLU5tHwkFu5zjykVhsxCvg7wQR1t4kibEss2jquncu28O1JO6cseoKEhculMWeHB8zA68H9_M5dsy0WyI52noYOiXk6XXgxZuM28A8eUacZLw_RnlNtsUeXvt0WPJsUJyQ8V7jL4y6hUWkKPvVSSkznc-AnEMDSqBJUglYOmjBltm0eDA_YEco9pqKHXxN5x18zeKOioIrUrH9quqCoO8qgQOSt410UaqNn_D_z4x2sbyqQOojDLP0r4wK5IF5tQryU15krI80REP-0r3mWagpsGXWFULrX3aNf_pOf_JW4RWvlacFmBAqJvTXwX1CtIljybx-SI0EY8laOZUWUWBlIzD2WicqOiQPKZQZW_p4JstLnkoRCFPWIoJhZwGLr2mG-AD01MbOoCkkf4kVdwLXDN_xw7IZ-WwmcwiFsSDMLAMxvJD4wAJ43l0dk5BLWfRnl9x02RiYzmKLds6927rmt7OK2KUkfWPhZFklRV9eaannsYnHa5biaN4_c2w2IDjT4rVaHn5a76KyjFGtOHkxVPiFTQClQEYc2SFOFDCj6mDLCeUNY659RMwjEGMtZfmb4_HLY-CziOyyvu8vbeES1ggl82jXJgC2mc3fJehgkqgCxTrqjsJgu5AGHY1JZxtW909q-y2Nl9QNdKA2MuksyNHPtwsixKtNB8ZmudMqIfNKwfqKy2aF_djNyl9UKc4ydf8C5ug3o0qDsoMknt6gOZOLCFOD_6DT-gnoEc8vOOdcyDf0yYbYESDzhw5KK8KtF9o_WOcbXD50fQslWL9XN7XjuWvsF_MSHvAwaHI5lOTsR2k7QqtOCpIR_csiW5pJBAt-KKkK5-Oly_2ZIQEQqRXJbAarUupZjIUgRT64jkzfOigJU4VMf7G00eFR1TiJfkrvaDE56ZMxo2gLZ9iMlqgIJSOMQvbtHUn2_oNl4YlkgZtfXM-0znoPOaIV8QXSwcERgGOQtkGpgKMzkynCpSyy32PaCLRQ1KsmugJpJVVQfaYN6BW3rIXbloN-8GbNgXG21aVLr2_PvcMJjGa-apGZ8HHB1Zt8mlQppqzevaKtrHrqOAsFy27f1SVdh1OvAnlV2Mccr65WHzitbJs1J4LEWcqDxbwCVdE5_b2tjULPFjmhLCSnzfPLWunu7sKXuFCtFbUpIqk6Wy0v7SOLi0JgOWNoEpl3d_a0yQc-SF4cWUPG1JyjkBQymh3tYb6PhWdnXBVYrdi7Xid5pJ2lCH8gSqdQpq9OloHCtByc0vHGdP2lfgAa-NG3jDFV0ZGFZbV2SAH-G02BMaLHgnKItfBdD1qS1xqpUxEMnhE3TeVhTrcaJIrEV47nw1OQTOcaDuKGIpvkyOyRmZkp9fZ2-t1ivj-b0qlU2XZU7xO2aPEkDNVJkUkGtLBlMfpmGrE7ygwUSpQhw2_0gnmUWikLw8cHx2cpslMYEao6LfUv_HMS4jahkXphDKxy70DPBu447AmS3qwBLbDdBzZsSvovg4G3zjyxwvh3jJaNxwmJHNJFqnhQKI9RR6JPEr3moG7Rs_05VYIMd9H-vXxZgERaxb5q3ASjg0fcHYfLt6hWKXkk1DXcAWbKT3GTNmZ0ubVvqu3Foj4KczYdVrBcOC1An_SCrxxaxR-2VT8UvtqXlmugLQsvl1cTLIzefk5yyuP0ofAg52d_Pa6JGqjnrxk1v5UQRysbeLkg6lIbRJht6HQftxSy2dVc-d7ME-qBQ6r-3dFQwATUDFhMisBqtorK-OnuWl_FWulFMlwGY7rK8o0G8HQmdoPpgGeRltWtKmydkFp7sNkagNhgFZigyhWl0pUZ8hhalpDFO8gCWo2HHu-wy-lhDfssTLhyflRyZAsLdI84VeZOBi2OLfjoe0foijnZDjUoq3yPIEpJqBGhP__UxA_HjT_76ePdvOf-O-__StzEt__OQqHpYfnaoYTyscma87jPcniXQtYOUZL1oHzQvVNk7rSTcrNlDCtcTLx8zcbdf5p_kpYzVinC1OIlGrd7NrEfpg0VFy5j9lvhSURG3Fgf3b7Q6BsfQVyAiWJnP21iKkl17rUTOe0lJq5NxCwFQuSiqcRBvuXTjKHOjpTt13yo64uNjtW29p8f3Z13KRrT038u91pb2_WVGVWVbhH5RA11YEeX5Yae_2YrkNk0p2pbge_FU1XjdO6Av2O-cqD8aZ0pl2H6x0YLcd23KcrIWbzoD9s94cZiNO-Mjt1K9v5R19e1TBbpqg7fUxfAnnINVU0MuncWAvEffduypc5vsVs1Rug8pdUY5sXRr4FYqo5Pigjf811ScKEbj-VjFDa_vdZSO-4ml1K5lq8D_81_xrTH8au03-n9QK89MvYxS2QzC_5CVL19RgMWwMUoqj_AGnvD-yh_MIEwjn3_x8iMWn0UVEBAA=="
    },
    {
      "_id": "fc8245e92c970298449294fc04211869",
      "_meta": {
        "ETag": "cc0359df4215e2c3978b92fa546684b48b3430114972aef94a9e8b633e6138a3",
        "github_username": "CaseyTa",
        "slug": "cohdcovid",
        "timestamp": "2021-01-23T00:06:13.790384",
        "uptime_status": "good",
        "uptime_ts": "2021-02-01T00:27:35.864183",
        "url": "https://raw.githubusercontent.com/WengLab-InformaticsResearch/cohd_api/cohd_covid/cohd/cohd_oas3.yaml"
      },
      "_score": 4.7613683,
      "components": {
        "callbacks": {},
        "examples": {},
        "headers": {},
        "links": {},
        "parameters": {},
        "requestBodies": {},
        "responses": {},
        "schemas": {
          "Attribute": {
            "additionalProperties": false,
            "description": "Generic attribute for a node",
            "properties": {
              "name": {
                "description": "Human-readable name or label for the attribute. Should be the name of the semantic type term.",
                "example": "PubMed Identifier",
                "type": "string"
              },
              "source": {
                "description": "Source of the attribute, as a CURIE prefix.",
                "example": "UniProtKB",
                "type": "string"
              },
              "type": {
                "description": "CURIE of the semantic type of the attribute, from the EDAM ontology if possible. If a suitable identifier does not exist, enter a descriptive phrase here and submit the new type for consideration by the appropriate authority.",
                "example": "EDAM:data_1187",
                "type": "string"
              },
              "url": {
                "description": "Human-consumable URL to link out and read about the attribute (not the node).",
                "example": "https://pubmed.ncbi.nlm.nih.gov/32529952",
                "type": "string"
              },
              "value": {
                "description": "Value of the attribute. May be any data type, including a list.",
                "example": 32529952
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          },
          "BiolinkEntity": {
            "description": "Compact URI (CURIE) for a Biolink class, biolink:NamedThing or a child thereof. The CURIE must use the prefix 'biolink:' followed by the PascalCase class name.",
            "example": "biolink:PhenotypicFeature",
            "externalDocs": {
              "description": "Biolink model entities",
              "url": "https://biolink.github.io/biolink-model/docs/NamedThing.html"
            },
            "pattern": "^biolink:[A-Z][a-zA-Z]*$",
            "type": "string"
          },
          "BiolinkRelation": {
            "description": "CURIE for a Biolink slot, related_to or a child thereof (snake_case)",
            "example": "biolink:interacts_with",
            "externalDocs": {
              "description": "Biolink model relations",
              "url": "https://biolink.github.io/biolink-model/docs/related_to.html"
            },
            "pattern": "^biolink:[a-z][a-z_]*$",
            "type": "string"
          },
          "CURIE": {
            "description": "A Compact URI",
            "externalDocs": {
              "url": "https://www.w3.org/TR/2010/NOTE-curie-20101216/"
            },
            "type": "string"
          },
          "CurieList": {
            "description": "list of CURIEs",
            "properties": {
              "curies": {
                "items": {
                  "type": "string"
                },
                "title": "list of CURIEs",
                "type": "array"
              }
            },
            "type": "object"
          },
          "Edge": {
            "additionalProperties": false,
            "description": "An edge in the knowledge graph linking two nodes",
            "properties": {
              "attributes": {
                "description": "A list of additional attributes for this edge",
                "items": {
                  "$ref": "#/components/schemas/Attribute"
                },
                "type": "array"
              },
              "object": {
                "$ref": "#/components/schemas/CURIE",
                "description": "Corresponds to the map key CURIE of the object node of this edge",
                "example": "UniProtKB:P00738"
              },
              "predicate": {
                "$ref": "#/components/schemas/BiolinkRelation"
              },
              "relation": {
                "description": "Lower-level relationship type of this edge",
                "example": "upregulates",
                "type": "string"
              },
              "subject": {
                "$ref": "#/components/schemas/CURIE",
                "description": "Corresponds to the map key CURIE of the subject node of this edge",
                "example": "OMIM:603903"
              }
            },
            "required": [
              "subject",
              "object"
            ],
            "type": "object"
          },
          "EdgeBinding": {
            "properties": {
              "id": {
                "description": "A knowledge-graph edge id, i.e. the `id` of a KEdge",
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "KnowledgeGraph": {
            "additionalProperties": true,
            "description": "A thought graph associated with this result. This will commonly be a linear path subgraph from one concept to another, but related items aside of the path may be included.",
            "properties": {
              "edges": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/Edge"
                },
                "description": "List of edges in the KnowledgeGraph",
                "type": "object"
              },
              "nodes": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/Node"
                },
                "description": "List of nodes in the KnowledgeGraph",
                "type": "object"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "LogEntry": {
            "properties": {
              "code": {
                "description": "One of a standardized set of short codes e.g. QueryNotTraversable, KPNotAvailable, KPResponseMalformed",
                "type": "string"
              },
              "level": {
                "description": "Logging level",
                "enum": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "type": "string"
              },
              "message": {
                "description": "A human-readable log message",
                "type": "string"
              },
              "timestamp": {
                "description": "Timestamp in ISO 8601 format",
                "example": "2020-09-03T18:13:49+00:00",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "Message": {
            "additionalProperties": false,
            "properties": {
              "knowledge_graph": {
                "$ref": "#/components/schemas/KnowledgeGraph",
                "description": "KnowledgeGraph object that contains all the nodes and edges referenced in any of the possible answers to the query OR connection information for a remote knowledge graph",
                "type": "object"
              },
              "query_graph": {
                "$ref": "#/components/schemas/QueryGraph",
                "description": "QueryGraph object that contains a serialization of a query in the form of a graph",
                "type": "object"
              },
              "results": {
                "description": "List of all returned potential answers for the query posed",
                "items": {
                  "$ref": "#/components/schemas/Result"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "Node": {
            "additionalProperties": false,
            "description": "A node in the knowledge graph",
            "properties": {
              "attributes": {
                "description": "A list of attributes describing the node",
                "items": {
                  "$ref": "#/components/schemas/Attribute"
                },
                "type": "array"
              },
              "category": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkEntity"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkEntity"
                    },
                    "type": "array"
                  }
                ]
              },
              "name": {
                "description": "Formal name of the entity",
                "example": "Haptoglobin",
                "type": "string"
              }
            },
            "type": "object"
          },
          "NodeBinding": {
            "properties": {
              "id": {
                "$ref": "#/components/schemas/CURIE",
                "description": "A knowledge-graph node id, i.e. the `id` of a KNode"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "OmopList": {
            "description": "list of OMOP IDs",
            "properties": {
              "curies": {
                "items": {
                  "type": "integer"
                },
                "title": "list of OMOP IDs",
                "type": "array"
              }
            },
            "type": "object"
          },
          "QEdge": {
            "additionalProperties": true,
            "description": "An edge in the QueryGraph",
            "properties": {
              "object": {
                "description": "Corresponds to the id of object node of this edge",
                "example": "https://www.uniprot.org/uniprot/P00738",
                "type": "string"
              },
              "predicate": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkRelation"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkRelation"
                    },
                    "type": "array"
                  }
                ]
              },
              "relation": {
                "description": "Lower-level relationship type of this edge",
                "example": "upregulates",
                "type": "string"
              },
              "subject": {
                "description": "Corresponds to the id of subject node of this edge",
                "example": "https://omim.org/entry/603903",
                "type": "string"
              }
            },
            "required": [
              "subject",
              "object"
            ],
            "type": "object"
          },
          "QNode": {
            "additionalProperties": true,
            "description": "A node in the QueryGraph",
            "properties": {
              "category": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkEntity"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkEntity"
                    },
                    "type": "array"
                  }
                ]
              },
              "id": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CURIE"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/CURIE"
                    },
                    "type": "array"
                  }
                ]
              },
              "is_set": {
                "default": false,
                "description": "Boolean that if set to true, indicates that this QNode MAY have multiple KnowledgeGraph Nodes bound to it within each Result. The nodes in a set should be considered as a set of independent nodes, rather than a set of dependent nodes, i.e., the answer would still be valid if the nodes in the set were instead returned individually. Multiple QNodes may have is_set=True. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=False, each n1 must be connected to n2. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=True, each n1 must be connected to at least one n2.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "Query": {
            "additionalProperties": true,
            "description": "The Query class is used to package a user request for information. A Query object consists of a required Message object with optional additional properties. Additional properties are intended to convey implementation-specific or query-independent parameters. For example, an additional property specifying a log level could allow a user to override the default log level in order to receive more fine-grained log information when debugging an issue.",
            "properties": {
              "message": {
                "$ref": "#/components/schemas/Message",
                "description": "The query Message is a serialization of the user request. Content of the Message object depends on the intended TRAPI operation. For example, the fill operation requires a non-empty query_graph field as part of the Message, whereas other operations, e.g. overlay, require non-empty results and knowledge_graph fields."
              }
            },
            "required": [
              "message"
            ],
            "type": "object",
            "x-body-name": "request_body"
          },
          "QueryGraph": {
            "additionalProperties": true,
            "description": "A graph intended to be the thought path to be followed by a reasoner to answer the question. This graph is a representation of a question.",
            "properties": {
              "edges": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/QEdge"
                },
                "description": "List of edges in the QueryGraph",
                "type": "object"
              },
              "nodes": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/QNode"
                },
                "description": "List of nodes in the QueryGraph",
                "type": "object"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "QueryOptions": {
            "description": "Additional query options that apply to COHD",
            "properties": {
              "biolink_only": {
                "description": "Whether to only include nodes in the knowledge graph and results that are Biolink compliant (as defined by ontology_targets). Default: true",
                "example": true,
                "type": "boolean"
              },
              "confidence_interval": {
                "description": "Criteria that the results are significant to the specified criteria level. This only applies when the method is 'obsExpRatio'. Default: not required.",
                "example": 0.99,
                "type": "number"
              },
              "dataset_id": {
                "description": "The COHD dataset to query",
                "example": 3,
                "type": "integer"
              },
              "local_oxo": {
                "description": "Whether to use the local implementation of OxO or the real implementation of OxO. Note, the local OxO implementation may contain outdated definitions and xrefs but runs faster. The real OxO has the most updated definitions and xrefs, but is slower (~1-2 seconds/concept). Default: true",
                "example": false,
                "type": "boolean"
              },
              "max_results": {
                "description": "The maximum number of results to be returned.",
                "example": 10,
                "type": "integer"
              },
              "method": {
                "description": "Type of association method to perform: 'obsExpRatio' (default), 'relativeFrequency', or 'chiSquare'",
                "example": "obsExpRatio",
                "type": "string"
              },
              "min_cooccurrence": {
                "description": "Criteria that the results have a minimum co-occurrence count. Default: not required.",
                "example": 50,
                "type": "integer"
              },
              "ontology_targets": {
                "description": "DEPRECATED: COHD is now attempting to map based on the Biolink Model yaml and SRI Node Normalizer.\nCOHD can attempt to map from OMOP concepts to a target ontology. You can identify target ontologies for each Biolink node type. The keys should be Biolink node types (e.g., 'biolink:Disease'). The values should be lists of target ontology prefixes, e.g., ['ICD9', 'UMLS', 'DOID']. An emtpy list indicates not to perform mapping for the specified type. Use the key '_DEFAULT' to indicate a default list of target ontologies for any unspecified types. If a domain is specified, it will override the '_DEFAULT' list. Target ontology prefixes should match the Biolink yaml but may include prefixes outside of Biolink.\n\nIf ontology_targets is not provided, COHD API will attempt mappings based on the prefixes defined in the Biolink yaml.\n",
                "example": {
                  "_DEFAULT": [],
                  "biolink:Disease": [
                    "ICD9",
                    "SNOMEDCT",
                    "DOID"
                  ],
                  "biolink:Drug": [
                    "RxNorm"
                  ],
                  "biolink:Procedure": [
                    "ICD10PCS",
                    "SNOMEDCT"
                  ]
                },
                "type": "object"
              },
              "threshold": {
                "description": "Criteria threshold to apply to the association metric. chiSquare: p-value < threshold. obsExpRatio: abs(ln_ratio) >= threshold. relativeFrequency: relative_frequency >= threshold.",
                "example": 0.5,
                "type": "number"
              }
            },
            "type": "object"
          },
          "Response": {
            "description": "The Response object contains the main payload when a TRAPI query endpoint interprets and responds to the submitted query successfully (i.e., HTTP Status Code 200). The message property contains the knowledge of the response (query graph, knowledge graph, and results). The status, description, and logs properties provide additional details about the response.",
            "properties": {
              "description": {
                "description": "A brief human-readable description of the outcome",
                "example": "Success. 42 results found.",
                "type": "string"
              },
              "logs": {
                "description": "Log entries containing errors, warnings, debugging information, etc",
                "items": {
                  "$ref": "#/components/schemas/LogEntry"
                },
                "type": "array"
              },
              "message": {
                "$ref": "#/components/schemas/Message",
                "description": "Contains the knowledge of the response (query graph, knowledge graph, and results)."
              },
              "status": {
                "description": "One of a standardized set of short codes, e.g. Success, QueryNotTraversable, KPsNotAvailable",
                "example": "Success",
                "type": "string"
              }
            },
            "required": [
              "message"
            ],
            "type": "object"
          },
          "Result": {
            "description": "A Result object specifies the nodes and edges in the knowledge graph that satisfy the structure or conditions of a user-submitted query graph. It must contain a NodeBindings object (list of query graph node to knowledge graph node mappings) and an EdgeBindings object (list of query graph edge to knowledge graph edge mappings).",
            "properties": {
              "edge_bindings": {
                "additionalProperties": {
                  "items": {
                    "$ref": "#/components/schemas/EdgeBinding"
                  },
                  "type": "array"
                },
                "description": "List of QEdge-KEdge bindings.",
                "type": "object"
              },
              "node_bindings": {
                "additionalProperties": {
                  "items": {
                    "$ref": "#/components/schemas/NodeBinding"
                  },
                  "type": "array"
                },
                "description": "List of QNode-KNode bindings.",
                "type": "object"
              }
            },
            "required": [
              "node_bindings",
              "edge_bindings"
            ],
            "type": "object"
          }
        },
        "securitySchemes": {},
        "x-bte-kgs-response-mappings": {
          "chi_square": {
            "biolink:OMOP": "results.concept_id_2",
            "biolink:chi_squared_statistic": "results.chi_square",
            "biolink:has_count": "results.n_c1_c2",
            "biolink:name": "results.concept_2_name",
            "biolink:p_value": "results.adj_p-value"
          },
          "obs_exp_ratio": {
            "biolink:OMOP": "results.concept_id_2",
            "biolink:has_count": "results.observed_count",
            "biolink:name": "results.concept_2_name"
          },
          "relative_frequency": {
            "biolink:OMOP": "results.concept_id_2",
            "biolink:has_count": "results.concept_pair_count",
            "biolink:has_quotient": "results.relative_frequency",
            "biolink:has_total": "results.concept_2_count",
            "biolink:name": "results.concept_2_name"
          }
        }
      },
      "info": {
        "contact": {
          "email": "ct2865@cumc.columbia.edu",
          "name": "Casey Ta",
          "url": "http://chunhualab.org/",
          "x-role": "responsible developer"
        },
        "description": "The Columbia Open Health Data (COHD) for COVID-19 Research API provides access to counts and frequencies (i.e., EHR visit prevalence) of conditions, procedures, drug exposures, and the co-occurrence frequencies between them for a cohort of hospitalized COVID-19 patients and two comparator cohorts of hospitalized influenza patients and hospitalized patients. Count and frequency data were derived from the [Columbia University Medical Center's](http://www.cumc.columbia.edu/) [OHDSI](https://www.ohdsi.org/) database including inpatient. Counts are the number of inpatient visits associated with the concept, e.g., diagnosed with a condition, exposed to a drug, or a procedure was performed. Frequencies are the number of unique visits associated with the concept divided by the total number of visits in the dataset, i.e., prevalence in the electronic health records. To protect patient privacy, all concepts and pairs of concepts where the count <= 10 were excluded, and counts were randomized by the Poisson distribution.         \n\nDatasets from three primary cohorts are available: \n1) COVID-19: Hospitalized patients aged 18 or older with a COVID-19 related condition diagnosis and/or a confirmed positive COVID-19 test during their hospitalization period or within the prior 21 days. Date range: March 1, 2020 to September 1, 2020. This cohort is also further stratified by sex (male and female) and age (adult: 18-64, senior: 65+).\n2) General inpatient: All hospitalized patients aged 18 or older. Date range: January 1, 2014 to December 31, 2019.\n3) Influenza: Hospitalized patients aged 18 or older who had at least one occurrence of influenza conditions or pre-coordinated positive measurements or positive influenza testing in the prior 21 days or during their hospitalization period. Date range: January 1, 2014 to December 31, 2019.\n\nBoth hierarchical and non-hierarchical datasets are available for each cohort. In the hierarchical datasets, the counts for each concept include the visits from all descendant concepts. For example, the count for ibuprofen (ID 1177480) includes visits with Ibuprofen 600 MG Oral Tablet (ID 19019073), Ibuprofen 400 MG Oral Tablet (ID 19019072), Ibuprofen 20 MG/ML Oral Suspension (ID 19019050), etc. \n\nClinical concepts (e.g., conditions, procedures, drugs) are coded by their standard concept ID in the [OMOP Common Data Model](https://github.com/OHDSI/CommonDataModel/wiki). API methods are provided to map to/from other vocabularies supported in OMOP and other ontologies using the EMBL-EBI Ontology Xref Service (OxO). \n\n\nThe following resources are available through this API: \n\n\n1. Metadata: Metadata on the COHD database, including dataset descriptions, number of concepts, etc. \n\n\n2. OMOP: Access to the common vocabulary for name and concept identifier mapping\n\n\n3. Clinical Frequencies: Access to the counts and frequencies of conditions, procedures, and drug exposures, and the associations between them. Frequency was determined as the number of visits with the code(s) / total number of visits. \n\n\n4. Concept Associations: Inferred associations between concepts using chi-square analysis, ratio between observed to expected frequency, and relative frequency. \n\n\nA [Python notebook](https://github.com/WengLab-InformaticsResearch/cohd_api/blob/master/notebooks/COHD_API_Example.ipynb) demonstrates simple examples of how to use the COHD API.\n\n\nCOHD was developed at the [Columbia University Department of Biomedical Informatics](https://www.dbmi.columbia.edu/) as a collaboration between the [Weng Lab](http://people.dbmi.columbia.edu/~chw7007/), [Tatonetti Lab](http://tatonettilab.org/), and the [NCATS Biomedical Data Translator](https://ncats.nih.gov/translator) program (TReK Team). This work was supported in part by grants: NCATS 1OT2TR003434, NLM R01LM012895, NCATS OT3TR002027, NLM R01LM009886-08A1, and NIGMS R01GM107145.\n\nThe following external resources may be useful:  \n[OHDSI](https://www.ohdsi.org/)  \n[OMOP Common Data Model](https://github.com/OHDSI/CommonDataModel/wiki)  \n[Athena](http://athena.ohdsi.org) (OMOP vocabularies, search, concept relationships, concept hierarchy)  \n[Atlas](http://www.ohdsi.org/web/atlas/) (OMOP vocabularies, search, concept relationships, concept hierarchy, concept sets)   \n[NCATS Biomedical Data Translator](https://sites.google.com/ncats.nih.gov/translator-io/home)   \n",
        "license": {
          "name": "Apache 2.0",
          "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "termsOfService": "http://cohd.io/terms/",
        "title": "Columbia Open Health Data (COHD) for COVID-19 Research",
        "version": "3.0.0",
        "x-accessRestriction": "none",
        "x-implementationLanguage": "Python",
        "x-translator": {
          "component": "KP",
          "team": [
            "Clinical Data Provider"
          ]
        }
      },
      "openapi": "3.0.0",
      "paths": [
        {
          "path": "/metadata/datasets",
          "pathitem": {
            "get": {
              "description": "Returns a list of datasets, including dataset ID, name, and description.",
              "operationId": "datasets",
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "dataset_description": {
                                  "example": "Hospitalized patients with a COVID-19 condition and/or positive lab test (non-hierarchical)",
                                  "type": "string"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "dataset_name": {
                                  "example": "COVID Cohort (non-hierarchical)",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of dataset descriptions."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Enumerates the datasets available in COHD",
              "tags": [
                "Metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/domainCounts",
          "pathitem": {
            "get": {
              "description": "Returns a list of domains and the number of concepts in each domain.",
              "operationId": "domainCounts",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "count": {
                                  "example": 1000,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of domain counts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "The number of concepts in each domain",
              "tags": [
                "Metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/domainPairCounts",
          "pathitem": {
            "get": {
              "description": "Returns a list of pairs of domains and the number of pairs of concepts in each.",
              "operationId": "domainPairCounts",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "count": {
                                  "example": 1000,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "domain_id_1": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "domain_id_2": {
                                  "example": "Drug",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of domain pair counts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "The number of pairs of concepts in each pair of domains",
              "tags": [
                "Metadata"
              ]
            }
          }
        },
        {
          "path": "/metadata/visitCount",
          "pathitem": {
            "get": {
              "description": "Returns the number of visits in the dataset.",
              "operationId": "visitCount",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "count": {
                                  "example": 100000,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of visit counts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "The number of visits in the dataset",
              "tags": [
                "Metadata"
              ]
            }
          }
        },
        {
          "path": "/omop/concepts",
          "pathitem": {
            "get": {
              "description": "Returns the OMOP concept names and domains for the given list of concept IDs.",
              "operationId": "concepts",
              "parameters": [
                {
                  "description": "A comma separated list of OMOP concept ids, e.g., \"192855\" or \"192855,2008271\"",
                  "example": "192855,2008271",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_class_id": {
                                  "example": "Clinical Finding",
                                  "type": "string"
                                },
                                "concept_code": {
                                  "example": "92546004",
                                  "type": "string"
                                },
                                "concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Cancer in situ of urinary bladder",
                                  "type": "string"
                                },
                                "domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Concept definitions from concept ID",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/findConceptIDs",
          "pathitem": {
            "get": {
              "description": "Searches the OMOP concept table for concept names similar to the query. Returns a list of concepts, including their names and IDs, sorted in decreasing order by the concept's prevalence. ",
              "operationId": "findConceptIDs",
              "parameters": [
                {
                  "description": "The name of the concept to search for, e.g., \"cancer\" or \"ibuprofen\"",
                  "example": "cancer",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The dataset to reference when sorting concepts by their frequency. Default: 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "The domain (e.g., \"Condition\", \"Drug\", \"Procedure\") to restrict the search to. If not specified, the search will be unrestricted. See /metadata/domainCounts for a list of valid domain IDs.",
                  "example": "Condition",
                  "in": "query",
                  "name": "domain",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The minimum concept count (inclusive) to include a concept in the search results. Setting the min_count to 0 will cause findConceptIDs to return all matching standard OMOP concepts (this can be slow). Setting the min_count to 1 will cause findConceptIDs to only return concepts with count data (much faster). Default: 1.",
                  "example": 1,
                  "in": "query",
                  "name": "min_count",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_class_id": {
                                  "example": "Clinical Finding",
                                  "type": "string"
                                },
                                "concept_code": {
                                  "example": "92546004",
                                  "type": "string"
                                },
                                "concept_count": {
                                  "example": 368,
                                  "type": "integer"
                                },
                                "concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Cancer in situ of urinary bladder",
                                  "type": "string"
                                },
                                "domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Search for OMOP concepts by name and domain",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/conceptAncestors",
          "pathitem": {
            "get": {
              "description": "Retrieves the given concept's hierarchical ancestors and their counts. The hierarchical definitions were derived from the OMOP concept_ancestor table. For more information, see the documentation on OMOP's concept_ancestor table on [ohdsi.org](http://www.ohdsi.org/web/wiki/doku.php?id=documentation:cdm:concept_ancestor) and [GitHub](https://github.com/OHDSI/CommonDataModel/wiki/CONCEPT_ANCESTOR).",
              "operationId": "conceptAncestors",
              "parameters": [
                {
                  "description": "An OMOP concept ID, e.g., 19019073",
                  "example": 19019073,
                  "in": "query",
                  "name": "concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "The vocabulary_id to restrict ancestors to. For conditions, SNOMED and MedDRA are used. For drugs, RxNorm (only and ATC are used. For procedures, SNOMED, MedDRA, and ICD10PCS are used. Default: unrestricted",
                  "example": "RxNorm",
                  "in": "query",
                  "name": "vocabulary_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The concept_class_id to restrict ancestors to. Only certain hierarchical concept_class_ids are used in each vocabuarly: [ATC](https://en.wikipedia.org/wiki/Anatomical_Therapeutic_Chemical_Classification_System) {ATC 1st, ATC 2nd, ATC 3rd, ATC 4th, ATC 5th}; [MedDRA](https://en.wikipedia.org/wiki/MedDRA) {PT, HLT, HLGT, SOC}; [RxNorm](https://www.nlm.nih.gov/research/umls/rxnorm/docs/2015/appendix5.html) {Ingredient, Clinical Drug Form, Clinical Drug Comp, Clinical Drug}. Default: unrestricted",
                  "example": "Ingredient",
                  "in": "query",
                  "name": "concept_class_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The dataset_id to retrieve counts from. Default: 3 (5-year hierarchical data set)",
                  "example": 3,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "ancestor_concept_id": {
                                  "example": 1177480,
                                  "type": "integer"
                                },
                                "concept_class_id": {
                                  "example": "Ingredient",
                                  "type": "string"
                                },
                                "concept_code": {
                                  "example": "5640",
                                  "type": "string"
                                },
                                "concept_count": {
                                  "example": 233514,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Ibuprofen",
                                  "type": "string"
                                },
                                "domain_id": {
                                  "example": "Drug",
                                  "type": "string"
                                },
                                "max_levels_of_separation": {
                                  "example": 2,
                                  "type": "integer"
                                },
                                "min_levels_of_separation": {
                                  "example": 2,
                                  "type": "integer"
                                },
                                "standard_concept": {
                                  "example": "S",
                                  "type": "string"
                                },
                                "vocabulary_id": {
                                  "example": "RxNorm",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Retrieve the concept's hierarchical ancestors",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/conceptDescendants",
          "pathitem": {
            "get": {
              "description": "Retrieves the given concept's hierarchical descendants and their counts. The hierarchical definitions were derived from the OMOP concept_ancestor table. See the documentation on OMOP's concept_ancestor table on [ohdsi.org](http://www.ohdsi.org/web/wiki/doku.php?id=documentation:cdm:concept_ancestor) and [GitHub](https://github.com/OHDSI/CommonDataModel/wiki/CONCEPT_ANCESTOR).",
              "operationId": "conceptDescendants",
              "parameters": [
                {
                  "description": "An OMOP concept ID, e.g., 313217",
                  "example": 313217,
                  "in": "query",
                  "name": "concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "The vocabulary_id to restrict ancestors to. For conditions, SNOMED and MedDRA are used. For drugs, RxNorm and ATC are used. For procedures, SNOMED, MedDRA, and ICD10PCS are used. Default: unrestricted",
                  "example": null,
                  "in": "query",
                  "name": "vocabulary_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The concept_class_id to restrict ancestors to. Only certain hierarchical concept_class_ids are used in each vocabuarly: [ATC](https://en.wikipedia.org/wiki/Anatomical_Therapeutic_Chemical_Classification_System) {ATC 1st, ATC 2nd, ATC 3rd, ATC 4th, ATC 5th}; [MedDRA](https://en.wikipedia.org/wiki/MedDRA) {PT, HLT, HLGT, SOC}; [RxNorm](https://www.nlm.nih.gov/research/umls/rxnorm/docs/2015/appendix5.html) {Ingredient, Clinical Drug Form, Clinical Drug Comp, Clinical Drug}. Default: unrestricted",
                  "example": null,
                  "in": "query",
                  "name": "concept_class_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The dataset_id to retrieve counts from. Default: 3 (5-year hierarchical data set)",
                  "example": 3,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_class_id": {
                                  "example": "Clinical Finding",
                                  "type": "string"
                                },
                                "concept_code": {
                                  "example": "49436004",
                                  "type": "string"
                                },
                                "concept_count": {
                                  "example": 53272,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Atrial fibrillation",
                                  "type": "string"
                                },
                                "descendant_concept_id": {
                                  "example": 313217,
                                  "type": "integer"
                                },
                                "domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "max_levels_of_separation": {
                                  "example": 0,
                                  "type": "integer"
                                },
                                "min_levels_of_separation": {
                                  "example": 0,
                                  "type": "integer"
                                },
                                "standard_concept": {
                                  "example": "S",
                                  "type": "string"
                                },
                                "vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Retrieve the concept's hierarchical descendants",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/mapToStandardConceptID",
          "pathitem": {
            "get": {
              "description": "Uses the OMOP concept_relationship table to map from a non-standard concept code (e.g., ICD9CM 715.3) to a standard OMOP concept ID (e.g., 72990). This method may return multiple results if vocabulary_id is not specified and the concept_code is not unique across vocabularies. If both concept_code and vocabulary_id are specified, then 1 result will be returned at most. ",
              "operationId": "mapToStandardConceptID",
              "parameters": [
                {
                  "description": "The concept code to map from, e.g., 715.3",
                  "example": "715.3",
                  "in": "query",
                  "name": "concept_code",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The vocabulary (e.g., \"ICD9CM\") that the concept code belongs to. If this parameter is not specified, the method will return mappings from any source vocabulary with matching concept code. See /omop/vocabularies for the list of supported vocabularies.",
                  "example": "ICD9CM",
                  "in": "query",
                  "name": "vocabulary_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "source_concept_code": {
                                  "example": "715.3",
                                  "type": "string"
                                },
                                "source_concept_id": {
                                  "example": 44834979,
                                  "type": "integer"
                                },
                                "source_concept_name": {
                                  "example": "Osteoarthrosis, localized, not specified whether primary or secondary",
                                  "type": "string"
                                },
                                "source_vocabulary_id": {
                                  "example": "ICD9CM",
                                  "type": "string"
                                },
                                "standard_concept_id": {
                                  "example": 72990,
                                  "type": "integer"
                                },
                                "standard_concept_name": {
                                  "example": "Localized osteoarthrosis uncertain if primary OR secondary",
                                  "type": "string"
                                },
                                "standard_domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Map from a non-standard concept code to a standard OMOP concept ID",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/mapFromStandardConceptID",
          "pathitem": {
            "get": {
              "description": "Uses the OMOP concept_relationship table to map from a standard concept ID (e.g., 72990) to concept code(s) (e.g., ICD9CM 715.3, 715.31, 715.32, etc.). An OMOP standard concept ID may map to many concepts in the external vocabulary.",
              "operationId": "mapFromStandardConceptID",
              "parameters": [
                {
                  "description": "The standard OMOP concept id to map from, e.g., 72990",
                  "example": 72990,
                  "in": "query",
                  "name": "concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "The vocabulary (e.g., \"ICD9CM\") to map to. If this parameter is not specified, the method will return mappings to any matching vocabularies. See /omop/vocabularies for the list of supported vocabularies.",
                  "example": "ICD9CM",
                  "in": "query",
                  "name": "vocabulary_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_class_id": {
                                  "example": "4-dig nonbill code",
                                  "type": "string"
                                },
                                "concept_code": {
                                  "example": "715.3",
                                  "type": "string"
                                },
                                "concept_id": {
                                  "example": 44834979,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Osteoarthrosis, localized, not specified whether primary or secondary",
                                  "type": "string"
                                },
                                "domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "standard_concept": {
                                  "example": null,
                                  "type": "string"
                                },
                                "vocabulary_id": {
                                  "example": "ICD9CM",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Map from a standard concept ID to concept code(s) in an external vocabulary",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/vocabularies",
          "pathitem": {
            "get": {
              "description": "List of vocabulary_ids. Useful if you need to use /omop/mapToStandardConceptID to map a concept code from a source vocabulary to the OMOP standard vocabulary.",
              "operationId": "vocabularies",
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of vocabularies."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "List of vocabularies",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/xrefToOMOP",
          "pathitem": {
            "get": {
              "description": "Attempts to map a concept from an external ontology to an OMOP standard concept ID using the EMBL-EBI Ontology Xref Service (OxO): https://www.ebi.ac.uk/spot/oxo/index. This method attempts to use OxO to map from the original ontology to an intermediate ontology that is included in OMOP (ICD9CM, ICD10CM, SNOMEDCT, and MeSH), then uses the OMOP mappings to the standard concepts. Multiple mappings may be returned. Results are sorted by total_distance (OxO distance + OMOP distance) in ascending order.",
              "operationId": "xrefToOMOP",
              "parameters": [
                {
                  "description": "Compact URI (CURIE) of the concept to map, e.g., DOID:8398",
                  "example": "DOID:8398",
                  "in": "query",
                  "name": "curie",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Mapping distance for OxO. Note: this is the distance used in the OxO API to map from the original concept to an ICD9CM, ICD10CM, SNOMEDCT, or MeSH concept. One additional step may be taken by the COHD API to map to the OMOP standard concept. Default: 2.",
                  "example": 2,
                  "in": "query",
                  "name": "distance",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "COHD can either call the OxO API or use the local implementation of OxO. The full call to the OxO API will have the most updated mappings and term definitions, but is slower. The local implementation of OxO is faster but may contain outdated mappings and term definitions. If the parameter is false, COHD will call the full OxO API. If the parameter is true, COHD will use the local implementation.  Default: false.",
                  "example": false,
                  "in": "query",
                  "name": "local",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "description": "By default (false), COHD returns all mappings found. If true, COHD will recommend a mapping based on path distances. Default: false.",
                  "example": false,
                  "in": "query",
                  "name": "recommend",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "intermediate_oxo_id": {
                                  "example": "ICD9CM:715.3",
                                  "type": "string"
                                },
                                "intermediate_oxo_label": {
                                  "example": "",
                                  "type": "string"
                                },
                                "omop_concept_name": {
                                  "example": "Localized osteoarthrosis uncertain if primary OR secondary",
                                  "type": "string"
                                },
                                "omop_distance": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "omop_domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "omop_standard_concept_id": {
                                  "example": 72990,
                                  "type": "integer"
                                },
                                "oxo_distance": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "source_oxo_id": {
                                  "example": "DOID:8398",
                                  "type": "string"
                                },
                                "source_oxo_label": {
                                  "example": "osteoarthritis",
                                  "type": "string"
                                },
                                "total_distance": {
                                  "example": 2,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of mappings from external concepts to OMOP concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Cross-reference from an ontology to OMOP standard concepts using the Ontology Xref Service",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/omop/xrefFromOMOP",
          "pathitem": {
            "get": {
              "description": "Attempts to map a concept from an external ontology to an OMOP standard concept ID using the EMBL-EBI Ontology Xref Service (OxO): https://www.ebi.ac.uk/spot/oxo/index. This method maps from the OMOP standard concept to an intermediate vocabulary included is OxO (ICD9CM, ICD10CM, SNOMEDCT, and MeSH), then uses the OxO API to map to other ontologies. Multiple mappings may be returned. Results are sorted by total_distance (OxO distance + OMOP distance) in ascending order.",
              "operationId": "xrefFromOMOP",
              "parameters": [
                {
                  "description": "OMOP standard concept_id to map, e.g., 192855",
                  "example": 192855,
                  "in": "query",
                  "name": "concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "Target ontologies for OxO. Comma separated target prefixes, e.g., \"DOID,UMLS\"",
                  "example": "UMLS",
                  "in": "query",
                  "name": "mapping_targets",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "Mapping distance for OxO. Note: this is the distance used in the OxO API to map from an ICD9CM, ICD10CM, SNOMEDCT, or MeSH concept to the desired ontology. One additional step may be taken by the COHD API to map to the OMOP standard concept to ICD9CM, ICD10CM, SNOMEDCT, or MeSH. Default: 2.",
                  "example": 2,
                  "in": "query",
                  "name": "distance",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "COHD can either call the OxO API or use the local implementation of OxO. The full call to the OxO API will have the most updated mappings and term definitions, but is slower. The local implementation of OxO is faster but may contain outdated mappings and term definitions. If the parameter is false, COHD will call the full OxO API. If the parameter is true, COHD will use the local implementation.  Default: false.",
                  "example": false,
                  "in": "query",
                  "name": "local",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                },
                {
                  "description": "By default (false), COHD returns all mappings found. If true, COHD will recommend a mapping for each target based on path distances. Default: false.",
                  "example": false,
                  "in": "query",
                  "name": "recommend",
                  "required": false,
                  "schema": {
                    "type": "boolean"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "intermediate_omop_concept_code": {
                                  "example": "92546004",
                                  "type": "string"
                                },
                                "intermediate_omop_concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "intermediate_omop_concept_name": {
                                  "example": "Cancer in situ of urinary bladder",
                                  "type": "string"
                                },
                                "intermediate_omop_vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                },
                                "intermediate_oxo_curie": {
                                  "example": "SNOMEDCT:92546004",
                                  "type": "string"
                                },
                                "intermediate_oxo_label": {
                                  "example": "Cancer in situ of urinary bladder",
                                  "type": "string"
                                },
                                "omop_distance": {
                                  "example": 0,
                                  "type": "integer"
                                },
                                "oxo_distance": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "source_omop_concept_code": {
                                  "example": "92546004",
                                  "type": "string"
                                },
                                "source_omop_concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "source_omop_concept_name": {
                                  "example": "Cancer in situ of urinary bladder",
                                  "type": "string"
                                },
                                "source_omop_vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                },
                                "target_curie": {
                                  "example": "UMLS:C0154091",
                                  "type": "string"
                                },
                                "target_label": {
                                  "example": "Cancer in situ of urinary bladder",
                                  "type": "string"
                                },
                                "total_distance": {
                                  "example": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of mappings from OMOP concepts to external concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Cross-reference from an ontology to OMOP standard concepts using the Ontology Xref Service",
              "tags": [
                "OMOP"
              ]
            }
          }
        },
        {
          "path": "/frequencies/singleConceptFreq",
          "pathitem": {
            "get": {
              "description": "Retrieves observed clinical frequencies of individual concepts. Multiple concepts may be requested in a comma separated list.",
              "operationId": "singleConceptFreq",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "A comma separated list of OMOP concept ids, e.g., \"192855\" or \"192855,2008271\"",
                  "example": "192855",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_count": {
                                  "example": 368,
                                  "type": "integer"
                                },
                                "concept_frequency": {
                                  "example": 0.0002055371025188907,
                                  "type": "integer"
                                },
                                "concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of single concept frequencies."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Clinical frequency of individual concepts",
              "tags": [
                "Clinical Frequencies"
              ]
            }
          }
        },
        {
          "path": "/frequencies/pairedConceptFreq",
          "pathitem": {
            "get": {
              "description": "Retrieves observed clinical frequencies of a pair of concepts.",
              "operationId": "pairedConceptFreq",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "A comma pair of OMOP concept ids, e.g., \"192855,2008271\"",
                  "example": "192855,2008271",
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_count": {
                                  "example": 10,
                                  "type": "integer"
                                },
                                "concept_frequency": {
                                  "example": 5.585247351056813e-06,
                                  "type": "integer"
                                },
                                "concept_id_1": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "concept_id_2": {
                                  "example": 2008271,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of paired concept frequencies."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Clinical frequency of a pair of concepts",
              "tags": [
                "Clinical Frequencies"
              ]
            }
          }
        },
        {
          "path": "/frequencies/associatedConceptFreq",
          "pathitem": {
            "get": {
              "description": "Retrieves observed clinical frequencies of all pairs of concepts given a concept id. Results are returned in descending order of paired concept count. Note that the largest paired concept counts are often dominated by associated concepts with high prevalence.",
              "operationId": "associatedConceptFreq",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"192855\"",
                  "example": 192855,
                  "in": "query",
                  "name": "q",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "associated_concept_id": {
                                  "example": 19041324,
                                  "type": "integer"
                                },
                                "associated_concept_name": {
                                  "example": "Acetaminophen 325 MG Oral Tablet [Tylenol]",
                                  "type": "string"
                                },
                                "associated_domain_id": {
                                  "example": "Drug",
                                  "type": "string"
                                },
                                "concept_count": {
                                  "example": 277,
                                  "type": "integer"
                                },
                                "concept_frequency": {
                                  "example": 0.0001547113516242737,
                                  "type": "integer"
                                },
                                "concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of associated concept frequencies."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Clinical frequencies of all pairs of concepts given a concept id",
              "tags": [
                "Clinical Frequencies"
              ]
            }
          }
        },
        {
          "path": "/frequencies/associatedConceptDomainFreq",
          "pathitem": {
            "get": {
              "description": "Retrieves observed clinical frequencies of all pairs of concepts given a concept id restricted by domain of the associated concept_id.  Results are returned in descending order of paired concept count. Note that the largest paired concept counts are often dominated by associated concepts with high prevalence.",
              "operationId": "associatedConceptDomainFreq",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"192855\"",
                  "example": 192855,
                  "in": "query",
                  "name": "concept_id",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP domain id, e.g., \"Condition\", \"Drug\", \"Procedure\", etc. See /metadata/domainCounts for a list of valid domain IDs.",
                  "example": "Procedure",
                  "in": "query",
                  "name": "domain",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "associated_concept_id": {
                                  "example": 2211361,
                                  "type": "integer"
                                },
                                "associated_concept_name": {
                                  "example": "Radiologic examination, chest, 2 views, frontal and lateral",
                                  "type": "string"
                                },
                                "associated_domain_id": {
                                  "example": "Procedure",
                                  "type": "string"
                                },
                                "concept_count": {
                                  "example": 257,
                                  "type": "integer"
                                },
                                "concept_frequency": {
                                  "example": 0.00014354085692216007,
                                  "type": "integer"
                                },
                                "concept_id": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of associated concept frequencies."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Clinical frequencies of all pairs of concepts given a concept id",
              "tags": [
                "Clinical Frequencies"
              ]
            }
          }
        },
        {
          "path": "/frequencies/mostFrequentConcepts",
          "pathitem": {
            "get": {
              "description": "Retrieves the most frequent concepts.",
              "operationId": "mostFrequentConcepts",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "(Optional) The number of concepts to retreieve, e.g., 100. 0 or unspecified will return all matching concepts.",
                  "example": 100,
                  "in": "query",
                  "name": "q",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "(Optional) The domain_id to restrict to, e.g., \"Condition\", \"Drug\", \"Procedure\". See /metadata/domainCounts for a list of valid domain IDs.",
                  "example": "Condition",
                  "in": "query",
                  "name": "domain",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "(Optional) The vocabulary_id(s) to restrict to, e.g., \"SNOMED\", \"MedDRA\", \"RxNorm\", \"ATC\" etc. Comma separated to include multiple vocabularies, e.g., \"SNOMED,MedDRA\". Default: unrestricted",
                  "example": null,
                  "in": "query",
                  "name": "vocabulary_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "(Optional) The concept_class_id(s) to restrict to. concept_class_ids are specific to each vocabulary, e.g.,: [ATC](https://en.wikipedia.org/wiki/Anatomical_Therapeutic_Chemical_Classification_System) {ATC 1st, ATC 2nd, ATC 3rd, ATC 4th, ATC 5th}; [MedDRA](https://en.wikipedia.org/wiki/MedDRA) {PT, HLT, HLGT, SOC}; [RxNorm](https://www.nlm.nih.gov/research/umls/rxnorm/docs/2015/appendix5.html) {Ingredient, Clinical Drug Form, Clinical Drug Comp, Clinical Drug}. Comma separated to include multiple concept_class_ids, e.g., \"PT,HLT\". Default: unrestricted",
                  "example": null,
                  "in": "query",
                  "name": "concept_class_id",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_class_id": {
                                  "example": "Clinical Finding",
                                  "type": "string"
                                },
                                "concept_count": {
                                  "example": 233790,
                                  "type": "integer"
                                },
                                "concept_frequency": {
                                  "example": 0.1305774978203572,
                                  "type": "integer"
                                },
                                "concept_id": {
                                  "example": 320128,
                                  "type": "integer"
                                },
                                "concept_name": {
                                  "example": "Essential hypertension",
                                  "type": "string"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "domain_id": {
                                  "example": "Condition",
                                  "type": "string"
                                },
                                "vocabulary_id": {
                                  "example": "SNOMED",
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of most frequent concepts."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Most frequent concepts [by domain]",
              "tags": [
                "Clinical Frequencies"
              ]
            }
          }
        },
        {
          "path": "/association/chiSquare",
          "pathitem": {
            "get": {
              "description": "Returns the chi-square statistic and p-value between pairs of concepts. Results are returned in descending order of the chi-square statistic. Note that due to large sample sizes, the chi-square can become very large. \n\nThe expected frequencies for the chi-square analysis are calculated based on the single concept frequencies and assuming independence between concepts. P-value is calculated with 1 DOF. \n\nThis method has overloaded behavior based on the specified parameters:\n\n1) concept_id_1 and concept_id_2: Result for the pair (concept_id_1, concept_id_2)\n2) concept_id_1: Results for all pairs of concepts that include concept_id_1\n3) concept_id_1 and domain: Results for all pairs of concepts including concept_id_1 and where concept_id_2 belongs to the specified domain\n",
              "operationId": "chiSquare",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"192855\"",
                  "example": 192855,
                  "in": "query",
                  "name": "concept_id_1",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"2008271\". If this parameter is specified, then the chi-square between concept_id_1 and concept_id_2 is returned. If this parameter is not specified, then a list of chi-squared results between concept_id_1 and other concepts is returned.",
                  "example": 2008271,
                  "in": "query",
                  "name": "concept_id_2",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP domain id, e.g., \"Condition\", \"Drug\", \"Procedure\", etc., to restrict the associated concept (concept_id_2) to. If this parameter is not specified, then the domain is unrestricted. See /metadata/domainCounts for a list of valid domain IDs.",
                  "example": "Procedure",
                  "in": "query",
                  "name": "domain",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "adj_p-value": {
                                  "description": "Bonferonni adjusted p-value, adjusted with the total number of pairs of concepts in the dataset.",
                                  "example": 0.0314,
                                  "type": "number"
                                },
                                "chi_square": {
                                  "example": 370026.1780081638,
                                  "type": "integer"
                                },
                                "concept_2_domain": {
                                  "example": "Procedure",
                                  "type": "string"
                                },
                                "concept_2_name": {
                                  "example": "Instillation of therapeutic substance into bladder",
                                  "type": "string"
                                },
                                "concept_id_1": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "concept_id_2": {
                                  "example": 4021588,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 3,
                                  "type": "integer"
                                },
                                "p-value": {
                                  "example": 0.0314,
                                  "type": "number"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of concept pairs and chi-squared values."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Chi-square analysis on pairs of concepts",
              "tags": [
                "Concept Associations"
              ],
              "x-bte-kgs-operations": [
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "dataset_id": 3,
                    "domain": "Condition"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/chi_square"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "dataset_id": 3,
                    "domain": "Drug"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/chi_square"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "dataset_id": 3,
                    "domain": "Condition"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/chi_square"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "dataset_id": 3,
                    "domain": "Drug"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/chi_square"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                }
              ]
            }
          }
        },
        {
          "path": "/association/obsExpRatio",
          "pathitem": {
            "get": {
              "description": "Returns the natural logarithm of the ratio between the observed count and expected count. Expected count is calculated from the single concept frequencies and assuming independence between the concepts. Results are returned in descending order of ln_ratio.\n\nexpected_count = Count_1_and_2 * num_visits / (Count_1 * Count_2)\n\nln_ratio = ln(expected_count)\n\nThis method has overloaded behavior based on the specified parameters:\n\n1) concept_id_1 and concept_id_2: Results for the pair (concept_id_1, concept_id_2)\n2) concept_id_1: Results for all pairs of concepts that include concept_id_1\n3) concept_id_1 and domain: Results for all pairs of concepts including concept_id_1 and where concept_id_2 belongs to the specified domain\n",
              "operationId": "obsExpRatio",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"192855\"",
                  "example": 192855,
                  "in": "query",
                  "name": "concept_id_1",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"2008271\". If concept_id_2 is unspecified, then this method will return all pairs of concepts with concept_id_1.",
                  "example": 2008271,
                  "in": "query",
                  "name": "concept_id_2",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP domain id, e.g., \"Condition\", \"Drug\", \"Procedure\", etc., to restrict the associated concept (concept_id_2) to. If this parameter is not specified, then the domain is unrestricted. See /metadata/domainCounts for a list of valid domain IDs.",
                  "example": "Procedure",
                  "in": "query",
                  "name": "domain",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The confidence level used for calculating confidence intervals (default 0.99).",
                  "example": 0.99,
                  "in": "query",
                  "name": "confidence",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_2_domain": {
                                  "example": "Procedure",
                                  "type": "string"
                                },
                                "concept_2_name": {
                                  "example": "Closed [transurethral] biopsy of bladder",
                                  "type": "string"
                                },
                                "concept_id_1": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "concept_id_2": {
                                  "example": 2003784,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "expected_count": {
                                  "example": 0.060838982345591645,
                                  "type": "integer"
                                },
                                "ln_ratio": {
                                  "example": 7.561698473261244,
                                  "type": "integer"
                                },
                                "observed_count": {
                                  "example": 117,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of paired concepts and observed-expected frequency ratio."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Observed Count / Expected Count",
              "tags": [
                "Concept Associations"
              ],
              "x-bte-kgs-operations": [
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "confidence": 0.99,
                    "dataset_id": 3,
                    "domain": "Condition"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/obs_exp_ratio"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "confidence": 0.99,
                    "dataset_id": 3,
                    "domain": "Drug"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/obs_exp_ratio"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "confidence": 0.99,
                    "dataset_id": 3,
                    "domain": "Condition"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/obs_exp_ratio"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "confidence": 0.99,
                    "dataset_id": 3,
                    "domain": "Drug"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/obs_exp_ratio"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                }
              ]
            }
          }
        },
        {
          "path": "/association/relativeFrequency",
          "pathitem": {
            "get": {
              "description": "Calculates the relative frequency (i.e., conditional probability) between pairs of concepts. Results are returned in descending order of relative frequency. Note that due to the randomization of the counts, the calculated relative frequencies can exceed the limit of 1.0.\n\nRelative Frequency = Count_1_and_2 / Count_2\n\nThis method has overloaded behavior based on the specified parameters:\n\n1) concept_id_1 and concept_id_2: Result for the pair (concept_id_1, concept_id_2)\n2) concept_id_1: Results for all pairs of concepts that include concept_id_1\n3) concept_id_1 and domain: Results for all pairs of concepts including concept_id_1 and where concept_id_2 belongs to the specified domain\n",
              "operationId": "relativeFrequency",
              "parameters": [
                {
                  "description": "The dataset_id of the dataset to query. Default dataset is the 5-year dataset.",
                  "example": 1,
                  "in": "query",
                  "name": "dataset_id",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"192855\"",
                  "example": 192855,
                  "in": "query",
                  "name": "concept_id_1",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP concept id, e.g., \"2008271\". If concept_id_2 is unspecified, then this method will return all pairs of concepts with concept_id_1.",
                  "example": 2008271,
                  "in": "query",
                  "name": "concept_id_2",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "description": "An OMOP domain id, e.g., \"Condition\", \"Drug\", \"Procedure\", etc., to restrict concept_id_2 (the base concept) to. If this parameter is not specified, then the domain is unrestricted. See /metadata/domainCounts for a list of valid domain IDs.",
                  "example": "Procedure",
                  "in": "query",
                  "name": "domain",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The confidence level used for calculating confidence intervals (default 0.99).",
                  "example": 0.99,
                  "in": "query",
                  "name": "confidence",
                  "required": false,
                  "schema": {
                    "type": "number"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "results": {
                            "items": {
                              "properties": {
                                "concept_2_count": {
                                  "example": 82,
                                  "type": "integer"
                                },
                                "concept_2_domain": {
                                  "example": "Procedure",
                                  "type": "string"
                                },
                                "concept_2_name": {
                                  "example": "Radical cystectomy",
                                  "type": "string"
                                },
                                "concept_id_1": {
                                  "example": 192855,
                                  "type": "integer"
                                },
                                "concept_id_2": {
                                  "example": 2003805,
                                  "type": "integer"
                                },
                                "concept_pair_count": {
                                  "example": 29,
                                  "type": "integer"
                                },
                                "dataset_id": {
                                  "example": 1,
                                  "type": "integer"
                                },
                                "relative_frequency": {
                                  "example": 0.35365853658536583,
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "type": "array"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "An array of paired concepts and relative frequency."
                },
                "default": {
                  "description": "Unexpected error"
                }
              },
              "summary": "Relative frequency between pairs of concepts",
              "tags": [
                "Concept Associations"
              ],
              "x-bte-kgs-operations": [
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "dataset_id": 3,
                    "domain": "Condition"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/relative_frequency"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "dataset_id": 3,
                    "domain": "Drug"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/relative_frequency"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "dataset_id": 3,
                    "domain": "Condition"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/relative_frequency"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "parameters": {
                    "concept_id_1": "{inputs[0]}",
                    "dataset_id": 3,
                    "domain": "Drug"
                  },
                  "predicate": "biolink:correlated_with",
                  "response_mapping": {
                    "$ref": "#/components/x-bte-kgs-response-mappings/relative_frequency"
                  },
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                }
              ]
            }
          }
        },
        {
          "path": "/predicates",
          "pathitem": {
            "get": {
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "additionalProperties": {
                          "additionalProperties": {
                            "description": "Array of predicates",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "description": "Target map",
                          "type": "object"
                        },
                        "description": "Source map",
                        "example": {
                          "biolink:ChemicalSubstance": {
                            "biolink:Gene": [
                              "biolink:directly_interacts_with",
                              "biolink:decreases_activity_of"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Predicates by source and target"
                }
              },
              "summary": "Get supported relationships by source and target",
              "tags": [
                "translator",
                "reasoner"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "post": {
              "description": "Query the COHD API following the [NCATS Translator Reasoner Standard API](https://github.com/NCATSTranslator/ReasonerAPI). Only single hop queries are supported. See the example query_graph.\n    \nFor the subject node, the id must be specified (category is ignored).\n    \nFor the object node, both the id and category are optional. If id is specified for the object node, then the association between the two identified concepts is returned. If id is not specified and category is specified, the associations between the subject node and all concepts with the specified category are returned. If neither are specified, then the associations between the subject node and all concepts are returned.\nThe COHD data are natively represented using OMOP. COHD will attempt to map between Biolink and OMOP both in the input and response.\nAdditional behavior options can be controlled using the optional parameters in query_options.",
              "operationId": "query",
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": "{\n  \"message\": {\n    \"query_graph\": {\n      \"nodes\": {\n        \"n00\": {\n          \"id\": \"MONDO:0021113\",\n          \"category\": \"biolink:Disease\"\n        },\n        \"n01\": {\n          \"category\": \"biolink:Procedure\"\n        }\n      },\n      \"edges\": {\n        \"e00\": {\n          \"predicate\": \"biolink:correlated_with\",\n          \"subject\": \"n00\",\n          \"object\": \"n01\"\n        }\n      }\n    }\n  },\n  \"query_options\": {\n    \"method\": \"obsExpRatio\",\n    \"dataset_id\": 3,\n    \"confidence_interval\": 0.99,\n    \"min_cooccurrence\": 50,\n    \"threshold\": 0.5,\n    \"local_oxo\": true,\n    \"max_results\": 50,\n    \"ontology_targets\": {\n      \"biolink:Disease\": [\n        \"ICD9\",\n        \"SNOMEDCT\",\n        \"DOID\"\n      ],\n      \"biolink:Drug\": [\n        \"RxNorm\"\n      ],\n      \"biolink:Procedure\": [\n        \"ICD10PCS\",\n        \"SNOMEDCT\"\n      ],\n      \"_DEFAULT\": []\n    },\n    \"biolink_only\": true\n  }\n}",
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "Query information to be submitted",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Response"
                      }
                    }
                  },
                  "description": "OK. There may or may not be results. Note that some of the provided identifiers may not have been recognized."
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Bad request. The request is invalid according to this OpenAPI schema OR a specific identifier is believed to be invalid somehow (not just unrecognized)."
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Internal server error."
                },
                "501": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Not implemented."
                }
              },
              "summary": "Query COHD following NCATS Translator Reasoner Standard API",
              "tags": [
                "translator",
                "reasoner"
              ],
              "x-bte-kgs-operations": [
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "predicate": "biolink:correlated_with",
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "predicate": "biolink:correlated_with",
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "predicate": "biolink:correlated_with",
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "predicate": "biolink:correlated_with",
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                }
              ],
              "x-swagger-router-controller": "swagger_server.controllers.query_controller"
            }
          }
        },
        {
          "path": "/0.9.3/query",
          "pathitem": {
            "post": {
              "description": "This endpoint is temporarily provided to support TRAPI 0.9.3 queries\nQuery the COHD API following the [NCATS Translator Reasoner Standard API](https://github.com/NCATSTranslator/ReasonerAPI). Only single hop queries are supported. See the example query_graph.\nFor the source node, the curie must be specified (type is ignored).\nFor the target node, both the curie and type are optional. If curie is specified for the target node, then the association between the two identified concepts is returned. If curie is not specified and type is specified, the associations between the source node and all concepts with the specified type are returned. If neither are specified, then the associations between the source node and all concepts are returned.\nCOHD will attempt to map the CURIE to an OMOP concept and the node type to an OMOP domain.",
              "operationId": "query093",
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": "{\n  \"max_results\": 50,\n  \"message\": {\n    \"query_graph\": {\n      \"nodes\": [\n        {\n          \"id\": \"n00\",\n          \"curie\": \"MONDO:0021113\",\n          \"type\": \"biolink:Disease\"\n        },\n        {\n          \"id\": \"n01\",\n          \"type\": \"biolink:Procedure\"\n        }\n      ],\n      \"edges\": [\n        {\n          \"id\": \"e00\",\n          \"type\": \"biolink:correlated_with\",\n          \"source_id\": \"n00\",\n          \"target_id\": \"n01\"\n        }\n      ]\n    }\n  },\n  \"query_options\": {\n    \"method\": \"obsExpRatio\",\n    \"dataset_id\": 3,\n    \"confidence_interval\": 0.99,\n    \"min_cooccurrence\": 50,\n    \"threshold\": 0.5,\n    \"local_oxo\": true,\n    \"ontology_targets\": {\n      \"biolink:Disease\": [\"ICD9\", \"SNOMEDCT\", \"DOID\"],\n      \"biolink:Drug\": [\"RxNorm\"],\n      \"biolink:Procedure\": [\"ICD10PCS\", \"SNOMEDCT\"],\n      \"_DEFAULT\": []\n    },\n    \"biolink_only\": true\n  }\n}",
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "Query information to be submitted",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Message"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "description": "Invalid status value"
                }
              },
              "summary": "Query COHD following NCATS Translator Reasoner Standard API version 0.9.3",
              "tags": [
                "translator",
                "reasoner"
              ],
              "x-bte-kgs-operations": [
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "predicate": "biolink:correlated_with",
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "predicate": "biolink:correlated_with",
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Disease"
                    }
                  ],
                  "predicate": "biolink:correlated_with",
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                },
                {
                  "inputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "outputs": [
                    {
                      "id": "biolink:OMOP",
                      "semantic": "biolink:Drug"
                    }
                  ],
                  "predicate": "biolink:correlated_with",
                  "source": "Columbia Open Health Data KP",
                  "supportBatch": false
                }
              ],
              "x-swagger-router-controller": "swagger_server.controllers.query_controller"
            }
          }
        },
        {
          "path": "/translator/biolink_to_omop",
          "pathitem": {
            "post": {
              "description": "Map Biolink CURIEs to OMOP concepts",
              "operationId": "biolink_to_omop",
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": "{\n    \"curies\": [\n        \"HP:0002907\",\n        \"MONDO:0001187\"\n    ]\n}",
                    "schema": {
                      "$ref": "#/components/schemas/CurieList"
                    }
                  }
                },
                "description": "List of CURIEs",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "example": "{\n  \"MONDO:0001187\": {\n    \"distance\": 2,\n    \"omop_concept_id\": 197508,\n    \"omop_concept_name\": \"Malignant tumor of urinary bladder\"\n  }\n}",
                      "schema": {
                        "additionalProperties": {
                          "description": "Mapping from OMOP concept to Biolink",
                          "properties": {
                            "distance": {
                              "description": "mapping distance",
                              "type": "integer"
                            },
                            "omop_concept_id": {
                              "type": "integer"
                            },
                            "omop_concept_name": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "description": "OK. There may or may not be results. Note that some of the provided identifiers may not have been recognized."
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Bad request. The request is invalid according to this OpenAPI schema OR a specific identifier is believed to be invalid somehow (not just unrecognized)."
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Internal server error."
                }
              },
              "summary": "Map from Biolink to OMOP",
              "tags": [
                "translator"
              ]
            }
          }
        },
        {
          "path": "/translator/omop_to_biolink",
          "pathitem": {
            "post": {
              "description": "Map OMOP concepts to normalized Biolink nodes using SRI Node Normalizer.",
              "operationId": "omop_to_biolink",
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": "{\n    \"omop_ids\": [\n        78472,\n        197508\n    ]\n}",
                    "schema": {
                      "$ref": "#/components/schemas/OmopList"
                    }
                  }
                },
                "description": "List of OMOP IDs",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "additionalProperties": {
                          "type": "object"
                        },
                        "example": "{\n  \"197508\": {\n    \"equivalent_identifiers\": [\n        {\n            \"identifier\": \"MONDO:0001187\",\n            \"label\": \"urinary bladder cancer\"\n        },\n        {\n            \"identifier\": \"DOID:11054\"\n        },\n        {\n            \"identifier\": \"OMIM:109800\"\n        },\n        {\n            \"identifier\": \"UMLS:C0005684\"\n        },\n        {\n            \"identifier\": \"NCIT:C9334\"\n        },\n        {\n            \"identifier\": \"SNOMEDCT:399326009\"\n        }\n    ],\n    \"id\": {\n        \"identifier\": \"MONDO:0001187\",\n        \"label\": \"urinary bladder cancer\"\n    },\n    \"type\": [\n        \"biolink:Disease\",\n        \"biolink:DiseaseOrPhenotypicFeature\",\n        \"biolink:BiologicalEntity\",\n        \"biolink:NamedThing\"\n    ]\n  }\n}",
                        "type": "object"
                      }
                    }
                  },
                  "description": "OK. There may or may not be results. Note that some of the provided identifiers may not have been recognized. Mapping from OMOP concept to Biolink normalized nodes. See [SRI Node Normalizer](https://nodenormalization-sri.renci.org/docs#/) for response format"
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Bad request. The request is invalid according to this OpenAPI schema OR a specific identifier is believed to be invalid somehow (not just unrecognized)."
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Internal server error."
                }
              },
              "summary": "Map from OMOP to Biolink",
              "tags": [
                "translator"
              ]
            }
          }
        }
      ],
      "security": [],
      "servers": [
        {
          "url": "http://covid.cohd.io/api/"
        }
      ],
      "tags": [
        {
          "description": "COHD metadata",
          "name": "Metadata"
        },
        {
          "description": "OMOP Common Data Model concepts",
          "name": "OMOP"
        },
        {
          "description": "Clinical frequency data",
          "name": "Clinical Frequencies"
        },
        {
          "description": "Estimated association between concepts",
          "name": "Concept Associations"
        },
        {
          "description": "Concept-age distributions, concept-pair delta distributions, and temporal analyses",
          "name": "Temporal Clinical Data"
        },
        {
          "description": "NCATS Biomedical Data Translator APIs",
          "name": "translator"
        },
        {
          "description": "Implements the NCATS Translator Reasoner API standards",
          "name": "reasoner"
        }
      ],
      "x-externalResources": [
        {
          "x-description": "Department of Biomedical Informatics, Columbia University",
          "x-type": "website",
          "x-url": "https://www.dbmi.columbia.edu/"
        },
        {
          "x-description": "Observational Health Data Sciences and Informatics",
          "x-type": "website",
          "x-url": "https://www.ohdsi.org/"
        },
        {
          "x-description": "OMOP CDM",
          "x-type": "website",
          "x-url": "https://github.com/OHDSI/CommonDataModel/wiki"
        }
      ],
      "~raw": ""
    },
    {
      "_id": "bfe51132e3f325e9f74a7fa40dc81583",
      "_meta": {
        "ETag": "c0469c7856e82dba4cc3bde5e64d25f57abadefd",
        "github_username": "vdancik",
        "timestamp": "2019-06-10T17:56:55.297135",
        "uptime_status": "unknown",
        "uptime_ts": "2021-02-01T00:30:21.410585",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/indigo/openapi.yml"
      },
      "_score": 4.6162825,
      "components": {
        "schemas": {
          "Credentials": {
            "additionalProperties": true,
            "description": "Credentials needed for programmatic access to the remote knowledge graph",
            "properties": {
              "password": {
                "description": "Password needed for programmatic access to the remote knowledge graph",
                "type": "string"
              },
              "username": {
                "description": "Username needed for programmatic access to the remote knowledge graph",
                "type": "string"
              }
            },
            "required": [
              "username",
              "password"
            ],
            "type": "object"
          },
          "Edge": {
            "additionalProperties": true,
            "description": "An edge in the thought subgraph linking two nodes",
            "properties": {
              "confidence": {
                "description": "Confidence metric for this edge, a value between (inclusive) 0.0 (no confidence) and 1.0 (highest confidence)",
                "example": 0.99,
                "format": "float",
                "type": "number"
              },
              "defined_datetime": {
                "description": "Datetime at which the KG builder/updater pulled the information from the original source. Used as a freshness indicator.",
                "example": "2018-11-03 15:34:23",
                "type": "string"
              },
              "edge_attributes": {
                "description": "A list of additional attributes for this edge",
                "items": {
                  "$ref": "#/components/schemas/EdgeAttribute"
                },
                "type": "array"
              },
              "evidence_type": {
                "description": "A CURIE/URI for class of evidence supporting the statement made in an edge - typically a class from the ECO ontology",
                "example": "ECO:0000220",
                "type": "string"
              },
              "id": {
                "description": "Local identifier for this node which is unique within this KnowledgeGraph, and perhaps within the source reasoner's knowledge graph",
                "example": "553903",
                "type": "string"
              },
              "is_defined_by": {
                "description": "A CURIE/URI for the translator group that made the KG",
                "example": "reasoner",
                "type": "string"
              },
              "negated": {
                "description": "Boolean that if set to true, indicates the edge statement is negated i.e. is not true",
                "example": true,
                "type": "boolean"
              },
              "provided_by": {
                "description": "A CURIE/URI for the knowledge source that defined this edge",
                "example": "OMIM",
                "type": "string"
              },
              "publications": {
                "description": "List of CURIEs for publications associated with this edge",
                "example": [
                  "PMID:12345562"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "qualifiers": {
                "description": "Terms representing qualifiers that modify or qualify the meaning of the statement made in an edge",
                "example": "ECO:0000220",
                "type": "string"
              },
              "relation": {
                "description": "Lower-level relationship type of this edge",
                "example": "upregulates",
                "type": "string"
              },
              "source_id": {
                "description": "Corresponds to the @id of source node of this edge",
                "example": "https://omim.org/entry/603903",
                "type": "string"
              },
              "target_id": {
                "description": "Corresponds to the @id of target node of this edge",
                "example": "https://www.uniprot.org/uniprot/P00738",
                "type": "string"
              },
              "type": {
                "description": "Higher-level relationship type of this edge",
                "example": "affects",
                "type": "string"
              },
              "weight": {
                "description": "Weight metric for this edge, with no upper bound. Perhaps useful when formal confidence metrics are not available",
                "example": 0.99,
                "format": "float",
                "type": "number"
              }
            },
            "required": [
              "id",
              "source_id",
              "target_id"
            ],
            "type": "object"
          },
          "EdgeAttribute": {
            "additionalProperties": true,
            "description": "A generic additional attribute for an edge",
            "properties": {
              "name": {
                "description": "Formal name of the attribute",
                "example": "Cell type limitation",
                "type": "string"
              },
              "type": {
                "description": "Entity type of this attribute",
                "example": "localization",
                "type": "string"
              },
              "url": {
                "description": "A URL corresponding to this attribute",
                "example": "https://www.ncbi.nlm.nih.gov/pubmed/29309293",
                "type": "string"
              },
              "value": {
                "description": "Value of the attribute. While all attributes should have a name, many will not have a value",
                "example": "MFC cells",
                "type": "string"
              }
            },
            "type": "object"
          },
          "KnowledgeGraph": {
            "additionalProperties": true,
            "description": "A thought graph associated with this result. This will commonly be a linear path subgraph from one concept to another, but related items aside of the path may be included.",
            "properties": {
              "edges": {
                "description": "List of edges in the KnowledgeGraph",
                "items": {
                  "$ref": "#/components/schemas/Edge"
                },
                "type": "array"
              },
              "nodes": {
                "description": "List of nodes in the KnowledgeGraph",
                "items": {
                  "$ref": "#/components/schemas/Node"
                },
                "type": "array"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "Message": {
            "additionalProperties": true,
            "properties": {
              "code_description": {
                "description": "Extended description denoting the success or mode of failure in the generation of the message",
                "example": "9 results found",
                "type": "string"
              },
              "context": {
                "description": "JSON-LD context URI",
                "example": "https://rtx.ncats.io/ns/translator.jsonld",
                "type": "string"
              },
              "datetime": {
                "description": "Datetime string for the time that this message was generated",
                "example": "2018-01-09 12:34:45",
                "type": "string"
              },
              "id": {
                "description": "URI for this message",
                "example": "https://rtx.ncats.io/api/rtx/v1/message/123",
                "type": "string"
              },
              "knowledge_graph": {
                "description": "KnowledgeGraph object that contains all the nodes and edges referenced in any of the possible answers to the query OR connection information for a remote knowledge graph",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/KnowledgeGraph"
                  },
                  {
                    "$ref": "#/components/schemas/RemoteKnowledgeGraph"
                  }
                ],
                "type": "object"
              },
              "message_code": {
                "description": "Set to OK for success, or some other short string to indicate and error (e.g., KGUnavailable, TermNotFound, etc.)",
                "example": "OK",
                "type": "string"
              },
              "n_results": {
                "description": "Total number of results from the query (which may be less than what is returned if limits were placed on the number of results to return)",
                "example": 42,
                "type": "integer"
              },
              "original_question": {
                "description": "The original question text typed in by the user",
                "example": "what proteins are affected by sickle cell anemia",
                "type": "string"
              },
              "query_graph": {
                "$ref": "#/components/schemas/QueryGraph",
                "description": "QueryGraph object that contains a serialization of a query in the form of a graph",
                "type": "object"
              },
              "query_options": {
                "description": "Dict of options that can be sent with the query. Options are tool specific and not stipulated here",
                "example": {
                  "coalesce": true,
                  "threshold": 0.9
                },
                "type": "object"
              },
              "query_type_id": {
                "description": "The query type id if one is known for the query/message (as defined in https://docs.google.com/spreadsheets/d/18zW81wteUfOn3rFRVG0z8mW-ecNhdsfD_6s73ETJnUw/edit#gid=1742835901 )",
                "example": "Q2",
                "type": "string"
              },
              "reasoner_id": {
                "description": "Identifier string of the reasoner that provided this message (one of RTX, Robokop, Indigo, Integrator, etc.)",
                "example": "reasoner",
                "type": "string"
              },
              "restated_question": {
                "description": "A precise restatement of the question, as understood by the Translator, for which the answer applies. The user should verify that the restated question matches the intent of their original question (it might not).",
                "example": "Which proteins are affected by sickle cell anemia?",
                "type": "string"
              },
              "results": {
                "description": "List of all returned potential answers for the query posed",
                "items": {
                  "$ref": "#/components/schemas/Result"
                },
                "type": "array"
              },
              "schema_version": {
                "description": "Version label of this JSON-LD schema",
                "example": "0.9.0",
                "type": "string"
              },
              "table_column_names": {
                "description": "List of column names that corresponds to the row_data for each result",
                "example": [
                  "chemical_substance.name",
                  "chemical_substance.id"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "terms": {
                "additionalProperties": true,
                "description": "Dict of terms needed by the specific query type",
                "properties": {
                  "anatomical_entity": {
                    "example": "liver",
                    "type": "string"
                  },
                  "cell": {
                    "example": "CL:0000738",
                    "type": "string"
                  },
                  "chemical_substance": {
                    "example": "ibuprofen",
                    "type": "string"
                  },
                  "disease": {
                    "example": "malaria",
                    "type": "string"
                  },
                  "drug": {
                    "example": "ibuprofen",
                    "type": "string"
                  },
                  "gene": {
                    "example": "HGNC:3535",
                    "type": "string"
                  },
                  "metabolite": {
                    "example": "ibuprofen",
                    "type": "string"
                  },
                  "pathway": {
                    "example": "GO:0004888",
                    "type": "string"
                  },
                  "protein": {
                    "example": "P12345",
                    "type": "string"
                  },
                  "symptom": {
                    "example": "UMLS:C0000737",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "tool_version": {
                "description": "Version label of the tool that generated this message",
                "example": "RTX 0.5.0",
                "type": "string"
              },
              "type": {
                "description": "Entity type of this message",
                "example": "translator_reasoner_message",
                "type": "string"
              }
            },
            "type": "object"
          },
          "Node": {
            "additionalProperties": true,
            "description": "A node in the thought subgraph",
            "properties": {
              "description": {
                "description": "One to three sentences of description/definition of this entity",
                "example": "Haptoglobin captures, and combines with free plasma hemoglobin...",
                "type": "string"
              },
              "id": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "type": "string"
              },
              "name": {
                "description": "Formal name of the entity",
                "example": "Haptoglobin",
                "type": "string"
              },
              "node_attributes": {
                "description": "A list of arbitrary attributes for the node",
                "items": {
                  "$ref": "#/components/schemas/NodeAttribute"
                },
                "type": "array"
              },
              "symbol": {
                "description": "Short abbreviation or symbol for this entity",
                "example": "HP",
                "type": "string"
              },
              "type": {
                "description": "Entity type of this node (e.g., protein, disease, etc.)",
                "example": [
                  "protein"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "uri": {
                "description": "URI identifier for this node\"",
                "example": "https://www.uniprot.org/uniprot/P00738",
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "NodeAttribute": {
            "additionalProperties": true,
            "description": "A generic attribute for a node",
            "properties": {
              "name": {
                "description": "Formal name of the attribute",
                "example": "Wikipedia article",
                "type": "string"
              },
              "type": {
                "description": "Entity type of this attribute",
                "example": "article",
                "type": "string"
              },
              "url": {
                "description": "A URL corresponding to this attribute",
                "example": "https://en.wikipedia.org/wiki/Malaria",
                "type": "string"
              },
              "value": {
                "description": "Value of the attribute",
                "example": "7.23e-12",
                "type": "string"
              }
            },
            "type": "object"
          },
          "PreviousMessageProcessingPlan": {
            "additionalProperties": true,
            "properties": {
              "options": {
                "additionalProperties": true,
                "description": "Dict of options that apply during processing in an order independent fashion",
                "example": {
                  "topNMostFrequent": 1
                },
                "type": "object"
              },
              "previous_message_uris": {
                "description": "List of URIs for Message objects to fetch and process",
                "example": [
                  "https://rtx.ncats.io/api/rtx/v1/message/300"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "previous_messages": {
                "description": "List of Message objects to process",
                "items": {
                  "$ref": "#/components/schemas/Message"
                },
                "type": "array"
              },
              "processing_actions": {
                "description": "List of order-dependent actions to guide what happens with the Message object(s)",
                "example": [
                  "mod45filter",
                  "redirect2RTX"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "QEdge": {
            "additionalProperties": true,
            "description": "An edge in the QueryGraph",
            "properties": {
              "edge_id": {
                "description": "QueryGraph internal identifier for this QEdge. Recommended form: e00, e01, e02, etc.",
                "example": "e00",
                "type": "string"
              },
              "negated": {
                "description": "Boolean that if set to true, indicates the edge statement is negated i.e. is not true",
                "example": true,
                "type": "boolean"
              },
              "relation": {
                "description": "Lower-level relationship type of this edge",
                "example": "upregulates",
                "type": "string"
              },
              "source_id": {
                "description": "Corresponds to the @id of source node of this edge",
                "example": "https://omim.org/entry/603903",
                "type": "string"
              },
              "target_id": {
                "description": "Corresponds to the @id of target node of this edge",
                "example": "https://www.uniprot.org/uniprot/P00738",
                "type": "string"
              },
              "type": {
                "description": "Higher-level relationship type of this edge",
                "example": "affects",
                "type": "string"
              }
            },
            "required": [
              "source_id",
              "target_id"
            ],
            "type": "object"
          },
          "QNode": {
            "additionalProperties": true,
            "description": "A node in the QueryGraph",
            "properties": {
              "curie": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "type": "string"
              },
              "node_id": {
                "description": "QueryGraph internal identifier for this QNode. Recommended form: n00, n01, n02, etc.",
                "example": "n00",
                "type": "string"
              },
              "type": {
                "description": "Entity type of this node (e.g., protein, disease, etc.)",
                "example": "disease",
                "type": "string"
              }
            },
            "type": "object"
          },
          "Query": {
            "additionalProperties": true,
            "properties": {
              "asynchronous": {
                "description": "Set to true in order to receive an incomplete message_id if the query will take a while. Client can then periodically request that message_id for a status update and eventual complete message",
                "example": "false",
                "type": "string"
              },
              "bypass_cache": {
                "description": "Set to true in order to bypass any possible cached message and try to answer the query over again",
                "example": "true",
                "type": "string"
              },
              "max_results": {
                "description": "Maximum number of individual results to return",
                "example": 100,
                "type": "integer"
              },
              "page_number": {
                "description": "Page number of results when the number of results exceeds the page_size",
                "example": 1,
                "type": "integer"
              },
              "page_size": {
                "description": "Split the results into pages with this number of results each",
                "example": 20,
                "type": "integer"
              },
              "previous_message_processing_plan": {
                "description": "Container for one or more Message objects or identifiers for one or more Messages along with a processing plan for how those messages should be processed and returned",
                "items": {
                  "$ref": "#/components/schemas/PreviousMessageProcessingPlan"
                },
                "type": "object"
              },
              "query_message": {
                "description": "Message object that represents the query to be answered",
                "items": {
                  "$ref": "#/components/schemas/Message"
                },
                "type": "object"
              },
              "reasoner_ids": {
                "description": "List of reasoners to consult for the query",
                "example": [
                  "RTX",
                  "Robokop"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object",
            "x-body-name": "request_body"
          },
          "QueryGraph": {
            "additionalProperties": true,
            "description": "A graph intended to be the thought path to be followed by a reasoner to answer the question. This graph is a representation of a question.",
            "properties": {
              "edges": {
                "description": "List of edges in the QueryGraph",
                "items": {
                  "$ref": "#/components/schemas/QEdge"
                },
                "type": "array"
              },
              "nodes": {
                "description": "List of nodes in the QueryGraph",
                "items": {
                  "$ref": "#/components/schemas/QNode"
                },
                "type": "array"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "RemoteKnowledgeGraph": {
            "additionalProperties": true,
            "description": "A thought graph associated with this result that is not repeated here, but stored elsewhere in a way that can be remotely accessed by the reader of this Message",
            "properties": {
              "credentials": {
                "description": "Credentials needed for programmatic access to the remote knowledge graph",
                "items": {
                  "$ref": "#/components/schemas/Credentials"
                },
                "type": "object"
              },
              "url": {
                "description": "URL that provides programmatic access to the remote knowledge graph",
                "example": "http://robokop.renci.org/api/kg",
                "type": "string"
              }
            },
            "type": "object"
          },
          "Result": {
            "description": "One of potentially several results or answers for a query",
            "properties": {
              "confidence": {
                "description": "Confidence metric for this result, a value between (inclusive) 0.0 (no confidence) and 1.0 (highest confidence)",
                "example": 0.9234,
                "format": "float",
                "type": "number"
              },
              "description": {
                "description": "A free text description of this result answer from the reasoner",
                "example": "The genetic condition sickle cell anemia may provide protection from cerebral malaria via genetic alterations of proteins HBB (P68871) and HMOX1 (P09601).",
                "type": "string"
              },
              "edge_bindings": {
                "additionalProperties": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  ]
                },
                "description": "Lookup dict that maps QEdge identifiers in the QueryGraph to Edge identifiers in the KnowledgeGraph",
                "type": "object"
              },
              "essence": {
                "description": "A single string that is the terse essence of the result (useful for simple answers)",
                "example": "ibuprofen",
                "type": "string"
              },
              "essence_type": {
                "description": "A Translator bioentity type of the essence",
                "example": "drug",
                "type": "string"
              },
              "id": {
                "description": "URI for this message",
                "example": "https://rtx.ncats.io/api/rtx/v1/result/234",
                "type": "string"
              },
              "node_bindings": {
                "additionalProperties": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  ]
                },
                "description": "Lookup dict that maps QNode identifiers in the QueryGraph to Node identifiers in the KnowledgeGraph",
                "type": "object"
              },
              "reasoner_id": {
                "description": "Identifier string of the reasoner that provided this result (e.g., RTX, Robokop, Indigo, Integrator)",
                "example": "RTX",
                "type": "string"
              },
              "result_graph": {
                "$ref": "#/components/schemas/KnowledgeGraph",
                "description": "A graph that describes the thought pattern of this result (i.e. answer to the query)",
                "type": "object"
              },
              "result_group": {
                "description": "An integer group number for results for use in cases where several results should be grouped together. Also useful to control sorting ascending.",
                "example": 1,
                "type": "integer"
              },
              "result_group_similarity_score": {
                "description": "A score that denotes the similarity of this result to other members of the result_group",
                "example": 0.95,
                "format": "float",
                "type": "number"
              },
              "result_type": {
                "description": "One of several possible result types: 'individual query answer', 'neighborhood graph', 'type summary graph'",
                "example": "individual query answer",
                "type": "string"
              },
              "row_data": {
                "description": "An arbitrary list of values that captures the essence of the result that can be turned into a tabular result across all answers (each result is a row) for a user that wants tabular output",
                "example": [
                  "ibuprofen",
                  "CHEMBL:CHEMBL521"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "score": {
                "description": "Any type of score associated with this result",
                "example": 163.233,
                "format": "float",
                "type": "number"
              },
              "score_direction": {
                "description": "Sorting indicator for the score: one of higher_is_better or lower_is_better",
                "example": "lower_is_better",
                "type": "string"
              },
              "score_name": {
                "description": "Name for the score",
                "example": "Jaccard distance",
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      },
      "externalDocs": {
        "description": "Documentation for the NCATS Biomedical Translator Reasoners web services",
        "url": "https://github.com/NCATS-Tangerine/NCATS-ReasonerStdAPI"
      },
      "info": {
        "contact": {
          "email": "translator@broadinstitute.org",
          "name": "Broad NCATS translator"
        },
        "description": "OpenAPI for indigo NCATS Biomedical Translator Reasoner",
        "license": {
          "name": "Apache 2.0",
          "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "termsOfService": "{{url}}",
        "title": "OpenAPI for indigo NCATS Biomedical Translator Reasoner",
        "version": "0.9.1.1",
        "x-reasoner_standard_version": "0.9.1"
      },
      "openapi": "3.0.1",
      "paths": [
        {
          "path": "/query",
          "pathitem": {
            "post": {
              "description": "",
              "operationId": "query",
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": {
                      "query_message": {
                        "query_graph": {
                          "edges": [
                            {
                              "edge_id": "e00",
                              "source_id": "n00",
                              "target_id": "n01",
                              "type": "targets"
                            }
                          ],
                          "nodes": [
                            {
                              "curie": "CHEMBL:CHEMBL521",
                              "node_id": "n00",
                              "type": "chemical_substance"
                            },
                            {
                              "node_id": "n01",
                              "type": "protein"
                            }
                          ]
                        }
                      }
                    },
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "Query information to be submitted",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Message"
                      }
                    }
                  },
                  "description": "successful operation"
                },
                "400": {
                  "description": "Invalid status value"
                }
              },
              "summary": "Query reasoner via one of several inputs",
              "tags": [
                "query"
              ],
              "x-swagger-router-controller": "swagger_server.controllers.query_controller"
            }
          }
        }
      ],
      "servers": [
        {
          "url": "https://indigo.ncats.io/reasoner/api/v1/"
        }
      ],
      "tags": [
        {
          "description": "Query reasoner using a predefined question type",
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "reasoner"
        }
      ],
      "~raw": "H4sIAOeZ_lwC_-1ca2_bOtL-K0T2BU4CJLKdNG0aYLGbprecNk3apqcLnD0waIm2uZVEvSIV16fof9-ZIamb5VhOU-x-2H5oU4mX4XAuz1yUbzsqEynP5M4p2zkKhsFoZ5_tyHSq4MG3nUjoMJeZkSrFAVcw9uz6gk1VzmQayZli787Pbj6yZ1IlIpIhj9lNzlMdcwNDPgiuVSpyXPJW5NqtMgyeBiO70deD3I0Za8PTiOfRuD0SxxlpYvGDFIQqNTw0dK6UJ7Tcs1zxyK1gymk4WiRcxjikevz3CY6WqQZqCiMClc92vsPQWIYi1aKx8FnGw7lgh8EQFytyWmpuTHY6GCwWi4DTe1xi4KbrwduL8xfvPr44gEnB3CQxLW5Enuir6UeR38I4XOXbN1ju-3d6K77C-5THz1Wouy4MnheJgHPjA2KaAar6cEyzhZgwbbfVrUNoOMVMmnkxCUKVDGi9gxuezkQuU-H-71f6aCK4MSIXl4OlYZnfv7XXs7cZpCE3OpBq4AVjAMI5uB0Ndr7_gezgMzfdc_r_C5Evkb7W0d_jc-ZXYYWW6YxxluUiElOgMmIwUxNfzDITSF-1aE0WGs_9cpaYjJu5ZfvAUoE_ZkpbGfOkOgpxgi6ShNO4Nnm3kjP4gakp8Bx4BJci06wwuuNk-Ai0NqdLvYgaTMgFneqZipZd8mB3RfXOEysTRrGJYLqYJNIYEfk1JLAJJpi8EE51QIpoRZ5lILE0efAvTct-29EgzAmnH_8vF1Pc6i8DEI0MzpQaPbDv9YD2d5LLkyy2SkPUjxOhNZ_Vn8xyns3p_yKaCXfv-ONY0qnFkLRLqyIP_bPUPjM8nwlTPrNGBK_51L_T9g5TFfmV8cfmKmGRS5py_vrF5bO3p_af48PGcng01KIxMBGNWOhlqb5cY0aWKyNkCgR8pz_Ecw280sKK0yFs33F7ughBF_W0iFl5_zsPeT2X7gocUY-6ybhIb3ksIwaHNYVm8J8Cp5A51ws-AytwkCuwkPkBUparOAaNQfrty7E1A0H1Ugf2wmvDLQUVjbVz2J_flxr39WAC4n5Q6SipwBgf1rmuJv8SYP73if_APiMdtyfLjGs9DtEiW811M7QBczbbaUjrDqpEh1J-FAZ1Cd-CfjGVR6DVqFy0OOPpkoFl0HISC0Y7RcwJPLyLYN4SR4PVWQhrpIkjTAGjGJ9xlBbYlOtlGs5zlapCbyZ1ymO9Da25CIW8RYLgMbI-FkZ4MkGUmZzWSFvIOGaGf4HxbDGXsQjYeSzhruB8KY5LGXBZKnIxMdo6uhd4w019UfRK3AtTkUXcWJaAGUxNAYawTQlxIuFfx6A0RWyajJCgCjPr8CtOjIbDVS5c8q8yKRKWFskEzg-WF13QrYxwT7e05Yopcsv-DEnW8k-xecvDjh0_gmoa4qBfHqYqhquCuwV_Cu-krhHkhwkQmIoA-77HqVcpuEZ5W11_gZeFdHVs_TUUItL0tjq-NVkOucmoeQU8z_myScrvOx9u_oGPPqiJ-qIy8oYt2t5KEA7a2SMQ4A1YBKSjhC6lo5NGJJ0qQHZj1aOsWoG2ODhttAOslOYC4IJG81OTe-sxraZah1nR0tO6kg0StxK02BM5BqOExh2OMM5invYj-hwxrUQAgQwiAJGzROWCNY-j8bmMgBw5lcjaNcPBUMUKcBIJI4IlTxNDmmjWXC2AGUqX6qiZnqsijpArbgIYN9Rgqzlb8ejascXRc10ScI08sU6BR5FEBvD4um7I0Zzh67uX6GZryyOsXA7ggB4y7qFsbr5WOBbhKzxACOtWGxyBX71DAT59uLAX1L5DkLypMOGcmOtYvVkX2odZc5A1xHTQ0LnzNpJfCjqEY7BdD84mKnp0PJWxsTYO9A4AamgO0arcwUnybAeRgKARZZ-5_fAQswLUAQwfaPkcMBNEYN4Ct3VnV-9tZrLKVk9SiVcd7BqVvbuEGOEl-UNCbaPvq0d4LkN7hMyRjJQiuFuyqMhJIyvlBCfOvR8HJ1aed8r13GHEu5Smh1Jd3mlKW-pDePSr2QxQOhUm1YMq_AoQw8ZRh4D--vHq3cHb58xthlpjA2a74UYU53cYl37Mu4vVvV6A3TRLihPxTshL18EIofz7nLXDOIwOjzoogNM5H9jauuaFN9OQ19IhbVBfOgdmp9qDiipEJQmEmwaEBPa9TgjbdaErqOM-cy5-n11QRI__AjjJkdf7DMxXsGfvSam4luvZQDmszIbBsU2ntEj_zS7CYj4RsScbl7ckz0SKsVKLZpuPIPvUnwrMR_WkAHbyEuqiL1JyoMPIpIeAHg5HJwfD0cHwKRsdnh49On103LHxc7eevzMPk-gZnb5xTwuuK3YQQWl_EP3ocHX_G2UALK-ixmmukhpk2oX4ANxWwpcIEmKgBolLrfkF-jxQwAAjlolESArgCkFHCE_VOnBaonMrUt5bhxB5b-bw1Zv1odHVG2KlC7j3ESZpBSxVQEeOeCc3nuUwGuOGsAxb8hxG74pgFuyzN68-pfyWSxCMWOyzG5En75R5qYo0qusCEjxuUrKB-KcVq3GxLpv11aAXiFjtOfycKkNUz4U_ncWAESnwFEgtcooKcYSTFZzp1KquPQYPBcyOiyQdY_Tdw5GvJksCitv3u_IoAdi0O7y73ZnRzlbYQ5XbREpEskHmSy3GoHWc7hPjKMe4Hi49lzMJ_nDs84Sbb2XhTCRmdwBKAyP5dAo-Em5hsmRahl8w-hcQN_MUDss7ru1mjqDc7lzLUKKHw60jvBpYC49WaJE7H4DRs4i2oPQzKeQWpP6tg9YzzKaGUlM8ixRgqtlLiqdln4HRAREFEwk2OfLEVynnfboaayHwjcuBUCJL6IDduKP6MAOstZwuvXUr967lcxMOIFnYmE1SaswRJfMO3u5CTJ7I2dww0I29YKeKH5GDvfzq-8M1N-kiRsQNNn2CjhIM3pdULdJmUDsonSnwy6eo4bI9bohUqIOZUrNYUNJdA-95pOdCANCOBqOTPz-fjBZGfJpepUf5yw-_vRr-eZJ8PhDhu3mkp8_Hj_WToxc3v6afFgOAz-YvMxn9dfTk0eHJ0fHT4YjtVeWGfrGnR6g0haVCRKK8XZ2BXExlWGNAB06MQHS47mGqEx7zXFoX6pOnGyddA5ICp0ngNgVBs8ZFEJTbPDuWt067OvK7G2fLSQF0TkXq_BKYShWDudl2pl4mGVC-edqny7cfT8-H8OfJ0RMLNfJitu12WNBY8B7ceXV1Cls9Ojk5oXnoJzZPev3q3fnp0fGRvRO0LZvnnL89tYc62ekTpli97R-MhYoDGqEbdaUOMwd7Mlcxaj3Avb6RGaY8sY6CtqaMI4magF25gWhkCZaW2oF4AYwOQAmZFTEZMcAXHthXuGyNA-RxXEGnTKGhkzx2BlQ3zQtmn20mZsU_9wziP1i_WcuvVfWZjcaCsvWvcHwjwRba_JXGBDCYdR7LP0u4wR3hDotgyco-ttvCHptLTbQjsRMtbky1oy2ofuMn3UU5ZsERnWIhySJALFbBxUzhKtPQWnHM_zvHWJYB_D05pGJPe_UBl04FZSoalTqbJ89FAhfNyuNU3IDzX01tJetOxjQPZWtVGy4et2xP-6OPPjqZ6cXsKxtDlnIcL8tSqMe6yIGacPMqHdzyLA8RkNtNB-BEtonHt0LxNw5jG7AFcOuWlR3giyInF3pb0GbFg8KsEMRsglxyXpJqyX5Vjikzbu0PMtcDvtfPnrHd68cnJ09GeyS0ry-v_jGCR8Onj4cjQEFdaG-aC2GhaD2m8OGu5ZeHb2UEWJXM8exaiy0daBchmPSKy6DXuCiSAl-QDcHcNlUKgyjbBRSJtVOK7CTu5KVpr07cuF8GifxrF3G1ZoqJVKKdOiqps1behSebI6cGR1bq0R1h0hlYnXwiTc7BrMTOZVCxtvRZGfgOh5O7WVb3bT5Ex5IVZ4BowGPl5a2HudLWGHoN3a1FW3g9HGOxPae4BOhp9QWn8opbThUmK3oEZxpCveYluaoYvLMmkwqgseItnz96fBQcHh11sau6JVod4hatQkleuSrOueixpGHsys4bpOVXHoY8h2BcOgi5SsA7WKj02fZ81S42393LqMRqgelAPZ4IYzpzfR9VbmzamPIWKm9ue-o7UeYQFdWXQvvbXt2mL9IpFpfCe90IoCywsZ21LbcqGFg4aFgZXHsJEFlaeQbpNAshMJRLw7jQAN33YNkh202pguiWsYZuhM_pZNrUX9ZAV08LUCsXW99tJX-9a_PurEQAXstgF33Kflmz4C_77JdUAMUTlc8xhCaXj09JXl1TkXtaP8YsV0V2rzrxWcrcUEaL-Nwb3kCVeMKuKsoVhRDFURU5Fys-uyoO0kqYhlUzgXm0gJ3FWjFnlW2xF9s_mHbyyQGZA0vSWbByqjEYcInuzizH97YFIHnHne6F1J-sEyXMnImstmz7PKDdZgYTgRvrphV197B1tt6VzB8iUe89oM1KbkrT7zXZ3Rsun1kZ9JzDdxPHOwNSgCkWiDCxY7HNwF0ZiKDsfqnh4b2NOH8VztrOq4kk0emZzHir1BcQ80h6fJ_wTLP37zAvWq-bu2CkFs4AtetGtUhbD5e_1cF7293tdyGDO7yjBeYU6jwID15glLGRB-tG_cd4QFxo7d5Tir2wWmm-AwZgclJq2wkFopmoNKYKBwe8lQqAM5hQweZKuxJhYvStYOhCkRnb8UWWY59NCuw3sUkAOhlsLKMSkNFKroBCXg50O-iIfHw_Y_8Kvw1c115Xz-wA6sBOKXnbUWAD5h-lACVwc4dIs7_1d8evkuw_bNTaEfA-tOyUYQsmgHKRiTL9Y2VBgyGGByLWwjpWzCIAWl42QLlNB4DU8dA13rgMLCaHbbGM9rysatstgbFt2D1iZQyVrc8IMK8hqXkd4-Uvs84A-W3DEWn8AZiSYDYjdOSWRZrupAZhS-zXpnxATyt2Xk3wSWlEKtvv3l_yalv2a1E6bx3qJx5hlV8N8cc4zBfgsFF1oXJbc2tLiR_XQe4n9-7BaK2sfkVTt4iutDfa0T9GSZ8brGUXt4JGVI4iWEZdhC1oNHePpyrGOIuUmdeAXbtBmApYzgm59SnO9m2LzVyqHf3wPqPGi_468_7BHMb9tn84b2FP0lMKUoKKXYR33EmvKMF9qrA-344ih98I1dBZFUkT8QH7IBC-WMnEkOmUpdgynQ5H-Neh7VWw9th9ErGpueLy4vL08fDo6bCrm-n804eLF530pCQVd7dx9WjOIja7aMflPPeZKzf6xotWOs_VInspPwlPvxtPSVh7XXn1ZcsG5oofu3KkvuvKBV65wCsXjSvvlw2x7QNd3yu9pjTSQSxuRWwhLqaj5zJr3pmIypY2O2TzngXYuRkVznRnPLPYZtv6Z0Q9SwcqkQnBIOByvhysl_fVvpS_y4hSQrSpldcViuofMfWkCL8tLFKJMk-EuZ8H17aGug1pdvc1pKViRj1kdcImSsWCp03KnBVt7frMDnUYGDNj5Rcp-2U7lUtMo_pU3SWo3HZvRjkDB6Dpq5xtrXl14w1mk1W_r1H33twHffcsTv2w_QQz_ROlBstf67b_546VkF558dc8M2oWq4nsqvS8xOxdTB1eZfHE9m902qV1sOFBPMTvZefJHxurE1sVAWssKEsy-5SqBgMND_23QVR9y2KuEw5hYuKmBEGwJuFM2oxzEAliipvSkrWBA-oyko0iXo29eplMVI_Y8PV1V4mBWiT5ZIIfHzgYmjO7ZCUutd0I73ADG0Dw2xMOnpVlrarQVS1RFjVIJ7bLZJz5VbaHiHUDUi3TN0jAhkuMU_xEVy7zR2hZkp6eGSaEcd--dl4dvbcWf5ZfZCYiydn6vTp0ubmV_Y50415PgsMjcTDq6rj7jYpBnYv3znKgORRpsPAnInuI_xtcuia0rnvDbEfVfOragtvs7IEs7w0s224HE5BfiI6FYmXUcg9HdHy8xge9VeEagEmm1fZzSmz9lBB7kgkjWuFRM7NmbR3QNcd0czlOeGzkw99fdGeC6H_o9H_otE2a1GPXQTueLH_os5gzRlhrUPX7iNovCnHFUVcsiWw-580r1whkCdjyk4_R6GB4xEbH-MlH55dA5Scf2DtRNk2_ecUmhYwjkQ_sJ9Q5y4o4pvqfaLaR-cacshPa3nLAPtF3m5hAmmIPZIqZsrJFIPDNt1RV7MVWxLA9WVopthM5V0K0XdDNy_3hboOnW_Ua4L4_odNggQV983An-EzrraGe8CNQWGRgZtkEvxgJ2LWzuK7-Tt-AT62TDtvssM2rGGiVX7NYeSgm_rdNbJfBIxGwEK2-RnfBhK6-BcavLy-en1KH9_Hjwx6QXNzaA_Xs7XhxTh3Ow8PDYQ8RDmP8HQ-YmHS7gB_OMtfFQK6sjF_JTNjvNUneD9Deu9-QwN1CpYoCFUylRsVqtnTfJfDY1ld_9Ag31LVfZoqR0GpxZ9FUhB9awPnsm6X7Aointa6DtSf7L04T-PL4_cONEsWtxhs1ed2icPljAUcDH6zmMpobbBuKdJzVRiVpedB7hSUxAkjX7_0TY5NzbKOlVejLwnXbPVR4cvnynDp3de_4JGCf8ben2N7JSppc39Sc4y9kIbr2QcVS93tXUJjdK_f7d7YNchCLpeFEBmmcBKmcBzN1OwBbnIhocPj0aPgU_vp5sQ78-TdOxJi8e04AAA=="
    },
    {
      "_id": "912372f46127b79fb387cd2397203709",
      "_meta": {
        "ETag": "3a94c9906f5f57f26ebdbb12a42120685fdfba612b141257922bb251974da4ba",
        "github_username": "kevinxin90",
        "slug": "molecular_kp",
        "timestamp": "2021-01-30T00:03:58.007471",
        "uptime_status": "unknown",
        "uptime_ts": "2021-02-01T00:30:57.398728",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/molecular_data_provider/smartapi.yaml"
      },
      "_score": 4.261184,
      "components": {
        "schemas": {
          "Attribute": {
            "additionalProperties": false,
            "description": "Generic attribute for a node or an edge that expands key-value pair concept by including a type of this attribute from a suitable ontology, a source of this attribute, and (optionally) a url with additional information about this attribute.",
            "properties": {
              "name": {
                "description": "Human-readable name or label for the attribute. If appropriate, should be the name of the semantic type term.",
                "example": "PubMed Identifier",
                "nullable": true,
                "type": "string"
              },
              "source": {
                "description": "Source of the attribute, preferably as a CURIE prefix.",
                "example": "UniProtKB",
                "nullable": true,
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/CURIE",
                "description": "CURIE of the semantic type of the attribute. For properties defined by the Biolink model this should be a biolink CURIE, otherwise, if possible, from the EDAM ontology. If a suitable identifier does not exist, enter a descriptive phrase here and submit the new type for consideration by the appropriate authority.",
                "example": "EDAM:data_1187"
              },
              "url": {
                "description": "Human-consumable URL to link out and provide additional information about the attribute (not the node or the edge).",
                "example": "https://pubmed.ncbi.nlm.nih.gov/32529952",
                "nullable": true,
                "type": "string"
              },
              "value": {
                "description": "Value of the attribute. May be any data type, including a list.",
                "example": 32529952
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          },
          "BiolinkEntity": {
            "description": "Compact URI (CURIE) for a Biolink class, biolink:NamedThing or a child thereof. The CURIE must use the prefix 'biolink:' followed by the PascalCase class name.",
            "example": "biolink:PhenotypicFeature",
            "externalDocs": {
              "description": "Biolink model entities",
              "url": "https://biolink.github.io/biolink-model/docs/NamedThing.html"
            },
            "pattern": "^biolink:[A-Z][a-zA-Z]*$",
            "type": "string"
          },
          "BiolinkPredicate": {
            "description": "CURIE for a Biolink 'predicate' slot, taken from the Biolink slot ('is_a') hierarchy rooted in biolink:related_to (snake_case). This predicate defines the Biolink relationship between the subject and object nodes of a biolink:Association defining a knowledge graph edge.",
            "example": "biolink:interacts_with",
            "externalDocs": {
              "description": "Biolink model predicates",
              "url": "https://biolink.github.io/biolink-model/docs/related_to.html"
            },
            "pattern": "^biolink:[a-z][a-z_]*$",
            "type": "string"
          },
          "CURIE": {
            "description": "A Compact URI, consisting of a prefix and a reference separated by a colon, such as UniProtKB:P00738. Via an external context definition, the CURIE prefix and colon may be replaced by a URI prefix, such as http://identifiers.org/uniprot/, to form a full URI.",
            "externalDocs": {
              "url": "https://www.w3.org/TR/2010/NOTE-curie-20101216/"
            },
            "type": "string"
          },
          "Edge": {
            "additionalProperties": false,
            "description": "A specification of the semantic relationship linking two concepts that are expressed as nodes in the knowledge \"thought\" graph resulting from a query upon the underlying knowledge source.",
            "properties": {
              "attributes": {
                "description": "A list of additional attributes for this edge",
                "items": {
                  "$ref": "#/components/schemas/Attribute"
                },
                "nullable": true,
                "type": "array"
              },
              "object": {
                "$ref": "#/components/schemas/CURIE",
                "description": "Corresponds to the map key CURIE of the object concept node of this relationship edge.",
                "example": "UniProtKB:P00738"
              },
              "predicate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkPredicate"
                  }
                ],
                "nullable": true
              },
              "relation": {
                "description": "The relationship type term of this edge, originally specified by, or curated by inference from, the original source of knowledge. This should generally be specified as predicate ontology CURIE.",
                "example": "RO:0002447",
                "nullable": true,
                "type": "string"
              },
              "subject": {
                "$ref": "#/components/schemas/CURIE",
                "description": "Corresponds to the map key CURIE of the subject concept node of this relationship edge.",
                "example": "OMIM:603903"
              }
            },
            "required": [
              "subject",
              "object"
            ],
            "type": "object"
          },
          "EdgeBinding": {
            "additionalProperties": true,
            "description": "A instance of EdgeBinding is a single KnowledgeGraph Edge mapping, identified by the corresponding 'id' object key identifier of the Edge within the Knowledge Graph. Instances of EdgeBinding may include extra annotation (such annotation is not yet fully standardized).",
            "properties": {
              "id": {
                "description": "The key identifier of a specific KnowledgeGraph Edge.",
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "KnowledgeGraph": {
            "additionalProperties": true,
            "description": "The knowledge graph associated with a set of results. The instances of Node and Edge defining this graph represent instances of biolink:NamedThing (concept nodes) and biolink:Association (relationship edges) representing (Attribute) annotated knowledge returned from the knowledge sources and inference agents wrapped by the given TRAPI implementation.",
            "properties": {
              "edges": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/Edge"
                },
                "description": "Dictionary of Edge instances used in the KnowledgeGraph, referenced elsewhere in the TRAPI output by the dictionary key.",
                "type": "object"
              },
              "nodes": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/Node"
                },
                "description": "Dictionary of Node instances used in the KnowledgeGraph, referenced elsewhere in the TRAPI output by the dictionary key.",
                "type": "object"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "LogEntry": {
            "additionalProperties": true,
            "description": "The LogEntry object contains information useful for tracing and debugging across Translator components.  Although an individual component (for example, an ARA or KP) may have its own logging and debugging infrastructure, this internal information is not, in general, available to other components. In addition to a timestamp and logging level, LogEntry includes a string intended to be read by a human, along with one of a standardized set of codes describing the condition of the component sending the message.",
            "properties": {
              "code": {
                "description": "One of a standardized set of short codes e.g. QueryNotTraversable, KPNotAvailable, KPResponseMalformed",
                "nullable": true,
                "type": "string"
              },
              "level": {
                "description": "Logging level",
                "enum": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "nullable": true,
                "type": "string"
              },
              "message": {
                "description": "A human-readable log message",
                "nullable": true,
                "type": "string"
              },
              "timestamp": {
                "description": "Timestamp in ISO 8601 format",
                "example": "2020-09-03T18:13:49+00:00",
                "format": "date-time",
                "nullable": true,
                "type": "string"
              }
            },
            "type": "object"
          },
          "Message": {
            "additionalProperties": false,
            "description": "The message object holds the main content of a Query or a Response in three properties: query_graph, results, and knowledge_graph. The query_graph property contains the query configuration, the results property contains any answers that are returned by the service, and knowledge_graph property contains lists of edges and nodes in the thought graph corresponding to this message. The content of these properties is context-dependent to the encompassing object and the TRAPI operation requested.",
            "properties": {
              "knowledge_graph": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KnowledgeGraph"
                  }
                ],
                "description": "KnowledgeGraph object that contains lists of nodes and edges in the thought graph corresponding to the message",
                "nullable": true
              },
              "query_graph": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/QueryGraph"
                  }
                ],
                "description": "QueryGraph object that contains a serialization of a query in the form of a graph",
                "nullable": true
              },
              "results": {
                "description": "List of all returned Result objects for the query posed",
                "items": {
                  "$ref": "#/components/schemas/Result"
                },
                "nullable": true,
                "type": "array"
              }
            },
            "type": "object"
          },
          "Node": {
            "additionalProperties": false,
            "description": "A node in the KnowledgeGraph which represents some biomedical concept. Nodes are identified by the keys in the KnowledgeGraph Node mapping.",
            "properties": {
              "attributes": {
                "description": "A list of attributes describing the node",
                "items": {
                  "$ref": "#/components/schemas/Attribute"
                },
                "nullable": true,
                "type": "array"
              },
              "category": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkEntity"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkEntity"
                    },
                    "type": "array"
                  }
                ]
              },
              "name": {
                "description": "Formal name of the entity",
                "example": "Haptoglobin",
                "nullable": true,
                "type": "string"
              }
            },
            "type": "object"
          },
          "NodeBinding": {
            "additionalProperties": true,
            "properties": {
              "id": {
                "$ref": "#/components/schemas/CURIE",
                "description": "An instance of NodeBinding is a single KnowledgeGraph Node mapping, identified by the corresponding 'id' object key identifier of the Node within the Knowledge Graph. Instances of NodeBinding may include extra annotation (such annotation is not yet fully standardized)."
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "QEdge": {
            "additionalProperties": true,
            "description": "An edge in the QueryGraph used as an filter pattern specification in a query. If optional predicate or relation properties are not specified, they are assumed to be wildcard matches to the target knowledge space. If specified, the ontological inheritance hierarchy associated with the terms provided is assumed, such that edge bindings returned may be an exact match to the given QEdge predicate or relation term ('class'), or to a term which is a subclass of the QEdge specified term.",
            "properties": {
              "object": {
                "description": "Corresponds to the map key identifier of the object concept node anchoring the query filter pattern for the query relationship edge.",
                "example": "https://www.uniprot.org/uniprot/P00738",
                "type": "string"
              },
              "predicate": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkPredicate"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkPredicate"
                    },
                    "type": "array"
                  }
                ]
              },
              "relation": {
                "description": "Query constraint against the relationship type term of this edge, as originally specified by, or curated by inference from, the original external source of knowledge. Note that this should often be specified as predicate ontology term CURIE, although this may not be strictly enforced.",
                "example": "RO:0002447",
                "nullable": true,
                "type": "string"
              },
              "subject": {
                "description": "Corresponds to the map key identifier of the subject concept node anchoring the query filter pattern for the query relationship edge.",
                "example": "https://omim.org/entry/603903",
                "type": "string"
              }
            },
            "required": [
              "subject",
              "object"
            ],
            "type": "object"
          },
          "QNode": {
            "additionalProperties": true,
            "description": "A node in the QueryGraph used to represent an entity in a query. If a CURIE is not specified, any nodes matching the category of the QNode will be returned in the Results.",
            "properties": {
              "category": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkEntity"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkEntity"
                    },
                    "type": "array"
                  }
                ]
              },
              "id": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CURIE"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/CURIE"
                    },
                    "type": "array"
                  }
                ]
              },
              "is_set": {
                "default": false,
                "description": "Boolean that if set to true, indicates that this QNode MAY have multiple KnowledgeGraph Nodes bound to it within each Result. The nodes in a set should be considered as a set of independent nodes, rather than a set of dependent nodes, i.e., the answer would still be valid if the nodes in the set were instead returned individually. Multiple QNodes may have is_set=True. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=False, each n1 must be connected to n2. If a QNode (n1) with is_set=True is connected to a QNode (n2) with is_set=True, each n1 must be connected to at least one n2.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "Query": {
            "additionalProperties": true,
            "description": "The Query class is used to package a user request for information. A Query object consists of a required Message object with optional additional properties. Additional properties are intended to convey implementation-specific or query-independent parameters. For example, an additional property specifying a log level could allow a user to override the default log level in order to receive more fine-grained log information when debugging an issue.",
            "example": {
              "message": {
                "query_graph": {
                  "edges": {
                    "e00": {
                      "object": "n01",
                      "predicate": "biolink:affects",
                      "subject": "n00"
                    }
                  },
                  "nodes": {
                    "n00": {
                      "category": "biolink:ChemicalSubstance",
                      "id": "PUBCHEM.COMPOUND:2244"
                    },
                    "n01": {
                      "category": "biolink:Gene"
                    }
                  }
                }
              }
            },
            "properties": {
              "message": {
                "$ref": "#/components/schemas/Message",
                "description": "The query Message is a serialization of the user request. Content of the Message object depends on the intended TRAPI operation. For example, the fill operation requires a non-empty query_graph field as part of the Message, whereas other operations, e.g. overlay, require non-empty results and knowledge_graph fields."
              }
            },
            "required": [
              "message"
            ],
            "type": "object",
            "x-body-name": "request_body"
          },
          "QueryGraph": {
            "additionalProperties": true,
            "description": "A graph representing a biomedical question. It serves as a template for each result (answer), where each bound knowledge graph node/edge is expected to obey the constraints of the associated query graph element.",
            "properties": {
              "edges": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/QEdge"
                },
                "description": "The edge specifications. The keys of this map are unique edge identifiers and the corresponding values include the constraints on bound edges, in addition to specifying the subject and object QNodes.",
                "type": "object"
              },
              "nodes": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/QNode"
                },
                "description": "The node specifications. The keys of this map are unique node identifiers and the corresponding values include the constraints on bound nodes.",
                "type": "object"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "Response": {
            "additionalProperties": true,
            "description": "The Response object contains the main payload when a TRAPI query endpoint interprets and responds to the submitted query successfully (i.e., HTTP Status Code 200). The message property contains the knowledge of the response (query graph, knowledge graph, and results). The status, description, and logs properties provide additional details about the response.",
            "properties": {
              "description": {
                "description": "A brief human-readable description of the outcome",
                "example": "Success. 42 results found.",
                "nullable": true,
                "type": "string"
              },
              "logs": {
                "description": "Log entries containing errors, warnings, debugging information, etc",
                "items": {
                  "$ref": "#/components/schemas/LogEntry"
                },
                "nullable": true,
                "type": "array"
              },
              "message": {
                "$ref": "#/components/schemas/Message",
                "description": "Contains the knowledge of the response (query graph, knowledge graph, and results)."
              },
              "status": {
                "description": "One of a standardized set of short codes, e.g. Success, QueryNotTraversable, KPsNotAvailable",
                "example": "Success",
                "nullable": true,
                "type": "string"
              }
            },
            "required": [
              "message"
            ],
            "type": "object"
          },
          "Result": {
            "additionalProperties": true,
            "description": "A Result object specifies the nodes and edges in the knowledge graph that satisfy the structure or conditions of a user-submitted query graph. It must contain a NodeBindings object (list of query graph node to knowledge graph node mappings) and an EdgeBindings object (list of query graph edge to knowledge graph edge mappings).",
            "properties": {
              "edge_bindings": {
                "additionalProperties": {
                  "items": {
                    "$ref": "#/components/schemas/EdgeBinding"
                  },
                  "type": "array"
                },
                "description": "The dictionary of Input Query Graph to Result Knowledge Graph edge bindings where the dictionary keys are the key identifiers of the Query Graph edges and the associated values of those keys are instances of EdgeBinding schema type (see below). This value is an array of EdgeBindings since a given query edge may resolve to multiple knowledge graph edges in the result.",
                "type": "object"
              },
              "node_bindings": {
                "additionalProperties": {
                  "items": {
                    "$ref": "#/components/schemas/NodeBinding"
                  },
                  "type": "array"
                },
                "description": "The dictionary of Input Query Graph to Result Knowledge Graph node bindings where the dictionary keys are the key identifiers of the Query Graph nodes and the associated values of those keys are instances of NodeBinding schema type (see below). This value is an array of NodeBindings since a given query node may have multiple knowledge graph Node bindings in the result.",
                "type": "object"
              }
            },
            "required": [
              "node_bindings",
              "edge_bindings"
            ],
            "type": "object"
          }
        }
      },
      "externalDocs": {
        "description": "Documentation for the NCATS Biomedical Translator Reasoners web services",
        "url": "https://github.com/NCATSTranslator/ReasonerAPI"
      },
      "info": {
        "contact": {
          "email": "translator@broadinstitute.org",
          "name": "Molecular Data Provider",
          "x-role": "responsible organization"
        },
        "description": "Molecular Data Provider for NCATS Biomedical Translator Reasoners",
        "license": {
          "name": "MIT License",
          "url": "https://github.com/broadinstitute/molecular-data-provider/blob/master/LICENSE"
        },
        "termsOfService": "https://github.com/broadinstitute/molecular-data-provider/blob/master/terms_of_service.md",
        "title": "Molecular Data Provider for NCATS Biomedical Translator Reasoners",
        "version": "1.0.0",
        "x-translator": {
          "component": "KP",
          "team": [
            "Molecular Data Provider"
          ]
        },
        "x-trapi": {
          "version": "1.0.0"
        }
      },
      "openapi": "3.0.1",
      "paths": [
        {
          "path": "/predicates",
          "pathitem": {
            "get": {
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "additionalProperties": {
                          "additionalProperties": {
                            "description": "Array of predicates",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "description": "Target map",
                          "type": "object"
                        },
                        "description": "Source map",
                        "example": {
                          "biolink:ChemicalSubstance": {
                            "biolink:Gene": [
                              "biolink:directly_interacts_with",
                              "biolink:decreases_activity_of"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Predicates by source and target"
                }
              },
              "summary": "Get supported relationships by source and target",
              "tags": [
                "predicates"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "post": {
              "description": "",
              "operationId": "query",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "Query information to be submitted",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Response"
                      }
                    }
                  },
                  "description": "OK. There may or may not be results. Note that some of the provided identifiers may not have been recognized."
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Bad request. The request is invalid according to this OpenAPI schema OR a specific identifier is believed to be invalid somehow (not just unrecognized)."
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Internal server error."
                },
                "501": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Not implemented."
                }
              },
              "summary": "Query reasoner via one of several inputs",
              "tags": [
                "query"
              ],
              "x-swagger-router-controller": "swagger_server.controllers.query_controller"
            }
          }
        }
      ],
      "servers": [
        {
          "url": "https://translator.broadinstitute.org/molepro/trapi/v1.0"
        }
      ],
      "tags": [
        {
          "description": "Get supported relationships by source and target",
          "name": "predicates"
        },
        {
          "description": "Query reasoner using a predefined question type",
          "name": "query"
        },
        {
          "name": "translator"
        },
        {
          "name": "reasoner"
        }
      ],
      "~raw": "H4sIAG6iFGAC_9VcC2_buJb-K4T3Aknu-pW082iABTZJ007QyWOS9C5253YDWqJtTmVRK0pxfYv-9z0PUqJkOXHSzMXuAJ3YEnV4eJ7fOaT8tWcylcpM9w5F79VwPNzv9UVPp1MDF772YmWjXGeFNikOODeJispE5uKtLKS4ys29jlUupiYXFydHtzfiWJuFinUkE3Gby9QmsoB710pak6rcIvF7-Ovo7cOEY7xW6CJRLzZDZNJCRgWtQC2kTpByUQ3-90luZKxTC7OWhRqafIZPpXLxEAs45MsgN8xnrmxmUqsniRLwvEz1PyRJ6RsMS3SkUqto_orq2a341V2HIWVOTM2LIrOHo9FMF_NyMozMYtRkbrTw3Axi4GaQOW5Gk8RMRgtpC_j869nJ6cXNKc0N3xf2cnqj8nuY7eXmILp3ZnpnmfJwEbNEQK5kPV_XFfvND3CCp1EwP0hOpaie3ocr0r6SC_j2-0bRf_qGpNQXYCKVyVsT2S7rhOvlAgiTIshiirnazmrEUk2EW5l9WD9Er6Yx8jSOrs5owUgF7RDW87VNphbFcN0GSQ0g-xFJdHS_jxL8hOKRM0fOG1OW01oK5rUlhveqELbMMpMXKha5Skgedq4zKyYrYU2ZR0rINBaFzGeqQK5r0v9TqnzVQfU3vA7UeLGitDqdCSmQEzXVKcwET1qSfLHKVJNoYAKN654crzOTxZwVOwoWiN-RS_zrJREKAJ-05WIhge3nrL5fObOb7GA87rKuq2rKjXQw7rBhf-3JLEtwODw9-sMSia89G80hHnVRv2F6C5mRQ6AE4aqZ_KEiIi3jWONYmYBTZCovtOr0gVti5vvpHOW5XAkzFU1T8wQl3qZMUagFE_C3bJGDafS-OZeViyzhSDjRJtHp58MTkAE64k05sYVMo-bd9ypVpGJ_IdY58J6s7jQIN4ewbu-W4I04eTVERWhJyt7BbX2vixUEKgwa7j8YOmK7xpkyY1vWxPdahtQy-HstBXxAkVgFDg6BRKdZWXR5IF5C4ZL2z-KGW-WK_OTYxKsuufOsmH_zBcexwoiJApOeLHQBJu1pgFSQcJGX6omW95dcTXGqfxlVodiO-L4d0fw9J7St_OLyw1DczlWOxgsWk9Of1BTINRAok8IOxYUpFERjCb4JcRiFiKHZJZpYwP_SQk81RmL_-FzeK6ChUqASmRkkWBUPey-51mu3PL_c190LPJYYR0hrtFL_RWgLirqXiY6FjCKTxxgSQV3FHO5cAqyClCB4MnF5DcHSZiqCVUbBepHIRCUaTCp2qvY0UVJzsxS7KI0_SpiwTGtR7D1ZFusOiov-oXvRZynnWsHpTKg8h6T1UlPud00JNiI0RgvM4c_QdcdkDEDsUs5mKgfsBpk2HyBNgHGJymk037zjdQ7rm3ZIPnsXDGeCtSUFHPDn36og0w7LYDbs2lEirUWtl5Y1nsnos5xBKsEreWVcCF-CMDAUR44Ax3IRIfq0hUVfksJHBHGurEVqbhRGSmEyjviiDv7oei76A-Wuy0LmaIog_Zj5hAnv1arWELE1qEwa2CV5DTQ8kOFTaQFryyHTFyhM8Q5GuHTQh7zZwczKOciKoUViZiIBv0hg6jIBH0sS8AYnJmDIgL5y8CQKJQBCJISa4CGdAk8xDwW3URrCycLAohCtDGa5JNCC48Nou5xDwInVpJzNiIsUVGVLNWSsO4GoPajBC2nqDi92J9usmWIXrJvHA5NTYkdmQTsiMVeKBkuS6KQaYgaXID66huY0FCfsSf5my05YZWBMKd2t9H57jTGsymUtLeLQqU6SeoA3RGQqBfNQiwzUyo4EIs_mMF6hLi3aRpubPoofM64wcDWvydq-UMPZkFSeyFXfTxPM4VINIbLPqVkmKp6pcE477K1BklAjAZNcOMLzrDflQiTkYNIs6CEdj1nBDhzhNY9G5HQKowgXmOCBfZ4-NbEjmzqymgDC1cfjk19Oz4cnl-dXlx8v3h4eHLx-TSEQyM8MY5LNEIpIu7ja9QTBKh8SN4BAhyUCdPF7JaFP-FyVMMNwW5t7h636J4KoVYDjWdI6VOYpmMEqgUqIHU86g2MTBxPMDJgimWMOsnbqZVgC1kq5NsBG7jlbRlDF2WmZJCuxq4dq2Be_3N5eiRsIWqUFV4CgAWhmj9O5W2IdhRpMVrbkbdWDIrHLs5HF9INx7oLjFI3STWRp-r4I5MTDIAjZMPQ6XBSGyFgBSwmsfwJJrMHH8JFI09LKycsvDhnYKp5ReUxC6ASSjK4lyimNJcApgDkQ2ihK2DkUdKAZeMbFghvWcp_TIoAHqMmx8JYTDE0frixcOroHoeGFMD47fNAIBT1HjfpAYDf0DHvEtzXLXi-WxCTXairm5UKmAwhgMT4f6tnLF5QH8tmanaF4fVBFtqkpU0ZFHRyiCXWx9ivkN9BFjmbl7BrzGsE5kN1S5vidjNLnvCAdgqiL6JG670HNw_SnMPuK41OL7e8JReebLTz0aRd25iaJg5gT1blQelSVw8cqWmlMg7lSgVMehlms75XS78o37O1h0usOLexicGmqZ2XuBO68kDS-_phMV_DPLrFQonIKURoExjJHMDNZcTzkPlYnbx00Ew8jKePRQ5SkWAoIr0w5mxfs-vBY7uJvWO04efPKowbUsKEUEa7Q7S_FoIaJLo6rFC0I4DFSdpqjBgvcawERj2tcmfAo9HIS7fQQWD5ZAuCYSpLXNN4xYateImssM5br8Od6BVPv9Im-WAMiXR2C96QLJyMyhNpE1tGgdIw7haJ782WeBN0wSS6n3GN8vD1Ak3PLroP9lsF1LeGDH_LAMiqrZFtEO2D73NYqqyDwlPU1Oete4wNhayoTS0Ko4t6G-OTvr-GisBYBAA8Yho0vlxHXI3FYnUS5gWIyaGjXSxoKcZSwkKiKAckApihlUo8Ru9NWTXZ0fYSR8MPVHrVhqAWjUQ3LFEHKbJ0F4DeXkMLKCDyHSgLqirjmQbgauJ6aoo_6mwEYzWUCU_r8TPUcYf5wBWd1lYgDpCg06LQAfj1sIh6o3uvXMtVplJRkNIKTa6OOpbaUpGApOWMDH4mBUVwsP4RCCH-4vD4hS-Nw53h0Sb4WsFXOIGtr3C5eVQvt6mzAcBYrXosB7A9weBcCr8QFQj-7uRQ__zjeF-7ZJuA4GB-MB-M3g_Gr2_2fD_dfHb5-86_j8SGXOV14A2W-gbl1CFKriaZNS97uOb2-vrzGK_9xdH1xdvEeP55dvLvEv29Pjz--722IMaiH7SbfFlQyptwAJUMkid89TjiXCQqTk0EHmyEMf5TTozZ8xNZEEMKeiJ5cvYZ5Zqtq7aiZ83yvUjFU2RCEW3WB6_CCv9upgyI-MggKTs5RXNMKGxSDdvHmENRZIRbY8nSBEUZfAAvHmvzJeiZ3E5e8g2eJV3T0NnN0fSGzDCns0WIg5J3CgK3IEqUOsvSxIttVjeHEdxM3x_a1c6wj0m1O-zBnuNngwCqnTeDFqazKWu4OrdRPyD0VbpLVFD-rFbf4SI3Y1wta8C6OhZPVBoB3AKOZSEvU2r1MAIjxI4CLasK4t4mtCboXKM93xFEGYtcqbPInZkk1MuQIokddLVC634Rq6B7gIe68iZm-V6lTkdOtS1kLEIqGwLamq4uGYJwRMzYcPrg79lykFzDud8QQGf0zjYE-vqwx1IXCs4whcLnnGEPDY7uMwXkk9QRNck9eu9EkGvHszzSFgO3e0_twzRiyZkdUE4fG1m1YrcBEncdH2D75eH122pUv0kqpbQfnljR8AnG3oP5FEIP7tZlVpWsTx-_oeMfH5KZZeqskeojbnAJbxo8QckMUQvtwQBEgMOBrsDHAp4xVd20ZzcMLDF7FCnADtxVDOLHnOstPUCdInlQWGsWWaTqUeuhJD0j9NEhRLyF1ore11EMmX1bqGy36UbB1uxboHEr021kdEny-lltV5dZBvx2rgkhLtYr0QLbaZ7-ddyReitSkMzqqwwUJyJaJ5iqDxxW12YMH_cbBhQR8C8EYHtoFMBaprGAwwAjKDztyrJEew1M3HGD36mmI0lEBmpmUhdrz-lZBq6ruw0xzs2ghTT55w-kH6ktIZ5QBZhi1xBKWlNWGzVmBe0fNjctNOG3LlPy2kY5JyLX0aGe37Rrvfd_QcQxIOrGK07Eb63pcZYHJ3a2gmaUfzkyPIpFehUCetUwyof_jy0Qee8_KrlVWddk0aHVtGZlb_sS72JP64KE_IEfVDZ03sLgRCuhHgW2CC1CrR8lo7hxa7HKvd89tjPK9Ce4DdFY3I_oOnq2-QBwruN9hJspHeVAdbnsXFagLAkqj1GFH-U4fuXV1YxVUOSZwkCJkSFxg91hmhBLLVAMb_FAIQT3SbOYpBzZ9OllbYuokRSx_h0n99izXwUVyvHri6lmHL7Z6Ypm6bmErLTho4XZQq267y_y06u8S2wu64kW73_OAF7L1pHXRwhncH7ep0x3UFCjkgvrirkUOrokwgECvhx--ExL3afuFK-GFLKJ51QF0G-5VreRgaZJwt9ElM8fUtUvWm-ELSHKrbjVjczpR-9yqxJGgRnfQDrw8Pzs__HH86s34VYeQnXhq7MT7IySvWG1ohgWnErZf4THDi1PS0_ettEVq0_aFtndWNXtmE2MSJdMOQRzzHe576SnBMdx8ILtGyMvnhek2yYct4_zoP1uNio4yyToHBnq68GibEgAbEEeSaqeOsaCd01GpCQcDPDuvYs4xDimGp7NS3k3PJTXegcm0Hrc2io9RUNKgnCSWNBMkNLZyPrOop0G70Nk7Ulwq1wRQdJiycgi_KZGA5517YXDoCXYgSCX_dgtSdf7JYtxN9_cYCAcj3A5jWuW_evRBc_Q73Kzps0jTfW43suDqh9ODl5zxluziwQnBUMCisPuYKpydjY7OtlX7S1t0fjn4bhcxU5dyukOmpObLVCcF6DyTBe7sNHNaO3xWxw2r01HY_PU1QfuIYSvCAgsrug7QpFxUOzYQS-MICj-Ou6o6-sNn78PqIJMRW0mTKMizMImZERDTKRi85ip6DvFL5tF8tVZdEX186yU4p2w9X31BxSp5drPDVlk32u9EUZr5IqOCWfeMc2VCatogJ5xa7O7QedEdQIAmd3tgeH0519HclfzlhM-U-uRzGqAOFCCM78o14dm1Jwfk6mWIF4nJAbVNYdmLZUN5H6Su68vD8Xh88Pr1TxvfYqmBEtSNuO3qT1QFZSt1JEnWHqehmvvoDybXM51KakhUYp6sSEURHuTgArQuTrGKdVboHhX-XSb_IglMUhlxeFyeZnZR3UwLsJlJqFw8R1lbD5v4itmmJI1bm24T2GHN6mw-Cg_fqwAQBOk7UhuPFtXHHh-RvH_LySz0gl5owoNHq9FmGFEB2sqfEQt395w8RA17EOBb0dzkHoZxCdMKVc2jG2udiSGdwjBPXOFyuRwCXAePKmih7vPoajz-6dXP37tU82et9IlQ3Cu-FlDVZn4OGG9hHA5hFRy3_GZIUC679Q8dGqJthLXWJVVS3ROEvebOUpbPcT-i8l9kVphZYiC-d6zwHe6lJwJJee1xTfH_GwRL357bsOWxpme_YVo_2D4l4SuDLRmtGoRPPTlYHcGpKWxlq3hAGgJivQLyJ8kWjJ8cTOKM_yWT6MpgfQPeo8qkziuPnfgmN7eAKJX4LBLQx94m5m9AIvQasQvffbxYZYXmQ3ymb9dDrGS1h_voeeL6wfV54fDkjT8zHBJ6okO0hPVL86QCm38uQEcqqeJQPRdB6AxnyxFf9YMyhUwj8B4L2gfjjOr8O2w55FU5OQf_P6vC5gZXI73w-f3q4VcHPxy8efPDwfqK_kZa9G2xmvNzD-JWAt-NJrb6De2i6XMWcWJ75oYaF9WdYlhnC1_DCIC0fwXXBUXn5WIBtps0IAQuxffsPUKgc1dLjbUQlG-ZsfRWe7_uvZ--PTqvrNPVQ5XVBukrNoo7JuoLyKSPkVChC1ULhVoum-fSAurGehBNmY9_sBmoJS93ymdFqHxlC3brCmxIyLLAhFis2vaB3B6iru7293_-iRTDb2Fvbdc4N3zA1X28_hXzNYkLnQhZ7jid3-Vtgb74FT4fBYXzDwwne8MNCCMDuQAkS6OJHqbJYpjq-XBm7kfegjdhNYob2y32JogxKgwxGXXvgfKKWwdsmXhVf2nz-zHVEH6LD8ebjig1EAXxVPnmpy2i-BPq2FZV2vakBiBChVJmWhoftYMD1RDeAZS46rfRy6gLzb_33AnUv_eqxj-2ZZCqi-wMxMrMvVRVpmDPCfVc27tZj9dn2x5gXa-o_tyC6nbbuukliqbOWuk2CG_uYGmy2qZKIrPepujZLpxv3z3dXAs0c0BXxeOF-ngh82SuK1c-fE4Z02DdPJ3z50POOgwH6LPqSOMM_zTcuWUF1UThnS9pLTJsGYFMxS5Jds_BUZ_aqeXT79qlp2HRXCe0a5QrM-VOMSuImo6lVe79ewzpYsdT2YFJ8CXbGklcSQul2AmmbG4yIVYbdr--5OpQvPjfnuLvR4P_-vS7HPwD__71L70tfsWlCV6omtKdv8ni5hi632bRxl8Z0KOjGCYY1YIZzotF0mu-AVq9Hnk1V5CiV5mO3imJ51V7gZ6uGpG4E7Y1lbNTRZsdYRM89F7IzyqtEZUfiDfF7o62d3JnL2hF5sYUvGHkGSSvUfEdeN2uTYHaXQRK8efk6ujGSNA2Zml43EQVS_xRhQ3bfpzt6CxM19GO6gCJ7DxI9xTLAKMgy7h7ll00f5bkOZZRS_RBy2j96giO4uC55aHuwJX7_qV9ctMp_3oOOiAdRa7PTABmwRfnXUYEZ4Z8lbqGM6Sydpweir9pyW1m11N0b1g5bdXvlYVAjiYlyr5RnasskZGfFEMPj6xnRvmCeIPN6Ub3q485gV4uknReC2kMO1Xb0he205aviNbt9ehgvD8eXVzeng4AF2g1wO_7B_s_jvj95f8FlLUGL7JMAAA="
    },
    {
      "_id": "40432beee9e4945c5b824d9c3ac8b1b9",
      "_meta": {
        "ETag": "I",
        "github_username": "patrickkwang",
        "slug": "strider",
        "timestamp": "2021-01-31T20:52:54.482832",
        "uptime_status": "good",
        "uptime_ts": "2021-02-01T00:31:21.158416",
        "url": "http://robokop.renci.org:5781/openapi.json"
      },
      "_score": 3.5489109,
      "components": {
        "schemas": {
          "Attribute": {
            "additionalProperties": false,
            "description": "Node/edge attribute.",
            "properties": {
              "name": {
                "title": "Name",
                "type": "string"
              },
              "source": {
                "title": "Source",
                "type": "string"
              },
              "type": {
                "title": "type",
                "type": "string"
              },
              "url": {
                "title": "Url",
                "type": "string"
              },
              "value": {
                "title": "value"
              }
            },
            "required": [
              "type",
              "value"
            ],
            "title": "Attribute",
            "type": "object"
          },
          "BiolinkEntity": {
            "description": "Biolink entity.",
            "pattern": "^biolink:[A-Z][a-zA-Z]*$",
            "title": "biolink entity",
            "type": "string"
          },
          "BiolinkRelation": {
            "description": "Biolink relation.",
            "pattern": "^biolink:[a-z][a-z_]*$",
            "title": "biolink relation",
            "type": "string"
          },
          "CURIE": {
            "description": "Compact URI.",
            "title": "CURIE",
            "type": "string"
          },
          "Edge": {
            "additionalProperties": false,
            "description": "Knowledge graph edge.",
            "properties": {
              "attributes": {
                "items": {
                  "$ref": "#/components/schemas/Attribute"
                },
                "title": "Attributes",
                "type": "array"
              },
              "object": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CURIE"
                  }
                ],
                "title": "object node id"
              },
              "predicate": {
                "$ref": "#/components/schemas/BiolinkRelation"
              },
              "relation": {
                "title": "Relation",
                "type": "string"
              },
              "subject": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CURIE"
                  }
                ],
                "title": "subject node id"
              }
            },
            "required": [
              "subject",
              "object"
            ],
            "title": "knowledge-graph edge",
            "type": "object"
          },
          "EdgeBinding": {
            "description": "Edge binding.",
            "example": {
              "id": "string"
            },
            "properties": {
              "id": {
                "title": "knowledge graph id",
                "type": "string"
              }
            },
            "required": [
              "id"
            ],
            "title": "edge binding",
            "type": "object"
          },
          "HTTPValidationError": {
            "properties": {
              "detail": {
                "items": {
                  "$ref": "#/components/schemas/ValidationError"
                },
                "title": "Detail",
                "type": "array"
              }
            },
            "title": "HTTPValidationError",
            "type": "object"
          },
          "KnowledgeGraph": {
            "description": "Knowledge graph.",
            "properties": {
              "edges": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/Edge"
                },
                "title": "edges",
                "type": "object"
              },
              "nodes": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/Node"
                },
                "title": "nodes",
                "type": "object"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "title": "knowledge graph",
            "type": "object"
          },
          "LevelEnum": {
            "description": "Logging level.",
            "enum": [
              "ERROR",
              "WARNING",
              "INFO",
              "DEBUG"
            ],
            "title": "LevelEnum",
            "type": "string"
          },
          "LogEntry": {
            "description": "Log entry.",
            "properties": {
              "code": {
                "title": "Code",
                "type": "string"
              },
              "level": {
                "enum": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "type": "string"
              },
              "message": {
                "title": "Message",
                "type": "string"
              },
              "timestamp": {
                "format": "date-time",
                "title": "Timestamp",
                "type": "string"
              }
            },
            "title": "LogEntry",
            "type": "object"
          },
          "LogLevelEnum": {
            "description": "Python logging module log level constants represented as an ``enum.Enum``.",
            "enum": [
              "NOTSET",
              "DEBUG",
              "INFO",
              "WARNING",
              "ERROR",
              "CRITICAL"
            ],
            "title": "LogLevelEnum",
            "type": "string"
          },
          "Message": {
            "additionalProperties": false,
            "description": "Message.",
            "properties": {
              "knowledge_graph": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/KnowledgeGraph"
                  }
                ],
                "title": "knowledge graph"
              },
              "query_graph": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/QueryGraph"
                  }
                ],
                "title": "query graph"
              },
              "results": {
                "items": {
                  "$ref": "#/components/schemas/Result"
                },
                "title": "list of results",
                "type": "array"
              }
            },
            "title": "message",
            "type": "object"
          },
          "Node": {
            "additionalProperties": false,
            "description": "Knowledge graph node.",
            "example": {
              "category": "string"
            },
            "properties": {
              "attributes": {
                "items": {
                  "$ref": "#/components/schemas/Attribute"
                },
                "title": "Attributes",
                "type": "array"
              },
              "category": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkEntity"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkEntity"
                    },
                    "type": "array"
                  }
                ],
                "title": "category"
              },
              "name": {
                "title": "Name",
                "type": "string"
              }
            },
            "title": "knowledge-graph node",
            "type": "object"
          },
          "NodeBinding": {
            "description": "Node binding.",
            "example": {
              "id": "x:string"
            },
            "properties": {
              "id": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CURIE"
                  }
                ],
                "title": "knowledge graph id"
              }
            },
            "required": [
              "id"
            ],
            "title": "node binding",
            "type": "object"
          },
          "QEdge": {
            "description": "Query edge.",
            "properties": {
              "object": {
                "title": "object node id",
                "type": "string"
              },
              "predicate": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkRelation"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkRelation"
                    },
                    "type": "array"
                  }
                ],
                "title": "predicate"
              },
              "relation": {
                "title": "Relation",
                "type": "string"
              },
              "subject": {
                "title": "subject node id",
                "type": "string"
              }
            },
            "required": [
              "subject",
              "object"
            ],
            "title": "query-graph edge",
            "type": "object"
          },
          "QNode": {
            "description": "Query node.",
            "properties": {
              "category": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkEntity"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkEntity"
                    },
                    "type": "array"
                  }
                ],
                "title": "category"
              },
              "id": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/CURIE"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/CURIE"
                    },
                    "type": "array"
                  }
                ],
                "title": "id"
              },
              "is_set": {
                "default": false,
                "title": "Is Set",
                "type": "boolean"
              }
            },
            "title": "query-graph node",
            "type": "object"
          },
          "Query": {
            "description": "Request.",
            "properties": {
              "message": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Message"
                  }
                ],
                "title": "message"
              }
            },
            "required": [
              "message"
            ],
            "title": "query",
            "type": "object"
          },
          "QueryGraph": {
            "description": "Query graph.",
            "properties": {
              "edges": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/QEdge"
                },
                "title": "dict of edges",
                "type": "object"
              },
              "nodes": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/QNode"
                },
                "title": "dict of nodes",
                "type": "object"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "title": "simple query graph",
            "type": "object"
          },
          "Response": {
            "description": "Response.",
            "properties": {
              "logs": {
                "items": {
                  "$ref": "#/components/schemas/LogEntry"
                },
                "title": "Logs",
                "type": "array"
              },
              "message": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Message"
                  }
                ],
                "title": "message"
              },
              "status": {
                "title": "Status",
                "type": "string"
              }
            },
            "required": [
              "message"
            ],
            "title": "response",
            "type": "object"
          },
          "Result": {
            "description": "Result.",
            "properties": {
              "edge_bindings": {
                "additionalProperties": {
                  "items": {
                    "$ref": "#/components/schemas/EdgeBinding"
                  },
                  "type": "array"
                },
                "title": "list of edge bindings",
                "type": "object"
              },
              "node_bindings": {
                "additionalProperties": {
                  "items": {
                    "$ref": "#/components/schemas/NodeBinding"
                  },
                  "type": "array"
                },
                "title": "list of node bindings",
                "type": "object"
              }
            },
            "required": [
              "node_bindings",
              "edge_bindings"
            ],
            "title": "result",
            "type": "object"
          },
          "ValidationError": {
            "properties": {
              "loc": {
                "items": {
                  "type": "string"
                },
                "title": "Location",
                "type": "array"
              },
              "msg": {
                "title": "Message",
                "type": "string"
              },
              "type": {
                "title": "Error Type",
                "type": "string"
              }
            },
            "required": [
              "loc",
              "msg",
              "type"
            ],
            "title": "ValidationError",
            "type": "object"
          }
        }
      },
      "info": {
        "contact": {
          "email": "patrick@covar.com",
          "name": "Patrick Wang",
          "x-id": "https://github.com/patrickkwang",
          "x-role": "responsible developer"
        },
        "description": "Translator Autonomous Relay Agent",
        "termsOfService": "http://robokop.renci.org:7055/tos?service_long=Strider&provider_long=the%20Renaissance%20Computing%20Institute&provider_short=RENCI",
        "title": "Strider",
        "version": "1.0.0",
        "x-translator": {
          "component": "ARA",
          "team": [
            "Ranking Agent"
          ]
        }
      },
      "openapi": "3.0.2",
      "paths": [
        {
          "path": "/aquery",
          "pathitem": {
            "post": {
              "description": "Start query processing.",
              "operationId": "async_query_aquery_post",
              "parameters": [
                {
                  "in": "query",
                  "name": "log_level",
                  "required": false,
                  "schema": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/LogLevelEnum"
                      }
                    ],
                    "default": "ERROR"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Query"
                        }
                      ],
                      "example": {
                        "message": {
                          "query_graph": {
                            "edges": {
                              "e01": {
                                "object": "n1",
                                "predicate": "biolink:has_phenotype",
                                "subject": "n0"
                              }
                            },
                            "nodes": {
                              "n0": {
                                "category": "biolink:Disease",
                                "id": "MONDO:0005148"
                              },
                              "n1": {
                                "category": "biolink:PhenotypicFeature"
                              }
                            }
                          }
                        }
                      },
                      "title": "Query"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {}
                    }
                  },
                  "description": "Successful Response"
                },
                "422": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HTTPValidationError"
                      }
                    }
                  },
                  "description": "Validation Error"
                }
              },
              "summary": "Async Query"
            }
          }
        },
        {
          "path": "/query_result",
          "pathitem": {
            "post": {
              "description": "Get results for a running or finished query ",
              "operationId": "get_results_query_result_post",
              "parameters": [
                {
                  "in": "query",
                  "name": "qid",
                  "required": true,
                  "schema": {
                    "title": "Qid",
                    "type": "string"
                  }
                },
                {
                  "in": "query",
                  "name": "log_level",
                  "required": false,
                  "schema": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/LogLevelEnum"
                      }
                    ],
                    "default": "ERROR"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Response"
                      }
                    }
                  },
                  "description": "Successful Response"
                },
                "422": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HTTPValidationError"
                      }
                    }
                  },
                  "description": "Validation Error"
                }
              },
              "summary": "Get Results"
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "post": {
              "description": "Handle synchronous query.",
              "operationId": "sync_query_query_post",
              "parameters": [
                {
                  "in": "query",
                  "name": "log_level",
                  "required": false,
                  "schema": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/LogLevelEnum"
                      }
                    ],
                    "default": "ERROR"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Query"
                        }
                      ],
                      "example": {
                        "message": {
                          "query_graph": {
                            "edges": {
                              "e01": {
                                "object": "n1",
                                "predicate": "biolink:has_phenotype",
                                "subject": "n0"
                              }
                            },
                            "nodes": {
                              "n0": {
                                "category": "biolink:Disease",
                                "id": "MONDO:0005148"
                              },
                              "n1": {
                                "category": "biolink:PhenotypicFeature"
                              }
                            }
                          }
                        }
                      },
                      "title": "Query"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Response"
                      }
                    }
                  },
                  "description": "Successful Response"
                },
                "422": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HTTPValidationError"
                      }
                    }
                  },
                  "description": "Validation Error"
                }
              },
              "summary": "Sync Query",
              "tags": [
                "reasoner"
              ]
            }
          }
        },
        {
          "path": "/ars",
          "pathitem": {
            "post": {
              "description": "Handle ARS message.",
              "operationId": "handle_ars_ars_post",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "title": "Data",
                      "type": "object"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {}
                    }
                  },
                  "description": "Successful Response"
                },
                "422": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HTTPValidationError"
                      }
                    }
                  },
                  "description": "Validation Error"
                }
              },
              "summary": "Handle Ars"
            }
          }
        },
        {
          "path": "/plan",
          "pathitem": {
            "post": {
              "description": "Generate plans for traversing knowledge providers.",
              "operationId": "generate_traversal_plan_plan_post",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "title": "Response Generate Traversal Plan Plan Post",
                        "type": "object"
                      }
                    }
                  },
                  "description": "Successful Response"
                },
                "422": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HTTPValidationError"
                      }
                    }
                  },
                  "description": "Validation Error"
                }
              },
              "summary": "Generate Traversal Plan"
            }
          }
        },
        {
          "path": "/score",
          "pathitem": {
            "post": {
              "description": "Score results.",
              "operationId": "score_results_score_post",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Message"
                      }
                    }
                  },
                  "description": "Successful Response"
                },
                "422": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HTTPValidationError"
                      }
                    }
                  },
                  "description": "Validation Error"
                }
              },
              "summary": "Score Results"
            }
          }
        }
      ],
      "servers": [
        {
          "url": "http://robokop.renci.org:5781"
        }
      ],
      "tags": [
        {
          "name": "translator"
        },
        {
          "name": "reasoner"
        }
      ],
      "~raw": "H4sIAKcYF2AC_-1abW_bOBL-K4Jv7z4cEtvJbbGLAIs9J_V2jW2dxE53gQt6LiMxsjaS6JJUtr7A__04HIqiZMpRmlw3xbVAY4kaDuflmeEMpbseW9GcrJLeUdD7R3_YP-ztBb0kv2Zq4K4nE5lSeDSXPIkoh4e3lIuE5TB6oCYMYSxkuSSh1HNoRpIUnq6ImhTe_DNkt4T3Q5YBZU4yzfAMHwa_kTyG8Y_7SQTjSylX4mgwiBO5LK5g1sDwufnDknKGUnEqViwXyVVKg4je0lQpw3sbRRNREfJkJY2gF5zkIiWS8WBUSJazjBUimNGUrINRTHMJfCXlmTi9nlN-m4S0FEbJwtkVu2GrPqd5mPQZj4--G754MZBM_CiQeJGyPP7BGOlvK85u4QJH5ZL-9XA4U1ZOhCB5CHcnLFsVMsljdT3JhTJzIWk1TywZlz_MxtOTCSosrfzaxMoqSm8QWwk5mo1QepKp28vejOQ3irPR690GzAFiKrfB87tewdOdyr347vuD3ubdnvbgUugVB-RDQflaX6-YQE-LIsuIHuyNxDoPg3NNs23-uSRcBppDoJQMqRBKwj5QgscI0E20-wnwWWjKBS650MtpYbjCjrRqcPqhSDiFadckFRTUDJcKfVo2kqan10j4Dadw1fvLwNpNDJBUDF6z-DUgZ5wXGSod0WtSpNq049nsdKbxVMI2ZfEiBXoMExhCw-ipIBIV8phFa-OnXKKXlECrVZqEWtXB70Lb5c4V2IaaNWJXFc4rAehHkq00m7tepqxMYrxGS8acrJb6PmfKQ3g11D8YfG9Opy9Pj4bD4YuDb7_XcU0kjRm6-CphaZLfHL1MBCWColkOUE8P2dmS5kyuV0n4EyWy4GoCzKBRbFamwwODoqvfqc4dIAxAoro_0I5XTgbLUZf9kojFyiwBrPGf8YGBheQFxSGdJsy6h0NUuYnRIgRcXhepygtIX2a2ji40Anx7eOjj_ytJk0jPDcacM_5A5rsh8PPFxVm1APKvTDJA9yszIK79IfyKStBckQhPCMNTZCCCa5VGScCLPIc8o26ukzwRSxqZEPfEdUylWV8sXGm6RDe4sR7cVawo3ELuAwyoW6ESsNoj3ID9gBS1UN0Lnmn2-Cww3a2RZfrM0VyHsSSxxo2yIVGrqSIADOqAe75re_qZ5JGqIGDrWXJVHKjSQK_h26Cc_enr9vR1e_qCtqcvPu4JF62blwnhERft8T2azQODOl9kLzXVQq2i_5dx_SRB85JI4m5UBkNfK5Y2X69Sku-oVHLwHA1UWwdtDUmDM6D3VS2GEvhh4SJxDlQuNzn7I4WID8rOS_S9tQsyWchyuQWwM3-eACZd0uefnTwslEsGQYsXzB9jlm3AP1PAiZBx2oq4OTzdUR3jc1PgessGILAVMN79v0Bnp4xvTBnwPJGx0euUMxyueD2SquG4KiSth0g1XDf8JYYDnKGRtKC6Rm0EiK4nADsyMX4xBA77komn60G-NWoccopE59kURvyc8JDIoX3L0xZSwQoeNjjPccwzAWaQKErA1iQ9c5Ut6-SG86eqGhzoNE1Kw_b1wsdYbI1ztey6vr6pwwKKz_AsSxXnmuG_yyrtcrT_r3eXZP8_8Pv3bzzibktzXONcEwTOEw2ZRxRePm0TRsmhhVk8VJSSMwpz8nY2GddFwKEuLOFgkoQyUBOQ2ziKG661u-a-LtgDuNwCelk1V_VyJ7BXxbazoBkMoCsIsJ3v2nug4pt3G7dud1izJ-HsdgD3TGsiBfOwDzYzBy6eoLOhIFpyj3AnEs6JjoJE0kzcL2aVwTafELC_2LqqQkiFpuMkj0CLmtia-so8aYJJeaYTenSX6EOqkcN_WOR5XTB2pNG7udu4Yi_qzvZtIDVBfARdFIqoxHcpbiuBY49wrm-v23O89sr24W2W3PIQNuy2f-7krarJt8tYNtuTWxB4j6qwdTQb-xrmnnQ1nSs3PkA1IgKDoTrYqYlVDYPY-PjSnPWokd9Gs-lk-gouJ9OfTuH35fj47aua0Vvz-2sWx9D66EMiIwaL1Q7KGxuoHe1UoySqr5YqROo8LuywVzTVjWVEH6QoNNJ9YKIFwgMsfQbzKO2xeIsa29cJjPiJ3SMpS18WqN0yhzIbVAZ8bW3b5mX3ievo6enFfHxRKeZo6ihvDXIym1xMTkavu7n_bC2XqoZODQoyFhUphVsERKBqauUwhWlVU6hdTShVaBQQEaiW7v17kLEPAr9_j-q98Rks2zZYK3CaB3-WCb5IsMnmQWeNmL9wa7aJy7eIJ6t1XaiRLHEx097VF0kTIQN2XTaHj0nc2H9-0pb8pjz3gqnTraBo1nR5I0haHegcrTrs7CjIma87WbRezOt3NJ9qpwYrdM6Dup8vqboCX20VKe6Rt5uuwPXeAkyXwJ-nAHtwib3x94T3VGgfj1zFz7cbGZ1j_sQmxoO7bj2KZ2K9BbFzq-GHR6Lbozw6FitmZap8aM_jAYHO9k53cb6d2Fwfd05qTRgb2HY0n4HtY4xmWKCpvpwUm4iFoA30TkQwp7Wj4CvGUlqe1pfvMnWua_cx5jjtY_vyt-7jreAty5BOIZvdU8h0TVn2NNObtGZ40Oso4mm1RAJ5LGgUQP-LbktlBl2ZPHnXdb6z7SqXffL267y9_zqvrInWt2fZNdG4c8L9rMC0p1_ti60W4lFliG3x8BNBSWQhml996rFu2bg0qTVw-bGRa14Y88F5YfZyC-tqoDO8qyneAtytcB6Ku081sVtubWxA3COoexb2uQR1D-Y2mxb3Kuehc3cednkOumruTlkIY5mIrW6dXAzzGvgPt6oFj94-6MLiXbv8asih16oFFy1vYowFy6-S7uz3Oc53vHr7LcftZ0sq1v8L3R5YiJMtAAA="
    },
    {
      "_id": "99592dd5fc3a69d3ed27692f3f278e47",
      "_meta": {
        "ETag": "c5854bba74ab382f1034f5614e0d247ceb42048190b48dab8bbfdef18b72ebc5",
        "github_username": "marcdubybroad",
        "timestamp": "2021-01-26T21:24:00.789785",
        "uptime_status": "unknown",
        "uptime_ts": "2021-02-01T00:30:58.579609",
        "url": "https://raw.githubusercontent.com/broadinstitute/genetics-kp-dev/master/transaltorRegistry.yaml"
      },
      "_score": 3.5145903,
      "components": {
        "schemas": {
          "BiolinkEntity": {
            "description": "A subclass of named_thing (snake_case)",
            "example": "disease",
            "externalDocs": {
              "description": "Biolink model entities",
              "url": "https://biolink.github.io/biolink-model/docs/NamedThing.html"
            },
            "type": "string"
          },
          "BiolinkRelation": {
            "description": "A relation, i.e. child of related_to (snake_case)",
            "example": "affects",
            "externalDocs": {
              "description": "Biolink model relations",
              "url": "https://biolink.github.io/biolink-model/docs/related_to.html"
            },
            "type": "string"
          },
          "Credentials": {
            "description": "Credentials needed for programmatic access to the remote knowledge graph",
            "properties": {
              "password": {
                "description": "Password needed for programmatic access to the remote knowledge graph",
                "type": "string"
              },
              "username": {
                "description": "Username needed for programmatic access to the remote knowledge graph",
                "type": "string"
              }
            },
            "required": [
              "username",
              "password"
            ],
            "type": "object"
          },
          "EdgeBinding": {
            "properties": {
              "kg_id": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "qg_id": {
                "type": "string"
              }
            },
            "required": [
              "qg_id",
              "kg_id"
            ],
            "type": "object"
          },
          "KEdge": {
            "description": "An edge in the thought subgraph linking two nodes",
            "properties": {
              "id": {
                "description": "Local identifier for this node which is unique within this KnowledgeGraph, and perhaps within the source reasoner's knowledge graph",
                "example": "553903",
                "type": "string"
              },
              "source_id": {
                "description": "Corresponds to the @id of source node of this edge",
                "example": "https://omim.org/entry/603903",
                "type": "string"
              },
              "target_id": {
                "description": "Corresponds to the @id of target node of this edge",
                "example": "https://www.uniprot.org/uniprot/P00738",
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/BiolinkRelation"
              }
            },
            "required": [
              "id",
              "source_id",
              "target_id"
            ],
            "type": "object"
          },
          "KNode": {
            "description": "A node in the thought subgraph",
            "properties": {
              "id": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "type": "string"
              },
              "name": {
                "description": "Formal name of the entity",
                "example": "Haptoglobin",
                "type": "string"
              },
              "type": {
                "description": "Entity type of this node (e.g., protein, disease, etc.)",
                "example": [
                  "protein"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "KnowledgeGraph": {
            "description": "A thought graph associated with this result. This will commonly be a linear path subgraph from one concept to another, but related items aside of the path may be included.",
            "properties": {
              "edges": {
                "description": "List of edges in the KnowledgeGraph",
                "items": {
                  "$ref": "#/components/schemas/KEdge"
                },
                "type": "array"
              },
              "nodes": {
                "description": "List of nodes in the KnowledgeGraph",
                "items": {
                  "$ref": "#/components/schemas/KNode"
                },
                "type": "array"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "LogEntry": {
            "properties": {
              "code": {
                "description": "One of a standardized set of short codes e.g. QueryNotTraversable, KPNotAvailable, KPResponseMalformed",
                "type": "string"
              },
              "level": {
                "description": "Logging level",
                "enum": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "type": "string"
              },
              "message": {
                "description": "A human-readable log message",
                "type": "string"
              },
              "timestamp": {
                "description": "Timestamp in ISO 8601 format",
                "example": "2020-09-03T18:13:49+00:00",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "Message": {
            "properties": {
              "knowledge_graph": {
                "description": "KnowledgeGraph object that contains all the nodes and edges referenced in any of the possible answers to the query OR connection information for a remote knowledge graph",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/KnowledgeGraph"
                  },
                  {
                    "$ref": "#/components/schemas/RemoteKnowledgeGraph"
                  }
                ],
                "type": "object"
              },
              "query_graph": {
                "$ref": "#/components/schemas/QueryGraph",
                "description": "QueryGraph object that contains a serialization of a query in the form of a graph",
                "type": "object"
              },
              "results": {
                "description": "List of all returned potential answers for the query posed",
                "items": {
                  "$ref": "#/components/schemas/Result"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "NodeBinding": {
            "properties": {
              "kg_id": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "qg_id": {
                "type": "string"
              }
            },
            "required": [
              "qg_id",
              "kg_id"
            ],
            "type": "object"
          },
          "QEdge": {
            "description": "An edge in the QueryGraph",
            "properties": {
              "id": {
                "description": "QueryGraph internal identifier for this QEdge. Recommended form: e00, e01, e02, etc.",
                "example": "e00",
                "type": "string"
              },
              "source_id": {
                "description": "Corresponds to the @id of source node of this edge",
                "type": "string"
              },
              "target_id": {
                "description": "Corresponds to the @id of target node of this edge",
                "type": "string"
              },
              "type": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkRelation"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkRelation"
                    },
                    "type": "array"
                  }
                ]
              }
            },
            "required": [
              "id",
              "source_id",
              "target_id"
            ],
            "type": "object"
          },
          "QNode": {
            "description": "A node in the QueryGraph",
            "properties": {
              "curie": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "id": {
                "description": "QueryGraph internal identifier for this QNode. Recommended form: n00, n01, n02, etc.",
                "example": "n00",
                "type": "string"
              },
              "type": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkEntity"
                  },
                  {
                    "description": "Entity types of this node (e.g., protein, disease, etc.)",
                    "example": [
                      "disease",
                      "genetic_condition"
                    ],
                    "items": {
                      "$ref": "#/components/schemas/BiolinkEntity"
                    },
                    "type": "array"
                  }
                ]
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "Query": {
            "properties": {
              "message": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "required": [
              "message"
            ],
            "type": "object",
            "x-body-name": "request_body"
          },
          "QueryGraph": {
            "description": "A graph intended to be the thought path to be followed by a reasoner to answer the question. This graph is a representation of a question.",
            "properties": {
              "edges": {
                "description": "List of edges in the QueryGraph",
                "items": {
                  "$ref": "#/components/schemas/QEdge"
                },
                "type": "array"
              },
              "nodes": {
                "description": "List of nodes in the QueryGraph",
                "items": {
                  "$ref": "#/components/schemas/QNode"
                },
                "type": "array"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "RemoteKnowledgeGraph": {
            "description": "A thought graph associated with this result that is not repeated here, but stored elsewhere in a way that can be remotely accessed by the reader of this Message",
            "properties": {
              "credentials": {
                "$ref": "#/components/schemas/Credentials",
                "description": "Credentials needed for programmatic access to the remote knowledge graph",
                "type": "object"
              },
              "url": {
                "description": "URL that provides programmatic access to the remote knowledge graph",
                "example": "http://robokop.renci.org/api/kg",
                "type": "string"
              }
            },
            "required": [
              "url",
              "credentials"
            ],
            "type": "object"
          },
          "Response": {
            "description": "The Response object contains the main payload when a TRAPI query endpoint interprets and responds to the submitted query successfully (i.e., HTTP Status Code 200). The message property contains the knowledge of the response (query graph, knowledge graph, and results). The status, description, and logs properties provide additional details about the response.",
            "properties": {
              "description": {
                "description": "A brief human-readable description of the outcome",
                "example": "Success. 42 results found.",
                "type": "string"
              },
              "logs": {
                "description": "Log entries containing errors, warnings, debugging information, etc",
                "items": {
                  "$ref": "#/components/schemas/LogEntry"
                },
                "type": "array"
              },
              "message": {
                "$ref": "#/components/schemas/Message",
                "description": "Contains the knowledge of the response (query graph, knowledge graph, and results)."
              },
              "status": {
                "description": "One of a standardized set of short codes, e.g. Success, QueryNotTraversable, KPsNotAvailable",
                "example": "Success",
                "type": "string"
              }
            },
            "required": [
              "message"
            ],
            "type": "object"
          },
          "Result": {
            "description": "One of potentially several results or answers for a query",
            "properties": {
              "edge_bindings": {
                "description": "List of QEdge-KEdge bindings.",
                "items": {
                  "$ref": "#/components/schemas/EdgeBinding"
                },
                "type": "array"
              },
              "node_bindings": {
                "description": "List of QNode-KNode bindings.",
                "items": {
                  "$ref": "#/components/schemas/NodeBinding"
                },
                "type": "array"
              },
              "score": {
                "description": "Any type of score associated with this result",
                "example": 163.233,
                "format": "float",
                "type": "number"
              }
            },
            "required": [
              "node_bindings",
              "edge_bindings"
            ],
            "type": "object"
          }
        }
      },
      "info": {
        "contact": {
          "email": "mduby@broadinstitute.org",
          "name": "Marc Duby",
          "url": "https://github.com/broadinstitute/genetics-kp-dev"
        },
        "description": "A Translator API for Genetic Disease Asociation",
        "termsOfService": "http://www.apache.org/licenses/LICENSE-2.0.html",
        "title": "Genetics Provider",
        "version": "1.0.0",
        "x-reasoner_standard_version": "1.0.0",
        "x-translator": {
          "component": "KP",
          "team": [
            "Genetics Provider, Broad Institute Flannick Lab"
          ]
        }
      },
      "openapi": "3.0.1",
      "paths": [
        {
          "path": "/predicates",
          "pathitem": {
            "get": {
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "additionalProperties": {
                          "additionalProperties": {
                            "description": "Array of predicates",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "description": "Target map",
                          "type": "object"
                        },
                        "description": "Source map",
                        "example": {
                          "biolink:Gene": {
                            "biolink:Disease": [
                              "biolink:gene_associated_with_condition"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Predicates by source and target"
                }
              },
              "summary": "Get Genetics Provider supported relationships by source and target",
              "tags": [
                "predicates",
                "1.0.0"
              ]
            }
          }
        },
        {
          "path": "/query",
          "pathitem": {
            "post": {
              "description": "",
              "operationId": "query",
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": {
                      "message": {
                        "query_graph": {
                          "edges": {
                            "e00": {
                              "object": "n01",
                              "predicate": "biolink:gene_associated_with_condition",
                              "subject": "n00"
                            }
                          },
                          "nodes": {
                            "n00": {
                              "category": "biolink:Gene",
                              "id": "NCBIGene:1803"
                            },
                            "n01": {
                              "category": "biolink:Disease"
                            }
                          }
                        }
                      }
                    },
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "Query information to be submitted",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Response"
                      }
                    }
                  },
                  "description": "OK. There may or may not be results. Note that some of the provided identifiers may not have been recognized."
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Bad request. The request is invalid according to this OpenAPI schema OR a specific identifier is believed to be invalid somehow (not just unrecognized)."
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Internal server error."
                },
                "501": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Not implemented."
                }
              },
              "summary": "Query Genetics Provider TRAPI API as KP",
              "tags": [
                "query",
                "1.0.0"
              ],
              "x-swagger-router-controller": "swagger_server.controllers.query_controller"
            }
          }
        }
      ],
      "servers": [
        {
          "url": "https://translator.broadinstitute.org/genetics_provider/trapi/v1.0"
        }
      ],
      "tags": [
        {
          "name": "1.0.0"
        },
        {
          "name": "translator"
        },
        {
          "name": "x-translator"
        },
        {
          "name": "reasoner"
        },
        {
          "name": "metadata"
        },
        {
          "name": "query"
        }
      ],
      "~raw": "H4sIAHGIEGAC_91aWXPbOBL-KyjtVm2m1jpsJ9nETxM7TsaV-Ijt1D5MpVQQCVGISYABQGs0Lv_37UaDEkmRinzMPOxDYglnH1-f0F1P50LxXPYOWG9_MBrs9nZYT6qphoG7XqSV45Hzn0XGZYrLsriYLH6dGM1jqayTrnBioE2COxXPBK455SZi72EdDhbG75s5l9uD4TCRblZMBpHOhvVDholQwsnI9m_yfixue_ewORY2MjJ3Uis85B27NlzZlDtt2LuLEzaFvx9pH3svreBWsHdWR5L7LXCCEyaz59MrYW5lJEpKgJD5fD7gOY9mnvxhCrPKCjv8fHJ0fHZ13N8DecxclvpDpEv93nCXZRdG38pYGJy9FcYGAndh0wjH_ugbIEYrYcbWcRVzE4_b17klR0HoWQ7bFIq99-mCWOAZfPt9_fYddogyZCelENmHlCsloxv2mU963-5RhhZYh5vxhLumNlaXD9ZVutTIOA_34fpcDm-B_N79NySNJ-HgUvfEGdy7GqpwWBuv8V6bKWVXH82E4zF3vD76oxBmQdTk3M2sl-IwNyKWEXeCvieCYGyEBenaMLo3Gi2BThK_6_E8T3EjKGr43Xpt3fUsoCTjNB_HEid5CkrIhXEyHNY50cSwMXzB9JRVSESrcyKj9W6Re8asM1Il3gzKIY572wzjmhtgkWU871WW68l3Afbbsv5KFyYS5XrxB89yD_C73kTqVKqbA8RabSCYlwdiOYYAGXNLBifi8RyMewzSJEkE_DWpuW-h52IpCzZZMEvUgdkw5xnrEZCLLOOga2-Hjq1ZA7NFnmsDhDAjUq9CO5N5x5EV9PbqqiAIE_FDghcKItfWtSkUt6DC_YUn8QqTOwhk-GjdoY4X2yGtqopMWMsT-uxPHCdgfjNaFycBXiKAOIgXblcj78dtURnxzmbJJo5tqUMvBaXjcJsqTQbWJpqUUYMMQtnL4Ozo8ARHDnbfjPY9BpGurr0luu7vCR8Vi_unEVNc-o_h0jfaIc3b4Rey_jZM-SmG0cxkXsrMaTYRgJJJJh2wWipIglhggzOFuPdDT_URGym-DMe3E33-acCuZ8KgbYKXMP6P0g4JB8KK1NkBO9Pg6d2MO4B1JtCXuJlgwUnHDP5TTk4lOP3l9hm_FXCGUHBKpBMl_xTxwGvl5SMYbLqoNk4OOZqhh79nqfzCpAWl3PJUxoxHkTYQdBJUjZvBzDkkJBjY6TJ2fsk4s7mIgJ2owhgeMhGpFLfAL6m1PBNFMtNz9gLZ_l7AhYVa8fwLMf3qL2L6BI4zEAIYBV0mjIHQGq7c_UuuBDAwiT4jg1O9Uhu-kuxg3VteX6Kg8R-3LGQapUNcOrDgC32mYuc8SYTpGw0JgukjI0anqTCeRJocE-OD1aQdkO-qLCc-VrZRYZs-H5JXOAZtu0VrEEUrjlJwW4h-TAXiMeAHgPTCKn4jxhE4k1_qsa0XBx_jR0lP73XUGqQDASwDx5cyRJ0P5-vpbPBfg5DWSl2O9P3WYQwXDM-QvmskjzLKalSsRPlw6WWIXe18l5Fth8mBGLBoJtMYZeDHUQp6kwj4dAohwT5cBMuA-lgZrOjbKIMj8MUobp62ElWZZkoI9HZYAoDrg9CYoZuP0KlA4CSPgl4nQ295o_Q8xaDJKIb6aFhL03IA0xy8Udu1F2HuyXe2cFxYVEMm2u79Guae_d77euj7fUWFT6ODJL6155LHcPShVOi3SXJ1Qd4kY0lSBOs-n1J5sM743YNS3m849mN58k_5oaUwStR0cPIJWWm1M8W8AKXygnUzXSQzh07Hi5Qhun3YmmtGydE6oGQrlD7rCMJDJZKhTn3ow3PYfCajGUa3QknwmwyzMU8EDH0q9foRadjxySxcOOOQ4i7XiTLVLWuof9k2QFR8wqtX-28hQ2tHJx02buflSBtKluIlBH-V3hsFGjxLPj0B8pGAxtWlB9GZzHzFCVIxi-Hr0QaKKH1_MEW0bWuKsDsAKgCVOk9Y-Dy8GI3-s_-mizQa-kkC2HTz6-Al5K5EX-O6C8pnwFl7yPA8dyB5a9wefb08Oe7EbUOK56cnpwcbtdjl8T5gsp76iF7mtYKygPoNv_Hc6STVE6l-pozGDZRUMJxeAsFL6IUYJIMd9K9OSIivIV3YYcJFg0YgxZLRL_PqeIgja1N2l0pr9t6u21Kf5JZWZZx3CMQclQ2Yg0v0E2nKAJSZVukC02aOvkxwiCscNiwd3NTojAFwYa2KRO7Qmjhk1DNsOk0KV-YbzPMOF8t4VYjgSVh4-Kw8SosY09J1oK1q2KaPlJC1w2F-QYnchjRqYt9ob-Tk29soq8K2gwS_4OkkeOPcBg3LYELC6UDGZ50co6dsC79Rhx84V15BUE6FfiSWQ1CneDbtTBvHIs8smgHzRQOUFteGY_OQT1IwhE8XMPLulsu0_F4Ws6c8xTKbauoWI0ihUEvbw2GSYCClBci3KqjZeXx5eX6JI_99d3l2cvYRP56cfTjHv--PD79-rAmncle1bbJmL7Mi4wp7szGywFKdsHJ9hxuRMO_A7tvOuy4nESEnV-fszevRLqOGQ8Nh7Y32Rv3R2_5o_3r3zcHu_sHLt_8ejQ6oMRN2YI0CRtXHO7uythY0nFYYbuZiJWIrraMGD3VQMzqXugv-AUAqMG9wGmgAZA2Yd5BpAuaFEeAgYhQAV4ulC9DWShQwV3aOfYgQjH0piFU9HK3gHuzKVDs0GFT4hjy2klFuNri6pfp08yddGbyyua3D_JrNuJ93qJYOo61HtUnw2EiAakf-SfLxBvwjNLa8RFF2NLyW7FcoDq2jTZ4OdWyEK4wCbebaUZm1VCCF-1KDoF-y9S0d4KW_v8sDthCMDvP_o8b4smWNUcfJVjlZBT2ybDy1ZWiehAG7FBj4hQqVZHbAxGgE6c1oF__bo0Sn4bYEOai_pzL4e7L9Tbnitv5lLYevY-2he9eR-Cw1wZftaoKNyIsKI8VzFwTPbbRPNA8UU5t5KDQPheahOsxDdZrHYyEVep5eDt2Vi31K6VLpg4YX3uqb3fZOfY3i7WDcBdbVQ1sdgdV8biM9ZR60fmt5RMvVvrM90fGiv3p89u8UYxxcUbahBkuWEPPYoeeIarHtCyIanuo01XNYNVn4RId6NFRdYaAtY6zF40PNFs63fkMOHg-4rqcDtPrJJVbdEWyJgi_PVl497vpnLq1aE8Gnld6U03lbxbo5F34VPvJRKW2dBhqZSK2Y-6c_zKXZHApoSga5otc_JAyKdur5EoSo68vxOad0CKercqbpyhu99Y1yrTbi1_PW5-zDtyiBHhjW2-GXn0kk4anTPu7CRrvvYDg0eqJvdD7AWkb6fh_-zOUm2a51bnzhWpVuJ7bC029bKQkkl_NlLbAsA5CfDD6BJ1mk-IMfwAlihJ7wKCUH55NrcEIU68BNOKrUmhnS8vk77LOFF9u0SAFbL_BRaYf9dn19wa7AyRSWHWGA2RuNfqFX3OBKWcDWok7kStqhECwf09kLui2h1nVDKzslpVikhIusvx5i2UpOtAxqdstW0C7BwFY_wIE9QBJAk0904Wp0tDnJuiZaLH0CKdC02TqorCqZhcvAkpq5zxUJeMBe7pUsgrEUinpibc0SndiOXgk2Qw0yHaSOrRP_xgyCmnOD373IJgW1VSq1tU8GHuBYlz2mdtf-4Kjc4kSeHzlUmXjkPKUHtkNNsKC5na5umK22w9q1vpUH2ZCeBLeBxXM3P8tqHSzYCqCQp0ukYUOlUsKH7kFHqjCeUMm9MWb7gN_3XVVWrh88AFjV58PutGE7UjD493139VGkVLsM7aTYCGJze_W-ekPwizZlAHVs7L7eH-zt79f6flNw664KFlVkE_9TibY0ZiWckM6sBr61_uLu_n-v_9ah6ysAAA=="
    },
    {
      "_id": "dc91716f44207d2e1287c727f281d339",
      "_meta": {
        "ETag": "641f624f19c469f18494ed555710434befc4b0edb04989b6922ffabab29ed459",
        "github_username": "kevinxin90",
        "slug": "bte_trapi",
        "timestamp": "2020-12-08T17:54:41.142148",
        "uptime_status": "good",
        "uptime_ts": "2021-02-01T00:28:59.516320",
        "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/biothings_explorer/smartapi.yaml"
      },
      "_score": 3.340916,
      "components": {
        "schemas": {
          "BiolinkEntity": {
            "description": "A subclass of named_thing (snake_case)",
            "example": "disease",
            "externalDocs": {
              "description": "Biolink model entities",
              "url": "https://biolink.github.io/biolink-model/docs/NamedThing.html"
            },
            "type": "string"
          },
          "BiolinkRelation": {
            "description": "A relation, i.e. child of related_to (snake_case)",
            "example": "affects",
            "externalDocs": {
              "description": "Biolink model relations",
              "url": "https://biolink.github.io/biolink-model/docs/related_to.html"
            },
            "type": "string"
          },
          "Credentials": {
            "description": "Credentials needed for programmatic access to the remote knowledge graph",
            "properties": {
              "password": {
                "description": "Password needed for programmatic access to the remote knowledge graph",
                "type": "string"
              },
              "username": {
                "description": "Username needed for programmatic access to the remote knowledge graph",
                "type": "string"
              }
            },
            "required": [
              "username",
              "password"
            ],
            "type": "object"
          },
          "EdgeBinding": {
            "properties": {
              "kg_id": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "qg_id": {
                "type": "string"
              }
            },
            "required": [
              "qg_id",
              "kg_id"
            ],
            "type": "object"
          },
          "KEdge": {
            "description": "An edge in the thought subgraph linking two nodes",
            "properties": {
              "id": {
                "description": "Local identifier for this node which is unique within this KnowledgeGraph, and perhaps within the source reasoner's knowledge graph",
                "example": "553903",
                "type": "string"
              },
              "source_id": {
                "description": "Corresponds to the @id of source node of this edge",
                "example": "https://omim.org/entry/603903",
                "type": "string"
              },
              "target_id": {
                "description": "Corresponds to the @id of target node of this edge",
                "example": "https://www.uniprot.org/uniprot/P00738",
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/BiolinkRelation"
              }
            },
            "required": [
              "id",
              "source_id",
              "target_id"
            ],
            "type": "object"
          },
          "KNode": {
            "description": "A node in the thought subgraph",
            "properties": {
              "id": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "type": "string"
              },
              "name": {
                "description": "Formal name of the entity",
                "example": "Haptoglobin",
                "type": "string"
              },
              "type": {
                "description": "Entity type of this node (e.g., protein, disease, etc.)",
                "example": [
                  "protein"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "KnowledgeGraph": {
            "description": "A thought graph associated with this result. This will commonly be a linear path subgraph from one concept to another, but related items aside of the path may be included.",
            "properties": {
              "edges": {
                "description": "List of edges in the KnowledgeGraph",
                "items": {
                  "$ref": "#/components/schemas/KEdge"
                },
                "type": "array"
              },
              "nodes": {
                "description": "List of nodes in the KnowledgeGraph",
                "items": {
                  "$ref": "#/components/schemas/KNode"
                },
                "type": "array"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "LogEntry": {
            "properties": {
              "code": {
                "description": "One of a standardized set of short codes e.g. QueryNotTraversable, KPNotAvailable, KPResponseMalformed",
                "type": "string"
              },
              "level": {
                "description": "Logging level",
                "enum": [
                  "ERROR",
                  "WARNING",
                  "INFO",
                  "DEBUG"
                ],
                "type": "string"
              },
              "message": {
                "description": "A human-readable log message",
                "type": "string"
              },
              "timestamp": {
                "description": "Timestamp in ISO 8601 format",
                "example": "2020-09-03T18:13:49+00:00",
                "format": "date-time",
                "type": "string"
              }
            },
            "type": "object"
          },
          "Message": {
            "properties": {
              "knowledge_graph": {
                "description": "KnowledgeGraph object that contains all the nodes and edges referenced in any of the possible answers to the query OR connection information for a remote knowledge graph",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/KnowledgeGraph"
                  },
                  {
                    "$ref": "#/components/schemas/RemoteKnowledgeGraph"
                  }
                ],
                "type": "object"
              },
              "query_graph": {
                "$ref": "#/components/schemas/QueryGraph",
                "description": "QueryGraph object that contains a serialization of a query in the form of a graph",
                "type": "object"
              },
              "results": {
                "description": "List of all returned potential answers for the query posed",
                "items": {
                  "$ref": "#/components/schemas/Result"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "NodeBinding": {
            "properties": {
              "kg_id": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "qg_id": {
                "type": "string"
              }
            },
            "required": [
              "qg_id",
              "kg_id"
            ],
            "type": "object"
          },
          "QEdge": {
            "description": "An edge in the QueryGraph",
            "properties": {
              "id": {
                "description": "QueryGraph internal identifier for this QEdge. Recommended form: e00, e01, e02, etc.",
                "example": "e00",
                "type": "string"
              },
              "source_id": {
                "description": "Corresponds to the @id of source node of this edge",
                "type": "string"
              },
              "target_id": {
                "description": "Corresponds to the @id of target node of this edge",
                "type": "string"
              },
              "type": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkRelation"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/BiolinkRelation"
                    },
                    "type": "array"
                  }
                ]
              }
            },
            "required": [
              "id",
              "source_id",
              "target_id"
            ],
            "type": "object"
          },
          "QNode": {
            "description": "A node in the QueryGraph",
            "properties": {
              "curie": {
                "description": "CURIE identifier for this node",
                "example": "OMIM:603903",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                ]
              },
              "id": {
                "description": "QueryGraph internal identifier for this QNode. Recommended form: n00, n01, n02, etc.",
                "example": "n00",
                "type": "string"
              },
              "type": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BiolinkEntity"
                  },
                  {
                    "description": "Entity types of this node (e.g., protein, disease, etc.)",
                    "example": [
                      "disease",
                      "genetic_condition"
                    ],
                    "items": {
                      "$ref": "#/components/schemas/BiolinkEntity"
                    },
                    "type": "array"
                  }
                ]
              }
            },
            "required": [
              "id"
            ],
            "type": "object"
          },
          "Query": {
            "properties": {
              "message": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "required": [
              "message"
            ],
            "type": "object",
            "x-body-name": "request_body"
          },
          "QueryGraph": {
            "description": "A graph intended to be the thought path to be followed by a reasoner to answer the question. This graph is a representation of a question.",
            "properties": {
              "edges": {
                "description": "List of edges in the QueryGraph",
                "items": {
                  "$ref": "#/components/schemas/QEdge"
                },
                "type": "array"
              },
              "nodes": {
                "description": "List of nodes in the QueryGraph",
                "items": {
                  "$ref": "#/components/schemas/QNode"
                },
                "type": "array"
              }
            },
            "required": [
              "nodes",
              "edges"
            ],
            "type": "object"
          },
          "RemoteKnowledgeGraph": {
            "description": "A thought graph associated with this result that is not repeated here, but stored elsewhere in a way that can be remotely accessed by the reader of this Message",
            "properties": {
              "credentials": {
                "$ref": "#/components/schemas/Credentials",
                "description": "Credentials needed for programmatic access to the remote knowledge graph",
                "type": "object"
              },
              "url": {
                "description": "URL that provides programmatic access to the remote knowledge graph",
                "example": "http://robokop.renci.org/api/kg",
                "type": "string"
              }
            },
            "required": [
              "url",
              "credentials"
            ],
            "type": "object"
          },
          "Response": {
            "description": "The Response object contains the main payload when a TRAPI query endpoint interprets and responds to the submitted query successfully (i.e., HTTP Status Code 200). The message property contains the knowledge of the response (query graph, knowledge graph, and results). The status, description, and logs properties provide additional details about the response.",
            "properties": {
              "description": {
                "description": "A brief human-readable description of the outcome",
                "example": "Success. 42 results found.",
                "type": "string"
              },
              "logs": {
                "description": "Log entries containing errors, warnings, debugging information, etc",
                "items": {
                  "$ref": "#/components/schemas/LogEntry"
                },
                "type": "array"
              },
              "message": {
                "$ref": "#/components/schemas/Message",
                "description": "Contains the knowledge of the response (query graph, knowledge graph, and results)."
              },
              "status": {
                "description": "One of a standardized set of short codes, e.g. Success, QueryNotTraversable, KPsNotAvailable",
                "example": "Success",
                "type": "string"
              }
            },
            "required": [
              "message"
            ],
            "type": "object"
          },
          "Result": {
            "description": "One of potentially several results or answers for a query",
            "properties": {
              "edge_bindings": {
                "description": "List of QEdge-KEdge bindings.",
                "items": {
                  "$ref": "#/components/schemas/EdgeBinding"
                },
                "type": "array"
              },
              "node_bindings": {
                "description": "List of QNode-KNode bindings.",
                "items": {
                  "$ref": "#/components/schemas/NodeBinding"
                },
                "type": "array"
              },
              "score": {
                "description": "Any type of score associated with this result",
                "example": 163.233,
                "format": "float",
                "type": "number"
              }
            },
            "required": [
              "node_bindings",
              "edge_bindings"
            ],
            "type": "object"
          }
        }
      },
      "info": {
        "contact": {
          "email": "kevinxin@scripps.edu",
          "name": "Jiwen Xin",
          "url": "https://github.com/kevinxin90"
        },
        "description": "A ReasonerStdAPI for BioThings Explorer",
        "termsOfService": "https://biothings.io/about",
        "title": "BioThings Explorer ReasonerStdAPI",
        "version": "1.0.0",
        "x-reasoner_standard_version": "1.0.0",
        "x-translator": {
          "component": "ARA",
          "team": [
            "Exploring Agent"
          ]
        }
      },
      "openapi": "3.0.1",
      "paths": [
        {
          "path": "/metakg",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "The subject type of the association, e.g. Gene",
                  "example": "Gene",
                  "in": "query",
                  "name": "subject",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The object type of the association, e.g. ChemicalSubstance",
                  "example": "ChemicalSubstance",
                  "in": "query",
                  "name": "object",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The predicate of the association, e.g. Gene",
                  "example": "physically_interacts_with",
                  "in": "query",
                  "name": "predicate",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The API providing the association, e.g. MyChem.info API",
                  "example": "MyChem.info API",
                  "in": "query",
                  "name": "api",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "description": "The data source providing the association, e.g. drugbank",
                  "example": "drugbank",
                  "in": "query",
                  "name": "provided_by",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "description": "Array of all associations",
                        "items": {
                          "properties": {
                            "api": {
                              "description": "The api providing the association, e.g. MyChem.info",
                              "properties": {
                                "name": {
                                  "description": "The api providing the association, e.g. MyChem.info",
                                  "example": "MyChem.info API",
                                  "type": "string"
                                },
                                "smartapi": {
                                  "description": "smartapi related data",
                                  "properties": {
                                    "id": {
                                      "description": "unique smartapi id for the api",
                                      "example": "8f08d1446e0bb9c2b323713ce83e2bd3",
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "description": "the url for smartapi specification",
                                      "example": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/mychem.info/openapi_full.yml",
                                      "type": "string"
                                    },
                                    "ui": {
                                      "description": "the web UI url for the API",
                                      "example": "https://smart-api.info/ui/8f08d1446e0bb9c2b323713ce83e2bd3",
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "object": {
                              "description": "The object type of the association, e.g. ChemicalSubstance",
                              "example": "ChemicalSubstance",
                              "type": "string"
                            },
                            "predicate": {
                              "description": "The predicate of the association, e.g. physically_interacts_with",
                              "example": "physically_interacts_with",
                              "type": "string"
                            },
                            "provided_by": {
                              "description": "The data source providing the association, e.g. ChEMBL",
                              "example": "ChEMBL",
                              "type": "string"
                            },
                            "subject": {
                              "description": "The subject type of the association, e.g. Gene",
                              "example": "Gene",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": "array"
                      }
                    }
                  },
                  "description": "Association information including subject, object, predicate, api, provided_by and smartapi info."
                }
              },
              "summary": "retrieve associations within smartapi, if no parameters provided, will return all associations",
              "tags": [
                "metadata"
              ]
            }
          }
        },
        {
          "path": "/predicates",
          "pathitem": {
            "get": {
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "additionalProperties": {
                          "additionalProperties": {
                            "description": "Array of predicates",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "description": "Target map",
                          "type": "object"
                        },
                        "description": "Source map",
                        "example": {
                          "chemical_substance": {
                            "chemical_substance": [
                              "correlated_with"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Predicates by source and target"
                }
              },
              "summary": "Get supported relationships by source and target",
              "tags": [
                "metadata",
                "0.9.2"
              ]
            }
          }
        },
        {
          "path": "/v1/predicates",
          "pathitem": {
            "get": {
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "additionalProperties": {
                          "additionalProperties": {
                            "description": "Array of predicates",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "description": "Target map",
                          "type": "object"
                        },
                        "description": "Source map",
                        "example": {
                          "biolink:ChemicalSubstance": {
                            "biolink:Gene": [
                              "biolink:directly_interacts_with",
                              "biolink:decreases_activity_of"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Predicates by source and target"
                }
              },
              "summary": "Get supported relationships by source and target",
              "tags": [
                "predicates",
                "1.0.0"
              ]
            }
          }
        },
        {
          "path": "/v1/smartapi/{smartapi_id}/predicates",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "SmartAPI ID of an API, you can get it from https://smart-api.info/registry",
                  "example": "978fe380a147a8641caf72320862697b",
                  "in": "path",
                  "name": "smartapi_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "additionalProperties": {
                          "additionalProperties": {
                            "description": "Array of predicates",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "description": "Target map",
                          "type": "object"
                        },
                        "description": "Source map",
                        "example": {
                          "biolink:ChemicalSubstance": {
                            "biolink:Gene": [
                              "biolink:directly_interacts_with",
                              "biolink:decreases_activity_of"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Predicates by source and target"
                }
              },
              "summary": "Get supported relationships by source and target for individual smartAPI",
              "tags": [
                "predicates",
                "1.0.0"
              ]
            }
          }
        },
        {
          "path": "/v1/team/{team_name}/predicates",
          "pathitem": {
            "get": {
              "parameters": [
                {
                  "description": "Translator Team Name, e.g. Service Provider, Multiomics Provider",
                  "example": "Multiomics Provider",
                  "in": "path",
                  "name": "team_name",
                  "required": true,
                  "schema": {
                    "enum": [
                      "Multiomics Provider",
                      "Text Mining Provider",
                      "Service Provider"
                    ],
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "additionalProperties": {
                          "additionalProperties": {
                            "description": "Array of predicates",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "description": "Target map",
                          "type": "object"
                        },
                        "description": "Source map",
                        "example": {
                          "biolink:ChemicalSubstance": {
                            "biolink:Gene": [
                              "biolink:directly_interacts_with",
                              "biolink:decreases_activity_of"
                            ]
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Predicates by source and target"
                }
              },
              "summary": "Get supported relationships by source and target for a KP/ARA team",
              "tags": [
                "predicates",
                "1.0.0"
              ]
            }
          }
        },
        {
          "path": "/v1/query",
          "pathitem": {
            "post": {
              "description": "",
              "operationId": "query",
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": {
                      "message": {
                        "query_graph": {
                          "edges": {
                            "e00": {
                              "object": "n01",
                              "subject": "n00"
                            }
                          },
                          "nodes": {
                            "n00": {
                              "category": "biolink:Disease",
                              "id": "MONDO:0005737"
                            },
                            "n01": {
                              "category": "biolink:ChemicalSubstance"
                            }
                          }
                        }
                      }
                    },
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "Query information to be submitted",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Response"
                      }
                    }
                  },
                  "description": "OK. There may or may not be results. Note that some of the provided identifiers may not have been recognized."
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Bad request. The request is invalid according to this OpenAPI schema OR a specific identifier is believed to be invalid somehow (not just unrecognized)."
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Internal server error."
                },
                "501": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Not implemented."
                }
              },
              "summary": "Query BioThings Explorer TRAPI API as ARA",
              "tags": [
                "query",
                "1.0.0"
              ],
              "x-swagger-router-controller": "swagger_server.controllers.query_controller"
            }
          }
        },
        {
          "path": "/v1/smartapi/{smartapi_id}/query",
          "pathitem": {
            "post": {
              "description": "",
              "operationId": "querySmartAPI",
              "parameters": [
                {
                  "description": "SmartAPI ID of an API, you can get it from https://smart-api.info/registry",
                  "example": "978fe380a147a8641caf72320862697b",
                  "in": "path",
                  "name": "smartapi_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": {
                      "message": {
                        "query_graph": {
                          "edges": {
                            "e00": {
                              "object": "n01",
                              "subject": "n00"
                            }
                          },
                          "nodes": {
                            "n00": {
                              "category": "biolink:Gene",
                              "id": "NCBIGene:1017"
                            },
                            "n01": {
                              "category": "biolink:ChemicalSubstance"
                            }
                          }
                        }
                      }
                    },
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "Query information to be submitted",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Response"
                      }
                    }
                  },
                  "description": "OK. There may or may not be results. Note that some of the provided identifiers may not have been recognized."
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Bad request. The request is invalid according to this OpenAPI schema OR a specific identifier is believed to be invalid somehow (not just unrecognized)."
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Internal server error."
                },
                "501": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Not implemented."
                }
              },
              "summary": "Query individual SmartAPI as TRAPI service using SmartAPI ID",
              "tags": [
                "query",
                "1.0.0"
              ],
              "x-swagger-router-controller": "swagger_server.controllers.query_controller"
            }
          }
        },
        {
          "path": "/v1/team/{team_name}/query",
          "pathitem": {
            "post": {
              "description": "",
              "operationId": "queryTeam",
              "parameters": [
                {
                  "description": "Translator Team Name, e.g. Service Provider, Multiomics Provider",
                  "example": "Text Mining Provider",
                  "in": "path",
                  "name": "team_name",
                  "required": true,
                  "schema": {
                    "enum": [
                      "Multiomics Provider",
                      "Text Mining Provider",
                      "Service Provider"
                    ],
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": {
                      "message": {
                        "query_graph": {
                          "edges": {
                            "e00": {
                              "object": "n01",
                              "subject": "n00"
                            }
                          },
                          "nodes": {
                            "n00": {
                              "category": "biolink:Gene",
                              "id": "NCBIGene:1017"
                            },
                            "n01": {
                              "category": "biolink:ChemicalSubstance"
                            }
                          }
                        }
                      }
                    },
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "Query information to be submitted",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Response"
                      }
                    }
                  },
                  "description": "OK. There may or may not be results. Note that some of the provided identifiers may not have been recognized."
                },
                "400": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Bad request. The request is invalid according to this OpenAPI schema OR a specific identifier is believed to be invalid somehow (not just unrecognized)."
                },
                "500": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Internal server error."
                },
                "501": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Not implemented."
                }
              },
              "summary": "Query individual Translator team as individual TRAPI service using team name",
              "tags": [
                "query",
                "1.0.0"
              ],
              "x-swagger-router-controller": "swagger_server.controllers.query_controller"
            }
          }
        },
        {
          "path": "/query/",
          "pathitem": {
            "post": {
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": {
                      "message": {
                        "query_graph": {
                          "edges": [
                            {
                              "id": "e00",
                              "source_id": "n00",
                              "target_id": "n01"
                            },
                            {
                              "id": "e01",
                              "source_id": "n01",
                              "target_id": "n02"
                            }
                          ],
                          "nodes": [
                            {
                              "curie": "MONDO:0005737",
                              "id": "n00",
                              "type": "disease"
                            },
                            {
                              "id": "n01",
                              "set": true,
                              "type": "gene"
                            },
                            {
                              "id": "n02",
                              "type": "chemical_substance"
                            }
                          ]
                        }
                      }
                    },
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "A message with question graph.",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Message"
                      }
                    }
                  },
                  "description": "A message with knowledge graph and answers."
                }
              },
              "summary": "Get answers to a question",
              "tags": [
                "0.9.2",
                "query"
              ]
            }
          }
        },
        {
          "path": "/smartapi/{smartapi_id}/query/",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "description": "SmartAPI ID of an API, you can get it from https://smart-api.info/registry",
                  "example": "978fe380a147a8641caf72320862697b",
                  "in": "path",
                  "name": "smartapi_id",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": {
                      "message": {
                        "query_graph": {
                          "edges": [
                            {
                              "id": "e00",
                              "source_id": "n00",
                              "target_id": "n01"
                            }
                          ],
                          "nodes": [
                            {
                              "curie": "NCBIGene:1017",
                              "id": "n00",
                              "type": "gene"
                            },
                            {
                              "id": "n01",
                              "type": "chemical_substance"
                            }
                          ]
                        }
                      }
                    },
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "A message with question graph.",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Message"
                      }
                    }
                  },
                  "description": "A message with knowledge graph and answers."
                }
              },
              "summary": "Get answers to a question using a specific API",
              "tags": [
                "0.9.2",
                "query"
              ]
            }
          }
        },
        {
          "path": "/source/{source_name}/query/",
          "pathitem": {
            "post": {
              "parameters": [
                {
                  "description": "The name of the data source",
                  "example": "drugbank",
                  "in": "path",
                  "name": "source_name",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "content": {
                  "application/json": {
                    "example": {
                      "message": {
                        "query_graph": {
                          "edges": [
                            {
                              "id": "e00",
                              "source_id": "n00",
                              "target_id": "n01"
                            }
                          ],
                          "nodes": [
                            {
                              "curie": "NCBIGene:1017",
                              "id": "n00",
                              "type": "gene"
                            },
                            {
                              "id": "n01",
                              "type": "chemical_substance"
                            }
                          ]
                        }
                      }
                    },
                    "schema": {
                      "$ref": "#/components/schemas/Query"
                    }
                  }
                },
                "description": "A message with question graph.",
                "required": true
              },
              "responses": {
                "200": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Message"
                      }
                    }
                  },
                  "description": "A message with knowledge graph and answers."
                }
              },
              "summary": "Get answers to a question using a specific data source.",
              "tags": [
                "0.9.2",
                "query"
              ]
            }
          }
        }
      ],
      "servers": [
        {
          "url": "https://api.bte.ncats.io"
        }
      ],
      "tags": [
        {
          "name": "1.0.0"
        },
        {
          "name": "0.9.2"
        },
        {
          "name": "translator"
        },
        {
          "name": "biothings"
        },
        {
          "name": "metadata"
        },
        {
          "name": "query"
        }
      ],
      "~raw": "H4sIAOG9z18C_-0caW_bRvavDLwLbIqVKUpK4uNT7SRNvamP2A52gcAQRuRImprisBzSimr4v-97c_DSUIftbbutC9ShhnO8-5oZ3u-IhMU04TuHZGfg-V5vp0N2eDwW0HC_E4g4o0GmntmM8gi73bI7Hn_j8fcySHmSSI-FOY6K6Yzh-3_xOYvJf3iMjXmqxkyzLJGH3e6EZ9N85AVi1rXTHPg7D9AxZGq6jIsYBxyRS0aliFl6lYVHFydkLFJyzMX1lMcTST58SyKRshSXyFg6k-fjK5be8YBVVxtxkan-HhddOhJ5pvrzLFLdlqdrLIq971gqDUw9oI-Pbd92U9NvKDMahzQNh-5-WUpjGdFMpIaeswSGxZlC8fJIg09n8PPrjgYC4CFHE-xy84B0kYAWTI097pvUBL55o4x5cUAzxHHn4QYnpBPT3XJEAwSzlU2-d-D1600VWGvtBRXrzTOW0ZBmtN76S87ShYYjodlUKrS72Pd2op4nTItTQlMYkhWoNfh_PWVE5qOfWZCRbJEwIsYkgzYqpQg4xW4dwryJRz6ymCEd2Tc6SzRjbROPS5AqAmrmxSYZTEGuFUC4inqbIQ92HhRaDqjEJkC9g2l5QKOrfIQSEjQhdL5vAVc8BdokZSEslG1HwGS6kAhetBjyGHgENkAO56C7K8AsVnokpKjkSSrueIgq4Ab1dIGE89A-EaOfFagdb1tgRYP3OChR4okUeRqwtdCGaT4Z0fi2AWa1uZWWODMLh6PFOjhR01ImwaxIprWt7_uF8dam5h4QTiJkDgDX_VkqdO6r0zatb5rSBUoMiEAVMalgzthMrwRgJizNuFlYuxEn2eDVNszFZRqTG9I81-yrxaZJZeTBjKZZC4b2HUkZ2E8WKilx4MBD1-g85iAApJiEh8rZZRqxBrD7Y38_7L1-_Zb5o9FB0B8N-oO93iBg-wPWH4WDFugLY-1YHxcCx6IWLYCQCQv42IhMAwbrflI697RDz8FLGXFTvv3s3dH11e41jScMQGDd0rXswuTgPSccgFt0Z1SCdenOFoHlQNfEI8NxHkXeYha1IJTzNlTmbES-nBQYZdq0tKCg8EWY9OI57z6GwA-VNmOtnW2d4vHwt_YtDhKWBvvw0b5jpaPY1KE4YSsN4OHTLfG76YfT45-W6GQbXeqer2TUk0OTTUSo0kTRIEMvV6RcLktQiNOZfQ6iXNHEANsx4tUpGdtBC9MhFWoTCGcrpgjm8zRwMp9BK3ID3A0Aze5qGEuC3ORxMbZD-JjEgpRxXrFMB_qCX4Fp8jR2uhgbwpZ2SwfD3QJyWQsmn-4AaRhyfEmji4ZTa3vR5jIrINacpUPIGtxd5u01TQFFMqPJjls-Gv2vtDqY_qXYAS2MURjKwiq0Nn8FyqXGlWklvXGbOAcEFwX2BITJqCfKVKZQWZKlj4CezJNEpOg31aIoBFOetEzglI6OTWiMmNz12iSlGFtnk86Qbp4Om1sStyQSzPOE4K0uBA2mQcumEr1S-LaYp0Uz6sK_UlUUU6vSDClpxOPbw2VXV32rbC3y2jaEPAXYnT6o6MICzO2ZHMJrfsezxVCMUazMf0a6rJXr3tunIQ8ffg-hU0EOj0OANcxppO2vCXjW5NhXpis5ea9i_RgDpQ5ZiJwE8AMn5zB_KmakJV6ygVzDyR3s7Y_ZYN-nvdd7dP_t615Ax3v9Qd_ff9t_e7A3KjMfrBHUUvOSmlqbfsmBZxg2Z2nOHp0Kvejfn0z_sGjWvce_QxSd30_zKPl00T26PCKqjLde566LTIhcwwhyBp1NtGgKmORCh0lph5zmEYwDCsuisZm7unu4lasg17aqhWvGua5Stqx4zb5l5JTHGG9W25tIIStf9PQvo6e6sqVqRUI2VLKoejm18TO-dVT8yfUluiz8n0piaugNSmITUlqJwklYK7Gh3DOZHYvQmVnqZat5VCbISCV8M56BYXDrzloxrHJlxqSkE_2s4BpOUppMdb9wYqSDGZ0oM9Gd2FfbCqLS0NMRdSxCWyezyQ_Iz0RoWlqmvecSeaaESFHl9Pzs_fmh7_tv9gZ7KqHAGduGL0uRZXVFyf6esjEO-lu32OyQXf1edj_r3QE9aCMTcP7JI5Bwp6inoByp-icWGfIEJgBjJD1yJjIGKTgF-y1mRT5u000Cf-KMjznmoHb4lEL-OmIshlkCMYn5ryz0tjUoK3G9NOhZdF-7ETym6GuUTCpM7Q_CJYjhHY14SGgACZkubwhADd6cJyxGFdCLkfNLcES2ZFfBFycZsQiT9dAIsp0TKTUVc_IKqfFzDgvmcUmK77amxbItQqTfuJE-QbsSY7SqdrcIS1ORPtuSPdeSICOEowrOYPpH8Nqx2IPa4pNzOpmwdDcVOSC1i3OmIopYqnrrl0ONp1e-lJ7W_Er3dcnFU21pJUkoIn8wodqeSuOnc4liVskMtjCvV3_11OOv61mKHVclDWfvjk-w5bDn917cyotbeXErfwS3spQzP6NDqaS1uAD6lepbh4tR3WwyuqGDuf5dcuy21Pb_Icl-8UgvHunFI714pD-gR1LN3br7aRqsZzc1X80hHGVxUJ9VDXCo24zJ0cXFoq2nDzjaYT3HsJ5jWF8fgrTGChYO8pSz5apLYaPs8ob-oSnWVFY3K0lV3DbW2HafoL2r9e1XZ3Ns9D7cPNKmuU7rGuKrUwBEMRH9iWKA53AjD89yam0luKdGHDYB-DYW8whlREOsaswQQ8xRfJ1b1uYlmhpaoFvbm9b70R1beTQb06tS-4YuvGTQfxT1b9PjelDRpsfLitl7UczfVjFNylGJHOw5zzXaqsQDdFWLSSVr2k5XMdrBwTZgqxxdW3s2eEnJSlhelOxFyf7ISlYRc2-Ntj2oINViUcFUPx_rxOwDRPuZM5U9wqQ1iKiUqGOoHOFQXVohr2RMb9kwgFDqu6ayldthkFirOP29CJx7swYAMgMJjQhmHWoXd_mCk0khzblovHdkWnbV0G4IC3SxIBGqfU1vms2i2lnAyvFAs-ilOYngxtueU-gQ7jGPBFMehUgDe34PeLSCBHQ8hvRabk-C4njEY2lQwreSBu9Aa5DcNHICVXlNYsYwCcZTGZARgyjPsKoRYFIJ0q4zSsw6Z5hEN2TecVg_AWGaQzbqPJhg3j15TdfJdolscF92-GLePfu6D3Uj9bWEQpXbDCVu3IdQP8DUx1juiyeuayG3k6G5-ADafT7W9n0Z8futzsreYNsvxcxr8dFdoVVD04LJJ0TFqWcxUQTksSJsNhX5ZIrHhUbaZKJ0q7LFXBDtxTa9_fGTAL9UrWToSwtcqnnIfMqDKVY3zC0Rc8padfhk-foRYegouw0LTmkiy37MnpuxVxb_IV0CUbEJb94MDvy2iyRVZ76sjXhsGN1aWIjg91xZIwODQkkFQQA-AtByLUPM-MwT6aQLVIFg662_AqJqKLEFROYM16YQzedzD1gALM0UYOa5e-H7e4P9NtB00xpX3TTzy8KrJbckfQ3rNlE-A8zcLkPh3CLJG8vtuy-XJx9a5bZBxfPTk9PDlVxss3g_YG06qkXPTEcB9RV-pEkmJpEY6WvHq5jRWEEHFZWbHFb1XuGOgbockTEO_tWECx3CssBrOFI8YKi6KXZsY8hczG5jaU3f3by1_DSRnLlXAa5CRXoKOV1Nxhosl_omBgjlTMTRAsumFG0Zo-BXIPEoDZwqJIDgQl-InpNMxX6xAH6kHTLKs-Lqm8IdFuZhWZ_GmbAeraqyeCvFlCUbglbuBzRtJJcZTqY6WMltUKNG9pX6po28-_5FubfQAoLq8HQQlHJuIg2FM9HEaZGM00pa1vS-FsZKptbArY5GcQkNtxnUBwB4LNUtHURZ44-eRjMDsGQpA5EIkSg0XhRMF1LyUcSqyQK2q5Af6_gwdQzrNK8t6UO17ZFLJYZYTeI6b1SAsWYbA5dsDmsheDP3XZ86FiLi2oRbRXjcOoD4lv-q6YO1PkNEI4VIO928FN5VIDZ7SKtkmxaXsoCbich0YF0w0N6m1IsDf_UG4YYif6nWb5N5B8CoIn-OqPLzhlFlXU428sIV6eF2q8nlkxUIHrlkaOpZbHKH2SFhvg8Oze_hn752bQ3PyuqVlv9tLPjbxHerooNN7ctS1FaXtW3HLkvis0SBnzeLAldKni3FPWsI-NxK-0T1QDK51CNG9YhRPeIW9Yhb1eOxImWqXK4vUFRiVfmUYLVS-cLKacYD3J_V1xQaEex2EG8mxm3CWp5Hqktgteq8YdWzuaqd4sZ5RePb7kiEi11bYzcl8iE2lpCtiLonhYgp2dEHEKrplQqBdfNYRJGYQy-8bF1k5TqeRkdrfawqqpoo3cwv1YAELB5gXQ8HdO8nB9V1Q7ChFHx-toD6ccs_czDtDASflmzpmE7pKmZKCVO98LSPTp5kJgBGwiLJ5uoMEMbSZA4pkw4GaayPASFgkKbpKp8WIV3noyEIjjUIVgscprxRTV1J12rpdTlufc7Kq4MJuqS8XAC9_EmTxJx5ko9bsFHgwW-ZiJG4FYmHuQxXFR7cpb-dbFYsTdVnSqrUbZUtFQW7zn_FKk4pwm5gs2R3LKWRPf6Fh8KqsbhJA1p0fjjSsfNK5VOau6sSYmL7e1uoXrXy267_m4GCWryrEuNHgVJNF9ygyACUzB2Gl-Uf1WmVKtfFp_d24PUHA2jTGSxON44EzapyE-ezkT32tGSPSuIYu1Q2tMuQPm9XDY9KX-bYe7YjbIZZJJeoJTN4Av-0AKgB2ylDy6MP7OpED1xaIsC16QgKnE-m8_9m3F2cGjXjZK6UEb_jsyCvcHOqQ368vr4gV-C6ckneIaf7vv-dPg1odySNKC_qQJY6bMoLdvuUvNKrTXQJvKHrHQsp6o9ZSKrlIUIq6aS7RWIiSalJ1sSQ8v4mjAGQwOCpbwnW4HC53mrYspS3PDtyCMBmwRHqgiLCCjtEif2yIZ6SBFOklFRORYriA2PsgWrN5Y523Wciu04pfq-QjiLwbZ8uJDQd3QHRsMFhTOvG2Mzm-LSJw_uOIC0Zk2k-ozF-jzHEFapctdQEVgE1Nl7cI6_7hckdizwOPQUPiod7A2eCJekURcbILO4EqZOeQJc5TfG3ErhRPpngu0q9SwXoa675ruQqLP8BN0l2HlYEvfim6Og2Gw3ZzTgMzoA2LUfVS3MXgpncxe4u42NnwYDm5Oqc7L_1e8SMrVO_7_f9Xf9g1x9c9_YPe4PD1wf_9P1DX38dNAJXGLWAsswPRWQ9pHqq_sPl5fkltvz76PLs5OwjPp6c_XCO_77_cPzloyZUYFPmtUttqitaVVo0pKog-Nsa61MaIaGAlfoDbqUtWQvXUVMrQHatgdUHeh_-C4uVDs_5VQAA"
    }
  ]
}